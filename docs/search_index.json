[["index.html", "Rat DCIS study Preface", " Rat DCIS study Anne Trinh 2021-02-20 Preface This is a summary of the tools and code required in the study: ‘NMU-induced sprague dawley rat model of breast cancer treated with immunotherapy to prevent tumor progression’ by Gil del Alcazar et al. The GEO accession code for RNA-data is GEOXXXXXX Figures generated in the manuscript will be listed in the appendix and it can be cross-referenced to the relevant sections in this document "],["prerequisites.html", "Chapter 1 Prerequisites 1.1 Packages and Software 1.2 External software 1.3 Annotations", " Chapter 1 Prerequisites 1.1 Packages and Software The following packages are required to conduct the analyses described below. In house scripts are deposited in the rscript folder. library(AnnotationHub) library(beeswarm) library(biomaRt) library(Biostrings) library(colorspace) library(DESeq2) library(dplyr) library(DT) library(ensembldb) library(EnsDb.Hsapiens.v86) library(forestplot) library(GenVisR) library(GenomicFeatures) library(ggplot2) library(ggrepel) library(gplots) library(GSEABase) library(GSVA) library(heatmap.plus) library(HTSanalyzeR2) library(kableExtra) library(knitr) library(limma) library(matrixStats) library(pamr) library(reshape2) library(rmarkdown) library(RColorBrewer) library(scales) library(spatstat) library(tcR) library(vcfR) library(xlsx) library(writexl) DiffCols=hue_pal()(8) palette(brewer.pal(9, &quot;Set1&quot;)) RdBu=brewer.pal(11, &quot;RdBu&quot;) SetCols=brewer.pal(12, &quot;Set3&quot;) source(&quot;../rscript/cnFreq_fn.R&quot;) #modified version of GenVisR source(&quot;../rscript/merge_contig.R&quot;) source(&quot;../rscript/gseaCode.R&quot;) source(&quot;../rscript/ContingencyTable.R&quot;) source(&quot;../rscript/PvalueHeatMap.R&quot;) source(&quot;../rscript/BootstrapShannonIdx.R&quot;) source(&quot;../rscript/CreateRnor87db.R&quot;) source(&quot;../rscript/FindRatAAHomolog.R&quot;) source(&quot;../rscript/FindTriNucleotideContext.R&quot;) firstup &lt;- function(x) { substr(x, 1, 1) &lt;- toupper(substr(x, 1, 1)) x } ColMerge=matrix(c(&quot;#FFC82F&quot;, &quot;#FFEDBC&quot;, &quot;#73FDFE&quot;,&quot;#D2FFFF&quot;, &quot;#FF41FF&quot;, &quot;#FECAFF&quot;, &quot;#5D5D5D&quot;, &quot;#BEBEBE&quot;), ncol=2, byrow = T) rownames(ColMerge)=c(&quot;LY&quot;,&quot;PDL1&quot;, &quot;PDL1+LY&quot;,&quot;Vehicle&quot;) ColSize=c(&quot;#008E00&quot;, &quot;#FF9300&quot;) names(ColSize)=c(&quot;small&quot;, &quot;big&quot;) ColSizeb=ColSize[2:1] ColSizec=c(ColSize[2], &quot;purple&quot;, ColSize[1]) hclust.ave &lt;- function(x) hclust(x, method=&quot;average&quot;) Hsedb&lt;-EnsDb.Hsapiens.v86 1.2 External software The following external software was utilised: Software Function bwa Alignment of WGS data to reference GATK4 Mutation calling, done by NYGC. Mutation calling from RNA (Haplotype caller) strelka Mutation calling, done by NYGC BICseq CNV calling GEM3 create mappability files for CNV calling STAR Alignment of RNAseq data RSEM Calculate RSEM, TPM, FPKM from RNAseq data TRUST4 assignment of T and B cell clonotypes from RNA-seq data Oncotator Annotation of genetic variants QuPath Tool for cell segmentation and extraction of features from IF images samtools, bcftools querying and dispalying information from bam files, extracting allelic depth at specific genomic locations CIBERSORT inferring immune composition from RNA lumpy structural variants PAM50 code from parker et al 2009 to infer PAM50 subtypes 1.3 Annotations 1.3.1 Genomic properties Information on chromosome sizes, cytobands and centromere locations were obtained from the UCSC genome browser. The following annotation data for the rn6 genome is required: Data Type Download link ref. genome http://hgdownload.soe.ucsc.edu/goldenPath/rn6/bigZips/rn6.fa.gz refSeq annot http://hgdownload.soe.ucsc.edu/goldenPath/rn6/bigZips/genes/rn6.refGene.gtf.gz gff3 file for TRUST4 (ftp://ftp.ensembl.org/pub/release-100/gff3/rattus_norvegicus/Rattus_norvegicus.Rnor_6.0.100.gff3.gz) rn6cytoBand ucsc server of all cytoband locations biomart conversion between gene symbol, ensbl and entrez was faciliated using biomart package Below is the summary of chromosome sizes and centromere locations: chrInfo=read.delim(&quot;../anntotations/chromInfo_rat.txt&quot;, header=T) cytoInfo=read.delim(&quot;../anntotations/cytoBand_Rat2.txt&quot;, header=F, stringsAsFactors = F) colnames(cytoInfo)=c(&quot;chrom&quot;, &quot;chromStart&quot;, &quot;chromEnd&quot;, &quot;name&quot;, &quot;gieStain&quot;) GRcytoInfo=GRanges(seqnames=cytoInfo$V1, ranges=IRanges(start = cytoInfo$V2, end=cytoInfo$V3), cytoband=cytoInfo$V4) head(GRcytoInfo) ## GRanges object with 0 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## ------- ## seqinfo: no sequences Below is an example of the gene annotation files txRn6=makeTxDbFromGFF(&quot;../anntotations/rn6_refGene.gtf&quot;, format=&quot;gtf&quot;) txRn6=genes(txRn6) txRn6=sort(txRn6) txRn6$gene_width=width(txRn6) save(txRn6, file=&quot;../anntotations/txRn6_refGene.RData&quot;) load(&quot;../anntotations/txRn6_refGene.RData&quot;) head(txRn6) ## GRanges object with 6 ranges and 2 metadata columns: ## seqnames ranges strand | gene_id gene_width ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; &lt;integer&gt; ## Vom2r3 chr1 396700-409676 + | Vom2r3 12977 ## Lrp11 chr1 1702696-1731210 + | Lrp11 28515 ## Nup43 chr1 1771721-1781554 + | Nup43 9834 ## Lats1 chr1 1784078-1817310 + | Lats1 33233 ## Katna1 chr1 1826170-1867786 + | Katna1 41617 ## Ppil4 chr1 1897350-1930311 + | Ppil4 32962 ## ------- ## seqinfo: 22 sequences from an unspecified genome; no seqlengths 1.3.2 Gene name homologs between organisms Biomart was used to convert between rat, mouse and human gene symbols and ensembl ids. Below is an example of the human gene names mapped to the rat homolog ## save here: ## human to rat mapping of genes ## rat ENSEMBL vs symbol conversion library(biomaRt) #library(refGenome) TS=read.delim(&quot;anntotations//hg38_allsymbols.txt&quot;) TS=as.character(TS[ ,1]) human = useMart(&quot;ensembl&quot;, dataset = &quot;hsapiens_gene_ensembl&quot;) mouse = useMart(&quot;ensembl&quot;, dataset = &quot;mmusculus_gene_ensembl&quot;) rat = useMart(&quot;ensembl&quot;, dataset = &quot;rnorvegicus_gene_ensembl&quot;) SymHum2Rat = getLDS(attributes = c(&quot;hgnc_symbol&quot;), filters = &quot;hgnc_symbol&quot;, values = TS , mart = human, attributesL = c(&quot;rgd_symbol&quot;, &quot;ensembl_gene_id&quot;), martL = rat, uniqueRows=T) Rat2Mouse= getLDS(attributes = c(&quot;rgd_symbol&quot;), filters = &quot;rgd_symbol&quot;, values = rownames(allrsemFinal) , mart = rat, attributesL = c(&quot;mgi_symbol&quot;), martL = mouse, uniqueRows=T) Mouse2Hum = getLDS(attributes = c(&quot;mgi_symbol&quot;), filters = &quot;mgi_symbol&quot;, values = rownames(allrsemFinal) , mart = mouse, attributesL = c(&quot;hgnc_symbol&quot;), martL = human, uniqueRows=T) save(SymHum2Rat, Rat2Hum,Mouse2Hum,Rat2Mouse, file=&quot;../anntotations/Rat_biomart_gene_annotations.RData&quot;) load(&quot;../anntotations/Rat_biomart_gene_annotations.RData&quot;) head(SymHum2Rat) ## HGNC.symbol RGD.symbol ## 1 TAB1 Tab1 ## 2 PHF1 Phf1 ## 3 RNF39 Rnf39 ## 4 IGSF10 Igsf10 ## 5 TMEM130 Tmem130 ## 6 EFNB1 Efnb1 1.3.3 Gene signatures and data-bases Gene sets/signatures were obtained from the following sources: Source Description IEDB database of immune epitopes MsigDB c2, c5, hallmark set of curated pathway gene sets Metacore Process Networks and Pathway Maps data bases COSMIC database of concensus oncogenes ImmPort List of immune related genes InnateDB List of genes associated with innate immune system Rosenthal 2019 genes associated with MHC-I presentation Thorsson 2018 Immune gene signatures curated from studies by Wolf, Calabro, Teschendorff, Beck, Chang Pardoll, Wykes Immune checkpoint genes Gil del Alcazar 2017 Supplementary table 5: list of activation, dysfunction gene signatures Bailey 2018 List of 10 most comon tumor pathways Chang 2018 Common mutation locations in cancer # These gene signatures are saved in the annotations folder and loaded below: ######################### ## cell specific markers ####################### GeneList=read.csv(&quot;../anntotations/cell_type_markers.csv&quot;) cn=colnames(GeneList) GeneList=lapply(1:ncol(GeneList), function(x) setdiff(unique(GeneList[ ,x]), &quot;&quot;)) names(GeneList)=cn ## map all the names to rat names GeneListRat=lapply(GeneList, function(x) SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%x]) ###################### ## cancer genes ###################### ## cosmic cancer genes AllCosmic=read.csv(&quot;../anntotations/Census_COSMIC_Feb2020.csv&quot;) RatCosmic=SymHum2Rat$RGD.symbol[match(AllCosmic$Gene.Symbol, SymHum2Rat$HGNC.symbol)] tx=AllCosmic$Gene.Symbol[which(is.na(RatCosmic)|RatCosmic==&quot;&quot;)] tx=tolower(tx) tx=firstup(tx) RatCosmic[which(is.na(RatCosmic)|RatCosmic==&quot;&quot;)]=tx RatBreastCosmic=RatCosmic[grep(&quot;breast&quot;, AllCosmic$Tumour.Types.Somatic.)] ## Bailey List of 10 most common tumor pathways PathwayList=read.csv(&quot;../anntotations/cancer_pathways_annot_Bailey_cell2018_modified.csv&quot;) cn=colnames(PathwayList) PathwayListA=lapply(seq(1, length(cn), by=2), function(x) setdiff(unique(PathwayList[ ,x]), &quot;&quot;)) names(PathwayListA)=cn[seq(1, length(cn), by=2)] PathwaySign=lapply(seq(2, length(cn), by=2), function(x) PathwayList[ which(PathwayList[ ,x]!=&quot;&quot;),x]) names(PathwaySign)=cn[seq(1, length(cn), by=2)] PathwayListRata=lapply(PathwayListA, function(x) SymHum2Rat$RGD.symbol[match(x, SymHum2Rat$HGNC.symbol)]) PathwayListRatb=lapply(PathwayListA, function(x) Rat2Hum$RGD.symbol[match(x, Rat2Hum$HGNC.symbol)]) PathwayListRat=lapply(1:length(PathwayListRata), function(x) ifelse(is.na(PathwayListRata[[x]]), PathwayListRatb[[x]], PathwayListRata[[x]])) names(PathwayListRat)=names(PathwayListA) AllCancerPathwayGenes=na.omit(unlist(PathwayListRat)) ############################ ## List of immunesignatures ############################ ## read in all the files Exp2=read.csv(&quot;../anntotations/Supplementary Table 5.csv&quot;) Exp2List=lapply(1:ncol(Exp2), function(x) setdiff(unique(Exp2[ ,x]), &quot;&quot;)) names(Exp2List)=colnames(Exp2) List2=read.csv(&quot;../anntotations/Thorsson_signatures.csv&quot;) List2b=lapply(1:ncol(List2), function(x) setdiff(unique(List2[ ,x]), &quot;&quot;)) names(List2b)=colnames(List2) Exp2List=c(Exp2List, List2b) ImmSuppAPC=read.delim(&quot;../anntotations/immune_Suppression.csv&quot;, header=T, stringsAsFactors = F, sep=&quot;,&quot;) ImmSuppAPC=lapply(1:ncol(ImmSuppAPC), function(x) setdiff(unique(ImmSuppAPC[ ,x]), &quot;&quot;)) names(ImmSuppAPC)=c(&quot;Inh&quot;, &quot;Act&quot;, &quot;Both&quot;) Exp2List=c(Exp2List, ImmSuppAPC) MHCPres=read.delim(&quot;../anntotations/MHCloss.csv&quot;, header=F, stringsAsFactors = F, sep=&quot;,&quot;) MHCPres=as.character(MHCPres[ ,1]) MHCPres2Rat=unique(SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%MHCPres]) ## change the names to Rat-specific Exp2RatImm=lapply(Exp2List, function(x) unique(SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%x])) ## All immune genes AllImmGenes1=read.csv(&quot;../anntotations/ImmPort_Set.csv&quot;) AllImmGenes2=read.csv(&quot;../anntotations/innatedb_curated_genes.csv&quot;) AllImmGenes=unique(c(as.character(AllImmGenes1$Symbol), as.character(AllImmGenes2$Gene.Symbol[which(AllImmGenes2$Species==9606)]))) RatAllImm=na.omit(unique(c(SymHum2Rat$RGD.symbol[match(AllImmGenes, SymHum2Rat$HGNC.symbol)], as.character(AllImmGenes2$Gene.Symbol[which(AllImmGenes2$Species!=9606)])))) ## CIBERSORT specific rat genes lm22rat=read.delim(&quot;../anntotations/LM22_to_rnorvegicus_1.txt&quot;, sep=&quot;\\t&quot;) 1.3.3.1 Human gene homologs Below, lists of common mutations in cancer are loaded and the “homolog” in rat is determined using an in-house script. The steps involved are: determine the amino acid context in human (find 5 a.a. prior and after) find the region with most amino acid homology in rat (2 or less differences) check whether the amino acid of interest is present in rat An example of the output is shown ###################### ## Annotation for Mutation Locations ###################### BaileyList=read.csv(&quot;../anntotations/list_mutations_bailey.csv&quot;, stringsAsFactors = F) BList=FindRatAAHomolog(BaileyList$Gene, substr(BaileyList$Mutation, 3, 3), substr(BaileyList$Mutation, 4, nchar(as.character(BaileyList$Mutation))-1), substr(BaileyList$Mutation, nchar(as.character(BaileyList$Mutation)), nchar(as.character(BaileyList$Mutation)))) ChangList=read.delim(&quot;../anntotations/hotspots_chang_et_al_2017_cancer_discovery.txt&quot;, sep=&quot;\\t&quot;, stringsAsFactors = F) ChangList=ChangList[which(ChangList$Type==&quot;single residue&quot;), ] ChangList$AA1=substr(ChangList$Residue, 1, 1) ChangList$Loc=substr(ChangList$Residue,2, nchar(ChangList$Residue)) AA2list=sapply(ChangList$Variants, function(x) strsplit(x, &quot;:[0-9]+[\\\\|]*&quot;)) AAun=unlist(AA2list) C2List=tibble(ChangList[ ,c(&quot;Gene&quot;, &quot;AA1&quot;, &quot;Loc&quot;)]) C2List=C2List %&gt;% slice(rep(1:n(), times=sapply(AA2list, length))) C2List$AA2=AAun C2List=C2List[-which(C2List$AA2==&quot;sp&quot;| C2List$AA1==&quot;*&quot;), ] #C2ListB=C2List[-which(is.na(C2List$Loc)), ] ChangList2=FindRatAAHomolog(C2List$Gene, C2List$AA1, C2List$Loc, C2List$AA2) head(ChangList2) ## Gene AAno AA1 Variant RatGene Sequence HumProt RatProt ## 1 NRAS 61 Q R Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 2 NRAS 61 Q K Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 3 NRAS 61 Q L Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 4 NRAS 61 Q H Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 5 NRAS 61 Q P Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 6 NRAS 61 Q * Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## RatAAno RatSequence ## 1 61 LDTAGQEEYSA ## 2 61 LDTAGQEEYSA ## 3 61 LDTAGQEEYSA ## 4 61 LDTAGQEEYSA ## 5 61 LDTAGQEEYSA ## 6 61 LDTAGQEEYSA 1.3.3.2 GSEA compendiums For pathway analysis, the c2 (pathway), Hallmark and c5 (Gene Ontology). In addition, metacore pathways (pathway maps and process networks) were obtained and loaded below. This gives a list of 7 different data-sets to interrogate. Below is example code to load the hallmark and c2 compendiums. PathInc2=getGmt(con=&quot;../anntotations/c2.cp.v7.0.symbols.gmt&quot;, geneIdType=SymbolIdentifier(), collectionType=BroadCollection(category=&quot;c2&quot;)) c2entrez=mapIdentifiers(PathInc2, EntrezIdentifier(&#39;org.Hs.eg.db&#39;)) c2ListHs=geneIds(c2entrez) PathInH=getGmt(con=&quot;../anntotations/h.all.v7.1.symbols.gmt&quot;, geneIdType=SymbolIdentifier(), collectionType=BroadCollection(category=&quot;h&quot;)) cHentrez=mapIdentifiers(PathInH, EntrezIdentifier(&#39;org.Hs.eg.db&#39;)) cHListHs=geneIds(cHentrez) ##################################################### # also load in the process networks and pathway maps ################# load(&quot;../anntotations/ListofGeneSets2.RData&quot;) "],["cohort-characteristics.html", "Chapter 2 Cohort characteristics 2.1 Size information 2.2 Calculating growth rates 2.3 FACS data (DN/CD45/EpCAM) 2.4 FACS data", " Chapter 2 Cohort characteristics Below we assess summary statistics on clinico-pathological features of this data set. This includes information on: treatment tumor size growth rates (mm/week) number of tumors per rat Cdata=xlsx::read.xlsx(&quot;../metadata/Extended Data Table1.xlsx&quot;, sheetIndex=1) scroll_box(kable(Cdata[ ,1:20], format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) NewID TumorID Rat_ID Location Cohort Char.Cohort.Batch Treatment Age.at.injection.days. Date.of.NMU.injection Date.when.tumor.was.first.palpated Date.Sacrificed Tumor.growth.status Time.NMU2Tumor.days Time.Tumor2Sac.days Time.NMU2Sac.days Tumor.diameter.sac.mm Tumor.Growth Tumor.Histology CD45.Frac.FACS DN.Frac.FACS P24T1 10L_B 10L B Progression NA PDL1 32-36 2018-02-14 2018-03-29 2018-05-04 growing 43 36 79 35.0 growing well differentiated mammary solid adenocarcinoma 15.2 75.7 P24T2 10L_C 10L C Progression NA PDL1 32-36 2018-02-14 2018-04-12 2018-05-04 growing 57 22 79 25.0 growing well differentiated mammary solid adenocarcinoma 51.4 35.6 P24T3 10L_D 10L D Progression NA PDL1 32-36 2018-02-14 2018-03-29 2018-05-04 stable 43 36 79 10.0 stable well differentiated mammary solid adenocarcinoma 49.8 39 P25T1 10N_A 10N A Progression NA PDL1 32-36 2018-02-14 2018-11-08 2018-11-15 no data (big) 267 7 274 12.0 NA well differentiated mammary solid adenocarcinoma NA NA P25T2 10N_D 10N D Progression NA PDL1 32-36 2018-02-14 2018-04-05 2018-11-15 stable 50 224 274 15.0 stable mucinous carcinoma NA NA P25T3 10N3 NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA P26T1 10R_BL 10R BL Progression NA PDL1 32-36 2018-02-14 2018-04-02 2018-05-23 growing 47 51 98 40.0 growing well differentiated mammary solid adenocarcinoma 14.5 19.4 P26T2 10R_BU 10R BU Progression NA PDL1 32-36 2018-02-14 2018-04-02 2018-05-23 no data 47 51 98 12.0 NA well differentiated mammary solid adenocarcinoma 31.7 40.2 P26T3 10R_C 10R C Progression NA PDL1 32-36 2018-02-14 2018-05-23 2018-05-23 no data (tiny) 98 0 98 4.0 NA well differentiated mammary solid adenocarcinoma NA NA P27T1 11L_B 11L B Progression NA PDL1 32-36 2018-02-14 2018-04-19 2018-06-06 growing 64 48 112 25.0 growing well differentiated mammary solid adenocarcinoma 37.3 46.9 P28T1 11N_D 11N D Progression NA PDL1 32-36 2018-02-14 2018-05-03 2018-06-21 stable 78 49 127 3.0 stable well differentiated mammary solid adenocarcinoma 70.3 13.2 P29T1 11R_C 11R C Progression NA PDL1 32-36 2018-02-14 2018-04-26 2018-06-06 growing 71 41 112 19.0 growing well differentiated mammary solid adenocarcinoma 23.8 32.5 P29T2 11R_D 11R D Progression NA PDL1 32-36 2018-02-14 2018-04-26 2018-06-06 growing 71 41 112 25.0 growing well differentiated mammary solid adenocarcinoma NA NA P30T1 12L_C 12L C Progression NA PDL1 32-36 2018-02-14 2018-05-14 2018-06-21 no data (tiny) 89 38 127 4.0 NA well differentiated mammary solid adenocarcinoma NA NA P30T2 12L_D 12L D Progression NA PDL1 32-36 2018-02-14 2018-05-14 2018-06-21 stable 89 38 127 6.0 stable well differentiated mammary solid adenocarcinoma 11.2 52 NA 12R NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 12R3 NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 12N NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 13L NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 13R NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA P30T1 13N_A 13N A Progression NA Vehicle 32-36 2018-02-14 2018-06-22 2018-07-27 growing 128 35 163 35.0 growing well differentiated mammary solid adenocarcinoma 18.4 36.3 P30T1 14L_A 14L A Progression NA PDL1+LY 32-36 2018-02-14 2018-03-29 2018-10-10 stable 43 195 238 1.0 stable well differentiated mammary solid adenocarcinoma NA NA P30T2 14L_B 14L B Progression NA PDL1+LY 32-36 2018-02-14 2018-07-26 2018-10-10 growing 162 76 238 40.0 stable well differentiated mammary solid adenocarcinoma 12.1 32.6 P30T3 14L_C 14L C Progression NA PDL1+LY 32-36 2018-02-14 2018-07-12 2018-10-10 stable 148 90 238 2.0 stable well differentiated mammary solid adenocarcinoma NA NA P30T4 14L_D 14L D Progression NA PDL1+LY 32-36 2018-02-14 2018-08-16 2018-10-10 growing 183 55 238 40.0 growing fibroadenoma 9.74 52.8 P31T1 14N_B 14N B Progression NA PDL1+LY 32-36 2018-02-14 2018-05-03 2018-05-04 growing 78 1 79 23.0 growing well differentiated mammary solid adenocarcinoma 19.6 19.9 P31T2 14N_C 14N C Progression NA PDL1+LY 32-36 2018-02-14 2018-04-05 2018-05-04 stable 50 29 79 6.0 stable well differentiated mammary solid adenocarcinoma 36.9 50.1 P31T3 14N_D 14N D Progression NA PDL1+LY 32-36 2018-02-14 2018-04-19 2018-05-04 stable 64 15 79 5.0 stable well differentiated mammary solid adenocarcinoma 25.3 49 P32T1 14R_B 14R B Progression NA PDL1+LY 32-36 2018-02-14 2018-05-07 2018-05-23 growing 82 16 98 35.0 growing well differentiated mammary solid adenocarcinoma 6.16 38.8 P32T1 14R_D 14R D Progression NA PDL1+LY 32-36 2018-02-14 2018-04-02 2018-05-23 stable 47 51 98 1.0 stable well differentiated mammary solid adenocarcinoma NA NA P33T1 15L_B 15L B Progression NA PDL1+LY 32-36 2018-02-14 2018-04-19 2018-05-04 growing 64 15 79 10.0 growing well differentiated mammary solid adenocarcinoma 45.5 32.7 P34T1 15N_C 15N C Progression NA PDL1+LY 32-36 2018-02-14 2018-05-24 2018-06-06 growing 99 13 112 30.0 growing well differentiated mammary solid adenocarcinoma 14.8 39.9 P34T2 15N_C-D 15N C-D Progression NA PDL1+LY 32-36 2018-02-14 2018-05-17 2018-06-06 growing 92 20 112 22.0 growing fibroadenoma 7.25 65.1 P34T3 15N_D 15N D Progression NA PDL1+LY 32-36 2018-02-14 2018-05-03 2018-06-06 stable 78 34 112 3.0 stable well differentiated mammary solid adenocarcinoma NA NA P35T1 15R_D 15R D Progression NA PDL1+LY 32-36 2018-02-14 2018-05-03 2018-06-06 growing 78 34 112 17.0 growing well differentiated mammary solid adenocarcinoma 27.4 42 P36T1 16L_A 16L A Progression NA PDL1+LY 32-36 2018-02-14 2018-07-24 2018-07-27 no data 160 3 163 5.0 NA well differentiated mammary solid adenocarcinoma NA NA P36T2 16L_C 16L C Progression NA PDL1+LY 32-36 2018-02-14 2018-06-26 2018-07-27 stable 132 31 163 7.0 stable well differentiated mammary solid adenocarcinoma 61.7 23.1 P36T3 16L_D 16L D Progression NA PDL1+LY 32-36 2018-02-14 2018-05-15 2018-07-27 stable 90 73 163 24.0 stable well differentiated mammary solid adenocarcinoma 40.5 27.1 P37T1 16N_D 16N D Progression NA PDL1 32-36 2018-02-14 2018-06-21 2018-10-04 stable 127 105 232 25.0 stable well differentiated mammary solid adenocarcinoma NA NA P38T1 16R_C 16R C Progression NA PDL1 32-36 2018-02-14 2018-06-21 2018-08-16 growing 127 56 183 25.0 growing well differentiated mammary solid adenocarcinoma 9.83 47.7 P38T2 16R_D 16R D Progression NA PDL1 32-36 2018-02-14 2018-06-21 2018-08-16 stable 127 56 183 3.0 stable well differentiated mammary solid adenocarcinoma NA NA P39T1 17N_A 17N A Progression NA Vehicle 32-36 2018-02-14 2018-07-05 2018-08-02 growing 141 28 169 28.0 growing mucinous carcinoma 20.4 29.3 P39T2 17N_B 17N B Progression NA Vehicle 32-36 2018-02-14 2018-05-31 2018-08-02 stable 106 63 169 4.0 NA well differentiated mammary solid adenocarcinoma NA NA P39T3 17N_D 17N D Progression NA Vehicle 32-36 2018-02-14 2018-08-02 2018-08-02 stable 169 0 169 4.0 stable well differentiated mammary solid adenocarcinoma 6.88 46.3 P40T1 17R_B 17R B Progression NA Vehicle 32-36 2018-02-14 2018-05-31 2018-06-21 growing 106 21 127 35.0 growing well differentiated mammary solid adenocarcinoma 4.35 18.4 NA 18LN2 NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 18R4 NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA P1T1 1L_A 1L A Progression NA PDL1+LY 32-36 2018-02-14 2018-08-02 2018-11-29 stable 169 119 288 17.0 stable well differentiated mammary solid adenocarcinoma NA NA P2T1 1N_A 1N A Progression NA PDL1+LY 32-36 2018-02-14 2018-09-20 2018-10-25 stable 218 35 253 10.0 stable well differentiated mammary solid adenocarcinoma NA NA P2T2 1N_D 1N D Progression NA PDL1+LY 32-36 2018-02-14 2018-08-02 2018-10-25 growing 169 84 253 29.0 stable well differentiated mammary solid adenocarcinoma NA NA P3T2 1R_B 1R B Progression NA PDL1+LY 32-36 2018-02-14 2018-08-02 2018-10-13 stable 169 72 241 15.0 stable well differentiated mammary solid adenocarcinoma NA NA P4T1 2N_ 2N D Progression NA Vehicle 32-36 2018-02-14 2018-04-02 2018-05-02 growing 47 30 77 47.0 growing well differentiated mammary solid adenocarcinoma 21.8 61.6 P5T1 2R_A 2R A Progression NA Vehicle 32-36 2018-02-14 2018-03-29 2018-05-09 growing 43 41 84 20.0 growing well differentiated mammary solid adenocarcinoma 70.7 21.9 P5T2 2R_C 2R C Progression NA Vehicle 32-36 2018-02-14 2018-03-29 2018-05-09 growing 43 41 84 15.0 growing well differentiated mammary solid adenocarcinoma 73.5 19.2 P5T3 2R_D 2R D Progression NA Vehicle 32-36 2018-02-14 2018-03-29 2018-05-09 growing 43 41 84 20.0 growing well differentiated mammary solid adenocarcinoma NA NA P6T1 3L_A 3L A Progression NA Vehicle 32-36 2018-02-14 2018-05-03 2018-05-09 growing 78 6 84 12.0 growing well differentiated mammary solid adenocarcinoma 12.5 80.9 P6T2 3L_D 3L D Progression NA Vehicle 32-36 2018-02-14 2018-04-05 2018-05-09 growing 50 34 84 30.0 growing fibroadenoma 26.2 69.6 P7T1 3N_B 3N B Progression NA Vehicle 32-36 2018-02-14 2018-05-03 2018-06-21 stable 78 49 127 6.0 stable well differentiated mammary solid adenocarcinoma 24.4 44.5 P7T2 3N_D 3N D Progression NA Vehicle 32-36 2018-02-14 2018-05-03 2018-06-21 stable 78 49 127 3.0 stable well differentiated mammary solid adenocarcinoma NA NA P8T1 3R_B 3R B Progression NA Vehicle 32-36 2018-02-14 2018-04-02 2018-05-09 growing 47 37 84 35.0 growing well differentiated mammary solid adenocarcinoma 29.7 65.2 P8T2 3R_C 3R C Progression NA Vehicle 32-36 2018-02-14 2018-04-02 2018-05-09 growing 47 37 84 32.0 growing well differentiated mammary solid adenocarcinoma 39.4 40.2 NA 4L2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA P9T1 4L_B 4L B Progression NA Vehicle 32-36 2018-02-14 2018-04-09 2018-05-21 growing 54 42 96 35.0 growing well differentiated mammary solid adenocarcinoma 1.64 11.5 P10T1 4N_C 4N C Progression NA Vehicle 32-36 2018-02-14 2018-04-09 2018-05-21 growing 54 42 96 15.0 growing well differentiated mammary solid adenocarcinoma 4.86 41.3 P10T2 4N_D 4N D Progression NA Vehicle 32-36 2018-02-14 2018-04-09 2018-05-21 growing 54 42 96 20.0 growing well differentiated mammary solid adenocarcinoma NA NA P11T1 4R_B 4R B Progression NA Vehicle 32-36 2018-02-14 2018-04-09 2018-05-21 growing 54 42 96 40.0 growing well differentiated mammary solid adenocarcinoma NA NA P11T2 4R_C 4R C Progression NA Vehicle 32-36 2018-02-14 2018-04-09 2018-05-21 growing 54 42 96 15.0 growing well differentiated mammary solid adenocarcinoma NA NA P12T1 5L_A 5L A Progression NA Vehicle 32-36 2018-02-14 2018-10-03 2018-10-24 no data 231 21 252 6.0 stable well differentiated mammary solid adenocarcinoma NA NA P12T2 5L_B 5L B Progression NA Vehicle 32-36 2018-02-14 2018-10-17 2018-10-24 no data 245 7 252 4.0 growing well differentiated mammary solid adenocarcinoma NA NA P12T3 5L_C 5L C Progression NA Vehicle 32-36 2018-02-14 2018-10-03 2018-10-24 growing 231 21 252 22.0 growing well differentiated mammary solid adenocarcinoma NA NA P12T4 5L_D 5L D Progression NA Vehicle 32-36 2018-02-14 2018-06-06 2018-10-24 stable 112 140 252 15.0 stable well differentiated mammary solid adenocarcinoma NA NA P13T1 5N_A 5N A Progression NA Vehicle 32-36 2018-02-14 2018-06-07 2018-06-29 growing 113 22 135 26.0 growing mucinous carcinoma 31 24.1 P14T1 5R_B 5R B Progression NA Vehicle 32-36 2018-02-14 2018-06-07 2018-06-29 growing 113 22 135 35.0 growing well differentiated mammary solid adenocarcinoma 8.93 20.2 P15T1 6L_DL 6L DL Progression NA LY 32-36 2018-02-14 2018-03-29 2018-06-29 stable 43 92 135 0.0 stable NA NA NA P15T2 6L_DU 6L DU Progression NA LY 32-36 2018-02-14 2018-03-29 2018-06-29 growing 43 92 135 32.0 growing well differentiated mammary solid adenocarcinoma 12.3 34.1 P16T1 6N_D 6N D Progression NA LY 32-36 2018-02-14 2018-04-02 2018-04-10 growing 47 8 55 40.0 growing well differentiated mammary solid adenocarcinoma 6.85 41 P17T1 6R_B 6R B Progression NA LY 32-36 2018-02-14 2018-03-29 2018-05-04 stable 43 36 79 18.0 growing well differentiated mammary solid adenocarcinoma 61.1 31.1 P17T2 6R_C 6R C Progression NA LY 32-36 2018-02-14 2018-04-19 2018-05-04 growing 64 15 79 40.0 growing well differentiated mammary solid adenocarcinoma 27.2 63.7 P17T3 6R_D 6R D Progression NA LY 32-36 2018-02-14 2018-04-20 2018-05-04 stable 65 14 79 6.0 stable well differentiated mammary solid adenocarcinoma 80.8 11.1 P18T1 7L_C 7L C Progression NA LY 32-36 2018-02-14 2018-06-14 2018-10-10 growing 120 118 238 40.0 growing fibroadenoma 4.66 72.3 P18T2 7L_D 7L D Progression NA LY 32-36 2018-02-14 2018-04-05 2018-10-10 stable 50 188 238 1.0 stable well differentiated mammary solid adenocarcinoma NA NA P19T1 7N_A 7N A Progression NA LY 32-36 2018-02-14 2018-06-14 2018-07-27 stable 120 43 163 30.0 growing well differentiated mammary solid adenocarcinoma 23.7 33.2 P19T2 7N_B 7N B Progression NA LY 32-36 2018-02-14 2018-06-14 2018-07-27 growing 120 43 163 31.0 growing well differentiated mammary solid adenocarcinoma 30.4 49.4 P19T3 7N_C 7N C Progression NA LY 32-36 2018-02-14 2018-06-14 2018-07-27 growing 120 43 163 40.0 growing well differentiated mammary solid adenocarcinoma 13.2 40 P19T4 7N_D 7N D Progression NA LY 32-36 2018-02-14 2018-05-03 2018-07-27 stable 78 85 163 0.0 stable well differentiated mammary solid adenocarcinoma NA NA P20T1 7R_A 7R A Progression NA LY 32-36 2018-02-14 2018-09-06 2018-10-04 stable 204 28 232 8.0 stable well differentiated mammary solid adenocarcinoma NA NA P20T2 7R_B 7R B Progression NA LY 32-36 2018-02-14 2018-09-06 2018-10-04 growing 204 28 232 20.0 growing well differentiated mammary solid adenocarcinoma NA NA P20T3 7R_D 7R D Progression NA LY 32-36 2018-02-14 2018-04-26 2018-10-04 stable 71 161 232 20.0 stable well differentiated mammary solid adenocarcinoma NA NA P21T1 8L_D 8L D Progression NA LY 32-36 2018-02-14 2018-05-03 2018-06-21 stable 78 49 127 6.0 stable well differentiated mammary solid adenocarcinoma 34.6 43.4 P22T1 8R_CL 8R CL Progression NA LY 32-36 2018-02-14 2018-06-20 2018-06-21 growing 126 1 127 12.0 growing well differentiated mammary solid adenocarcinoma 31.8 32.3 P22T2 8R_CU 8R CU Progression NA LY 32-36 2018-02-14 2018-05-14 2018-06-21 growing 89 38 127 27.0 growing well differentiated mammary solid adenocarcinoma 9.79 29.7 NA 9N NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA NA 9R NA NA NA NA NA NA NA NA NA no data NA NA NA NA NA NA NA NA P23T1 9L_A 9L A Progression NA PDL1+LY 32-36 2018-02-14 2018-08-29 2018-10-10 growing 196 42 238 45.0 growing well differentiated mammary solid adenocarcinoma 13 21 P23T2 9L_B 9L B Progression NA PDL1+LY 32-36 2018-02-14 2018-08-15 2018-10-10 growing 182 56 238 35.0 growing well differentiated mammary solid adenocarcinoma 15.8 15.7 C1T1 C1R_ C1R NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-07-24 2017-08-21 no data NA NA 87 6.0 NA well differentiated mammary solid adenocarcinoma NA NA C1T2 C1N1 C1N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 35.0 NA NA NA NA C1T3 C1N2 C1N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 5.0 NA NA NA NA C2T1 C2N_ C2N NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA 87 19.0 NA well differentiated mammary solid adenocarcinoma NA NA C2T2 C2N2_ C2N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 8.0 NA NA NA NA C3T1 C2R_ C2R NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-08-02 2017-08-21 no data NA NA 87 21.0 NA well differentiated mammary solid adenocarcinoma NA NA C3T2 C2R2_ C2R NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-08-15 2017-08-21 no data NA NA 87 10.0 NA well differentiated mammary solid adenocarcinoma NA NA C3T3 C2R3_ C2R NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-08-15 2017-08-21 no data NA NA 87 3.0 NA well differentiated mammary solid adenocarcinoma NA NA C3T4 C2R4_ C2R NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 3.0 NA NA NA NA C34T1 C3N_ C3N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 5.0 NA NA NA NA C34T2 C3N2_ C3N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 2.0 NA NA NA NA C34T3 C3N3_ C3N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 6.0 NA NA NA NA C32T1 C4N1_ C4N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 3.0 NA NA NA NA C32T2 C4N2_ C4N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 3.0 NA NA NA NA C4T1 C4P_ C4P NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-07-07 2017-08-21 no data NA NA 87 25.0 NA well differentiated mammary solid adenocarcinoma NA NA C4T2 C4P2 C4P NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 1.0 NA NA NA NA C4T3 C4P3 C4P NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 2.0 NA NA NA NA C4T4 C4P4 C4P NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 2.0 NA NA NA NA C4T5 C4P5 C4P NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 2.0 NA NA NA NA C33T1 C5N1 C5N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 7.0 NA NA NA NA C33T2 C5N2 C5N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 6.0 NA NA NA NA C5T1 C5R_ C5R NA Characterisation latency-4 Vehicle 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA 87 9.0 NA well differentiated mammary solid adenocarcinoma NA NA NA Control1_ Control1 NA NA NA Untreated 49 2016-10-11 NA 2017-01-07 no data NA NA 88 NA NA well differentiated mammary solid adenocarcinoma NA NA NA Control2_ Control2 NA NA NA Untreated 49 2016-10-11 NA 2017-01-10 no data NA NA 91 NA NA well differentiated mammary solid adenocarcinoma NA NA NA Control3_ Control3 NA NA NA Untreated 35 2017-01-06 NA NA no data NA NA NA NA NA well differentiated mammary solid adenocarcinoma NA NA NA Control4_ Control4 NA NA NA Untreated 35 2017-01-06 NA NA no data NA NA NA NA NA well differentiated mammary solid adenocarcinoma NA NA C6T1 NMU1_LL NMU1 LL Characterisation cohort-2 Vehicle 49 2016-10-11 NA 2017-01-07 no data NA NA 88 10.0 NA well differentiated mammary solid adenocarcinoma NA NA C7T1 NMU10_LL NMU10 LL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-08 no data NA NA 61 4.0 NA well differentiated mammary solid adenocarcinoma NA NA C8T1 NMU11_LA NMU11 LA Characterisation cohort-2 Vehicle 49 2016-10-11 NA 2017-04-26 no data NA NA 197 10.0 NA well differentiated mammary solid adenocarcinoma NA NA C9T1 NMU12_LA NMU12 LA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-04-26 no data NA NA 110 12.0 NA well differentiated mammary solid adenocarcinoma NA NA C9T2 NMU12_RL NMU12 RL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-08 no data NA NA 61 6.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T1 NMU13_LAL NMU13 LAL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 8.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T2 NMU13_LAU NMU13 LAU Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 14.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T3 NMU13_LLL NMU13 LLL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 5.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T4 NMU13_LLU NMU13 LLU Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 4.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T5 NMU13_RAL NMU13 RAL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 20.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T6 NMU13_RAU NMU13 RAU Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 8.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T7 NMU13_RLL NMU13 RLL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 7.0 NA well differentiated mammary solid adenocarcinoma NA NA C10T8 NMU13_RLU NMU13 RLU Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 20.0 NA well differentiated mammary solid adenocarcinoma NA NA C11T1 NMU14_ NMU14 NA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-06-15 no data NA NA 160 6.0 NA well differentiated mammary solid adenocarcinoma NA NA C12T1 NMU2_RL NMU2 RL Characterisation cohort-2 Vehicle 49 2016-10-11 NA 2017-01-07 no data NA NA 88 10.0 NA well differentiated mammary solid adenocarcinoma NA NA C13T1 NMU3_LA NMU3 LA Characterisation cohort-2 Vehicle 49 2016-10-11 NA 2017-01-10 no data NA NA 91 10.0 NA well differentiated mammary solid adenocarcinoma NA NA C14T1 NMU4_RA NMU4 RA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-01 no data NA NA 54 4.0 NA well differentiated mammary solid adenocarcinoma NA NA C14T2 NMU4_RL NMU4 RL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-01 no data NA NA 54 1.5 NA well differentiated mammary solid adenocarcinoma NA NA C15T1 NMU5_LA NMU5 LA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-01 no data NA NA 54 3.0 NA well differentiated mammary solid adenocarcinoma NA NA C15T2 NMU5_LL NMU5 LL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-01 no data NA NA 54 4.0 NA well differentiated mammary solid adenocarcinoma NA NA C16T1 NMU6_LA NMU6 LA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 1.0 NA well differentiated mammary solid adenocarcinoma NA NA C16T2 NMU6_RL NMU6 RL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 6.0 NA well differentiated mammary solid adenocarcinoma NA NA C17T1 NMU7_LA NMU7 LA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 2.0 NA well differentiated mammary solid adenocarcinoma NA NA C17T2 NMU7_LL NMU7 LL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 1.0 NA well differentiated mammary solid adenocarcinoma NA NA C17T3 NMU7_RL lower x2 NMU7 RL lower x2 Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 2.0 NA well differentiated mammary solid adenocarcinoma NA NA C17T4 NMU7_RLU NMU7 RLU Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-02 no data NA NA 55 4.0 NA well differentiated mammary solid adenocarcinoma NA NA C18T1 NMU8_RA NMU8 RA Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-06 no data NA NA 59 1.0 NA well differentiated mammary solid adenocarcinoma NA NA C18T2 NMU8_RL NMU8 RL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-06 no data NA NA 59 5.0 NA well differentiated mammary solid adenocarcinoma NA NA C19T1 NMU9_LL NMU9 LL Characterisation penetrance-3 Vehicle 35 2017-01-06 NA 2017-03-06 no data NA NA 59 5.0 NA well differentiated mammary solid adenocarcinoma NA NA NA 1LB2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 1LD2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 10N_3 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 12N NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 12R NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 13L NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 13R NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA C20T1 D11N_ D11N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-15 2017-08-21 no data NA NA NA 16.0 NA NA NA NA C36T1 D14N1 D14N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 9.0 NA NA NA NA C36T2 D14N2 D14N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 1.0 NA NA NA NA C21T1 D14R_ D14R NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-02 2017-08-21 no data NA NA NA 13.0 NA NA NA NA C35T1 D15R_ D15R NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 10.0 NA NA NA NA C22T1 D16N_ D16N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 9.0 NA NA NA NA C22T2 D16N2_ D16N2 NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 10.0 NA NA NA NA C22T3 D16N3_ D16N3 NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 17.0 NA NA NA NA C23T1 D16P_ D16P NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 10.0 NA NA NA NA C23T2 D16R2_ D16P NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 9.0 NA NA NA NA C24T1 D17N_ D17N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 30.0 NA NA NA NA C25T1 D18N_ D18N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 30.0 NA NA NA NA C25T2 D18R_ D18R NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 25.0 NA NA NA NA C26T1 D2N_ D2N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 10.0 NA NA NA NA C27T1 D3N_ D3N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 10.0 NA NA NA NA C28T1 D3R_ D3R NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 20.0 NA NA NA NA C28T2 D3R2_ D3R NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 3.0 NA NA NA NA C29T1 D4R_ D4R NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 40.0 NA NA NA NA C29T2 D6N_ D6N NA Characterisation latency-4 NA NA NA NA NA NA NA NA NA 12.0 NA NA NA NA C30T1 D9N_ D9N NA Characterisation latency-4 NA 32-36 2017-05-26 2017-07-24 2017-08-21 no data NA NA NA 30.0 NA NA NA NA C30T2 D9N1_ D9N1 NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 20.0 NA NA NA NA C30T3 D9N2_ D9N2 NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-21 2017-08-21 no data NA NA NA 20.0 NA NA NA NA C31T1 D9R_ D9R NA Characterisation latency-4 NA 32-36 2017-05-26 2017-08-09 2017-08-21 no data NA NA NA 17.0 NA NA NA NA 2.1 Size information We have two cohorts, the characterisation and progression cohorts. Below is a plot of the size distribution in these two cohorts: par(mfrow=c(1,2)) X1a=median(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)], na.rm = T) hist(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort!=&quot;Characterisation&quot;)], breaks=15, main=sprintf(&quot;characterisation sizes Median %s&quot;, X1a), xlab=&quot;size at sac&quot;) X2a=median(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Progression&quot;)], na.rm=T) hist(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Progression&quot;)], breaks=15, main=sprintf(&quot;progression sizes Median %s&quot;, X2a), xlab=&quot;size at sac&quot;) Note that in the characterisation cohort, samples are selected for SAC at different time points: #pdf(&quot;~/Desktop/S1B_size_oveR_time.pdf&quot;, width=6, height=5) am1=lm(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)]~ Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)]) plot(jitter(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)]), jitter(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)]), xlab=&quot;Time from NMU to sac (days)&quot;, ylab=&quot;Tumor diameter (mm)&quot;, col=factor(Cdata$Char.Cohort.Batch[which(Cdata$Cohort==&quot;Characterisation&quot;)]), pch=19, main=&quot;characterisation: size over time&quot;) text(jitter(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)])+5, jitter(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)])+1, Cdata$NewID[which(Cdata$Cohort==&quot;Characterisation&quot;)], cex=0.7) abline(am1) legend(&quot;topright&quot;, levels(factor(Cdata$Char.Cohort.Batch)), col=c(1:3), lwd=2) Figure 2.1: growth of tumors over time #dev.off() write.csv(cbind(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)], Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)], Cdata$Char.Cohort.Batch[which(Cdata$Cohort==&quot;Characterisation&quot;)]), file=&quot;nature-tables/Ext1c.csv&quot;) Plot of number of tumors per rat Nx1=table(Cdata$Rat_ID[which(Cdata$Cohort==&quot;Characterisation&quot;)]) X2=Cdata$Char.Cohort.Batch[match(names(Nx1), Cdata$Rat_ID)] t2temp=data.frame(count=as.numeric(Nx1), cohort=X2) #pdf(&quot;figure-outputs/Figure-1b-again.pdf&quot;, height=5, width=5) beeswarm(jitter(as.vector(Nx1))~X2, col=c(1:3)) Figure 2.2: Number of tumors per rat in each cohort #dev.off() write.csv(t2temp, file=&quot;nature-tables/Ext1a-b.csv&quot;) 2.2 Calculating growth rates In this section, we estimate the growth rates of the samples: Below is a plot of the tumor size per week for each recorded tumor, color-coded according to treatment. Time is measured at the first time point at which a tumor is palpated. Spontaneous large tumors are assumed to have a tumor size of 0 or 1 one week prior to palpating. GrowthRaw=read.csv(&quot;../metadata/growth_rates_0915.csv&quot;) colnames(GrowthRaw)[-1]=substr(colnames(GrowthRaw)[-1], 2, 10) colnames(GrowthRaw)=gsub(&quot;\\\\.&quot;, &quot;-&quot;, colnames(GrowthRaw)) CTreat=Cdata$Treatment[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] CTreat=ColMerge[match(CTreat, rownames(ColMerge)) ,1] Cgrowth=Cdata$Tumor.growth.status[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #pdf(sprintf(&quot;rslt/Clinicopath/summary_growth_plots_%s.pdf&quot;, Sys.Date()), width=8, height=8) par(xpd=T) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=&quot;Tumor size over time&quot;) for (i in 2:ncol(GrowthRaw)){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=CTreat[i]) } legend(&quot;bottom&quot;, inset = c(-0.2, -0.2), rownames(ColMerge), col=ColMerge[ ,1], lwd=2, horiz = T) ax1=colnames(GrowthRaw)[-1][which(CTreat[-1]==&quot;Unknown&quot;)] bx1=Cdata$TumorID[!gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)%in%colnames(GrowthRaw)] bx1=bx1[which(bx1%in%Cdata$TumorID[Cdata$Tumor.growth.status%in%c(&quot;stable&quot;, &quot;growing&quot;)])] We can also separate the above plot into separate treatments: #Plot the above into quadrants based on different treatments: par(mfrow=c(2,2)) xn=levels(factor(names(CTreat))) x2=CTreat[xn] for (j in 1:4){ indx=which(CTreat==x2[j]) indx=setdiff(indx, 1) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=xn[j]) for (i in indx){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=CTreat[i]) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], i], colnames(GrowthRaw)[i], cex=0.6) } } #dev.off() colnames(GrowthRaw)=Cdata$NewID[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] TreatType=Cdata$Treatment[match(colnames(GrowthRaw),Cdata$NewID)] GrowthRaw2=rbind(TreatType, GrowthRaw) colnames(GrowthRaw2)[1]=&quot;Time(weeks)&quot; write.csv( GrowthRaw2, file=&quot;nature-tables/3b.csv&quot;) Notably, there are a few samples which grow but then regress. These are plotted below UturnSamp=c(&quot;6RB&quot;,&quot;11ND&quot;, &quot;8LD&quot;, &quot;10LD&quot;, &quot;3NB&quot; ) tmp=Cdata$NewID[match(UturnSamp, gsub(&quot;_&quot;,&quot;&quot;, Cdata$TumorID))] mx=match(tmp, colnames(GrowthRaw)) #pdf(&quot;~/Desktop/S5-inflammatory-samples-growth.pdf&quot;, height=5, width = 5) plot(NA, xlim=c(0, 10), ylim=c(0, 30), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=&quot;Inflammatory samples&quot;) for (i in 1:length(mx)){ x1=which(!is.na(GrowthRaw[, mx[i]])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, mx[i]], col=CTreat[mx[i]]) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], mx[i]], colnames(GrowthRaw)[mx[i]], cex=0.6) } Figure 2.3: inflammatory growth profiles GrowthRaw3=GrowthRaw2[ ,c(1, mx)] write.csv(GrowthRaw3, file=&quot;nature-tables/Ext5a.csv&quot;) These tumors doesn’t have growth rate data: 17N_B. We can then compute the growth rate for the above samples by considering the change in size over a given period of time using a linear regression model. Below is the histogram of growth rates, and we see a separation at approximately 2mm/week: GR=sapply(2:ncol(GrowthRaw), function(x) lm(GrowthRaw[, x]~GrowthRaw[, 1])$coefficients[2]) names(GR)=colnames(GrowthRaw)[-1] d1=data.frame(growthrate=GR, treatment=names(CTreat[-1]), growth=Cgrowth[-1], color=CTreat[-1], sample=names(GR)) d1$treatment=factor(d1$treatment, levels=c( &quot;PDL1+LY&quot;, &quot;PDL1&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) Nweeks=sapply(2:ncol(GrowthRaw), function(x) max(which(!is.na(GrowthRaw[ , x])))) names(Nweeks)=names(GR) d1$Nweeks=Nweeks[match(d1$sample, names(Nweeks))] d1$Time.Tum2Sac=Cdata$Time.Tumor2Sac[match(d1$sample, Cdata$NewID)] d1$Time.NMU2Sac=Cdata$Time.NMU2Sac[match(d1$sample, Cdata$NewID)] d1$tum.size=Cdata$Tumor.diameter.sac.mm[match(d1$sample, Cdata$NewID)] d1$growthrate_cutoff2=ifelse(d1$growthrate&gt;=2, &quot;growing&quot;, &quot;stable&quot;) #pdf(sprintf(&quot;rslt/Clinicopath/summary_growth_rates_%s.pdf&quot;, Sys.Date()), width=8, height=6) ggplot(d1, aes(x=growthrate, fill=treatment))+geom_histogram(colour=&quot;black&quot;)+theme_bw()+geom_vline(aes(xintercept=2), colour=&quot;grey45&quot;, linetype=&quot;dashed&quot;)+scale_fill_manual(values=ColMerge[ ,1]) Figure 2.4: Histogram of growth rates Based on the above distribution, a cut-off of 2mm/week may be an optimal cut-off to separate growing and stable tumors. Below are growth rates of tumors under different treatments: pv1=sapply(levels(d1$treatment)[1:3], function(x) wilcox.test(d1$growthrate[which(d1$treatment==x)], d1$growthrate[which(d1$treatment==&quot;Vehicle&quot;)])$p.value) d1$treatment=factor(d1$treatment, levels=c(&quot;Vehicle&quot;, &quot;PDL1&quot;, &quot;LY&quot;,&quot;PDL1+LY&quot;)) ggplot(d1, aes(x=treatment, y=growthrate, col=treatment))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=ColMerge[ ,1])+theme_bw()+ggtitle(paste(paste(names(pv1), round(pv1, 2)), collapse=&quot;;&quot;)) Figure 2.5: Growth rate with respect to treatment write.csv(d1, file=&quot;nature-tables/Fig3c-d.csv&quot;) We can calculate the p.values below, using a wilcox test. The growth rates comparing the treatment to the controls are: print(&#39;LY samples&#39;) ## [1] &quot;LY samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;LY&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;LY&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 150.5, p-value = 0.06847 ## alternative hypothesis: true location shift is not equal to 0 print(&#39;PDL1 samples&#39;) ## [1] &quot;PDL1 samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;PDL1&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;PDL1&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 90, p-value = 0.02673 ## alternative hypothesis: true location shift is not equal to 0 print(&#39;PDL1+LY samples&#39;) ## [1] &quot;PDL1+LY samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;PDL1+LY&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;PDL1+LY&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 133.5, p-value = 0.002644 ## alternative hypothesis: true location shift is not equal to 0 This shows a smaller growth-rate in PDL1 single and double treated cases compared to the vehicles. Overall the distribution of growing vs stable tumors is shown below: table(ifelse(d1$growthrate&gt;=2, &quot;grow&quot;, &quot;stable&quot;)) ## ## grow stable ## 47 31 head(d1) ## growthrate treatment growth color sample Nweeks Time.Tum2Sac Time.NMU2Sac ## 1 3.54285714 Vehicle growing #5D5D5D P5T1 6 41 84 ## 2 15.00000000 Vehicle growing #5D5D5D P5T2 2 41 84 ## 3 20.00000000 Vehicle growing #5D5D5D P5T3 2 41 84 ## 4 11.70000000 Vehicle growing #5D5D5D P4T1 5 30 77 ## 5 0.02459016 Vehicle stable #5D5D5D P7T1 8 49 127 ## 6 -0.15163934 Vehicle stable #5D5D5D P7T2 8 49 127 ## tum.size growthrate_cutoff2 ## 1 20 growing ## 2 15 growing ## 3 20 growing ## 4 47 growing ## 5 6 stable ## 6 3 stable We can replot the previous graphs according to growth, and color code according to whether it is a fast or slow growing tumor par(xpd=T) #Plot the above into quadrants based on different treatments: par(mfrow=c(2,2)) for (j in 1:length(xn)){ indx=which(names(CTreat)==xn[j]) indx=setdiff(indx, 1) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=paste(&quot;Redone&quot;, xn[j])) for (i in indx){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=ifelse(d1$growthrate_cutoff2[i-1]==&quot;growing&quot;, ColMerge[j, 1], ifelse(d1$growthrate_cutoff2[i-1]==&quot;stable&quot;, ColMerge[j, 2], &quot;black&quot;)), type=&quot;o&quot;, pch=19) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], i], colnames(GrowthRaw)[i], cex=0.6) } } Figure 2.6: Overview of growth rates of immunotherapy treated tumors with fast and slow growing indicated As a sanity check, compare these growth rates with differences in tumour size at different time points: comparing the growth rate according to classifications (growing, stable) tumor size at time of sacrifice rate of tumor development from the time of NMU injection For all comparisons, wilcox rank sum test to assess differences was used par(mfrow=c(1,3)) boxplot(d1$growthrate~d1$growthrate_cutoff2, main=&quot;growth rate, new growth&quot;, las=2, ylab=&quot;tumor growth rate (mm/week)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$growthrate~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(3.54285714285714, 15, 20, 11.7, 5.8, : ## cannot compute exact p-value with ties text(1.5, 20, paste(&quot;wilcox p =&quot;, round(x1, 3))) boxplot(d1$tum.size~d1$growthrate_cutoff2, main=&quot;tum size at sac, new growth&quot;, las=2, ylab=&quot;Tumor diameter (mm)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$tum.size~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(20, 15, 20, 47, 30, 12, 32, 35, 4, : cannot ## compute exact p-value with ties text(1.5, 40, paste(&quot;wilcox p =&quot;, round(x1, 3))) boxplot(d1$tum.size/d1$Time.NMU2Sac~d1$growthrate_cutoff2, main=&quot;rate NMU2SAC&quot;, las=2, ylab=&quot;growth rate from NMU injection (mm/wk)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$tum.size/d1$Time.NMU2Sac~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(0.238095238095238, 0.178571428571429, : ## cannot compute exact p-value with ties text(1.5, 0.6, paste(&quot;wilcox p =&quot;, round(x1, 3))) Is there an association with treatment? Calculate below using chi-squared test: ## Old data # print(&#39;new data outcome&#39;) a3=chisq.test(table(factor(d1$treatment), d1$growthrate_cutoff2)) a3 ## ## Pearson&#39;s Chi-squared test ## ## data: table(factor(d1$treatment), d1$growthrate_cutoff2) ## X-squared = 7.7366, df = 3, p-value = 0.05178 ContTable(table((d1$treatment), d1$growthrate_cutoff2), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) Figure 2.7: Contingency tables We can also compare these values by assessing any I/O vs the control, as well as specific treatment arms par(mfrow=c(2,2)) ContTable(table((d1$treatment!=&quot;Vehicle&quot;), d1$growthrate_cutoff2), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) for (i in levels(d1$treatment)[2:4]){ ContTable(table(factor(d1$treatment[d1$treatment%in%c(&quot;Vehicle&quot;, i)]), d1$growthrate_cutoff2[d1$treatment%in%c(&quot;Vehicle&quot;, i)]), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) } Overall, it appears that there is an association between growth rate and treatment # Replace the Cdata information with new growth information Cdata$Growth2=d1$growthrate_cutoff2[match(Cdata$NewID, d1$sample)] Cdata$GrowthRate=d1$growthrate[match(Cdata$NewID, d1$sample)] 2.3 FACS data (DN/CD45/EpCAM) Ltab1=Cdata[ ,c(&quot;Tumor.Growth&quot;, &quot;DN.Frac.FACS&quot;, &quot;CD45.Frac.FACS&quot;, &quot;EpCAM.Frac.FACS&quot;, &quot;Treatment&quot;)] Ltab2=melt(Ltab1, measure.vars = c(&quot;DN.Frac.FACS&quot;, &quot;CD45.Frac.FACS&quot;, &quot;EpCAM.Frac.FACS&quot;)) Ltab2=Ltab2[-which(is.na(Ltab2$value)|is.na(Ltab2$Tumor.Growth)), ] Ltab2$Tumor.Growth=factor(Ltab2$Tumor.Growth) Ltab2$Treatment=factor(Ltab2$Treatment) Ltab2$value=as.numeric(Ltab2$value) ggplot(Ltab2, aes(x=Tumor.Growth, y=value, col=Tumor.Growth))+geom_boxplot()+geom_point()+facet_grid(~variable)+ scale_color_manual(values=c(ColSizeb, &quot;black&quot;))+theme_bw() Figure 2.8: Ext3c: FACS data Assess any significance below: wilcox.test(as.numeric(Ltab1$CD45.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum exact test ## ## data: as.numeric(Ltab1$CD45.Frac.FACS) by Ltab1$Tumor.Growth ## W = 144, p-value = 0.04588 ## alternative hypothesis: true location shift is not equal to 0 wilcox.test(as.numeric(Ltab1$DN.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum exact test ## ## data: as.numeric(Ltab1$DN.Frac.FACS) by Ltab1$Tumor.Growth ## W = 242, p-value = 0.8695 ## alternative hypothesis: true location shift is not equal to 0 wilcox.test(as.numeric(Ltab1$EpCAM.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum test with continuity correction ## ## data: as.numeric(Ltab1$EpCAM.Frac.FACS) by Ltab1$Tumor.Growth ## W = 307, p-value = 0.1074 ## alternative hypothesis: true location shift is not equal to 0 We can also plot by treatment: ggplot(Ltab2, aes(x=Treatment, y=value, col=Treatment))+geom_boxplot()+geom_point()+facet_grid(~variable)+ scale_color_manual(values=c(ColMerge[ ,1]))+theme_bw() write.csv(Ltab2, file=&quot;nature-tables/Ext3c.csv&quot;) 2.4 FACS data The immune (CD45) fractions from a number of samples were collected, and assessed using FACs. The major cell types detected are: Leukocytes: Tregs CD8 T cells Thelper cells B cells NK T cells gamma delta T cells Myeloid cells: Macrophages M1 Macrophages M2 Dendritic cells Monocytes Neutrophils We can look at the: types of cells distributions Note that in a number of samples the leukocyte population could not be inferred with confidence, and proportions are normalised to the myeloid population Fdata=read.csv(&quot;../data/carlos_facs_tumors.csv&quot;, stringsAsFactors = F) Fdata[ ,2:ncol(Fdata)]=Fdata[ ,2:ncol(Fdata)]/100 m1=substr(colnames(Fdata), 2, 5) colnames(Fdata)=m1 colnames(Fdata)[1]=&quot;type&quot; scroll_box(kable(Fdata, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) type 11ND 8LD 8RCU 12LD 6RB 11RD 14ND 14NC 3NB 3RC 10LC 10RB 11LB 11RC 15LB 15NC 15RD 16LD 2RA 2RC 5NA 6RD 8RCL Leukocytes 913.8400000 379.5600000 829.5700000 298.8300000 NA NA 291.4300000 576.7400000 1118.8200000 616.3800000 414.7500000 899.6000000 1243.7900000 204.8900000 NA NA NA NA NA NA NA NA NA leukocytes NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Th 0.1823733 0.1223259 0.1239799 0.0542784 NA NA 0.1503277 0.1370462 0.0964141 0.0980077 0.0832309 0.1489996 0.0910604 0.0454390 NA NA NA NA NA NA NA NA NA Tregs 0.1020748 0.3822584 0.0570175 0.0703075 NA NA 0.0703085 0.0438673 0.1722261 0.1392972 0.1607233 0.1387394 0.0263389 0.0292352 NA NA NA NA NA NA NA NA NA CD8 T cells 0.0558632 0.0329329 0.0248804 0.0239936 NA NA 0.0681124 0.0403648 0.0628966 0.0438204 0.0201326 0.0435749 0.0088681 0.0188394 NA NA NA NA NA NA NA NA NA gd T cells 0.0057231 0.0029508 0.0048338 0.0051869 NA NA 0.0052843 0.0034851 0.0054343 0.0099614 0.0108981 0.0039573 0.0023155 0.0078091 NA NA NA NA NA NA NA NA NA NK cells 0.0081852 0.0023975 0.0086430 0.0082321 NA NA 0.0024706 0.0033984 0.0057471 0.0130277 0.0073056 0.0078924 0.0047355 0.0009273 NA NA NA NA NA NA NA NA NA B cells 0.0320297 0.0259774 0.1150958 0.3691731 NA NA 0.0552105 0.1627076 0.1690978 0.1648821 0.0852803 0.1415963 0.1131783 0.5891942 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA DC 0.0847253 0.0099781 0.0240649 0.0937623 0.0796767 0.0904331 0.0210829 0.0866281 0.1246231 0.2439219 0.0338069 0.0087373 0.0787654 0.0441001 0.0782997 0.1614173 0.0582119 0.0529557 0.0371143 0.0034515 0.0605741 0.0224583 0.0656124 Monocytes 0.0869640 0.0992694 0.1052141 0.1075509 0.0750577 0.0896695 0.1671775 0.0227902 0.0658291 0.0406536 0.0388811 0.0573525 0.0550409 0.0607867 0.0630813 0.0921618 0.1345743 0.2219148 0.0818758 0.0326953 0.1337320 0.0871336 0.0882122 Neutrophils 0.1195109 0.0713534 0.0989646 0.0961261 0.1039261 0.0484346 0.0821956 0.0795769 0.1165829 0.0390594 0.2022707 0.0442465 0.1378131 0.0369487 0.0839361 0.0629921 0.1058862 0.0959791 0.1177103 0.0213367 0.1875633 0.0681735 0.0702109 MHCII-hi Macro 0.0079215 0.0188760 0.0327395 0.0978332 0.0254042 0.1052689 0.1015139 0.0328633 0.0341709 0.0462336 0.0260688 0.0224593 0.0856493 0.0309893 0.0660404 0.0758769 0.0283632 0.1103736 0.0456621 0.0460621 0.0757107 0.1725741 0.0463399 MHCII-lo Macro 0.0451180 0.2975240 0.2654603 0.1099146 0.0542725 0.0976328 0.1608619 0.0690003 0.0894472 0.0278996 0.0253711 0.2559019 0.0511094 0.0536353 0.0862846 0.0606657 0.0647108 0.1009692 0.2576354 0.2502040 0.0721728 0.1834358 0.0866607 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Total 0.7304889 1.0658438 0.8608938 1.0363587 0.3383372 0.4314389 0.8845458 0.6817281 0.9424693 0.8667644 0.6939694 0.8734574 0.6548747 0.9179043 0.3776421 0.4531138 0.3917464 0.5821924 0.5399978 0.3537496 0.5297529 0.5337753 0.3570360 Lin- 0.2695111 -0.0658438 0.1391062 -0.0363587 0.6616628 0.5685611 0.1154542 0.3182719 0.0575307 0.1332356 0.3060306 0.1265426 0.3451253 0.0820957 0.6223579 0.5468862 0.6082536 0.4178076 0.4600022 0.6462504 0.4702471 0.4662247 0.6429640 t2=Fdata[-which(Fdata[ ,1]==&quot;&quot;),] #rownames(t2)=Fdata[-which(Fdata[ ,1]==&quot;&quot;) ,1] t2=t2[-c(1:2, 14), ] t2melt=melt(t2) ggplot(t2melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;all samples&#39;)+theme(axis.text.x = element_text(angle = 90)) We can look solely at the myeloid population (and normalise to this total), and color according to growth t3=t2[7:11, ] t3[, 2:ncol(t3)]=t(t(t3[, 2:ncol(t3)])/colSums(t3[, 2:ncol(t3)])) t3melt=melt(t3) t3melt$growth=d1$growthrate_cutoff2[match(t3melt$variable, d1$sample)] ggplot(t3melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;myeloid specific&#39;)+theme(axis.text.x = element_text(angle = 90)) Similarly, we can look at the leukocyte population. Note that the Treg population in some of these samples is very high. t3=t2[1:6, ] t3[, 2:ncol(t3)]=t(t(t3[, 2:ncol(t3)])/colSums(t3[, 2:ncol(t3)])) t3melt=melt(t3) t3melt$growth=d1$growthrate_cutoff2[match(t3melt$variable, d1$sample)] ggplot(t3melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;leukocyte specific&#39;)+theme(axis.text.x = element_text(angle = 90)) "],["cohort-summary-table.html", "Chapter 3 Cohort Summary Table", " Chapter 3 Cohort Summary Table Firstly, look at the total number of samples: #recur variables here avtum=table(Cdata$Rat_ID) Cchar=Cdata[Cdata$Cohort!=&quot;Progression&quot;, ] Cprog=Cdata[Cdata$Cohort==&quot;Progression&quot;, ] Feature Levels N Total No Tumors All 180 - Characterisation 74 - Progression 84 Total No Rats All 90 - Characterisation 43 - Progression 42 No tumours per rat 1.82 ( 1, 3) 3.0.1 Compare the characterisation vs progression cohort Feature Levels Characterisation Progression Total No tumours 96 106 Treatments Vehicle 62 26 - LY 18 - PDL1 17 - PDL1+LY 23 - NA 60 22 Histology diff. adenocarcinomas 36 76 - mucinous carcinoma 0 3 - Fibroadenoma 0 4 - NA 60 23 Age Injection 32-36 23 84 - 35 25 0 - 49 4 0 - NA 44 22 Time (days) NMU 2 Sac 96.33 (54.5, 160) 149.37 (79, 248.7) - Cases with NA 60 22 - NMU 2 Tumor 100.62 (44.2, 182.7) - Cases with NA 96 22 - Tum Spec Surv 48.75 (9.5, 92) - Cases with NA 96 22 Growth Rate/Size (mm) overall size @ sac 10.1 (2, 20.7) 19.52 (3, 40) - Growing No. 47 - Growing size @ sac 27.7 15, 28, 40 - Stable 31 - Stable size @ sac 9.58 (1, 6, 24) - NA 96 28 Spatial Pattern - Infiltrating 0 26 - Restricted 0 33 - NA 96 47 RNA samples any fraction 36 83 - Ep 23 21 - DN 0 33 - CD45 19 36 Imaging Data No tumors 64 - No tumors with RNA 0 Trichrome Data No tumors 47 - No tumors with RNA 0 FACS data Comprehensive 22 - EpCAM/CD45 0 52 3.0.2 Summary of the RNA data Below is a table of the samples with RNA information CRchar=Cchar[which(Cchar$AnyRdata==&quot;yes&quot;), ] CRprog=Cprog[which(Cprog$AnyRdata==&quot;yes&quot;), ] Feature Levels Characterisation Progression RNA samples any fraction 0 0 - Ep 13 21 - DN 0 33 - CD45 10 36 Treatments Char/Prev Vehicle 13 15 - Untreat (char) 0 - LY 9 - PDL1 11 - PDL1+LY 11 - NA 0 0 Time NMU 2 Sac 102.31 (56.2, 160) 113.85 (79, 166) Growth Rate/Size (mm) overall size @ sac 9.23 (4, 18) 21.96 (6, 37.5) - Growing No. 33 - Growing size @ sac 27.64 15, 28, 40 - Stable 12 - Stable size @ sac 7.17 (3.1, 6, 9.7) - NA 13 1 Growth and Treatment: comparing small/stable vs large/growing Vehicle N s/l 2, 13 LY N s/l 2, 7 PDL1 and Treatment N s/l 4, 6 PDL1+LY N s/l 4, 7 "],["whole-slide-imaging.html", "Chapter 4 Whole-slide imaging 4.1 Associate the frequencies with other data types 4.2 Cellular composition 4.3 Associate composition with other covariates 4.4 Estimate tumor size 4.5 Correlations between different subpopulations 4.6 Associations between CD8 counts with other clinical variables", " Chapter 4 Whole-slide imaging In this section, we will be looking at the composition and spatial distribution of cells in whole slide images. These sections have previously been assessed using an external script: SpatialStatisticsWSI.R The following markers have been used: EpCAM (tumor cells) SMA (fibroblasts or myeopithelial cells) CD8 (T cells) Note that in some images a double positive EpCAM+/SMA+ population exists. Some CD8 cells have Epcam+ or SMA+ staining, however, we consider all of these to be simply CD8+ WSIpath=&quot;../data/WSI-data/locationData/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIsummary=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIsummary)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) ## knn data WSIpath=&quot;../data/WSI-data/knn-values/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIknn=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIknn)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) ## knn data WSIpath=&quot;../data/WSI-data/interactingFraction/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIIF=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) WSIIF=lapply(WSIIF, function(x) {colnames(x)&lt;-c(&quot;RN&quot;,&quot;Grid&quot;, &quot;NearestNeighbor&quot;, &quot;IF&quot;, &quot;Reference&quot;); x}) names(WSIIF)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) # MH data WSIpath=&quot;../data/WSI-data/mh-values/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIMH=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIMH)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) # MH set-up summary WSIpath=&quot;../data/WSI-data/MHset-upSummary/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIMHsetup=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIMHsetup)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) save(WSIsummary, WSIknn, WSIIF, WSIMH, WSIMHsetup, file=sprintf(&quot;outputs/WSI_raw_data%s.RData&quot;, Sys.Date())) 4.1 Associate the frequencies with other data types UPDATE THE CIBERSORT INFORMATION. Note there are 47 samples with imaging data. 33 of these samples have FACS data, manual counts and TIMER scores Correlate the following information: “CD8.WSI”: CD8 total counts “CD8Frac.WSI”: CD8 fraction (normalised by cell count) “CD8_EPorSMARatio.WSI”: CD8/EP+SMA ratio (any EpCAM or SMA + cell) “CD8_AnySMARatio.WSI”: CD8/Any EPcam+ cell “CD8_EPRatio.WSI”: CD8 to EpCAM+SMA- ratio “CD8normTumSize”: normalised CD8 counts per mm of tumor size at sac “CD8.EpBoundingBox”: approx area per CD8 cell (density) UPDATE THE CIBERSORT INFORMATION. Below are heatmaps which show the correlation between two variables (red is correlated and blue is anti-correlated), and the p.value is indicated in the middle of the square. It appears that CD8 whole-slide imaging associates well with: FACS data (both CD8 and CD45) Manual scoring (Fig 4) of CD8 cells Some CD8 gene signature scores (mainly in EPC, TIMER) SummaryData=read.csv(&quot;../metadata/new_SummaryData.csv&quot;, row.names = 1) ## CD summary NAidx=sapply(1:ncol(SummaryData), function(x) length(which(!is.na(SummaryData[, x])))) names(NAidx)=colnames(SummaryData) colTestCD8=c(&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, &quot;T.cell.CD8._TIMER&quot;, &quot;T.cell.CD8._CIBERSORT&quot;,&quot;T.cell.CD8._CIBERSORT.ABS&quot;, &quot;T.cell.CD8._EPIC&quot;) # colTestCD8=c(&quot;CD8.EpDomTiles&quot;,&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, ) indx1=c(&quot;CD8.WSI&quot;, &quot;CD8Frac.WSI&quot;, &quot;CD8_EPorSMARatio.WSI&quot;,&quot;CD8_AnySMARatio.WSI&quot;, &quot;CD8_EPRatio.WSI&quot;,&quot;CD8normTumSize&quot;, &quot;CD8.EpBoundingBox&quot;, &quot;log2CD8_EPorSMARatio.WSI&quot;, &quot;log2CD8_EPRatio.WSI&quot;) CDsummary=matrix(NA, nrow=length(indx1), ncol=length(colTestCD8)) rownames(CDsummary)=paste(indx1, &quot; N=&quot;, NAidx[match(indx1, names(NAidx))], sep=&quot;&quot;) colnames(CDsummary)=paste(colTestCD8, &quot; N=&quot;, NAidx[match(colTestCD8, names(NAidx))], sep=&quot;&quot;) CDsummaryP=CDsummary for (i in 1:length(indx1)){ CDsummary[i, ]=sapply(colTestCD8, function(x) cor(SummaryData[, indx1[i]], SummaryData[,x], use=&quot;complete&quot;)) CDsummaryP[i, ]=sapply(colTestCD8, function(x) cor.test(SummaryData[, indx1[i]], SummaryData[,x], use=&quot;complete&quot;)$p.value) } ## Do the same with EPCAM/FACS data colTestFACS=grep(&quot;FACS&quot;, colnames(SummaryData), value = T) colTestWSI=grep(&quot;WSI&quot;, colnames(SummaryData), value = T) FACSsummary=matrix(NA, nrow=length(colTestFACS), ncol=length(colTestWSI)) rownames(FACSsummary)=paste(colTestFACS, &quot; N=&quot;, NAidx[match(colTestFACS, names(NAidx))], sep=&quot;&quot;) colnames(FACSsummary)=paste(colTestWSI, &quot; N=&quot;, NAidx[match(colTestWSI, names(NAidx))], sep=&quot;&quot;) FACSsummaryP=FACSsummary for (i in 1:length(colTestFACS)){ FACSsummary[i, ]=sapply(colTestWSI, function(x) cor(SummaryData[, colTestFACS[i]], SummaryData[,x], use=&quot;complete&quot;)) FACSsummaryP[i, ]=sapply(colTestWSI, function(x) cor.test(SummaryData[, colTestFACS[i]], SummaryData[,x], use=&quot;complete&quot;)$p.value) } PvalHM(CDsummary, round(CDsummaryP,2), &quot;CD8 WSI correlation with Pvalues&quot;) Figure 4.1: association with facs PvalHM(FACSsummary, round(FACSsummaryP, 2), &quot;WSI vs FACS w Pvalues&quot;) 4.2 Cellular composition WSIvals=sapply(WSIsummary, function(x) table(factor(x$Class2, levels=c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;EpCAM: SMA&quot;, &quot;SMA&quot;, &quot;Unclass&quot;)))) WSIvalFracs=t(t(WSIvals)/colSums(WSIvals)) lxmatch=match(colnames(WSIvalFracs), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) Cdata$CD8Fraction=NA Cdata$CD8Fraction[na.omit(lxmatch)]=WSIvalFracs[1, ] Cdata$EpCAMFraction=NA Cdata$EpCAMFraction[na.omit(lxmatch)]=WSIvalFracs[2, ] Cdata$DPFraction=NA Cdata$DPFraction[na.omit(lxmatch)]=WSIvalFracs[3, ] Cdata$SMAFraction=NA Cdata$SMAFraction[na.omit(lxmatch)]=WSIvalFracs[4, ] Cdata$UnclassFraction=NA Cdata$UnclassFraction[na.omit(lxmatch)]=WSIvalFracs[5, ] Here, we look at the raw distributions of the different cell types and see if there are associations with: tumor size growth rate growth rate (categorical) treatment stromal restricted or infiltrating Below are the total cell counts: WSIvals=WSIvals[ , order(WSIvals[1, ])] ordV=colnames(WSIvals) WSIvalFracs=WSIvalFracs[ , order(WSIvalFracs[1, ])] ordV2=colnames(WSIvalFracs) ## match with meta data# get the sample Names CdataTID=gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID) l1=match(colnames(WSIvals), CdataTID) Treat=Cdata$Treatment[l1] Growth=Cdata$Growth2[l1] WSImelt=melt(WSIvals) WSImelt$Var2=factor(WSImelt$Var2, levels=ordV) WSImelt$treatment=Treat[match(WSImelt$Var2, colnames(WSIvals))] WSImelt$growth=Growth[match(WSImelt$Var2, colnames(WSIvals))] l2=match(colnames(WSIvalFracs), CdataTID) Treat=factor(Cdata$Treatment[l2]) Growth=Cdata$Growth2[l2] WSIfracMelt=melt(WSIvalFracs) WSIfracMelt$Var2=factor(WSIfracMelt$Var2, levels=ordV2) WSIfracMelt$treatment=Treat[match(WSIfracMelt$Var2, colnames(WSIvalFracs))] WSIfracMelt$growth=Growth[match(WSIfracMelt$Var2, colnames(WSIvalFracs))] #pdf(sprintf(&quot;rslt/WSI-analysis/summary_distributions_norm_cell_count_%s.pdf&quot;, Sys.Date()), width=9, height=5) ggplot(WSImelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;) ggplot(WSImelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by treatment&quot;) ggplot(WSImelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by growth&quot;) Here, the same data is shown and normalised according to total cell count: ggplot(WSIfracMelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;) Figure 4.2: WSI-normalised-all-samples ggplot(WSIfracMelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by treatment&quot;) Figure 4.3: association with treatment ggplot(WSIfracMelt, aes(x=Var2, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by growth&quot;) (#fig:Ext4c_pt2)association with growth write.csv(WSIfracMelt, file=&quot;nature-tables/Ext4c-d.csv&quot;) 4.3 Associate composition with other covariates Make Boxplots of the above data, and index samples according to growth or with treatment #pdf(&quot;~/Desktop/Fig4B-summary-WSI-growth-treatment.pdf&quot;, height=7, width=7) nx1=levels(WSIfracMelt$Var1) nOut=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$growth==&quot;growing&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$growth==&quot;stable&quot; &amp; WSIfracMelt$Var1==x])$p.value) ggplot(WSIfracMelt[-which(is.na(WSIfracMelt$growth)), ], aes(x=Var1, y=value, col=factor(growth)))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ scale_color_manual(values=c(ColSize, &quot;black&quot;))+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;)+theme_bw()+ggtitle(paste(names(nOut), round(nOut,2), collapse=&quot; ;&quot;)) Figure 4.4: association of frequency with treatment and growth nOutA=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;LY&quot; &amp; WSIfracMelt$Var1==x])$p.value) nOutB=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;PDL1&quot; &amp; WSIfracMelt$Var1==x])$p.value) nOutC=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;PDL1+LY&quot; &amp; WSIfracMelt$Var1==x])$p.value) ggplot(WSIfracMelt, aes(x=Var1, y=value, col=(treatment)))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ scale_color_manual(values=ColMerge[ ,1])+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;)+theme_bw()+ ggtitle(paste(paste(names(nOutA), round(nOutA,2), collapse=&quot; ;&quot;),paste(names(nOutB), round(nOutB,2), collapse=&quot; ;&quot;),paste(names(nOutC), round(nOutC,2), collapse=&quot; ;&quot;) ) ) Figure 4.5: association with treatment #dev.off() write.csv(WSIfracMelt[-which(is.na(WSIfracMelt$growth)), ], file=&quot;nature-tables/4b.csv&quot;) #write.csv(WSIfracMelt, file=&quot;nature-tables/4b.csv&quot;) P values when comparing to the vehicle for each comparison: Treatment values LY 0.8630663, 0.0323942, 0.9495167, 0.0437861, 0.04824 PDL1 0.9624018, 0.6258328, 0.0255031, 0.9373764, 0.3049106 PDL1+LY 0.2307253, 1, 1, 0.9298782, 0.4479729 4.4 Estimate tumor size Using WSI data, we can estimate a tumor size for each tissue sample and compare to the final tumor sizes. This will be based on the distribution of EpCAM+ cells. This estimate is can be used to normalise CD8 counts. #estimate the tumor areas Tarea=lapply(WSIsummary, function(x) ripras(x$Centroid.X.µm[x$Class2==&quot;EpCAM&quot;], x$Centroid.Y.µm[x$Class2==&quot;EpCAM&quot;], &quot;convex&quot;)) TareaSum=sapply(Tarea, area) # Tumor diameter Tdiameter=Cdata$Tumor.diameter.sac.mm[match(colnames(WSIvals), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] plot(TareaSum, Tdiameter, ylab=&quot;Tumor Diameter&quot;, xlab=&quot;Epcam cells bounding area&quot;) cor.test(TareaSum, Tdiameter, use=&quot;complete&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: TareaSum and Tdiameter ## t = 1.8547, df = 56, p-value = 0.06891 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.01890939 0.46967349 ## sample estimates: ## cor ## 0.2405613 ## append to Cdata Cdata$TumorAreaWSI=NA lxmatch=match(colnames(WSIvalFracs), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) # probably don&#39;t need this Cdata$TumorAreaWSI[(lxmatch)]=TareaSum #[-which(is.na(lxmatch))] 4.5 Correlations between different subpopulations Look for correlates between different subpopulations: Naturally, we would expect a negative correlation since this should sum to 1. Below are heatmaps showing correlations between different cell types, and significant associations are linearly shown. Note the following negative correlations: epcam and SMA SMA+ and Unclass Ax1=cor(t(WSIvalFracs)) #pdf(sprintf(&quot;rslt/WSI-analysis/summary-associations-between-subgroups_%s.pdf&quot;, Sys.Date()), height=8, width=8) par(oma=c(4, 0,0, 4)) heatmap.2(Ax1, col=brewer.pal(9, &quot;RdBu&quot;), trace=&quot;none&quot;,scale=&quot;none&quot;) par(mfrow=c(2,2)) a1=cor.test(WSIvalFracs[2, ], WSIvalFracs[4, ]) plot(WSIvalFracs[2, ], WSIvalFracs[4, ], xlab=&quot;Epcam+&quot;, ylab=&quot;SMA+&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[4, ], WSIvalFracs[5, ]) plot(WSIvalFracs[4, ], WSIvalFracs[5, ], xlab=&quot;SMA+&quot;, ylab=&quot;Unclass&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[3, ], WSIvalFracs[4, ]) plot(WSIvalFracs[3, ], WSIvalFracs[4, ], xlab=&quot;Epcam+SMA+&quot;, ylab=&quot;SMA&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[2, ], WSIvalFracs[5, ]) plot(WSIvalFracs[2, ], WSIvalFracs[5, ], xlab=&quot;Epcam+&quot;, ylab=&quot;nclass&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) #devoff() # correlations ctest=matrix(NA, nrow=5, ncol=5) for (i in 1:5){ ctest[i, ]=sapply(1:5, function(x) cor.test(WSIvalFracs[i, ], WSIvalFracs[x, ])$p.value) } All associations determined using a correlation test 4.6 Associations between CD8 counts with other clinical variables Below we assess whether any of the CD8-variables described in section 3.1 is associated with treatment growth spatial pattern indx1=c(indx1, &quot;log2CD8_EPorSMARatio.WSI&quot;, &quot;log2CD8_EPRatio.WSI&quot;) a1=matrix(NA, ncol=length(indx1), nrow=5) for (i in 1:length(indx1)){ a1[1, i]=wilcox.test(SummaryData[SummaryData$Growth%in%c(&quot;stable&quot;, &quot;growing&quot;) ,indx1[i] ]~ SummaryData$Growth[SummaryData$Growth%in%c(&quot;stable&quot;, &quot;growing&quot;)])$p.value a1[2, i]=wilcox.test(SummaryData[SummaryData$SpatialManual%in%c(&quot;Infiltrating&quot;, &quot;restricted&quot;) ,indx1[i] ]~ SummaryData$SpatialManual[SummaryData$SpatialManual%in%c(&quot;Infiltrating&quot;, &quot;restricted&quot;)])$p.value a1[3, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;PDL1&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;PDL1&quot;, &quot;Vehicle&quot;)])$p.value a1[4, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;PDL1+LY&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;PDL1+LY&quot;, &quot;Vehicle&quot;)])$p.value a1[5, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;LY&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;LY&quot;, &quot;Vehicle&quot;)])$p.value } colnames(a1)=indx1 rownames(a1)=c(&quot;growth&quot;, &quot;spatial&quot;, &quot;pdl1&quot;, &quot;pdl1+ly&quot;, &quot;ly&quot;) par(oma=c(5, 0,0,4)) heatmap.2(-log10(a1), col=brewer.pal(9, &quot;Blues&quot;), trace=&quot;none&quot;, scale=&quot;none&quot;) Note that CD8 normalised by tumor size is associated with growth (but this could a reflection of the size of the tumor), and there is a borderline difference once normalised by epithelial content. In addition the CD8 total count is associated with pdl1+ly treatment. Note that p=0.05 is designated by a value of 1.3 "],["spatial-statistics.html", "Chapter 5 Spatial statistics 5.1 knn-Distances: 5.2 The interacting fraction 5.3 M-H distances 5.4 Comparison between metrics 5.5 Distances to “unclassified cells”", " Chapter 5 Spatial statistics Below, we use three different metrics to compare spatial distributions: k-nearest neighbour distances the interacting fraction morisita-horn distances These are compared to manual inspection of the result 5.1 knn-Distances: The k-nearest neighbour distances looks at the average distance from a given cell type of class A to a cell type of class B. In this section, the reference class A is the CD8 T cell, and we will look at the mean distance to SMA, Epcam, double positive and unclassified cells in each image. To account for potential fluctuations due to misclassified cells, or isolated single cells, k values of 1, 3, 5 will be used. I.e. for each cell, we will compute the mean distance from each Cd8Tcell to its 1, 3, and 5 nearest neighbours. 5.1.1 Comparison to manual classification Overall, we see that the differences in infiltrating vs restricted are similar. We see statistical differences (using anova followed by Tukey’s test) between: epcam and SMA-epcam in both cases (higher distances to EpCAM on average) SMA-Epcam to SMA (CD8s are closer to SMA+) Unclass to Epcam-SMA (CD8s closer to unclass) In the infiltrating case: Unclass to Epcam (CD8s closer to unclass, borderline significant) In the restricted cases, we see: Unclass to SMA (higher distance to unclass in the restricted case) SMA to epcam (CD8s are closer to the SMA) This last result is consistent with what we expect for a CD8+ cell which is stroma-restricted. knnMelt=melt(WSIknn, measure.vars=c(&quot;KS.pval&quot;)) knnTemp1=knnMelt[knnMelt$CellType==&quot;CD8&quot; &amp; knnMelt$NearestCellType%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;, &quot;EpCAM: SMA&quot;, &quot;Unclass&quot;), ] knnTemp1$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] # compute p values? ptest=sapply(levels(knnTemp1$knn), function(x) wilcox.test(knnTemp1$MeanDistance[which(knnTemp1$knn==x &amp; knnTemp1$NearestCellType==&quot;EpCAM&quot; &amp; knnTemp1$SpatialManual==&quot;Infiltrating&quot;)], knnTemp1$MeanDistance[which(knnTemp1$knn==x &amp; knnTemp1$NearestCellType==&quot;SMA&quot; &amp; knnTemp1$SpatialManual==&quot;Infiltrating&quot;)])$p.value) fit1=aov(MeanDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;Infiltrating&quot;, ]) fit2=aov(MeanDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;restricted&quot;, ]) fit1b=aov(MedianDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;Infiltrating&quot;, ]) fit2b=aov(MedianDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;restricted&quot;, ]) #pdf(sprintf(&quot;rslt/WSI-analysis/knn_distances_vs_manualspatial_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(knnTemp1, aes(x=NearestCellType, y=MeanDistance, fill=SpatialManual))+geom_boxplot(outlier.shape=NA)+facet_grid(~knn+SpatialManual)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = c(&quot;#e41a1c&quot;, &quot;#377eb8&quot;),na.value=&quot;black&quot;)+ggtitle(&quot;CD8-CelltypeX spatial distributions: mean values&quot;) print(p) par(mfrow=c(1,2), oma=c(0, 0, 2, 0)) plot(TukeyHSD(fit1, &quot;NearestCellType&quot;), las=2) title(&quot;Infiltrating Mean Distance from CD8&quot;, line=3.3) plot(TukeyHSD(fit2, &quot;NearestCellType&quot;), las=2) title(&quot;Restricted Mean Distance from CD8&quot;, line=3.3) Note above the infiltrating samples have shorter distances to EpCAM cells relative to SMA cells compared to restricted samples. (Tukey’s test shows that SMA-EPCAM distances for inf. are large but small in resis.) 5.1.2 Associations with outcome to treatment We can also see if there is an association between these distances with growth and treatment Treatment: CD8 cells in PDL1 sample are further away to SMA+ cells and EpCAM+ (compared to vehicle or double agent) CD8 cells in LY treated samples are further away from unclassified cells (compared to any of the other treatments) #pdf(&quot;~/Desktop/4C-knn-summary-treatment.pdf&quot;, height=5, width=7) knnTemp1$Treatment=Cdata$Treatment[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] fit1=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM&quot; &amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit2=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit3=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM: SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit4=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;Unclass&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) knnTemp1$Growth=Cdata$Tumor.Growth[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] fit1b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit2b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit3b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM: SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit4b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;Unclass&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) #pdf(sprintf(&quot;rslt/WSI-analysis/knn_distances_vs_treatment_growth_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(knnTemp1, aes(col=Treatment, y=MedianDistance, x=Treatment))+geom_boxplot(outlier.shape=NA)+geom_point(position=position_jitterdodge(),alpha=0.3)+facet_grid(~knn+NearestCellType)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = ColMerge[ ,1],na.value=&quot;black&quot;)+theme_bw() print(p) Figure 5.1: knn Distances Below, check whether any of the above are significant using Tukey’s ad-hoc test. Note that not many values cross 0 here, except for the LY samples for stromal cells par(mfrow=c(2,2), oma=c(0, 0, 2, 0)) tukey.test &lt;- TukeyHSD(fit1) plot(TukeyHSD(fit1, &quot;Treatment&quot;), las=2) title(&quot;EpCAM Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit2, &quot;Treatment&quot;), las=2) title(&quot;SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit3, &quot;Treatment&quot;), las=2) title(&quot;EpCAM:SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit4, &quot;Treatment&quot;), las=2) title(&quot;Unclass Distance&quot;, line=3.3) #dev.off() summary(fit1) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 365 121.7 0.307 0.82 ## Residuals 54 21435 396.9 summary(fit2) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 2147233 715744 0.907 0.444 ## Residuals 52 41037326 789179 summary(fit3) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 1969380 656460 0.467 0.707 ## Residuals 29 40735615 1404676 summary(fit4) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 5763 1920.9 2.68 0.0559 . ## Residuals 54 38700 716.7 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] # save data to file knnTemp1$sample=Cdata$NewID[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] write.csv(knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), c(2:5, 10:13)], file=&quot;nature-tables/Fig4c_Ext4e.csv&quot;) We can refine this comaprison to just knn3. We compare to the vehicle using a wilcox.test below: knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] ctypes=unique(knnTemp1b$NearestCellType) t2=knnTemp1b[which(knnTemp1b$CellType==&quot;CD8&quot; &amp; knnTemp1b$knn==&quot;knn3&quot;) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;LY&quot;])$p.value) pval3=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;PDL1&quot;])$p.value) pval4=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;PDL1+LY&quot;])$p.value) pmelt=melt(cbind(LY=pval2, PDL1=pval3, &#39;PDL1+LY&#39;=pval4)) colnames(pmelt)=c(&quot;NearestCellType&quot;,&quot;Treatment&quot;,&quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 pmelt$Treatment[which(pmelt$Treatment==&quot;pval4&quot;)]=&quot;PDL1+LY&quot; p=ggplot(knnTemp1b[knnTemp1b$CellType==&quot;CD8&quot; , ], aes(x=Treatment, y=MeanDistance, col=Treatment))+facet_grid(~NearestCellType)+geom_boxplot()+ylab(&quot;knn3&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;knn3 mean distance to cd8 cell &quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColMerge[ ,1], &quot;black&quot;))+scale_y_continuous(trans=&#39;log10&#39;) p+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label)) 5.1.3 Growth All 95% confidence lines cross 0, but it appears that stable cases have a closer unclass-CD8 interaction distance compared to growing. p&lt;-ggplot(knnTemp1, aes(col=Growth, y=MeanDistance, x=Growth))+geom_boxplot(outlier.shape=NA)+geom_point(position=position_jitterdodge(),alpha=0.3)+facet_grid(~knn+NearestCellType)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = c(ColSizeb, &quot;black&quot;),na.value=&quot;black&quot;)+theme_bw() print(p) par(mfrow=c(2,2), oma=c(0, 0, 2, 0)) plot(TukeyHSD(fit1b, &quot;Growth&quot;), las=2) title(&quot;EpCAM Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit2b, &quot;Growth&quot;), las=2) title(&quot;SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit3b, &quot;Growth&quot;), las=2) title(&quot;EpCAM:SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit4b, &quot;Growth&quot;), las=2) title(&quot;Unclass Distance&quot;, line=3.3) #dev.off() summary(fit1b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 3209 3209 4.568 0.0374 * ## Residuals 51 35824 702 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## 5 observations deleted due to missingness summary(fit2b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 342252 342252 0.358 0.552 ## Residuals 49 46806661 955238 ## 5 observations deleted due to missingness summary(fit3b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 999209 999209 0.48 0.494 ## Residuals 28 58307461 2082409 ## 3 observations deleted due to missingness summary(fit4b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 3469 3469 1.053 0.31 ## Residuals 51 168073 3296 ## 5 observations deleted due to missingness Can also plot the single result for knn=3 knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] ctypes=unique(knnTemp1b$NearestCellType) t2=knnTemp1b[which(knnTemp1b$CellType==&quot;CD8&quot; &amp; knnTemp1b$knn==&quot;knn3&quot;) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Growth==&quot;growing&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Growth==&quot;stable&quot; ])$p.value) ann_text=data.frame(Glabel=round(pval2,2), NearestCellType=(ctypes ), Growth=&quot;stable&quot;, value=0.7) p=ggplot(knnTemp1b[knnTemp1b$CellType==&quot;CD8&quot; , ], aes(x=Growth, y=MeanDistance, col=Growth))+facet_grid(~NearestCellType)+geom_boxplot()+ylab(&quot;knn3&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;kkn3 nearest neighbor distance to cd8 cell&quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColSizeb, &quot;black&quot;))+scale_y_continuous(trans=&#39;log10&#39;) p+geom_text(data=ann_text, mapping=aes(x=2, y=0.75, label=Glabel)) Is there a plot showing the different knn values? If there is, delete this section Combine the Epithelial samples, and SMA/unclassified samples together: Is there a difference here? knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn1&quot;), ] knnTemp1b$CD8=WSIvalFracs[1, match(knnTemp1b$L1, colnames(WSIvalFracs))] knnTemp1b$CD8frac=ifelse(knnTemp1b$CD8&gt;0.1, &quot;high&quot;, &quot;low&quot;) knnTemp1b$Ep=WSIvalFracs[2, match(knnTemp1b$L1, colnames(WSIvalFracs))] knnTemp1b$Epfrac=ifelse(knnTemp1b$CD8&gt;0.1, &quot;high&quot;, &quot;low&quot;) knnTemp1c=knnTemp1b[knnTemp1b$NearestCellType%in%c(&quot;EpCAM&quot;), ] knnTemp1d=knnTemp1b[knnTemp1b$NearestCellType%in%c(&quot;EpCAM: SMA&quot;), ] knnEpMerge=merge(knnTemp1c, knnTemp1d[ ,c(&quot;MeanDistance&quot;, &quot;MedianDistance&quot;, &quot;variable&quot;, &quot;value&quot;,&quot;L1&quot;)], by.x=&quot;L1&quot;, by.y=&quot;L1&quot;, all=T) knnEpMerge$EpDist2=ifelse(knnEpMerge$MedianDistance.x&lt;knnEpMerge$MedianDistance.y, knnEpMerge$MedianDistance.x, knnEpMerge$MedianDistance.y) knnEpMerge$EpDist2[which(is.na(knnEpMerge$EpDist2))]=knnEpMerge$MedianDistance.x[which(is.na(knnEpMerge$EpDist2))] ggplot(knnEpMerge, aes(x=Growth , y=EpDist2, col=Growth))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ylim(c(0, 200))+facet_grid(~CD8frac) ggplot(knnEpMerge, aes(x=Treatment, y=EpDist2, col=Treatment))+facet_grid(~CD8frac)+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ylim(c(0, 200)) plot(knnEpMerge$CD8, knnEpMerge$EpDist2, col=factor(knnEpMerge$Growth)) text(knnEpMerge$CD8, knnEpMerge$EpDist2, knnEpMerge$L1) plot(knnEpMerge$Ep, knnEpMerge$EpDist2, col=factor(knnEpMerge$Growth)) text(knnEpMerge$Ep, knnEpMerge$EpDist2, knnEpMerge$L1) ## what is this used for? knnTempSumm=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] knnreshape=acast(knnTempSumm[ ,c(&quot;NearestCellType&quot;, &quot;MeanDistance&quot;, &quot;L1&quot;)], L1~NearestCellType, value.var=&quot;MeanDistance&quot; ) knnreshape=data.frame(knnreshape) knnreshape$EpMIN=ifelse(knnreshape$EpCAM..SMA&lt;knnreshape$EpCAM, knnreshape$EpCAM..SMA, knnreshape$EpCAM) knnreshape$EpMIN[which(is.na(knnreshape$EpMIN))]=knnreshape$EpCAM[which(is.na(knnreshape$EpMIN))] knnreshape$EpStrRatio1=knnreshape$EpCAM/rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) knnreshape$EpStrRatio2=knnreshape$EpCAM/(knnreshape$SMA) knnreshape$EpStrRatio3=rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) knnreshape$EpStrRatio4=rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(knnreshape$SMA) 5.2 The interacting fraction The interacting fraction uses the knn-distances and determines the proportion of CD8 cells which are within a proximity of r um from celltype B. 5.2.1 Comparison to manual &amp; select optimal r Below are plots of the proportion of CD8 cells within an “interacting distance” as we increase r. This looks at both the interacting fraction of CD8 cells with Epcam+ and SMA+ cells. Lines are color coded according to the manual spatial-infiltration annotation. We notice from the line plots for each single sample that the restricted samples generally have low interacting fractins with EpCAM and SMA compared to the infiltrating samples. In addition, there is a statistical difference in EpCAM measurements compared to SMA. IFmelt=melt(WSIIF, measure.vars=c(&quot;IF&quot;)) IFmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFmelt$Treatment=Cdata$Treatment[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFmelt$Growth=Cdata$Tumor.Growth[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #IFmelt$Growth=IFmelt$Growth #IFmelt$Growth[grep(&quot;no data&quot;, IFmelt$Growth)]=&quot;no data&quot; IFmelt$Dist=(substr(IFmelt$Grid, 6, 7)) IFmelt$knn=substr(IFmelt$Grid, 1, 4) IFmelt$sample=Cdata$NewID[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFTempSumm=IFmelt[IFmelt$Grid==&quot;knn3-15&quot; &amp; IFmelt$Reference==&quot;CD8&quot;, ] IFreshape=acast(IFTempSumm[ ,c(&quot;NearestNeighbor&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~NearestNeighbor, value.var=&quot;value&quot; ) IFreshape=data.frame(IFreshape) IFreshape$EpMIN=ifelse(IFreshape$EpCAM..SMA&lt;IFreshape$EpCAM, IFreshape$EpCAM..SMA, IFreshape$EpCAM) IFreshape$EpMIN[which(is.na(IFreshape$EpMIN))]=IFreshape$EpCAM[which(is.na(IFreshape$EpMIN))] IFreshape$EpStrRatio1=IFreshape$EpCAM/rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) IFreshape$EpStrRatio2=IFreshape$EpCAM/(IFreshape$SMA) IFreshape$EpStrRatio3=rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) IFreshape$EpStrRatio4=rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(IFreshape$SMA) IFreshape$Treatment=factor(IFTempSumm$Treatment[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$Growth=factor(IFTempSumm$Growth[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$Infil=factor(IFTempSumm$SpatialManual[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$CD8frac=SummaryData$CD8Frac.WSI[match(rownames(IFreshape), rownames(SummaryData))] IFreshape$TumSize=SummaryData$TumSize[match(rownames(IFreshape), rownames(SummaryData))] #### # line plots to see the best separation between infiltrating and restricted ### #pdf(sprintf(&quot;rslt/WSI-analysis/interacting_fraction_compared_manual_%s.pdf&quot;, Sys.Date()), height=8, width=14) IFmelt2=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM&quot; &amp; IFmelt$Reference==&quot;CD8&quot; , ] IFmelt2$label=IFmelt2$L1 IFmelt2$label[which(IFmelt2$Dist!=30)]=NA p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, group=L1, label=label))+facet_grid(~knn)+geom_line(aes(group=L1))+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;CD8-EpCAM interacting fraction: spatial manual&quot;)+geom_label() print(p) #IFmelt2$Dist=as.numeric(IFmelt2$Dist) p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-EpCAM knn3&quot;)+stat_smooth() print(p) IFmelt2=IFmelt[IFmelt$NearestNeighbor==&quot;SMA&quot; &amp; IFmelt$Reference==&quot;CD8&quot; , ] IFmelt2$label=IFmelt2$L1 IFmelt2$label[which(IFmelt2$Dist!=30)]=NA p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, group=L1, label=label))+facet_grid(~knn)+geom_line(aes(group=L1))+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;CD8-SMA interacting fraction: spatial manual&quot;)+geom_label() print(p) p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-SMA knn3 &quot;) print(p) # ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, linetype=SpatialManual))+geom_point()+stat_smooth()+ggtitle(&quot;CD8-EpCAM interacting fraction: spatial manual&quot;)+ylab(&quot;Interacting Fraction&quot;) # ## Do a dot plot # p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-SMA knn3 &quot;) # print(p) Using the boxplots as a guide, we can determine optimal “interacting distances” at which to perform downstream analysis. The best separation between restricted and infiltrating for EpCAM appears at: 1-nn: 10-15 um 3-nn: 15 um 5-nn: 20 um The interacting fraction does not distinguish SMA fractions (all restricted boxplots overlap with the infiltrating boxplots) #The following plots use 3NN analysis with an interacting distance of 15um. We can firstly check if there is an association between different &quot;interacting fraction&quot; types and manual scoring, similar to what was performed for knn-analysis. Only CD8-EpCAM interacting distances is associated with manual scoring. All other metrics are not significant. ## reshape and do a correlation plot like for the knn analysis par(mfrow=c(3,3)) for (i in 1:9){ a1=wilcox.test(IFreshape[ ,i]~IFreshape$Infil) boxplot(IFreshape[ ,i]~IFreshape$Infil, main=paste(colnames(IFreshape)[i],&quot; p=&quot;, round(a1$p.value,2), sep=&quot;&quot; ), xlab=&quot;IF: knn3, 15um&quot;) } # Again, association between CD8 content and interacting fraction was observed ONLY in the growing samples or restricted cases. par(mfrow=c(1,2)) a1x=cor.test(IFreshape$CD8frac[IFreshape$Infil==&quot;Infiltrating&quot;], IFreshape$EpCAM[IFreshape$Infil==&quot;Infiltrating&quot;]) a1y=cor.test(IFreshape$CD8frac[IFreshape$Infil==&quot;restricted&quot;], IFreshape$EpCAM[IFreshape$Infil==&quot;restricted&quot;]) plot(IFreshape$CD8frac, IFreshape$EpCAM, col=IFreshape$Infil, pch=19, xlab=&quot;CD8 fraction&quot;, ylab=&quot;CD8-EpCAM IF (knn3-15um)&quot;, main=&quot;spatial scoring&quot;) legend(&quot;topright&quot;, c(paste(&quot;infil p=&quot;, round(a1x$p.value,2)), paste(&quot;restrict p=&quot;, round(a1y$p.value,2))), lwd=2, col=c(1,2)) a1x=cor.test(IFreshape$CD8frac[IFreshape$Growth==&quot;growing&quot;], IFreshape$EpCAM[IFreshape$Growth==&quot;growing&quot;]) a1y=cor.test(IFreshape$CD8frac[IFreshape$Growth==&quot;stable&quot;], IFreshape$EpCAM[IFreshape$Growth==&quot;stable&quot;]) plot(IFreshape$CD8frac, IFreshape$EpCAM, col=IFreshape$Growth, pch=19, xlab=&quot;CD8 fraction&quot;, ylab=&quot;CD8-EpCAM IF (knn3-15um)&quot;, main=&quot;tumor growth&quot;) legend(&quot;topright&quot;, c(paste(&quot;growing p=&quot;, round(a1x$p.value,2)), paste(&quot;stable p=&quot;, round(a1y$p.value,2))), lwd=2, col=c(1,2)) 5.2.2 Growth Here, we check if there is an association between the spatial pattern and tumor growth. P value by wilcox test shown ###### # compare these metrics with growth #### #pdf(&quot;~/Desktop/4D-IF-summary-growth.pdf&quot;, height=5, width=7) #pdf(sprintf(&quot;rslt/WSI-analysis/interacting_fraction_vs_treatment_growth_%s.pdf&quot;, Sys.Date()), height=7, width=12) ctypes=unique(IFmelt$NearestNeighbor) t2=IFmelt[which(IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$value[t2$NearestNeighbor==x &amp; t2$Growth==&quot;growing&quot; ], t2$value[t2$NearestNeighbor==x &amp; t2$Growth==&quot;stable&quot; ])$p.value) ann_text=data.frame(Glabel=round(pval2,2), NearestNeighbor=(ctypes ), Growth=&quot;stable&quot;, value=0.7) p=ggplot(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , ], aes(x=Growth, y=value, col=Growth))+facet_grid(~NearestNeighbor)+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;Interacting fraction, knn3, dist=15&quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColSizeb, &quot;black&quot;)) p+geom_text(data=ann_text, mapping=aes(x=2, y=0.75, label=Glabel)) Figure 5.2: interacting fraction write.csv(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , c(2:4, 6, 8:9, 12)], file=&quot;nature-tables/Fig4d-suppf.csv&quot;) 5.2.3 Treatment Similarly, compare the distances with treatment: #pdf(&quot;~/Desktop/4D-IF-summary-treatment.pdf&quot;, height=5, width=7) ctypes=unique(IFmelt$NearestNeighbor) t2=IFmelt[which(IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15) , ] TreatV=sort(unique(IFmelt$Treatment)) pval2=matrix(NA, nrow=3, ncol=5) colnames(pval2)=ctypes rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(ctypes, function(x) wilcox.test(t2$value[t2$NearestNeighbor==x &amp; t2$Treatment==TreatV[i]], t2$value[t2$NearestNeighbor==x &amp; t2$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;NearestNeighbor&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , ], aes(x=Treatment, y=value, col=Treatment))+facet_grid(~NearestNeighbor)+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;Interacting fraction, knn3, dist=15&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColMerge[,1])) p+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.75, label=label, col=Treatment)) fit1=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM&quot; &amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit2=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;SMA&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit3=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM: SMA&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit4=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;Unclass&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) There appears to be a difference in CD8-unclass interactions in LY treated samples (LY, PDL1+LY), but not in the other cases 5.3 M-H distances The M-H distance (or Morisita Horn index) can be considered as a correlation coefficient in spatial distribution between cell type A and cell type B. To calculate this metric, the whole slide image is divided into grids of size 50 to 500um. Within each grid, the total number of cells A and B are determined. The M-H index is thus determined as: \\[ \\frac{2\\sum_{i=1}^n a_ib_i}{(D_a+D_b)AB} \\] where \\(a_i\\) and \\(b_i\\) are the number of cells in grid \\(i\\), \\(A\\) and \\(B\\) the total number of cells, and \\(D_x\\) is the Simpson’s index. 5.3.1 Comparison to Manual Scoring Similar to the interacting fraction, we plot the MH index for increasing values of gridsize to determine an optimal metric to compare spatial patterns. Ideally, we would pick a metric has the following properties: good separation of the different values a reasonable number of cells within each grid (avoid too small grids which give counts of 0) avoid plateauing of MH values because the grid size is too large MHgridsize=150 MHmeltsumm=melt(WSIMHsetup, id.vars=c(&quot;gridsize&quot;, &quot;Ntiles&quot;)) MHmelt=melt(WSIMH, measure.vars=&quot;MH.mean&quot;) MHmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmeltsumm$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmeltsumm$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Treatment=factor(Cdata$Treatment[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))]) MHmelt$Growth=factor(Cdata$Tumor.Growth[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))]) MHmelt$Growth=MHmelt$Growth #MHmelt$Growth[grep(&quot;no data&quot;, MHmelt$Growth)]=&quot;no data&quot; A1=MHmelt[MHmelt$Var2==&quot;CD8&quot;, ] A1$label=A1$L1 A1$label[which(A1$gridsize!=500)]=NA A2=MHmelt[MHmelt$Var2==&quot;CD8&quot; &amp; MHmelt$gridsize==MHgridsize &amp; MHmelt$Var1%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;), ] A3=MHmelt[MHmelt$Var2==&quot;CD8&quot; &amp; MHmelt$gridsize==MHgridsize, ] A3$CD8frac=WSIvalFracs[ 1, match(A3$L1, colnames(WSIvals))] MHTempSumm=A3 #MHmelt[which(MHmelt$gridsize==300 &amp; MHmelt$Var2==&quot;CD8&quot;), ] MHreshape=acast(A3[ ,c(&quot;Var1&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~Var1, value.var=&quot;value&quot; ) MHreshape=data.frame(MHreshape) MHreshape$EpMIN=ifelse(MHreshape$EpCAM..SMA&lt;MHreshape$EpCAM, MHreshape$EpCAM..SMA, MHreshape$EpCAM) MHreshape$EpMIN[which(is.na(MHreshape$EpMIN))]=MHreshape$EpCAM[which(is.na(MHreshape$EpMIN))] MHreshape$EpStrRatio1=MHreshape$EpCAM/rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) MHreshape$EpStrRatio2=MHreshape$EpCAM/(MHreshape$SMA) MHreshape$EpStrRatio3=rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) MHreshape$EpStrRatio4=rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(MHreshape$SMA) MHreshape$Treatment=factor(A3$Treatment[match(rownames(MHreshape), A3$L1)]) MHreshape$Growth=factor(A3$Growth[match(rownames(MHreshape), A3$L1)]) MHreshape$Infil=factor(A3$SpatialManual[match(rownames(MHreshape), A3$L1)]) #pdf(sprintf(&quot;rslt/WSI-analysis/MHplots_compare_spatial_manual_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=SpatialManual, label=label))+facet_grid(~Var1)+geom_line(aes(group=L1))+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: spatial manual&quot;)+geom_label() print(p) ggplot(A1, aes(x=factor(gridsize), y=value, col=SpatialManual, label=label))+facet_grid(~Var1)+geom_boxplot()+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: spatial manual&quot;) ggplot(MHmeltsumm, aes(x=factor(gridsize), y=value, col=SpatialManual))+facet_wrap(~variable, scale=&quot;free_y&quot;)+geom_boxplot()+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;expected number of cells in each grid size&quot;)+scale_y_log10() With increasing grid size, optimal differences between infiltrating and restricted appear at the following sizes: epCAML 100um+ epcam:SMA most significant at 350+ SMA: 150+ Unclass:200+ We probably want to use a metric/gridsize of 250 um as the expected/mean number of cells in each grid is 10 here. Other notes: double positive cells (EpCAM+SMA+) appear in predominantly the restricted cases? higher SMA- stromal cells in restricted 5.3.2 Growth Below are the MH indices with increasing grid-size for individual samples. In general, there is a subset of stable samples which have very high intermixing pdf(&quot;figure-outputs/4E-MH-summary-growth.pdf&quot;, height=5, width=7) p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Growth))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: growth&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3) print(p) dev.off() ## quartz_off_screen ## 2 WE can condense these values based on growing vs stable cases: pvals=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Growth==&quot;growing&quot;], A3$value[A3$Var1==x &amp; A3$Growth==&quot;stable&quot;])$p.value) ann_text=data.frame(label=round(pvals,2), Var1=unique(A3$Var1), Growth=&quot;growing&quot;) ggplot(A3, aes(x=Growth, y=value, col=Growth))+facet_grid(~Var1)+geom_boxplot()+geom_point()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: growth&quot;)+geom_text(data=ann_text, mapping = aes(x=2, y=0.75, label=label))+scale_color_manual(values=c(ColSizeb, &quot;black&quot;)) write.csv(A3, file=&quot;nature-tables/Fig4e-Ext4h.csv&quot;) Although the MH values for growing vs stable are not different, we can compare the mixing in epcam vs stroma in matched samples: #pdf(&quot;~/Desktop/4E-MH-summary-matched-samples-growing-stable.pdf&quot;, height=5, width=7) A2t=A2[-which(A2$L1%in%c(&quot;15RD&quot;, &quot;5LB&quot;)), ] a1=t.test(A2t$value[A2t$Growth==&quot;stable&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Growth==&quot;stable&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a2=t.test(A2t$value[A2t$Growth==&quot;growing&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Growth==&quot;growing&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) # ggplot(A2, aes(x=Var1, y=value, col=Growth))+facet_grid(~Growth)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(sprintf(&quot;Morisita Horn index @ %s&quot;, MHgridsize))+ggtitle(sprintf(&quot;MH index with CD8: stable p=%s, growing p=%s&quot;, round(a1$p.value, 2), round(a2$p.value, 2)))+geom_errorbar(aes(ymin=MH.lower, ymax=MH.upper), width=.2)+geom_point() In the growing cases, there is a difference in the MH index in epacam and stroma, but the stable cases do not support this. 5.3.3 Treatment #pdf(&quot;~/Desktop/4E-MH-summary-treatment.pdf&quot;, height=5, width=7) pval2=matrix(NA, nrow=3, ncol=4) colnames(pval2)=unique(A3$Var1) rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Treatment==TreatV[i]], A3$value[A3$Var1==x &amp; A3$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;Var1&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Treatment))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: Treatment&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3) print(p) ggplot(A3, aes(x=Treatment, y=value, col=Treatment))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: Treatment&quot;)+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label))+geom_point(position=position_jitterdodge(),alpha=0.3)+theme_bw()+scale_color_manual(values=ColMerge[ ,1]) Figure 5.3: MH values with Treatment #dev.off() There is no difference between the different spatial metrics compared to the vehicle, however, we can compare for a given treatment if there is a difference between the epcam and the stromal interaction scores. It appears that there is a difference only in the control, where SMA mixing is higher than EPcam mixing: ## pairwise comparison: Epcam vs stroma ## calculate the pairwise p values here A2t=A2[-which(A2$L1%in%c(&quot;15RD&quot;, &quot;5LB&quot;)), ] a1=t.test(A2t$value[A2t$Treatment==&quot;Vehicle&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;Vehicle&quot;&amp; A2t$Var1==&quot;SMA&quot;], paired=T) a2=t.test(A2t$value[A2t$Treatment==&quot;PDL1&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;PDL1&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a3=t.test(A2t$value[A2t$Treatment==&quot;PDL1+LY&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;PDL1+LY&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a4=t.test(A2t$value[A2t$Treatment==&quot;LY&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;LY&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) p&lt;-ggplot(A2, aes(x=Var1, y=value, col=Treatment))+facet_grid(~Treatment)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(sprintf(&quot;Morisita Horn index @ %s&quot;, MHgridsize))+ggtitle(sprintf(&quot;MH index with CD8: Cntl p=%s, PDL1 p=%s LY p=%s P+L p=%s&quot;, round(a1$p.value, 2), round(a2$p.value, 2), round(a3$p.value,2), round(a4$p.value, 2)))+geom_errorbar(aes(ymin=MH.lower, ymax=MH.upper), width=.2)+geom_point() print(p) 5.4 Comparison between metrics After assessing optimal parameters for each metric, in this section we assess which metric could be the best for spatial analysis. Below is a table of the different metrics and their values for each sample #write.table(SummaryData, file=&quot;../metadata/WSI_compared_other_metrics.csv&quot;) ## # Combine the data from above into one file # df.Spatial=cbind(knnreshape[ , 1:9], IFreshape[ ,1:10], MHreshape[ , 1:9] ) colnames(df.Spatial)=paste(rep(c(&quot;knn&quot;, &quot;IF&quot;, &quot;MH&quot;), times=c(9, 10, 9)), colnames(df.Spatial),sep=&quot;.&quot;) df.Spatial=cbind(df.Spatial,IFreshape[ ,11:14]) df.Spatial$GrowthRate=Cdata$GrowthRate[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$TumSize=Cdata$Tumor.diameter.sac.mm[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$knn.EpCAMcut=cut(df.Spatial$knn.EpCAM, c(-1, median(df.Spatial$knn.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$MH.EpCAMcut=cut(df.Spatial$MH.EpCAM, c(-1, median(df.Spatial$MH.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$IF.EpCAMcut=cut(df.Spatial$IF.EpCAM, c(-1, median(df.Spatial$IF.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$CD8Fraccut=cut(df.Spatial$CD8frac, c(-1, median(df.Spatial$CD8frac, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) t2=WSIvalFracs[, match(rownames(df.Spatial), colnames(WSIvalFracs))] t3=WSIvals[, match(rownames(df.Spatial), colnames(WSIvalFracs))] df.Spatial=cbind(df.Spatial, t(t2), t(t3)) scroll_box(kable(df.Spatial, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) knn.EpCAM knn.EpCAM..SMA knn.SMA knn.Unclass knn.EpMIN knn.EpStrRatio1 knn.EpStrRatio2 knn.EpStrRatio3 knn.EpStrRatio4 IF.CD8 IF.EpCAM IF.EpCAM..SMA IF.SMA IF.Unclass IF.EpMIN IF.EpStrRatio1 IF.EpStrRatio2 IF.EpStrRatio3 IF.EpStrRatio4 MH.EpCAM MH.EpCAM..SMA MH.SMA MH.Unclass MH.EpMIN MH.EpStrRatio1 MH.EpStrRatio2 MH.EpStrRatio3 MH.EpStrRatio4 Treatment Growth Infil CD8frac GrowthRate TumSize knn.EpCAMcut MH.EpCAMcut IF.EpCAMcut CD8Fraccut CD8 EpCAM EpCAM: SMA SMA Unclass CD8 EpCAM EpCAM: SMA SMA Unclass 10LB 39.96193 52.72253 16.94935 28.07623 39.96193 0.5735732 2.3577258 1.3302993 5.4683183 0.2053826 0.2236555 0.0803884 0.5905018 0.3010823 0.0803884 3.333713e-01 3.787550e-01 4.531947e-01 5.148906e-01 0.3580143 0.3510808 0.4990200 0.4513703 0.3510808 0.4211433 0.7174347 0.8341306 1.4209752 PDL1 growing Infiltrating 0.0228977 6.2285714 35 NA high low low 0.0228977 0.2663149 0.1200304 0.3936498 0.1971072 11691 195683 58422 76220 161604 10LC 32.12258 34.57734 17.87345 24.28626 32.12258 0.6124326 1.7972227 1.2716665 3.7317865 0.0784257 0.3168630 0.2375754 0.4768745 0.3714450 0.2375754 4.435062e-01 6.644578e-01 7.760354e-01 1.162651e+00 0.3338239 0.3690715 0.3937566 0.4370583 0.3338239 0.4376135 0.8477925 0.9214336 1.7851014 PDL1 growing Infiltrating 0.0100341 5.3571429 25 high low high low 0.0100341 0.2960411 0.1672355 0.3081967 0.2184926 2194 107760 28128 18909 55255 10LD 34.33110 30.18133 15.97086 35.99495 30.18133 0.7438671 2.1496080 1.3978193 4.0393825 0.2816222 0.2944373 0.2563779 0.5786730 0.1450209 0.2563779 3.525981e-01 5.088147e-01 6.596187e-01 9.518592e-01 0.6191886 0.5596224 0.6542665 0.5383814 0.5596224 0.5100867 0.9463859 0.9711029 1.8017290 PDL1 stable Infiltrating 0.0681088 1.9729730 10 high high high high 0.0681088 0.1948931 0.2063845 0.4066703 0.1239434 93441 516380 0 833223 371152 10NA 23.80977 NA 27.49276 48.19205 23.80977 0.8660376 0.8660376 0.8660376 0.8660376 0.3591542 0.4808547 NA 0.3207166 0.1112743 0.4808547 1.499313e+00 1.499313e+00 1.499313e+00 1.499313e+00 0.3849200 NA 0.4254207 0.3382134 0.3849200 0.9047983 0.9047983 0.9047983 0.9047983 PDL1 NA restricted 0.0465627 NA 12 high high high high 0.0465627 0.5554448 0.0000000 0.2855199 0.1124726 43810 717597 0 625176 256989 10ND 26.20801 NA 30.06210 40.01762 26.20801 0.8717958 0.8717958 0.8717958 0.8717958 0.3008666 0.4408878 NA 0.1738438 0.1426298 0.4408878 2.536114e+00 2.536114e+00 2.536114e+00 2.536114e+00 0.3107974 NA 0.2528283 0.2367529 0.3107974 1.2292825 1.2292825 1.2292825 1.2292825 PDL1 stable restricted 0.0227195 0.3930533 15 high low high low 0.0227195 0.4651478 0.0000000 0.2837204 0.2284123 11415 115152 26633 17181 40501 10RBL 44.92703 67.36295 18.22774 26.07893 44.92703 0.5249056 2.4647619 1.3119416 6.1603904 0.1279104 0.2213380 0.2039493 0.5758915 0.4544651 0.2039493 2.838246e-01 3.843398e-01 5.453515e-01 7.384852e-01 0.4376521 0.4278403 0.5676946 0.5101371 0.4278403 0.4396151 0.7709288 0.8693742 1.5245739 PDL1 growing restricted 0.0202715 4.9761905 40 NA high low low 0.0202715 0.3478534 0.1505455 0.2547647 0.2265650 4518 141557 0 63579 46047 10RBU 87.12901 76.12121 20.78384 35.23226 76.12121 0.8991173 4.1921519 1.6846410 7.8546713 0.4317687 0.0816202 0.3119480 0.4723411 0.2877489 0.0816202 1.040690e-01 1.727993e-01 5.018152e-01 8.332287e-01 0.3034275 0.3661208 0.5282356 0.5051726 0.3034275 0.3392691 0.5744170 0.7486370 1.2675183 PDL1 NA restricted 0.0670641 NA 12 NA low low high 0.0670641 0.1639585 0.3359050 0.2865291 0.1465433 85774 1378423 250877 112621 258890 10RC 25.68401 94.64722 31.71923 16.94124 25.68401 0.2032503 0.8097300 0.9522403 3.7936364 0.1695008 0.4119583 0.0142622 0.1579813 0.5798135 0.0142622 2.391720e+00 2.607639e+00 2.474522e+00 2.697917e+00 0.5653879 0.3556849 0.5385849 0.6096737 0.3556849 0.6322341 1.0497655 1.0299719 1.7101719 PDL1 NA Infiltrating NA NA 4 high high high NA 0.0417306 0.3618176 0.0276754 0.1311434 0.4376331 40084 247458 137553 165687 204242 11LB 69.10296 7919.73815 6967.17455 17.47761 69.10296 0.0046419 0.0099184 0.5366352 1.1466400 0.6929437 0.2080105 0.0000000 0.0000102 0.5774735 0.0000000 2.041550e+04 2.041550e+04 2.041550e+04 2.041550e+04 0.2377147 0.0002624 0.0002198 0.5655570 0.0002624 493.0221183 1081.6128754 493.5662971 1082.8067179 PDL1 growing NA 0.1521777 3.7857143 25 NA low low high 0.1521777 0.4554672 0.0000101 0.0000364 0.3923085 170266 980499 223461 528928 183692 11ND 26.89773 115.53783 92.98237 27.03077 26.89773 0.1289934 0.2892778 0.6830780 1.5318557 0.8951232 0.4326199 0.0146566 0.0079816 0.2765993 0.0146566 1.911018e+01 5.420238e+01 1.975761e+01 5.603869e+01 0.6777854 0.3947415 0.4434028 0.6868704 0.3947415 0.8086739 1.5285999 1.2796448 2.4188549 PDL1 stable Infiltrating 0.3800672 0.1065574 3 high high high high 0.3800672 0.4231776 0.0185443 0.0140030 0.1642079 196293 587504 13 47 506036 11RC 153.33513 178.57028 70.26468 25.53931 153.33513 0.6162122 2.1822504 1.3338375 4.7236450 0.7894172 0.0386688 0.0222283 0.0532631 0.4286498 0.0222283 5.122274e-01 7.259953e-01 8.066755e-01 1.143325e+00 0.0261783 0.0269403 0.0417948 0.1950371 0.0261783 0.3808571 0.6263514 0.7728005 1.2709349 PDL1 growing restricted 0.0504186 2.6785714 19 NA low low high 0.0504186 0.3112585 0.1730174 0.2084050 0.2569004 69477 752029 407898 556391 694672 11RD 73.82461 68.89859 24.26948 26.26985 68.89859 0.7923810 3.0418697 1.5318895 5.8807677 0.2660563 0.2323507 0.1251300 0.3447698 0.4433712 0.1251300 4.944686e-01 6.739300e-01 7.607594e-01 1.036868e+00 0.2646073 0.2511598 0.3031015 0.4116961 0.2511598 0.4774054 0.8729991 0.9305487 1.7016318 PDL1 growing restricted 0.0224452 3.6428571 25 NA low low low 0.0224452 0.2650348 0.1493557 0.2823673 0.2807970 7860 82972 259 508 48175 12LC 23.96795 185.03912 202.99400 19.41965 23.96795 0.0617678 0.1180722 0.5386320 1.0296219 0.5118871 0.4342496 0.0115156 0.0018574 0.5401189 0.0115156 3.247222e+01 2.338000e+02 3.333333e+01 2.400000e+02 0.4673802 0.3063251 0.2124277 0.6696129 0.3063251 0.9009690 2.2001850 1.4914721 3.6422059 PDL1 NA Infiltrating NA 6.2000000 4 high high high NA 0.1070591 0.5811891 0.0114933 0.0049712 0.2952873 137787 687621 242704 572319 188661 12LD 12.74758 285.85343 355.94915 26.97636 12.74758 0.0198622 0.0358129 0.4652537 0.8388867 0.1078652 0.8362360 0.0230337 0.0002809 0.3896067 0.0230337 3.586747e+01 2.977000e+03 3.685542e+01 3.059000e+03 0.6771043 0.1575680 0.0985770 0.6385153 0.1575680 2.6434411 6.8687850 3.2585927 8.4672106 PDL1 stable Infiltrating 0.0223693 0.7702703 6 high high high low 0.0223693 0.7397626 0.0110841 0.0019856 0.2247985 7634 139335 0 0 149118 13NA 70.80101 NA 22.21206 41.36664 70.80101 3.1875036 3.1875036 3.1875036 3.1875036 0.4678459 0.1279338 NA 0.4849838 0.2605385 0.1279338 2.637897e-01 2.637897e-01 2.637897e-01 2.637897e-01 0.2171042 NA 0.3290129 0.2449840 0.2171042 0.6598653 0.6598653 0.6598653 0.6598653 Vehicle growing restricted 0.0355811 6.2000000 35 NA low low high 0.0355811 0.3384585 0.0000000 0.3573896 0.2685709 32396 417604 0 543360 573677 14NB 49.22243 100.58773 30.48163 18.51350 49.22243 0.3755449 1.6148228 1.1429838 4.9147687 0.5053671 0.2540062 0.0380039 0.2488995 0.5430442 0.0380039 8.853369e-01 1.020517e+00 1.017799e+00 1.173205e+00 0.3688258 0.2567365 0.4412187 0.6186197 0.2567365 0.5284376 0.8359251 0.8962785 1.4178054 PDL1+LY growing restricted 0.1061520 3.3150685 23 NA high low high 0.1061520 0.3688850 0.0639930 0.1816036 0.2793663 121602 1156717 0 1221416 917869 14NC 45.49485 76.76388 44.46686 19.26432 45.49485 0.3752749 1.0231182 1.0084796 2.7494347 0.4206746 0.3935173 0.1186159 0.1239597 0.4955760 0.1186159 1.622246e+00 3.174558e+00 2.111232e+00 4.131449e+00 0.2641293 0.2184936 0.3293816 0.5586074 0.2184936 0.4820975 0.8018944 0.8808992 1.4652392 PDL1+LY stable restricted 0.0541298 0.5595238 6 NA low high high 0.0541298 0.5460494 0.1262934 0.0814721 0.1920553 78416 377308 0 912277 41718 14RD 22.18326 43.27617 31.50346 22.40920 22.18326 0.2966485 0.7041532 0.8753645 2.0778489 0.1216955 0.5000000 0.1927985 0.1681860 0.4799453 0.1927985 1.385101e+00 2.972900e+00 1.919192e+00 4.119241e+00 0.4488902 0.4014737 0.4661559 0.4728975 0.4014737 0.5173754 0.9629616 0.9801002 1.8242052 PDL1+LY stable Infiltrating 0.0103371 -0.1666667 1 high high high low 0.0103371 0.5077127 0.1325255 0.0890900 0.2603347 2692 14614 289 125 7425 15LB 32.69579 70.46882 20.89178 15.83206 32.69579 0.3578762 1.5650073 1.1292024 4.9380478 0.1064567 0.2226772 0.0332283 0.4615748 0.6502362 0.0332283 4.500318e-01 4.824292e-01 5.171865e-01 5.544183e-01 0.2963970 0.2630816 0.3507861 0.3456658 0.2630816 0.4828352 0.8449507 0.9113993 1.5949281 PDL1+LY growing restricted 0.0129612 3.5000000 10 high low low low 0.0129612 0.2153910 0.0414453 0.2667501 0.4634524 3560 117731 1764 316 35776 15NC-D 39.22818 NA 23.06369 22.18943 39.22818 1.7008635 1.7008635 1.7008635 1.7008635 0.1344853 0.1299775 NA 0.3683947 0.3005259 0.1299775 3.528212e-01 3.528212e-01 3.528212e-01 3.528212e-01 0.3209594 NA 0.4006575 0.3074837 0.3209594 0.8010817 0.8010817 0.8010817 0.8010817 PDL1+LY growing restricted 0.0107875 2.6857143 22 high low low low 0.0107875 0.2245321 0.0000000 0.2679737 0.4967068 3481 102702 58017 106919 75799 15ND 15.54429 53.43276 37.28968 17.33598 15.54429 0.1713390 0.4168524 0.7603086 1.8497622 0.0286055 0.6025030 0.0643623 0.1877235 0.4928486 0.0643623 2.390071e+00 3.209524e+00 2.645390e+00 3.552381e+00 0.4673145 0.5587742 0.5287410 0.4233763 0.4673145 0.4297085 0.8838250 0.9435167 1.9406265 PDL1+LY stable Infiltrating 0.0104721 -0.2285714 3 high high high low 0.0104721 0.4017761 0.0548254 0.1042150 0.4287114 3393 58223 25198 42642 37922 15RD 91.07517 NA NA 11.52589 91.07517 Inf NA Inf NA 0.2216630 0.1578969 NA NA 0.8819101 0.1578969 Inf NA Inf NA 0.3102088 NA NA 0.4379530 0.3102088 Inf NA Inf NA PDL1+LY growing restricted 0.0328312 3.5000000 17 NA low low low 0.0328312 0.1499809 0.0000000 0.0000000 0.8171879 30482 234195 0 320467 86337 16LA 31.26867 NA 19.19006 27.79750 31.26867 1.6294199 1.6294199 1.6294199 1.6294199 0.3536187 0.2750368 NA 0.4480477 0.3018298 0.2750368 6.138560e-01 6.138560e-01 6.138560e-01 6.138560e-01 0.1931754 NA 0.2149619 0.3460849 0.1931754 0.8986496 0.8986496 0.8986496 0.8986496 PDL1+LY NA Infiltrating 0.0171528 NA 5 high low high low 0.0171528 0.4248684 0.0000000 0.3742464 0.1837324 4010 198640 0 265301 57984 16LC 71.64542 NA 65.51353 21.56242 71.64542 1.0935973 1.0935973 1.0935973 1.0935973 0.6542978 0.2411490 NA 0.1293491 0.3635133 0.2411490 1.864327e+00 1.864327e+00 1.864327e+00 1.864327e+00 0.0574200 NA 0.0523851 0.1592857 0.0574200 1.0961129 1.0961129 1.0961129 1.0961129 PDL1+LY stable Infiltrating 0.0476926 0.6475410 7 NA low low high 0.0476926 0.4774508 0.0000000 0.2398580 0.2349986 65507 761887 343389 1126173 563894 16LD 38.85862 NA 19.42446 22.61613 38.85862 2.0004993 2.0004993 2.0004993 2.0004993 0.2420006 0.3001624 NA 0.4920473 0.3806520 0.3001624 6.100274e-01 6.100274e-01 6.100274e-01 6.100274e-01 0.4547154 NA 0.4828520 0.6091481 0.4547154 0.9417283 0.9417283 0.9417283 0.9417283 PDL1+LY stable Infiltrating 0.0316168 1.9151786 24 high high high low 0.0316168 0.3541756 0.0000000 0.4114572 0.2027504 25942 176986 7127 54197 480977 16ND 29.84045 40.34701 26.33421 47.06903 29.84045 0.4475090 1.1331438 1.0525821 2.6652576 0.4492659 0.2842939 0.0509409 0.3098188 0.0600419 0.0509409 7.880422e-01 9.176134e-01 9.292468e-01 1.082035e+00 0.4245758 0.4176264 0.4836524 0.3800594 0.4176264 0.4710815 0.8778531 0.9344524 1.7413377 PDL1 stable Infiltrating 0.0753308 1.0745763 25 high high high high 0.0753308 0.3759357 0.1326910 0.3128979 0.1031446 98748 168767 0 15223 73972 16RD 56.31604 NA 16.51236 34.65626 56.31604 3.4105390 3.4105390 3.4105390 3.4105390 0.2959863 0.2354937 NA 0.6114905 0.2825043 0.2354937 3.851142e-01 3.851142e-01 3.851142e-01 3.851142e-01 0.3006802 NA 0.4041937 0.3873276 0.3006802 0.7439011 0.7439011 0.7439011 0.7439011 PDL1 stable Infiltrating 0.0306486 -0.1027397 3 NA low low low 0.0306486 0.2428567 0.0000000 0.5034447 0.2230500 24041 109825 0 0 598394 17NA 61.86642 NA 22.48160 21.57101 61.86642 2.7518686 2.7518686 2.7518686 2.7518686 0.3757123 0.0907525 NA 0.3861962 0.5524496 0.0907525 2.349907e-01 2.349907e-01 2.349907e-01 2.349907e-01 0.2549486 NA 0.2843224 0.5770821 0.2549486 0.8966884 0.8966884 0.8966884 0.8966884 Vehicle growing restricted 0.0472687 6.8000000 28 NA low low high 0.0472687 0.1826840 0.0000000 0.5151503 0.2548971 50862 403704 0 886443 240078 17ND 15.06388 232.02438 111.85371 18.01790 15.06388 0.0438059 0.1346748 0.7185345 2.2090306 0.3246353 0.6664160 0.0003008 0.0029328 0.4851857 0.0003008 2.060930e+02 2.272308e+02 2.061860e+02 2.273333e+02 0.7675142 0.1896339 0.4520953 0.7379279 0.1896339 1.1960095 1.6976822 1.4915140 2.1171378 Vehicle stable Infiltrating 0.1115267 -0.3846154 4 high high high high 0.1115267 0.5278356 0.0017025 0.0111711 0.3477641 157455 495313 238235 782142 324989 17RB 16.70828 88.48121 95.13230 35.71473 16.70828 0.0909970 0.1756320 0.5728853 1.1057178 0.3890573 0.6275561 0.0788001 0.0414694 0.2133747 0.0788001 5.217914e+00 1.513298e+01 5.873110e+00 1.703317e+01 0.3863508 0.2759967 0.2356124 0.4572544 0.2759967 0.7551678 1.6397723 1.2946357 2.8111736 Vehicle growing Infiltrating 0.0411074 8.2142857 35 high high high high 0.0411074 0.6606120 0.1202333 0.0539738 0.1240735 37888 542224 163326 231943 574396 2N 47.77260 87.60001 35.15413 19.20262 47.77260 0.3891730 1.3589470 1.1027947 3.8508309 0.3846518 0.2826408 0.0808522 0.2448721 0.5902966 0.0808522 8.677302e-01 1.154238e+00 1.115953e+00 1.484420e+00 0.3491878 0.2388853 0.3133452 0.4562766 0.2388853 0.6323226 1.1143872 1.0649053 1.8767583 Vehicle growing restricted 0.0301041 11.7000000 47 NA low high low 0.0301041 0.3136859 0.0921483 0.1961374 0.3679243 24008 120410 473 10966 123894 2RA 44.80857 534.05443 132.80795 15.31048 44.80857 0.0671931 0.3373938 0.8680397 4.3586471 0.3464678 0.4371043 0.0009580 0.0452766 0.6856881 0.0009580 9.454054e+00 9.654094e+00 9.474775e+00 9.675253e+00 0.5644597 0.0274858 0.2713765 0.7331093 0.0274858 1.8886952 2.0799877 1.9806633 2.1812706 Vehicle growing restricted 0.0858192 3.5428571 20 NA high high high 0.0858192 0.4304185 0.0016908 0.0391991 0.4428724 114939 444216 0 1252644 619810 2RD 38.61221 73.15221 27.66634 21.62384 38.61221 0.3829872 1.3956389 1.1085701 4.0397263 0.3219793 0.1979009 0.1740124 0.2492193 0.5216188 0.1740124 4.675947e-01 7.940835e-01 8.787464e-01 1.492314e+00 0.5678202 0.4565483 0.5544826 0.5877279 0.4565483 0.5616249 1.0240540 1.0131920 1.8474310 Vehicle growing restricted 0.0742195 20.0000000 20 high high low high 0.0742195 0.2659629 0.1222001 0.1820660 0.3555515 97911 340247 59025 167505 257678 3LA 46.09601 104.05573 65.98973 41.88896 46.09601 0.2710805 0.6985331 0.8830094 2.2753805 0.4243628 0.2865240 0.0929863 0.0477520 0.2387958 0.0929863 2.035863e+00 6.000250e+00 2.696566e+00 7.947526e+00 0.3332982 0.3041986 0.2997380 0.3192354 0.3041986 0.5518761 1.1119649 1.0555690 2.1268463 Vehicle growing restricted 0.0531246 3.0000000 12 NA low high high 0.0531246 0.3953915 0.1475608 0.0995967 0.3043263 72918 530505 441179 772709 466302 3NB 32.31159 NA 62.64161 29.70786 32.31159 0.5158168 0.5158168 0.5158168 0.5158168 0.7233868 0.4377911 NA 0.0275246 0.2218779 0.4377911 1.590545e+01 1.590545e+01 1.590545e+01 1.590545e+01 0.6371794 NA 0.4947252 0.6142263 0.6371794 1.2879462 1.2879462 1.2879462 1.2879462 Vehicle stable Infiltrating 0.2768299 0.0245902 6 high high high high 0.2768299 0.4731210 0.0000000 0.0426761 0.2073729 187348 1078667 0 1452387 421479 3RB 42.63162 NA 29.99254 46.16097 42.63162 1.4214077 1.4214077 1.4214077 1.4214077 0.1779959 0.2910751 NA 0.3592331 0.2055695 0.2910751 8.102681e-01 8.102681e-01 8.102681e-01 8.102681e-01 0.3543015 NA 0.4120032 0.4057485 0.3543015 0.8599486 0.8599486 0.8599486 0.8599486 Vehicle growing restricted 0.0266554 7.6857143 35 NA high high low 0.0266554 0.4366082 0.0000000 0.3803764 0.1563600 22697 179849 0 372829 165181 3RC 32.11938 55.92834 37.32758 27.31100 32.11938 0.3444219 0.8604733 0.9441516 2.3587846 0.2039175 0.2962108 0.0879309 0.2004961 0.3165683 0.0879309 1.026987e+00 1.477389e+00 1.331851e+00 1.915956e+00 0.3811222 0.3788413 0.4385962 0.3814209 0.3788413 0.4662403 0.8689593 0.9296901 1.7327180 Vehicle growing Infiltrating 0.0232139 5.5428571 32 high high high low 0.0232139 0.3885529 0.1160041 0.1513443 0.3208848 12242 303229 0 267100 131130 4LB 30.99117 57.04930 28.06937 16.66993 30.99117 0.3640937 1.1040920 1.0343262 3.1365315 0.2172720 0.2903294 0.1223870 0.2381757 0.5714738 0.1223870 8.052119e-01 1.218972e+00 1.144645e+00 1.732824e+00 0.4265239 0.4040558 0.5049626 0.5312531 0.4040558 0.4692137 0.8446643 0.9137105 1.6448340 Vehicle growing Infiltrating 0.0244474 6.8783784 35 high high high low 0.0244474 0.3498723 0.1053868 0.1496622 0.3706314 13298 62937 203 1332 41466 4NC 15.33106 NA 30.68159 155.44956 15.33106 0.4996826 0.4996826 0.4996826 0.4996826 0.2675045 0.6851436 NA 0.2188061 0.0832585 0.6851436 3.131282e+00 3.131282e+00 3.131282e+00 3.131282e+00 0.0848612 NA 0.0807651 0.0586587 0.0848612 1.0507163 1.0507163 1.0507163 1.0507163 Vehicle growing restricted 0.0081388 3.0000000 15 high low high low 0.0081388 0.7235846 0.0000000 0.1765309 0.0917458 1823 15806 1209 5729 19118 4ND 20.75556 NA 14.30657 39.67271 20.75556 1.4507707 1.4507707 1.4507707 1.4507707 0.0356608 0.4768080 NA 0.7169576 0.1271820 0.4768080 6.650435e-01 6.650435e-01 6.650435e-01 6.650435e-01 0.4041773 NA 0.4329954 0.3409348 0.4041773 0.9334448 0.9334448 0.9334448 0.9334448 Vehicle growing Infiltrating 0.0076245 4.3000000 20 high high high low 0.0076245 0.3776893 0.0000000 0.5044369 0.1102494 1678 64379 8785 16699 68695 4RB 53.31478 62.79761 25.09420 28.66758 53.31478 0.6065954 2.1245853 1.3210831 4.6270602 0.3672294 0.1765476 0.1182837 0.3346431 0.3210703 0.1182837 3.897928e-01 5.275699e-01 6.509470e-01 8.810323e-01 0.2509451 0.2272416 0.3686740 0.3511422 0.2272416 0.4211084 0.6806694 0.8024403 1.2970449 Vehicle growing restricted 0.0280096 7.8108108 40 NA low low low 0.0280096 0.3031804 0.1644440 0.2243090 0.2800569 22907 229322 0 115205 112871 5LA 41.12871 NA 15.84267 35.17202 41.12871 2.5960728 2.5960728 2.5960728 2.5960728 0.3901975 0.2471295 NA 0.5824421 0.1998228 0.2471295 4.242987e-01 4.242987e-01 4.242987e-01 4.242987e-01 0.2946212 NA 0.4144137 0.4699263 0.2946212 0.7109351 0.7109351 0.7109351 0.7109351 Vehicle stable Infiltrating 0.0453952 0.5000000 6 NA low low high 0.0453952 0.3487738 0.0000000 0.4772540 0.1285770 42097 46872 2054 1551 18188 5LB 41.91177 NA NA 15.05867 41.91177 Inf NA Inf NA 0.3379618 0.2807178 NA NA 0.6502489 0.2807178 Inf NA Inf NA 0.3399551 NA NA 0.4551737 0.3399551 Inf NA Inf NA Vehicle growing restricted 0.0257830 4.0000000 4 NA low high low 0.0257830 0.4705880 0.0000000 0.0000000 0.5036290 22618 463070 0 282453 227392 5LC 82.68448 NA 23.56636 61.02936 82.68448 3.5085804 3.5085804 3.5085804 3.5085804 0.5297032 0.1168545 NA 0.4516540 0.1066662 0.1168545 2.587257e-01 2.587257e-01 2.587257e-01 2.587257e-01 0.1430094 NA 0.2947895 0.1798944 0.1430094 0.4851237 0.4851237 0.4851237 0.4851237 Vehicle growing restricted 0.0515055 3.5000000 22 NA low low high 0.0515055 0.2846330 0.0000000 0.4592795 0.2045821 69599 779658 0 905754 446321 5LD 91.41539 174.12079 36.47074 28.68030 91.41539 0.4340886 2.5065407 1.2609063 7.2808006 0.4943721 0.0735101 0.0027369 0.1400046 0.2530645 0.0027369 5.149878e-01 5.250551e-01 5.341615e-01 5.446035e-01 0.1329943 0.1850916 0.3850802 0.1780933 0.1329943 0.2332531 0.3453679 0.5578774 0.8260252 Vehicle stable restricted 0.0348108 0.9299769 15 NA low low high 0.0348108 0.2374921 0.0095635 0.0727253 0.6454083 31061 111306 51141 76195 148799 5RB 39.00602 NA 20.88804 28.66510 39.00602 1.8673849 1.8673849 1.8673849 1.8673849 0.4820815 0.1934315 NA 0.5213079 0.2945054 0.1934315 3.710503e-01 3.710503e-01 3.710503e-01 3.710503e-01 0.3599100 NA 0.4620250 0.6079956 0.3599100 0.7789838 0.7789838 0.7789838 0.7789838 Vehicle growing restricted 0.0596672 10.3571429 35 high high low high 0.0596672 0.3435375 0.0000000 0.4625612 0.1342341 83808 623759 232788 157121 480097 6LDU 111.44785 NA 21.09500 421.71225 111.44785 5.2831411 5.2831411 5.2831411 5.2831411 0.4110641 0.1092889 NA 0.6222455 0.0145634 0.1092889 1.756363e-01 1.756363e-01 1.756363e-01 1.756363e-01 0.2047156 NA 0.4431975 0.1223735 0.2047156 0.4619061 0.4619061 0.4619061 0.4619061 LY growing restricted 0.0556253 2.1974522 32 NA low low high 0.0556253 0.2676477 0.0000000 0.6471339 0.0295931 79608 90700 0 247319 94386 6ND 28.41556 47.86891 30.70313 51.92693 28.41556 0.3616497 0.9254938 0.9708856 2.4845825 0.5991449 0.2756628 0.0305404 0.2129080 0.0798398 0.0305404 1.132325e+00 1.294750e+00 1.257774e+00 1.438195e+00 0.3247328 0.3222135 0.3681602 0.2951982 0.3222135 0.4703725 0.8820423 0.9370959 1.7572416 LY growing NA 0.0815901 30.0000000 40 high low high high 0.0815901 0.4698473 0.1070807 0.2534581 0.0880237 109694 1143016 335772 714690 1340651 6RB 76.37955 NA 15.75336 43.30215 76.37955 4.8484602 4.8484602 4.8484602 4.8484602 0.5258014 0.1446840 NA 0.6712516 0.2653502 0.1446840 2.155435e-01 2.155435e-01 2.155435e-01 2.155435e-01 0.5029649 NA 0.7162637 0.5539084 0.5029649 0.7022064 0.7022064 0.7022064 0.7022064 LY growing Infiltrating 0.1554804 2.8000000 18 NA high low high 0.1554804 0.1771439 0.0000000 0.4830327 0.1843430 178767 437050 895393 763776 390628 6RC 50.21453 66.49674 18.16188 34.81308 50.21453 0.5931413 2.7648305 1.3786105 6.4261656 0.3830618 0.1966022 0.0674351 0.5424852 0.2411991 0.0674351 3.223408e-01 3.624103e-01 4.329047e-01 4.867181e-01 0.4713741 0.4862458 0.6401989 0.5327762 0.4713741 0.4184618 0.7362931 0.8501259 1.4958161 LY growing restricted 0.0788010 8.2142857 40 NA high low high 0.0788010 0.2478878 0.1192287 0.3914362 0.1626462 106074 310952 0 1628191 167163 7NB 80.17580 NA 23.02340 30.71527 80.17580 3.4823613 3.4823613 3.4823613 3.4823613 0.3887826 0.0728176 NA 0.3846771 0.3060872 0.0728176 1.892955e-01 1.892955e-01 1.892955e-01 1.892955e-01 0.1206553 NA 0.2350231 0.2158776 0.1206553 0.5133764 0.5133764 0.5133764 0.5133764 LY growing restricted 0.0206734 2.8878505 31 NA low low low 0.0206734 0.2664928 0.0000000 0.3467436 0.3660903 6350 105525 20305 130687 227056 7NC 89.34399 NA 18.52427 73.48726 89.34399 4.8230787 4.8230787 4.8230787 4.8230787 0.5526142 0.0531233 NA 0.5233799 0.0517752 0.0531233 1.015004e-01 1.015004e-01 1.015004e-01 1.015004e-01 0.1534592 NA 0.2455539 0.2388339 0.1534592 0.6249511 0.6249511 0.6249511 0.6249511 LY growing restricted 0.0479457 3.4444444 40 NA low low high 0.0479457 0.1405509 0.0000000 0.7359455 0.0755580 67342 192699 204061 402092 122548 7RA 33.35958 39.17649 17.01392 25.12197 33.35958 0.5936880 1.9607221 1.2908975 4.2633357 0.2951535 0.2251296 0.1866754 0.4992183 0.1908445 0.1866754 3.282281e-01 4.509642e-01 6.003919e-01 8.248997e-01 0.3395623 0.3529855 0.3949139 0.3654755 0.3395623 0.4540214 0.8598389 0.9259906 1.7536680 LY stable restricted 0.0319310 1.1153846 8 high low low low 0.0319310 0.2323095 0.1931934 0.3383713 0.2041948 27239 324933 0 167028 65796 7RB 34.39737 14.99604 27.35225 37.09141 14.99604 0.8122495 1.2575703 1.1663616 1.8058266 0.0670603 0.1917334 0.6787431 0.1155631 0.1097005 0.1917334 2.413848e-01 1.659124e+00 1.095895e+00 7.532482e+00 0.5446202 0.5816950 0.5614016 0.5250031 0.5446202 0.4764429 0.9701081 0.9853194 2.0062559 LY growing NA 0.0169469 3.9615385 20 high high low low 0.0169469 0.2035659 0.5256130 0.1194875 0.1343866 3993 83111 0 99191 183857 7RD 44.13770 NA 14.33429 38.10895 44.13770 3.0791694 3.0791694 3.0791694 3.0791694 0.3013841 0.2386457 NA 0.6842436 0.1745901 0.2386457 3.487731e-01 3.487731e-01 3.487731e-01 3.487731e-01 0.3192517 NA 0.4240363 0.3851937 0.3192517 0.7528877 0.7528877 0.7528877 0.7528877 LY stable Infiltrating 0.0321690 0.9966997 20 NA low low low 0.0321690 0.2553332 0.0000000 0.5606542 0.1518436 29817 352081 198409 375106 373020 8LD 16.36623 350.73208 292.95079 22.72937 16.36623 0.0254259 0.0558668 0.5703093 1.2531057 0.3456743 0.6508906 0.0008906 0.0035623 0.3871501 0.0008906 1.461714e+02 1.827143e+02 1.463714e+02 1.829643e+02 0.6488849 0.1488781 0.1657167 0.5950220 0.1488781 2.0626057 3.9156287 2.5358434 4.8140179 LY stable Infiltrating 0.0562336 0.2418033 6 high high high high 0.0562336 0.5936154 0.0018530 0.0036344 0.3446635 83679 750075 0 1475968 599152 8RCL 15.12966 NA 36.87314 33.12931 15.12966 0.4103167 0.4103167 0.4103167 0.4103167 0.1051350 0.6186366 NA 0.3669765 0.2673749 0.6186366 1.685766e+00 1.685766e+00 1.685766e+00 1.685766e+00 0.5765175 NA 0.5382005 0.4295692 0.5765175 1.0711947 1.0711947 1.0711947 1.0711947 LY growing restricted 0.0176691 12.0000000 12 high high high low 0.0176691 0.5536036 0.0000000 0.2486459 0.1800814 4456 396164 0 96651 50231 8RCU 50.00101 NA 24.56317 37.07321 50.00101 2.0356094 2.0356094 2.0356094 2.0356094 0.2746806 0.2347423 NA 0.4697355 0.2889853 0.2347423 4.997329e-01 4.997329e-01 4.997329e-01 4.997329e-01 0.3676127 NA 0.3679267 0.4564061 0.3676127 0.9991463 0.9991463 0.9991463 0.9991463 LY growing restricted 0.0287668 5.5142857 27 NA high low low 0.0287668 0.2578575 0.0000000 0.5074018 0.2059739 23710 284804 735372 167172 188017 Firstly, we can compare the different metrics to determine how similar or different they are: They generally associate very well, with knn and IF being the best (they are directly related metrics) par(mfrow=c(2,2)) a1=cor.test(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM) plot(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM, xlab=&quot;knn&quot;, ylab=&quot;MH&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) a1=cor.test(df.Spatial$IF.EpCAM, df.Spatial$MH.EpCAM) plot(df.Spatial$MH.EpCAM, df.Spatial$IF.EpCAM, xlab=&quot;MH&quot;, ylab=&quot;IF&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) a1=cor.test(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM) plot( df.Spatial$IF.EpCAM,df.Spatial$knn.EpCAM, xlab=&quot;IF&quot;, ylab=&quot;knn&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) We can also make comparisons directly against growth rate and tumor size par(mfrow=c(2,3)) cNames=c(&quot;knn.EpCAM&quot;, &quot;IF.EpCAM&quot;, &quot;MH.EpCAM&quot;) for (i in cNames){ t1=cor.test(df.Spatial[, i],df.Spatial$GrowthRate, use=&quot;complete&quot;) plot(df.Spatial[, i]~df.Spatial$GrowthRate, ylab=i, xlab=&quot;Growth Rate&quot;, main=sprintf(&quot;cor:%s p:%s&quot;, round(t1$estimate, 2), round(t1$p.value,2))) t1=cor.test(df.Spatial[ ,i],df.Spatial$TumSize, use=&quot;complete&quot;) plot(df.Spatial[, i]~as.numeric(as.character(df.Spatial$TumSize)), ylab=i, xlab=&quot;Tumor size&quot;, main=sprintf(&quot;cor:%s p:%s&quot;, round(t1$estimate, 2), round(t1$p.value, 2))) } 5.5 Distances to “unclassified cells” We noted that the proportion of Unclassified cells seemed to be different between the treatments. Assess here whether the MH index for this cell type is associated with growth or treatment here: varsearch=&quot;Unclass&quot; #MHmeltsumm=melt(WSIMHsetup, id.vars=c(&quot;gridsize&quot;, &quot;Ntiles&quot;)) MHmelt=melt(WSIMH, measure.vars=&quot;MH.mean&quot;) MHmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmeltsumm$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmeltsumm$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Treatment=Cdata$Treatment[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Growth=Cdata$Tumor.Growth[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmelt$Growth=Cdata$Tumor.growth.status[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmelt$Growth[grep(&quot;no data&quot;, MHmelt$Growth)]=&quot;no data&quot; A1=MHmelt[MHmelt$Var2==varsearch| MHmelt$Var1==varsearch, ] A1$label=A1$L1 A1$label[which(A1$gridsize!=500)]=NA A1$Var1=ifelse(A1$Var1==varsearch, as.character(A1$Var2), as.character(A1$Var1)) A2=MHmelt[(MHmelt$Var2==varsearch|MHmelt$Var1==varsearch) &amp; MHmelt$gridsize==250 &amp; MHmelt$Var1%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;), ] A3=MHmelt[(MHmelt$Var2==varsearch|MHmelt$Var1==varsearch) &amp; MHmelt$gridsize==250, ] A3$CD8frac=WSIvalFracs[ 1, match(A3$L1, colnames(WSIvals))] A3$Var1=ifelse(A3$Var1==varsearch, as.character(A3$Var2), as.character(A3$Var1)) MHTempSumm=A3 #MHmelt[which(MHmelt$gridsize==300 &amp; MHmelt$Var2==varsearch), ] MHreshape=acast(A3[ ,c(&quot;Var1&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~Var1, value.var=&quot;value&quot; ) MHreshape=data.frame(MHreshape) MHreshape$Treatment=A3$Treatment[match(rownames(MHreshape), A3$L1)] MHreshape$Growth=A3$Growth[match(rownames(MHreshape), A3$L1)] MHreshape$Infil=A3$SpatialManual[match(rownames(MHreshape), A3$L1)] colnames(MHreshape)=paste(varsearch, colnames(MHreshape), sep=&quot;.&quot;) write.csv(MHreshape, file=sprintf(&quot;outputs/%s_MH_comparisons_gridsize250.csv&quot;, varsearch)) # pdf(sprintf(&quot;rslt/WSI-analysis/MHplots_spatial_growth_treatment_%s_celltype_%s.pdf&quot;, varsearch, Sys.Date()), height=7, width=12) # p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Growth))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch)) print(p) pvals=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Growth==&quot;growing&quot;],A3$value[A3$Var1==x &amp; A3$Growth==&quot;stable&quot;])$p.value) ann_text=data.frame(Growth=&quot;stable&quot;, y=0.8, label=round(pvals,2), Var1=unique(A3$Var1)) ggplot(A3, aes(x=Growth, y=value, col=Growth))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch))+ geom_text(data=ann_text, mapping = aes(x=Growth , y=0.75, label=label)) pval2=matrix(NA, nrow=3, ncol=4) colnames(pval2)=unique(A3$Var1) rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Treatment==TreatV[i]], A3$value[A3$Var1==x &amp; A3$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;Var1&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Treatment))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch)) print(p) ggplot(A3, aes(x=Treatment, y=value, col=Treatment))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch))+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label)) We see here that epcam-unclass mixing could also be associated with tumor growth - this could be attributed to a hight number of other immune related cells in this fraction. Note that we can change the entry cell type to obtain the same plots for other reference cells of interest. "],["expression-data.html", "Chapter 6 Expression data 6.1 Running alignment 6.2 RNA Initial QC 6.3 Normalisation 6.4 Processing files for external software", " Chapter 6 Expression data This file looks at loading and pre-processing data for: differential gene expression analysis uploading into CIBERSORT/TIMER 6.1 Running alignment Samples were mapped in star using the following parameters. Note that the first two batches of samples run had shorter read lengths (~75 bp) whereas batch 3 had lengths of ~150bp ## Not run here STAR \\ --readFilesCommand zcat \\ --genomeDir /n/scratch2/at268/rn6_v2 \\ --sjdbGTFfile /n/scratch2/at268/rn6_v2/rn6.refGene.gtf \\ --runThreadN 10 \\ --runMode alignReads \\ --genomeLoad NoSharedMemory\\ --outSAMattributes NH HI AS nM NM\\ --outSAMstrandField intronMotif\\ --outFilterMultimapNmax 20\\ --alignSJoverhangMin 8\\ --readFilesIn $1 $2 \\ --alignSJDBoverhangMin 1\\ --outFilterMismatchNmax 999\\ --outFilterMismatchNoverLmax 0.1\\ --alignIntronMin 20\\ --alignIntronMax 1000000\\ --alignMatesGapMax 1000000\\ --outFilterType BySJout\\ --outFilterScoreMinOverLread 0.33 \\ --outFilterMatchNminOverLread 0.33 \\ --limitSjdbInsertNsj 1200000 \\ --outFilterIntronMotifs None \\ --alignSoftClipAtReferenceEnds Yes\\ --outSAMattrRGline ID:$4 SM:$4 \\ --chimSegmentMin 15 \\ --chimJunctionOverhangMin 15\\ --limitBAMsortRAM 0\\ --outSAMtype BAM SortedByCoordinate\\ --outSAMunmapped Within \\ --quantMode GeneCounts transcriptomeSAM \\ --quantTranscriptomeBan IndelSoftclipSingleend \\ --outFileNamePrefix $3 \\ --twopassMode Basic # Upload infoTable infoTable=read.csv(&quot;../metadata/AllRNA_samples_jan.csv&quot;) 6.2 RNA Initial QC BatchNo=&quot;april&quot; rsemFiles=dir(&quot;../data/RNA_expression/rsem/&quot;, &quot;.results&quot;) allrsem=matrix(NA, nrow=17455, ncol=length(rsemFiles)) #31038 allTPM=matrix(NA, nrow=17455, ncol=length(rsemFiles)) allFPKM=matrix(NA, nrow=17455, ncol=length(rsemFiles)) for (i in 1:length(rsemFiles)){ a1=read.delim(file.path(&quot;../data/RNA_expression/rsem/&quot;, rsemFiles[i])) allrsem[ ,i]=a1$expected_count allTPM[ ,i]=a1$TPM allFPKM[ ,i]=a1$FPKM } cNames=unlist(strsplit(rsemFiles, &quot;.genes.results&quot;)) cNames=unlist(strsplit(cNames, &quot;_0.33_v2&quot;)) sAnnot=match(cNames, infoTable$starSampleName) colnames(allrsem)=paste(infoTable$Rat_ID[sAnnot],infoTable$Location[sAnnot], infoTable$Fraction[sAnnot], sep=&quot;_&quot;) rownames(allrsem)=a1$gene_id colnames(allTPM)=colnames(allrsem) rownames(allTPM)=rownames(allrsem) colnames(allFPKM)=colnames(allrsem) rownames(allFPKM)=rownames(allrsem) starFiles=dir(&quot;../data/RNA_expression/star_april/&quot;, &quot;.tab&quot;) allstar=matrix(NA, nrow=17455, ncol=length(starFiles)) allmapp=matrix(NA, nrow=4, ncol=length(starFiles)) for (i in 1:length(starFiles)){ a1=read.delim(file.path(&quot;../data/RNA_expression/star_april/&quot;, starFiles[i]), header=F) allstar[ ,i]=a1[ -c(1:4),2] allmapp[ ,i]=a1[ c(1:4),2] } cNames=unlist(strsplit(starFiles, &quot;ReadsPerGene.out.tab&quot;)) cNames=unlist(strsplit(cNames, &quot;_0.33_v2&quot;)) sAnnot=match(cNames, infoTable$starSampleName) colnames(allstar)=paste(infoTable$Rat_ID[sAnnot], infoTable$Location[sAnnot],infoTable$Fraction[sAnnot], sep=&quot;_&quot;) rownames(allstar)=a1[-c(1:4) ,1] colnames(allmapp)=colnames(allstar) allmapp=rbind(allmapp, colSums(allstar)) rownames(allmapp)=c(as.character(a1[c(1:4), 1]), &quot;UniqueReads&quot;) ## in all cases, remove the files id=match(cNames, infoTable$starSampleName) infoTable=infoTable[ na.omit(id), ] id2=which(is.na(id)) if (length(id2)&gt;0){ allmapp=allmapp[ , -grep(&quot;NA_NA&quot;, colnames(allmapp))] allTPM=allTPM[ , -id2] allFPKM=allFPKM[ , -id2] allrsem=allrsem[ , -id2] allstar=allstar[, -id2] } Default output from R showing the number of unique reads compared to multimapped, unmapped etc. This is shown for each batch. Note that batch 3 has differences (high percentage of unmapped) compared to the other batches, possibly due to DNA contamination. Below we check for three measures: mapped million reads (ideally, 10M+ reads) Gene Sparsity: This is a measurement of the number of genes which have non-zero values. Ideally, would be greater than 10K, but values which are too high may also suggest contamination from DNA (unexpressed genes are also counted) Varability: standard deviation of the transcriptomic counts. If this value is too low, would suggest that high DNA contamination, non-representative transcriptome. # number of mapped reads UnMappedNorm=t(allmapp)/colSums(allmapp) mUnMap=melt(UnMappedNorm) mUnMap$Batch=infoTable$Batch[match(mUnMap$Var1, infoTable$SampleID)] # how many genes represented Sparsity=colSums(sign(allstar)) # check how skewed the data is cSDs=colSds(allstar) TVals=data.frame(MappedReadsM=allmapp[5, ]/1E6, GeneSparsityK=Sparsity/1E3,Batch=infoTable$Batch, GeneVariabilityCounts=cSDs, Type=as.character(infoTable$Fraction), names=colnames(allstar)) mTV=melt(TVals, measure.vars = c(&quot;MappedReadsM&quot;, &quot;GeneSparsityK&quot;, &quot;GeneVariabilityCounts&quot;)) #pdf(sprintf(&quot;../rslt/DESeq/GE_preprocessing_%s_%s.pdf&quot;, BatchNo,Sys.Date()), height=5, width=8) ggplot(mUnMap, aes(x=Var1, y=value, fill=Var2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, space=&quot;free&quot;, scale=&quot;free&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ylab(&quot;proportion of reads&quot;)+ggtitle(&quot;mapping summary&quot;) ggplot(mTV, aes(x=names, y=value,fill=Type))+geom_bar(stat=&quot;identity&quot;)+ facet_grid(variable~Batch, space=&quot;free_x&quot;, scale=&quot;free&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;#Mapped Reads, #Unique Gebes, #Variability&quot;) par(mfrow=c(2,2)) plot(density(TVals$MappedReadsM), main=&quot;mapped reads&quot;) x1=mean(TVals$MappedReadsM) sdv=sd(TVals$MappedReadsM) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.07, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) plot(density(TVals$GeneSparsityK), main=&quot;gene sparsity&quot;) x1=mean(TVals$GeneSparsityK) sdv=sd(TVals$GeneSparsityK) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.07, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) plot(density(TVals$GeneVariabilityCounts), main=&quot;Gene Variability&quot;) x1=mean(TVals$GeneVariabilityCounts) sdv=sd(TVals$GeneVariabilityCounts) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.00015, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) #dev.off() Samples to remove from analysis: The thresholds indicated below are based on the above density plots, and removes cases which are &lt;1.5 SD of the mean low total number of mapped reads (under 1.5M) sparsity: less than 8K genes variability : threshold under 500 rmSamples=which(TVals$MappedReadsM&lt;1.5 | TVals$GeneSparsityK&lt;8 | TVals$GeneVariabilityCounts&lt;500) allstarFinal=allstar[ ,-rmSamples] allrsemFinal=allrsem[ ,-rmSamples] allTPMFinal=allTPM[ ,-rmSamples] allFPKMFinal=allFPKM[ ,-rmSamples] infoTableFinal=infoTable[-rmSamples, ] The omitted samples are: kable(TVals[rmSamples, ]) MappedReadsM GeneSparsityK Batch GeneVariabilityCounts Type names 6R_C_CD45 2.287110 5.585 2 1063.38925 CD45 6R_C_CD45 10L_B_DN 0.864838 3.308 2 559.30659 DN 10L_B_DN NMU1_LL_Ep 1.032440 16.708 3 69.82645 Ep NMU1_LL_Ep NMU5_LA_Ep 0.500429 15.707 3 35.56084 Ep NMU5_LA_Ep Control1__Ep 8.224593 5.800 1 3164.00515 Ep Control1__Ep NMU13_RAU_Ep 3.049733 7.242 1 1069.99912 Ep NMU13_RAU_Ep We are left with 110 samples. There are 47, 32, 31 samples in the CD45, Ep, DN fractions. There are 20, 49, 41 samples from batches 1, 2 and 3 respectively. 6.3 Normalisation Run through DESEq and normalise the library. Using all samples, we run the model: expression ~ Celltype + factor (Batch) and keep the genes which have a total count of at least half the number of samples. ie. \\[ sum(gene_i) &gt; N_{samples}/2 \\] # remove rows where counts are low rownames(infoTableFinal)=infoTableFinal$SampleID infoTableFinal$Batch=factor(infoTableFinal$Batch) dds=DESeqDataSetFromMatrix(allstarFinal, infoTableFinal, design=~Fraction+factor(Batch)) ## change class keep=rowSums(counts(dds))&gt;(ncol(dds)/2) dds=dds[keep, ] dds=DESeq(dds) vsd &lt;- varianceStabilizingTransformation(dds) normalizedTableVSD &lt;- assay(vsd) infoTableFinal$TumorIDnew=Cdata$NewID[match(infoTableFinal$TumorID, Cdata$TumorID)] save(dds, vsd,allstarFinal, allrsemFinal,allTPMFinal, normalizedTableVSD,infoTableFinal, file=sprintf(&quot;../dds_normalised_data_newstar_RNAseq%s_%s.RData&quot;, BatchNo, Sys.Date())) 6.3.1 preliminary visualisation (to remove outliers) Below are PCA plots based on: Batch CellType vsd2 &lt;- vst(dds) #pdf(sprintf(&quot;../rslt/DESeq/PCA_preliminary_%s_%s.pdf&quot;,BatchNo, Sys.Date() ), width=8, height=6) plotPCA(vsd2, &quot;Batch&quot;)+ggtitle(&quot;Batch&quot;) plotPCA(vsd2, &quot;Fraction&quot;)+ggtitle(&quot;Fraction&quot;) plotPCA(vsd2, c(&quot;Fraction&quot;))+geom_label(aes(label = name)) Batches in general separate out well, however, some samples appear to be outliers in comparison to the main group. We look in closer detail the CD45, DN and EpCAM populations. In the CD45 population, narrow down to only immune related genes to see if there is a difference. plotPCA(vsd2[rownames(assay(vsd2))%in%RatAllImm , grep(&quot;CD45&quot;, colnames(vsd2))], c(&quot;Growth&quot;))+ggtitle(&quot;CD45 only Growth&quot;) plotPCA(vsd2[ , grep(&quot;Ep&quot;, colnames(vsd2))], &quot;Growth&quot;)+geom_label(aes(label = name))+ggtitle(&quot;Ep only Growth&quot;) plotPCA(vsd2[ , grep(&quot;DN&quot;, colnames(vsd2))], &quot;Growth&quot;)+geom_label(aes(label = name))+ggtitle(&quot;DN only Growth&quot;) Based on the above plots, we remove the following outliers and re-run the normalisation: 2R_D_DN 4L_B_CD45 rmThese=c(&quot;2R_D_DN&quot;, &quot;4L_B_CD45&quot;) ## Note based on the above plots, sample &quot;2R_D_DN&quot; is misclassified as a cd45 sample. Need to remove this sample and re-run the preprocessing: allstarFinal=allstarFinal[ ,-match(rmThese, colnames(allstarFinal))] infoTableFinal=infoTableFinal[-match(rmThese, rownames(infoTableFinal)), ] allrsemFinal=allrsemFinal[ ,-match(rmThese, colnames(allrsemFinal))] allTPMFinal=allTPMFinal[ ,-match(rmThese, colnames(allTPMFinal))] dds=DESeqDataSetFromMatrix(allstarFinal, infoTableFinal, design=~Fraction+factor(Batch)) ## change class keep=rowSums(counts(dds))&gt;(ncol(dds)/2) dds=dds[keep, ] dds=DESeq(dds) vsd &lt;- varianceStabilizingTransformation(dds) normalizedTableVSD &lt;- assay(vsd) infoTableFinal$MHEpCAM=df.Spatial$MH.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$IFEpCAM=df.Spatial$IF.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$knnEpCAM=df.Spatial$knn.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$CD8Frac=df.Spatial$CD8frac[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID),rownames(df.Spatial))] # infoTableFinal$Treatment=RNADNAsamples$Treatment[match(infoTableFinal$FqFile, RNADNAsamples$FqFile.CD45)] # idx=match(infoTableFinal$FqFile, RNADNAsamples$FqFile.Ep) # infoTableFinal$Treatment[-which(is.na(idx))]=RNADNAsamples$Treatment[na.omit(idx)] # idx=match(infoTableFinal$FqFile, RNADNAsamples$FqFile.DN) # infoTableFinal$Treatment[-which(is.na(idx))]=RNADNAsamples$Treatment[na.omit(idx)] save(dds, vsd,allstarFinal, allrsemFinal,allTPMFinal, normalizedTableVSD,infoTableFinal, file=sprintf(&quot;outputs/dds_normalised_data_newstar_RNAseq_%s_rm_outliers.RData&quot;, Sys.Date())) 6.4 Processing files for external software We also process these files for external software (TIMER) - which can also run cibersort Rnames=rownames(allrsemFinal) mNames1=SymHum2Rat$HGNC.symbol[match(Rnames, SymHum2Rat$RGD.symbol)] mNames2=Rat2Hum$HGNC.symbol[match(Rnames, Rat2Hum$RGD.symbol)] HumNameFinal=ifelse(is.na(mNames1), mNames2, mNames1) x1=which(is.na(HumNameFinal)==T) ## save rsem for xcell allrsemSave=allrsemFinal[-x1, ] rownames(allrsemSave)=na.omit(HumNameFinal) write.table(allrsemSave, sep=&quot;\\t&quot;, file=sprintf(&quot;../output4external/RSEM_for_xcell%s__%s.txt&quot;,BatchNo, Sys.Date()), col.names = NA) ## save row names for cibersort alltpmSave=allTPMFinal[-x1, ] rownames(alltpmSave)=na.omit(HumNameFinal) write.table(alltpmSave, sep=&quot;\\t&quot;, file=sprintf(&quot;../output4external/TPM_for_cibersort%s_%s.txt&quot;,BatchNo, Sys.Date()), col.names = NA) Also split up the immunotherapy and the characterisation cohorts. Save the mouse names for TIMER cistrome: check that this is actually required for TIMER # Write files for CIBERSORT using rgd. Use cohort specific values allTPMCD45=allTPMFinal[ , which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] write.csv(allTPMCD45, file=sprintf(&quot;../output4external/CD45_TPM_rgd_names_prog_%s.csv&quot;, Sys.Date())) allTPMCD45=allTPMFinal[ , which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] write.csv(allTPMCD45, file=sprintf(&quot;../output4external/CD45_TPM_rgd_names_char_%s.csv&quot;, Sys.Date())) "],["rna-data-preliminary-plots.html", "Chapter 7 RNA data: preliminary plots 7.1 PCA plots 7.2 Expression patterns by cell type", " Chapter 7 RNA data: preliminary plots Prior to doing any comparative analysis, we will look at the following plots to get an overview of the data. 7.1 PCA plots We can check the new PCA plots, and overlay parameters of interest including treatment, growth, tumor size, CD8 fraction, spatial distribution. vsd2 &lt;- vst(dds) vsd2$MHEpCAMcut=cut(infoTableFinal$MHEpCAM, c(-1, median(infoTableFinal$MHEpCAM, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) vsd2$knnEpCAMcut=cut(infoTableFinal$knnEpCAM, c(-1, median(infoTableFinal$knnEpCAM, na.rm = T), 1E7), c(&quot;low&quot;, &quot;high&quot;)) vsd2$IFEpCAMcut=cut(infoTableFinal$IFEpCAM, c(-1, median(infoTableFinal$IFEpCAM, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) vsd2$CD8FracCut=cut(infoTableFinal$CD8Frac, c(-1, median(infoTableFinal$CD8Frac, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) plotPCA(vsd2, c(&quot;Treatment&quot;))+ggtitle(&quot;Treatment&quot;) plotPCA(vsd2, c(&quot;Growth&quot;))+ggtitle(&quot;Growth&quot;) plotPCA(vsd2, &quot;Batch&quot;)+ggtitle(&quot;Batch&quot;) vsdLimmaCor=(vsd2) assay(vsdLimmaCor)=limma::removeBatchEffect(assay(vsdLimmaCor),vsdLimmaCor$Batch) In addition, we can look at the CD45 population and the distributions based on CD8 content and spatial infiltration par(mfrow=c(2,2)) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;CD8FracCut&quot;)+ggtitle(&quot;CD8 content&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;IFEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM Infiltrating Fraction&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;knnEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM nearest neighbor distances&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;MHEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM MH index&quot;) Note that the vsd values will need to be normalised by batch for visualisation. 7.2 Expression patterns by cell type Below, we check whether the different fractions are expressing expected markers The cell types are: Red: Cd45 Epcam: green DN:blue Xa=c(brewer.pal(3, &quot;Reds&quot;), brewer.pal(3, &quot;Blues&quot;), brewer.pal(3, &quot;Greens&quot;)) a2=plotPCA(vsd[, which(vsd$Cohort%in%&quot;Progression&quot;)], c(&quot;Growth&quot;, &quot;Fraction&quot;))+scale_color_manual(values=Xa[c( 3,9, 6,1, 7, 4, 2,8, 5)])+theme_bw() a2 Figure 7.1: Ext3d PCA plot SaveOutput=a2$data SaveOutput$sample=infoTableFinal$TumorIDnew[match(SaveOutput$name, rownames(infoTableFinal))] write.csv(SaveOutput, file=&quot;nature-tables/Ext3d.csv&quot;) We can also visualise PCA plots specifically for CD45, DN or Ep samples plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;CD45&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;CD45 frac by growth&quot;) plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;DN&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;DN frac by growth&quot;) plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;Ep&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Ep frac by growth&quot;) Reference Genes: purple: immune blue: epithelial green: stroma orange: myoepithelial red: endothelial Below, we see that the CD45 cells separate from the Ep/DN populations have high expression of immune related genes including CD3, CD4, IFNG. However, the DN/Ep fractions are more intermixed. The DN fraction has expression of keratins, as well as fibroblast markers (Acta1), and myeoepithelial markers (Tp63) ## why doesnt this work??? Agenes=unlist(GeneListRat) # Use the original desseq data,a nd then the limma data x1=match(Agenes, rownames(assay(vsd))) RatExpr2=assay(vsd)[na.omit(x1), which(vsd$Cohort==&quot;Progression&quot;)] RowSideCol=names(Agenes)[which(!is.na(x1))] RowSideCol=substr(RowSideCol, 1, 3) ColSideCol=sapply(strsplit(colnames(RatExpr2), &quot;_&quot;), function(x) x[length(x)]) colnames(RatExpr2)=paste(infoTableFinal$TumorIDnew[match(colnames(RatExpr2), rownames(infoTableFinal))], infoTableFinal$Fraction[match(colnames(RatExpr2), rownames(infoTableFinal))]) #pdf(&quot;~/Desktop/FiguS3_celltype_markers_RNA.pdf&quot;, height = 10, width=14) a1=heatmap.2(RatExpr2, col=RdBu[11:1], trace=&quot;none&quot;, RowSideColors = brewer.pal(6, &quot;Set1&quot;)[factor(RowSideCol)], scale=&quot;row&quot;, ColSideColors =brewer.pal(3, &quot;Set1&quot;)[factor(ColSideCol)] ) Figure 7.2: Ext3e We can also remove the CD45 fraction to see if there is a good separation between the CD45 and EPcam samples a1=heatmap.2(RatExpr2[, -grep(&quot;CD45&quot;, colnames(RatExpr2))], col=RdBu[11:1], trace=&quot;none&quot;, RowSideColors = brewer.pal(6, &quot;Set1&quot;)[factor(RowSideCol)], scale=&quot;row&quot;, ColSideColors =brewer.pal(3, &quot;Set1&quot;)[factor(ColSideCol[-grep(&quot;CD45&quot;, colnames(RatExpr2))])] ) write.csv(RatExpr2, file=&quot;nature-tables/Ext3e.csv&quot;) #dev.off() "],["deseq-analysis-progressionimmunotherapy-cohort.html", "Chapter 8 DESeq analysis: Progression/Immunotherapy cohort 8.1 DN vs Ep 8.2 No. samples in comparisons 8.3 Set-up cell-type specific the comparisons 8.4 PCA plots 8.5 Pearson correlation plots of samples", " Chapter 8 DESeq analysis: Progression/Immunotherapy cohort This document sets up DESeq runs to compare: DN vs Ep samples growing vs stable samples (all 3 fractions) treatments (all 3 fractions) spatial patterns (cd8 or epithelial fractions) The outputs of these analyses will be used for Gene Set Enrichment Analysis, using MSigDB databases (c2, c5, hallmark), alongside pathways from Metacore (Process Networks, Pathway Maps) 8.1 DN vs Ep In section 6.2, we have noticed that some DN samples had expression of epithelial markers. Here, we perform a differential gene expression analysis to find genes which are different between these two fractions. Below is a summary of the number of differential genes, using p value cut off of 0.05 and log2 fold change of 1.5 and base expression of 100+. epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction!=&quot;CD45&quot;)]) DNEpdds=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~Fraction) ## DNEpdds=DESeq(DNEpdds) resDNep=results(DNEpdds, contrast=c(&quot;Fraction&quot;, &quot;DN&quot;, &quot;Ep&quot;)) summary(resDNep) ## ## out of 16929 with nonzero total read count ## adjusted p-value &lt; 0.1 ## LFC &gt; 0 (up) : 3331, 20% ## LFC &lt; 0 (down) : 1972, 12% ## outliers [1] : 0, 0% ## low counts [2] : 1970, 12% ## (mean count &lt; 1) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results vsdDNep=vst(DNEpdds) print(&#39;significant differential genes&#39;) ## [1] &quot;significant differential genes&quot; resDNeprslt2=resDNep[which(resDNep$padj&lt;0.05 &amp; abs(resDNep$log2FoldChange)&gt;1.5 &amp; resDNep$baseMean&gt;100), ] resDNeprslt2$CellMarker=ifelse(rownames(resDNeprslt2)%in%unlist(GeneListRat), 1, 0) resDNeprslt2=resDNeprslt2[order(resDNeprslt2$CellMarker, abs(resDNeprslt2$log2FoldChange), decreasing = T), ] scroll_box(kable(resDNeprslt2, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) baseMean log2FoldChange lfcSE stat pvalue padj CellMarker Col1a1 23618.9407 5.726318 0.5660158 10.116888 0.0000000 0.0000000 1 Fap 241.1687 5.426892 0.6603145 8.218648 0.0000000 0.0000000 1 Cdh5 133.9952 3.201588 0.7538778 4.246826 0.0000217 0.0002014 1 Vim 6100.9927 2.604579 0.3873958 6.723301 0.0000000 0.0000000 1 Cdh3 122.5280 2.514449 0.4108614 6.119945 0.0000000 0.0000000 1 Mme 389.1301 2.410540 0.4538102 5.311780 0.0000001 0.0000019 1 Acta2 810.5272 2.191638 0.3519858 6.226496 0.0000000 0.0000000 1 Acta1 220.4697 2.002938 0.5823944 3.439143 0.0005836 0.0034350 1 Pgr 1053.8770 -1.889558 0.3392201 -5.570299 0.0000000 0.0000005 1 Esr1 224.0700 -1.774220 0.3259256 -5.443637 0.0000001 0.0000010 1 Krt5 2428.7167 1.742587 0.2955009 5.897062 0.0000000 0.0000001 1 Tp63 276.4365 1.707863 0.3816019 4.475511 0.0000076 0.0000812 1 Krt14 1688.9052 1.703389 0.4155395 4.099223 0.0000415 0.0003557 1 Cnn1 1094.0549 1.591336 0.3750816 4.242639 0.0000221 0.0002043 1 Rn5-8s 646.3708 6.967022 1.2514676 5.567082 0.0000000 0.0000005 0 Tfpi2 1013.8400 6.782261 0.9290393 7.300295 0.0000000 0.0000000 0 Tnfaip6 2147.3764 6.328991 0.7291151 8.680373 0.0000000 0.0000000 0 Col3a1 75069.4773 6.242689 0.6375117 9.792275 0.0000000 0.0000000 0 Has1 1423.6626 5.849079 1.0061278 5.813455 0.0000000 0.0000001 0 Eln 6658.7061 5.822897 0.6230979 9.345075 0.0000000 0.0000000 0 Thbs2 2143.5066 5.770938 0.6290293 9.174355 0.0000000 0.0000000 0 Tnxa-ps1 126.1034 5.746321 0.6823115 8.421844 0.0000000 0.0000000 0 Rn45s 364.7818 5.724485 0.7622190 7.510289 0.0000000 0.0000000 0 Gfpt2 2059.5531 5.561419 0.5768219 9.641483 0.0000000 0.0000000 0 Col15a1 1337.4401 5.560307 0.6245844 8.902411 0.0000000 0.0000000 0 Mmp2 11105.2944 5.558362 0.5777826 9.620161 0.0000000 0.0000000 0 Kcnj8 245.0934 5.526459 0.7514916 7.353986 0.0000000 0.0000000 0 Efemp1 1498.7202 5.486844 0.6857745 8.000946 0.0000000 0.0000000 0 Twist2 185.4591 5.457104 0.6350370 8.593365 0.0000000 0.0000000 0 Mrgprg 159.5342 5.436056 1.2819551 4.240442 0.0000223 0.0002058 0 Cpxm1 2177.4236 5.435461 0.6265264 8.675549 0.0000000 0.0000000 0 Scara5 368.0080 5.432864 0.7035192 7.722410 0.0000000 0.0000000 0 Fbn1 1624.3106 5.424459 0.5290464 10.253277 0.0000000 0.0000000 0 Postn 22172.0888 5.381870 0.6120928 8.792572 0.0000000 0.0000000 0 Col5a3 1744.1883 5.374928 0.5967252 9.007376 0.0000000 0.0000000 0 RGD1566401 224.9537 5.362108 0.7870628 6.812808 0.0000000 0.0000000 0 Mmp23 215.7114 5.343524 0.5725280 9.333211 0.0000000 0.0000000 0 Cpz 439.0632 5.333774 0.8431887 6.325718 0.0000000 0.0000000 0 Col6a2 8582.6377 5.320969 0.5861963 9.077111 0.0000000 0.0000000 0 Lum 4358.4960 5.314668 0.6197195 8.575925 0.0000000 0.0000000 0 Lrrc15 234.7818 5.289271 0.6493885 8.145003 0.0000000 0.0000000 0 Gldn 585.5607 5.282934 0.7762567 6.805654 0.0000000 0.0000000 0 Pdgfra 896.6102 5.253834 0.5824643 9.020009 0.0000000 0.0000000 0 Fndc1 1047.4883 5.232145 0.5665954 9.234359 0.0000000 0.0000000 0 Olfml1 145.7458 5.219681 0.7271926 7.177852 0.0000000 0.0000000 0 Islr 522.7970 5.191028 0.5933090 8.749283 0.0000000 0.0000000 0 Col13a1 285.3767 5.190392 0.6850584 7.576568 0.0000000 0.0000000 0 Dcn 16280.1541 5.180590 0.5667647 9.140637 0.0000000 0.0000000 0 Tnc 1589.6204 5.174259 0.5849373 8.845835 0.0000000 0.0000000 0 Aoc3 546.2487 5.149838 0.7125029 7.227813 0.0000000 0.0000000 0 Tspan11 236.9381 5.139212 0.6134784 8.377170 0.0000000 0.0000000 0 Dpt 920.0959 5.134567 0.6383375 8.043655 0.0000000 0.0000000 0 Itm2a 1847.8700 5.131726 0.5466554 9.387498 0.0000000 0.0000000 0 Srpx2 190.6172 5.121515 0.5911400 8.663793 0.0000000 0.0000000 0 Pdgfrb 1515.3709 5.111582 0.6276893 8.143491 0.0000000 0.0000000 0 Loxl1 3186.3173 5.109936 0.5703463 8.959356 0.0000000 0.0000000 0 Igfbp6 3823.5545 5.100391 0.5817097 8.767932 0.0000000 0.0000000 0 Osr2 134.2850 5.083115 0.7968460 6.379043 0.0000000 0.0000000 0 Mfap2 977.3437 5.078349 0.5847472 8.684692 0.0000000 0.0000000 0 Bgn 2180.8025 5.077573 0.4782880 10.616142 0.0000000 0.0000000 0 Aebp1 3570.1295 5.055794 0.4405986 11.474830 0.0000000 0.0000000 0 Col5a1 3249.9628 5.029484 0.5155584 9.755412 0.0000000 0.0000000 0 Apod 753.8268 5.017742 0.5400101 9.291940 0.0000000 0.0000000 0 Ptprn 566.0434 4.984419 0.6890841 7.233398 0.0000000 0.0000000 0 Mrgprf 166.8197 4.959040 0.7187057 6.899959 0.0000000 0.0000000 0 Lrrc17 152.7924 4.955037 0.7158374 6.922015 0.0000000 0.0000000 0 Sparcl1 2405.8672 4.949126 0.6393911 7.740373 0.0000000 0.0000000 0 Lox 521.9770 4.940725 0.6074187 8.133969 0.0000000 0.0000000 0 Ccn4 255.2067 4.921607 0.6031455 8.159900 0.0000000 0.0000000 0 Col5a2 3406.0131 4.918194 0.4220019 11.654436 0.0000000 0.0000000 0 Galnt16 337.5513 4.916124 0.6941247 7.082479 0.0000000 0.0000000 0 Thy1 2137.2166 4.864043 0.5090971 9.554253 0.0000000 0.0000000 0 Tmeff2 212.6393 4.855749 0.6793003 7.148163 0.0000000 0.0000000 0 Cdh11 520.7112 4.842726 0.6284696 7.705584 0.0000000 0.0000000 0 Fn1 6406.4356 4.828989 0.5559227 8.686440 0.0000000 0.0000000 0 Cilp 1100.9927 4.812298 0.8034801 5.989319 0.0000000 0.0000001 0 C1qtnf5 257.0158 4.808971 0.6329612 7.597576 0.0000000 0.0000000 0 Col26a1 279.7418 4.804680 0.7784168 6.172374 0.0000000 0.0000000 0 Ccdc80 2836.1193 4.798665 0.4767511 10.065347 0.0000000 0.0000000 0 Dpep1 162.5931 4.787958 0.6994409 6.845408 0.0000000 0.0000000 0 Loxl2 837.8112 4.783938 0.4896831 9.769458 0.0000000 0.0000000 0 Mfap5 899.1383 4.781925 0.5444327 8.783318 0.0000000 0.0000000 0 Cpe 2833.1014 4.773485 0.4766535 10.014581 0.0000000 0.0000000 0 Sparc 26655.3232 4.772961 0.4568224 10.448176 0.0000000 0.0000000 0 Ctsk 1503.8227 4.752393 0.5590685 8.500555 0.0000000 0.0000000 0 Fxyd1 258.1318 4.750907 0.5703196 8.330254 0.0000000 0.0000000 0 Adcyap1r1 235.0748 4.749064 0.6054146 7.844317 0.0000000 0.0000000 0 Procr 405.0923 4.729111 0.5295553 8.930345 0.0000000 0.0000000 0 Pla1a 468.2159 4.720765 0.6021896 7.839333 0.0000000 0.0000000 0 LOC691995 275.7236 4.705164 0.6241946 7.537976 0.0000000 0.0000000 0 Itgbl1 381.7100 4.701729 0.7123222 6.600565 0.0000000 0.0000000 0 Fbln1 1048.6915 4.700320 0.4606437 10.203808 0.0000000 0.0000000 0 Adam33 387.9650 4.682978 0.6033146 7.762083 0.0000000 0.0000000 0 Prss23 1083.7409 4.680821 0.4782715 9.786955 0.0000000 0.0000000 0 PCOLCE2 212.8162 4.662670 0.5954232 7.830850 0.0000000 0.0000000 0 Vtn 108.8240 4.660007 0.7951942 5.860213 0.0000000 0.0000001 0 Sfrp4 594.7387 4.646489 0.6215171 7.476044 0.0000000 0.0000000 0 Srpx 1395.6753 4.645402 0.4779051 9.720345 0.0000000 0.0000000 0 Fbln5 479.1781 4.644147 0.4583875 10.131486 0.0000000 0.0000000 0 Gpr153 226.0421 4.634029 0.5336494 8.683658 0.0000000 0.0000000 0 Pdgfrl 287.1724 4.614351 0.5271015 8.754197 0.0000000 0.0000000 0 Gpc3 420.6613 4.609944 0.5667416 8.134120 0.0000000 0.0000000 0 Frzb 519.3137 4.562938 0.6326193 7.212770 0.0000000 0.0000000 0 Cpxm2 303.5400 4.562091 0.7511497 6.073479 0.0000000 0.0000000 0 Itga11 230.6776 4.551065 0.7266357 6.263201 0.0000000 0.0000000 0 Tmem119 598.0487 4.543089 0.6103469 7.443453 0.0000000 0.0000000 0 Grem2 104.6191 4.525993 0.8520596 5.311826 0.0000001 0.0000019 0 Htra3 1581.8937 4.502807 0.5688138 7.916134 0.0000000 0.0000000 0 Plxdc1 190.9109 4.483562 0.6667286 6.724719 0.0000000 0.0000000 0 Ackr3 1193.3036 4.471868 0.5066290 8.826712 0.0000000 0.0000000 0 C1s 4902.7645 4.462707 0.5651718 7.896194 0.0000000 0.0000000 0 Rem1 273.0018 4.458095 0.5783784 7.707920 0.0000000 0.0000000 0 Igsf10 236.5255 4.454897 0.7127254 6.250509 0.0000000 0.0000000 0 Mab21l1 142.4069 4.442645 0.5369438 8.273948 0.0000000 0.0000000 0 Pcdh7 120.3456 4.441019 0.7285085 6.096043 0.0000000 0.0000000 0 Igfbp4 11775.2669 4.439193 0.4391960 10.107546 0.0000000 0.0000000 0 Nid2 450.4482 4.438885 0.5544867 8.005394 0.0000000 0.0000000 0 Rarres2 435.6827 4.436406 0.5448112 8.143015 0.0000000 0.0000000 0 Gdf10 518.4529 4.414306 0.6765679 6.524557 0.0000000 0.0000000 0 Olfml3 506.6436 4.403864 0.5111571 8.615480 0.0000000 0.0000000 0 Serpine1 2581.0544 4.394455 0.4963202 8.854073 0.0000000 0.0000000 0 Ptgis 169.3081 4.350808 0.5972145 7.285169 0.0000000 0.0000000 0 Dchs1 250.3222 4.345966 0.6474727 6.712199 0.0000000 0.0000000 0 Rcn3 1042.1428 4.332820 0.4431814 9.776627 0.0000000 0.0000000 0 Aldh1a2 1191.2031 4.331141 0.6161852 7.028960 0.0000000 0.0000000 0 Ebf1 194.0457 4.326332 0.5580121 7.753115 0.0000000 0.0000000 0 Olfml2b 361.7737 4.294461 0.6025528 7.127111 0.0000000 0.0000000 0 Ddr2 537.0761 4.282515 0.5183098 8.262461 0.0000000 0.0000000 0 Adamts2 758.5144 4.282225 0.5979913 7.161016 0.0000000 0.0000000 0 C1qtnf2 162.4259 4.273449 0.6446417 6.629186 0.0000000 0.0000000 0 Ror2 399.3368 4.259612 0.3900349 10.921105 0.0000000 0.0000000 0 Col4a1 8468.2985 4.253007 0.3525939 12.062055 0.0000000 0.0000000 0 Ednra 377.8694 4.232666 0.4892416 8.651484 0.0000000 0.0000000 0 Lrrn4cl 322.4136 4.228645 0.5252028 8.051451 0.0000000 0.0000000 0 Clec11a 359.3135 4.205880 0.4485772 9.376044 0.0000000 0.0000000 0 Pdpn 538.6567 4.190919 0.4551350 9.208080 0.0000000 0.0000000 0 Egflam 518.0367 4.175104 0.4027936 10.365369 0.0000000 0.0000000 0 Mxra8 1323.9902 4.153454 0.3876725 10.713821 0.0000000 0.0000000 0 Sod3 1006.5374 4.147900 0.3989581 10.396831 0.0000000 0.0000000 0 Ednrb 250.5256 4.142434 0.5535065 7.483984 0.0000000 0.0000000 0 Fam131b 100.6868 4.135955 0.5716968 7.234525 0.0000000 0.0000000 0 Ccl21 1026.0626 4.134443 0.6284105 6.579207 0.0000000 0.0000000 0 Enpp2 406.6358 4.127585 0.6479852 6.369875 0.0000000 0.0000000 0 Gpx7 419.7657 4.121917 0.4152010 9.927522 0.0000000 0.0000000 0 Il6 304.2368 4.121767 0.8091419 5.093997 0.0000004 0.0000054 0 Pi16 306.6778 4.115233 0.4624705 8.898368 0.0000000 0.0000000 0 Wfdc1 198.1632 4.115215 0.6304874 6.527038 0.0000000 0.0000000 0 Angpt2 262.1297 4.103774 0.5887059 6.970839 0.0000000 0.0000000 0 Aqp1 502.9767 4.103299 0.6822548 6.014320 0.0000000 0.0000000 0 Gjc1 196.5105 4.088684 0.6203247 6.591201 0.0000000 0.0000000 0 Pcsk5 277.4921 4.071447 0.5466630 7.447819 0.0000000 0.0000000 0 Lgals1 2959.2935 4.070660 0.4959040 8.208566 0.0000000 0.0000000 0 Crlf1 184.7652 4.066944 0.4950034 8.215993 0.0000000 0.0000000 0 Ccn5 147.4171 4.064622 0.5521299 7.361713 0.0000000 0.0000000 0 Serpinf1 6036.8587 4.062639 0.4096250 9.917945 0.0000000 0.0000000 0 Col18a1 2857.3395 4.062554 0.3259107 12.465234 0.0000000 0.0000000 0 Cthrc1 1127.5960 4.037359 0.4432927 9.107659 0.0000000 0.0000000 0 Thbd 338.4656 4.027841 0.5380069 7.486598 0.0000000 0.0000000 0 Spon1 2233.7039 4.024138 0.6224126 6.465387 0.0000000 0.0000000 0 Gpr176 187.1321 4.021231 0.6336028 6.346612 0.0000000 0.0000000 0 Chrd 139.3470 4.014938 0.6554075 6.125865 0.0000000 0.0000000 0 Plvap 464.0182 4.001680 0.6045636 6.619122 0.0000000 0.0000000 0 Tspan18 159.2317 3.997680 0.5798279 6.894598 0.0000000 0.0000000 0 Ccl11 724.6513 3.995725 0.7623933 5.241029 0.0000002 0.0000027 0 Slc41a2 162.7295 3.993486 0.5999865 6.655960 0.0000000 0.0000000 0 Plac9 190.0792 3.979106 0.4799403 8.290836 0.0000000 0.0000000 0 Serpine2 2749.3714 3.970331 0.4121560 9.633079 0.0000000 0.0000000 0 Cygb 290.7714 3.969134 0.4423110 8.973625 0.0000000 0.0000000 0 Colec12 437.6058 3.960543 0.4453094 8.893913 0.0000000 0.0000000 0 Clec14a 323.8001 3.953003 0.5412131 7.303967 0.0000000 0.0000000 0 Esam 162.5833 3.947385 0.7003721 5.636125 0.0000000 0.0000004 0 Dnm1 413.4595 3.938316 0.4516459 8.719920 0.0000000 0.0000000 0 Cnrip1 101.9362 3.937197 0.5953583 6.613156 0.0000000 0.0000000 0 Pth1r 283.4413 3.893975 0.5430032 7.171183 0.0000000 0.0000000 0 S1pr3 362.8422 3.881331 0.4989759 7.778594 0.0000000 0.0000000 0 Fhl1 151.6888 3.872951 0.6031371 6.421344 0.0000000 0.0000000 0 Cacna1g 155.3204 3.870826 0.5936353 6.520546 0.0000000 0.0000000 0 Adgrf5 123.7058 3.870361 0.7667482 5.047760 0.0000004 0.0000067 0 Igfbp7 2230.5176 3.865947 0.4561988 8.474260 0.0000000 0.0000000 0 Hba-a1 147.2625 3.863368 0.7362403 5.247428 0.0000002 0.0000026 0 Cxcl14 802.7980 3.825617 0.3491337 10.957457 0.0000000 0.0000000 0 Clmp 543.7066 3.824299 0.4439586 8.614090 0.0000000 0.0000000 0 Bcat1 296.5920 3.803747 0.5794115 6.564846 0.0000000 0.0000000 0 Frem1 107.4991 3.801972 0.6804102 5.587764 0.0000000 0.0000005 0 Pcdh19 171.9757 3.794780 0.5418573 7.003283 0.0000000 0.0000000 0 Vcan 652.5514 3.794409 0.3833749 9.897386 0.0000000 0.0000000 0 Mmp16 126.8241 3.794027 0.5299545 7.159156 0.0000000 0.0000000 0 Col8a1 602.3175 3.785426 0.5318233 7.117826 0.0000000 0.0000000 0 Prdm8 115.5995 3.768575 0.5722558 6.585474 0.0000000 0.0000000 0 Ptn 2177.6717 3.758703 0.3421298 10.986190 0.0000000 0.0000000 0 Exoc3l4 185.1169 3.734490 0.4990044 7.483882 0.0000000 0.0000000 0 Atp10a 112.7659 3.728525 0.5681012 6.563135 0.0000000 0.0000000 0 Mnda 265.7300 3.726016 0.5731747 6.500664 0.0000000 0.0000000 0 Akr1c14 126.9164 3.723836 0.6843694 5.441267 0.0000001 0.0000010 0 Il1rl1 1135.9063 3.710796 0.6740093 5.505556 0.0000000 0.0000007 0 Crabp1 989.5432 3.708932 0.5094882 7.279720 0.0000000 0.0000000 0 Acvrl1 259.5261 3.695486 0.5622610 6.572546 0.0000000 0.0000000 0 Vcam1 135.1955 3.685483 0.5053019 7.293625 0.0000000 0.0000000 0 Fibin 105.9405 3.678812 0.6914751 5.320239 0.0000001 0.0000018 0 Ssc5d 127.2281 3.676362 0.5786552 6.353286 0.0000000 0.0000000 0 Prrx2 293.6987 3.670858 0.5563559 6.598038 0.0000000 0.0000000 0 Igfbp3 1778.9231 3.663105 0.5899450 6.209232 0.0000000 0.0000000 0 F5 583.5018 3.662537 0.5056695 7.242946 0.0000000 0.0000000 0 Qprt 253.7643 3.654273 0.5495715 6.649313 0.0000000 0.0000000 0 Zeb1 399.5203 3.641911 0.5271493 6.908689 0.0000000 0.0000000 0 Pcdh18 312.7013 3.632378 0.5625348 6.457161 0.0000000 0.0000000 0 Numbl 315.5350 3.619374 0.4327042 8.364546 0.0000000 0.0000000 0 Cdc42ep2 103.0887 3.616160 0.5508253 6.564984 0.0000000 0.0000000 0 Nkd2 827.3550 3.610184 0.4128302 8.744960 0.0000000 0.0000000 0 Dio2 168.8127 3.608382 0.4587063 7.866432 0.0000000 0.0000000 0 Gria3 109.0346 3.603472 0.4921030 7.322597 0.0000000 0.0000000 0 Palm2 100.6265 3.601057 0.4656446 7.733487 0.0000000 0.0000000 0 LOC100134871 887.1477 3.599900 0.7976839 4.512941 0.0000064 0.0000695 0 Enpep 225.2875 3.582405 0.5902412 6.069392 0.0000000 0.0000000 0 Col7a1 647.6241 3.581726 0.4537597 7.893442 0.0000000 0.0000000 0 Nxph3 127.4595 3.569685 0.3355171 10.639355 0.0000000 0.0000000 0 Shc4 146.1813 3.557632 0.4498423 7.908621 0.0000000 0.0000000 0 Snai1 595.1247 3.556576 0.3882430 9.160694 0.0000000 0.0000000 0 Tie1 198.3739 3.553724 0.6066267 5.858174 0.0000000 0.0000001 0 Loxl3 264.5793 3.539433 0.4502746 7.860610 0.0000000 0.0000000 0 Mgp 8600.5194 3.537569 0.4494176 7.871452 0.0000000 0.0000000 0 Sema3a 125.4272 3.530616 0.4455784 7.923669 0.0000000 0.0000000 0 Serping1 4231.0217 3.522311 0.4403314 7.999228 0.0000000 0.0000000 0 F2r 769.7308 3.520952 0.4222687 8.338179 0.0000000 0.0000000 0 Jam2 142.8647 3.495788 0.5933310 5.891801 0.0000000 0.0000001 0 Lama1 110.1153 3.491409 0.5696945 6.128563 0.0000000 0.0000000 0 Abcc9 199.7610 3.481201 0.7648141 4.551695 0.0000053 0.0000593 0 Hmcn1 294.0097 3.480459 0.5176129 6.724058 0.0000000 0.0000000 0 Lrrc32 622.8923 3.477315 0.4261087 8.160628 0.0000000 0.0000000 0 Atp1b2 127.7142 3.469360 0.4891704 7.092335 0.0000000 0.0000000 0 Cxcl12 2252.8912 3.459090 0.3579334 9.664063 0.0000000 0.0000000 0 Dkk2 125.6002 3.434520 0.5586255 6.148161 0.0000000 0.0000000 0 Zfp521 139.4505 3.423172 0.5397961 6.341601 0.0000000 0.0000000 0 Dpysl3 116.7495 3.419226 0.4920467 6.948986 0.0000000 0.0000000 0 Dact3 188.1667 3.418701 0.4389931 7.787596 0.0000000 0.0000000 0 Mmp19 915.6852 3.411489 0.3550156 9.609408 0.0000000 0.0000000 0 Flnc 247.9848 3.401140 0.6598522 5.154396 0.0000003 0.0000041 0 LOC100909539 280.2333 3.400798 0.4555330 7.465536 0.0000000 0.0000000 0 Zcchc24 339.5992 3.397785 0.4349789 7.811379 0.0000000 0.0000000 0 Dkk3 1003.1543 3.391410 0.3373925 10.051822 0.0000000 0.0000000 0 Sema5a 588.6621 3.366793 0.3809879 8.837008 0.0000000 0.0000000 0 Fgl2 2459.2189 3.357473 0.7196082 4.665695 0.0000031 0.0000367 0 Fscn1 665.5523 3.353338 0.4892518 6.854013 0.0000000 0.0000000 0 Abcb1b 124.2460 3.352589 0.4778803 7.015541 0.0000000 0.0000000 0 Itga1 178.7644 3.336151 0.4682034 7.125431 0.0000000 0.0000000 0 Art3 187.0617 3.324565 0.3806480 8.733961 0.0000000 0.0000000 0 Kazald1 143.2970 3.321400 0.4079228 8.142228 0.0000000 0.0000000 0 C1qtnf1 751.1032 3.317064 0.3965821 8.364129 0.0000000 0.0000000 0 RGD1564664 1474.4935 3.311346 0.4300746 7.699468 0.0000000 0.0000000 0 Tbx2 220.5571 3.306141 0.3693258 8.951827 0.0000000 0.0000000 0 Selenom 873.5283 3.299343 0.3824049 8.627877 0.0000000 0.0000000 0 Ltbp4 1206.9010 3.291806 0.3534000 9.314676 0.0000000 0.0000000 0 Lhfpl6 376.8189 3.283998 0.3365525 9.757758 0.0000000 0.0000000 0 Axl 1393.9990 3.279151 0.4040998 8.114707 0.0000000 0.0000000 0 Tril 661.3142 3.276348 0.3566654 9.186053 0.0000000 0.0000000 0 Mdk 508.5394 3.240024 0.3891097 8.326763 0.0000000 0.0000000 0 Upk3a 788.3217 -3.221880 0.8058789 -3.997970 0.0000639 0.0005212 0 Sfrp2 368.8970 3.202463 0.3954815 8.097631 0.0000000 0.0000000 0 Penk 2483.8937 3.182268 0.3248519 9.796058 0.0000000 0.0000000 0 Nell1 102.1992 3.178670 0.5154812 6.166414 0.0000000 0.0000000 0 Lpar1 571.4751 3.165497 0.4302207 7.357844 0.0000000 0.0000000 0 Tspan5 305.6419 3.153353 0.4329608 7.283229 0.0000000 0.0000000 0 Gpihbp1 158.2721 3.147467 0.8284452 3.799245 0.0001451 0.0010506 0 Smoc2 2632.5687 3.145362 0.4779106 6.581486 0.0000000 0.0000000 0 Ptprv 141.2250 3.142574 0.4792399 6.557413 0.0000000 0.0000000 0 Ntrk2 252.4903 3.138736 0.6977837 4.498150 0.0000069 0.0000740 0 C1r 4990.1992 3.137515 0.3952350 7.938351 0.0000000 0.0000000 0 Gpx3 4247.1870 3.132247 0.4447684 7.042422 0.0000000 0.0000000 0 Pcsk6 162.7802 3.128262 0.5732342 5.457215 0.0000000 0.0000009 0 Tnfrsf11b 460.8675 3.121292 0.5566237 5.607545 0.0000000 0.0000004 0 Cxcl13 226.6853 3.120053 0.5916540 5.273442 0.0000001 0.0000023 0 Dlc1 346.7489 3.108438 0.4119221 7.546179 0.0000000 0.0000000 0 Runx1t1 119.3703 3.107210 0.6408801 4.848348 0.0000012 0.0000166 0 Col17a1 545.6073 3.100296 0.4188870 7.401271 0.0000000 0.0000000 0 Apold1 287.3202 3.099614 0.7239703 4.281410 0.0000186 0.0001759 0 Fam102b 403.4009 3.095401 0.4256908 7.271477 0.0000000 0.0000000 0 Slc12a4 510.3016 3.094257 0.3997211 7.741039 0.0000000 0.0000000 0 Il16 133.0967 3.092863 0.5361487 5.768666 0.0000000 0.0000002 0 Emp3 707.4352 3.091062 0.4461074 6.928964 0.0000000 0.0000000 0 Rab3il1 109.1259 3.085552 0.4992863 6.179926 0.0000000 0.0000000 0 Fkbp9 1481.6386 3.083289 0.3858850 7.990175 0.0000000 0.0000000 0 Sema3b 1039.1561 3.075476 0.3283606 9.366153 0.0000000 0.0000000 0 Adora2b 130.6251 3.060963 0.4582401 6.679823 0.0000000 0.0000000 0 Upk1b 281.4449 3.049506 0.3252781 9.375073 0.0000000 0.0000000 0 Cav1 2220.8901 3.038389 0.3138451 9.681174 0.0000000 0.0000000 0 Rftn1 449.5032 3.034218 0.5134653 5.909295 0.0000000 0.0000001 0 Htra1 2766.5740 3.033742 0.4417951 6.866855 0.0000000 0.0000000 0 Fzd1 590.8730 3.028443 0.3100909 9.766306 0.0000000 0.0000000 0 Nol3 133.3412 3.021753 0.4159256 7.265127 0.0000000 0.0000000 0 Oaf 1448.7798 3.019487 0.4376973 6.898574 0.0000000 0.0000000 0 Cyp1b1 105.0529 3.012439 0.6428213 4.686277 0.0000028 0.0000335 0 Jam3 644.3821 3.003404 0.2996066 10.024491 0.0000000 0.0000000 0 Col27a1 136.4656 2.998731 0.4604948 6.511976 0.0000000 0.0000000 0 Lix1l 167.9946 2.973664 0.4713837 6.308373 0.0000000 0.0000000 0 Zeb2 205.1850 2.972308 0.5581211 5.325560 0.0000001 0.0000018 0 B4galt2 127.7717 2.965324 0.4032528 7.353512 0.0000000 0.0000000 0 Scarf1 100.5658 2.956363 0.4812180 6.143500 0.0000000 0.0000000 0 Gpx8 534.1358 2.928093 0.3201203 9.146852 0.0000000 0.0000000 0 Cdh13 354.4445 2.925847 0.3673725 7.964250 0.0000000 0.0000000 0 Ncam1 100.7264 2.925136 0.5778769 5.061867 0.0000004 0.0000063 0 Col14a1 2833.3622 2.920337 0.3056482 9.554572 0.0000000 0.0000000 0 Pecam1 183.6669 2.911640 0.4273503 6.813240 0.0000000 0.0000000 0 Igf1 286.5929 2.911071 0.5007628 5.813273 0.0000000 0.0000001 0 Slc7a5 1107.5923 2.909632 0.3746406 7.766463 0.0000000 0.0000000 0 Dscam 132.5769 -2.905794 0.6667670 -4.358035 0.0000131 0.0001307 0 Dse 196.7943 2.905608 0.4676832 6.212770 0.0000000 0.0000000 0 Cacna2d1 147.7032 2.902892 0.4388243 6.615158 0.0000000 0.0000000 0 Cybrd1 233.6760 2.900978 0.4771556 6.079731 0.0000000 0.0000000 0 Twist1 365.9784 2.900536 0.3588450 8.082979 0.0000000 0.0000000 0 Rgl1 202.5890 2.898987 0.4347422 6.668288 0.0000000 0.0000000 0 Chst12 242.5970 2.890400 0.3323157 8.697753 0.0000000 0.0000000 0 Anpep 470.9687 2.878753 0.5309196 5.422202 0.0000001 0.0000011 0 Rgs5 300.2458 2.866901 0.6175683 4.642241 0.0000034 0.0000405 0 Gng2 588.6754 2.860471 0.4386450 6.521154 0.0000000 0.0000000 0 Smpd3 303.5242 2.844436 0.4712034 6.036535 0.0000000 0.0000000 0 Gask1b 463.9801 2.843836 0.3334652 8.528134 0.0000000 0.0000000 0 Gpm6b 742.7629 2.838811 0.2824285 10.051434 0.0000000 0.0000000 0 Reck 549.1038 2.835363 0.3197277 8.868057 0.0000000 0.0000000 0 Egr2 1058.2192 2.826388 0.3429404 8.241630 0.0000000 0.0000000 0 Nt5e 421.5463 2.819527 0.3726106 7.566952 0.0000000 0.0000000 0 Col2a1 791.4075 2.817939 0.4684319 6.015686 0.0000000 0.0000000 0 Septin5 199.1482 2.809953 0.4483708 6.267030 0.0000000 0.0000000 0 Bicc1 174.4927 2.806071 0.4222716 6.645181 0.0000000 0.0000000 0 Lrp1 3018.1950 2.797152 0.3736193 7.486637 0.0000000 0.0000000 0 Plod2 160.3864 2.789210 0.4228754 6.595818 0.0000000 0.0000000 0 Cspg4 127.0395 2.783979 0.6307618 4.413677 0.0000102 0.0001043 0 Susd2 190.3349 2.780393 0.5034666 5.522498 0.0000000 0.0000007 0 LOC310926 3340.9152 2.777177 0.4386296 6.331487 0.0000000 0.0000000 0 Tpst1 378.8238 2.773113 0.4294760 6.456969 0.0000000 0.0000000 0 Osr1 416.2648 2.764075 0.3118686 8.862947 0.0000000 0.0000000 0 Il34 331.7695 2.755964 0.3559588 7.742366 0.0000000 0.0000000 0 Cercam 466.2355 2.755729 0.3720951 7.405981 0.0000000 0.0000000 0 Adamts12 386.1301 2.725159 0.5557480 4.903588 0.0000009 0.0000129 0 Cyp2s1 197.1440 2.712164 0.5633218 4.814591 0.0000015 0.0000193 0 Hbb 1321.4563 2.711326 0.7464383 3.632351 0.0002809 0.0018383 0 Crispld2 1362.0626 2.708600 0.2910507 9.306285 0.0000000 0.0000000 0 Eng 630.6189 2.706890 0.3391724 7.980867 0.0000000 0.0000000 0 Selp 101.4683 2.678829 0.6460429 4.146520 0.0000338 0.0002969 0 Ecrg4 118.9276 2.666184 0.4241879 6.285385 0.0000000 0.0000000 0 Septin4 429.6586 2.645722 0.4029789 6.565412 0.0000000 0.0000000 0 Tgfbr3 342.3764 2.643506 0.2692689 9.817345 0.0000000 0.0000000 0 Adamts4 772.9674 2.642827 0.4473599 5.907607 0.0000000 0.0000001 0 Emilin1 1370.0069 2.642351 0.2926761 9.028241 0.0000000 0.0000000 0 Gsn 29582.7616 2.636810 0.4276990 6.165106 0.0000000 0.0000000 0 Dnm3 117.9613 2.634847 0.4061163 6.487914 0.0000000 0.0000000 0 Ccl7 653.5993 2.633831 0.5949168 4.427226 0.0000095 0.0000988 0 Adamts1 3206.9248 2.632098 0.3043937 8.647017 0.0000000 0.0000000 0 Ccl2 2852.3299 2.624594 0.6800264 3.859548 0.0001136 0.0008567 0 Lhfpl2 644.4885 2.619306 0.4439851 5.899536 0.0000000 0.0000001 0 Gem 883.6119 2.609832 0.4642971 5.621039 0.0000000 0.0000004 0 Plpp3 1606.7103 2.608515 0.3229819 8.076348 0.0000000 0.0000000 0 Spock2 114.3529 2.602698 0.4691650 5.547510 0.0000000 0.0000006 0 Fst 394.7378 2.596740 0.4970610 5.224188 0.0000002 0.0000029 0 Gpnmb 1496.1482 2.595528 0.4508387 5.757111 0.0000000 0.0000002 0 Reln 394.4076 2.589380 0.3750306 6.904450 0.0000000 0.0000000 0 Nfatc4 175.6242 2.583825 0.4157614 6.214683 0.0000000 0.0000000 0 Enc1 395.5011 2.578549 0.4080289 6.319526 0.0000000 0.0000000 0 Ndrg4 223.2030 2.578225 0.3877806 6.648670 0.0000000 0.0000000 0 Adcy7 473.3677 2.577621 0.3466058 7.436753 0.0000000 0.0000000 0 Gas7 680.5193 2.570699 0.3350583 7.672393 0.0000000 0.0000000 0 Ramp3 482.7606 2.562886 0.5858101 4.374943 0.0000121 0.0001217 0 Fmod 229.0674 2.560216 0.4568493 5.604072 0.0000000 0.0000004 0 Tmem204 105.9487 2.552303 0.4310563 5.921042 0.0000000 0.0000001 0 Prkar1b 100.0586 2.548675 0.5112011 4.985660 0.0000006 0.0000089 0 Ptx3 252.4271 2.537825 0.5135296 4.941926 0.0000008 0.0000108 0 Csn2 1484.3714 2.524105 0.8640745 2.921166 0.0034872 0.0153650 0 Angptl2 959.4925 2.520335 0.4035653 6.245173 0.0000000 0.0000000 0 Itga4 309.9774 2.517153 0.6346755 3.966048 0.0000731 0.0005863 0 Grb10 159.2062 2.508878 0.4491213 5.586193 0.0000000 0.0000005 0 Antxr1 232.4040 2.505607 0.4302649 5.823407 0.0000000 0.0000001 0 Abca8a 398.9002 2.504300 0.3367116 7.437524 0.0000000 0.0000000 0 Dll1 113.0938 2.499336 0.3817295 6.547402 0.0000000 0.0000000 0 Bche 178.6865 -2.498925 0.4806422 -5.199137 0.0000002 0.0000033 0 Shc2 249.3406 2.490768 0.4209437 5.917105 0.0000000 0.0000001 0 Prdm1 218.1960 2.487205 0.5357894 4.642132 0.0000034 0.0000405 0 Rnase4 1323.5759 2.485140 0.3887929 6.391936 0.0000000 0.0000000 0 Emp1 3747.5812 2.479963 0.4324960 5.734073 0.0000000 0.0000002 0 Adamts18 281.1375 2.459051 0.3760726 6.538768 0.0000000 0.0000000 0 Macroh2a2 144.8875 2.454735 0.2903260 8.455096 0.0000000 0.0000000 0 Serpinh1 5853.7264 2.454648 0.2744355 8.944354 0.0000000 0.0000000 0 Cdr2 186.3575 2.454230 0.3683962 6.661931 0.0000000 0.0000000 0 Spats2l 188.8600 2.452352 0.3353191 7.313490 0.0000000 0.0000000 0 Akap2 872.3341 2.450348 0.3276382 7.478825 0.0000000 0.0000000 0 Arhgap31 111.5465 2.447727 0.4163406 5.879146 0.0000000 0.0000001 0 Begain 133.7512 2.445000 0.3621152 6.751996 0.0000000 0.0000000 0 Igfbp2 3187.3795 2.433660 0.3501083 6.951162 0.0000000 0.0000000 0 Daglb 450.2521 2.429355 0.4142948 5.863832 0.0000000 0.0000001 0 Csf1 468.5954 2.425532 0.3554508 6.823820 0.0000000 0.0000000 0 Lefty1 491.7467 -2.424016 0.4958479 -4.888628 0.0000010 0.0000138 0 Unc5b 360.4142 2.407906 0.3178839 7.574799 0.0000000 0.0000000 0 Mitf 302.3200 2.400747 0.3450386 6.957909 0.0000000 0.0000000 0 Mark1 306.9292 2.400044 0.4245985 5.652501 0.0000000 0.0000003 0 Adamts7 176.9368 2.398231 0.4066732 5.897195 0.0000000 0.0000001 0 Wnt6 122.9730 2.390567 0.3266658 7.318081 0.0000000 0.0000000 0 Pcdhgc3 397.1692 2.390108 0.2897674 8.248370 0.0000000 0.0000000 0 Fbn2 199.1335 2.389875 0.3850718 6.206310 0.0000000 0.0000000 0 Fxyd6 444.3905 2.387818 0.3811330 6.265050 0.0000000 0.0000000 0 Smim38 8119.2866 -2.383005 0.4398426 -5.417858 0.0000001 0.0000011 0 Tgfbi 585.7200 2.379578 0.3889346 6.118195 0.0000000 0.0000000 0 Efemp2 1207.8933 2.379182 0.2570542 9.255565 0.0000000 0.0000000 0 Rprml 120.3243 2.365343 0.4091114 5.781661 0.0000000 0.0000002 0 Cmtm3 279.1797 2.360282 0.2934795 8.042408 0.0000000 0.0000000 0 Fkbp7 302.8251 2.358437 0.3148879 7.489765 0.0000000 0.0000000 0 Flna 2444.1644 2.357180 0.2340796 10.069994 0.0000000 0.0000000 0 Myh11 859.1861 2.356544 0.4366147 5.397308 0.0000001 0.0000013 0 Cpq 871.8399 2.350743 0.3239162 7.257256 0.0000000 0.0000000 0 Nes 106.1876 2.349658 0.3792161 6.196093 0.0000000 0.0000000 0 Mrvi1 104.8388 2.327789 0.4231978 5.500475 0.0000000 0.0000007 0 Hspa12b 122.1713 2.317444 0.4402558 5.263858 0.0000001 0.0000024 0 Aadat 177.9661 -2.316014 0.4329710 -5.349121 0.0000001 0.0000016 0 Papss2 209.0147 2.310007 0.5092647 4.535965 0.0000057 0.0000631 0 Gprc5b 120.1190 2.305973 0.2790378 8.264014 0.0000000 0.0000000 0 Ptprb 111.8884 2.296513 0.5957520 3.854813 0.0001158 0.0008708 0 Il1r1 167.8646 2.295915 0.3734539 6.147787 0.0000000 0.0000000 0 Mmd 905.7223 2.290735 0.3745968 6.115201 0.0000000 0.0000000 0 Palm 429.6788 2.284678 0.3289211 6.945974 0.0000000 0.0000000 0 Lzts3 119.3629 2.280359 0.3883959 5.871223 0.0000000 0.0000001 0 Flrt2 197.3082 2.252728 0.4520570 4.983282 0.0000006 0.0000090 0 Ramp2 259.9998 2.252714 0.3573526 6.303896 0.0000000 0.0000000 0 Inhba 163.7853 2.250190 0.5144556 4.373925 0.0000122 0.0001222 0 Ccl22 101.4999 -2.240661 0.7008198 -3.197200 0.0013877 0.0071477 0 Runx2 238.5121 2.238187 0.3415328 6.553360 0.0000000 0.0000000 0 Hdgfl3 123.9819 2.237990 0.3497898 6.398100 0.0000000 0.0000000 0 Prnp 3434.0603 2.234893 0.2830195 7.896605 0.0000000 0.0000000 0 Slc43a3 121.3600 2.233617 0.5299961 4.214404 0.0000250 0.0002286 0 Ptp4a3 162.9598 2.232448 0.3579957 6.235963 0.0000000 0.0000000 0 Megf6 214.5995 2.228890 0.4625785 4.818403 0.0000014 0.0000189 0 Rarres1 692.3008 2.225378 0.4248093 5.238534 0.0000002 0.0000027 0 Pcolce 2323.0430 2.222591 0.4323547 5.140667 0.0000003 0.0000043 0 Tcf4 1150.8625 2.221749 0.3226485 6.885974 0.0000000 0.0000000 0 Nrcam 133.2881 2.216599 0.4147882 5.343929 0.0000001 0.0000016 0 Rgma 726.5645 2.213217 0.2697522 8.204633 0.0000000 0.0000000 0 Ptgs2 192.2413 2.210491 0.8961631 2.466616 0.0136396 0.0465459 0 Csrp2 173.8134 2.202842 0.4216127 5.224799 0.0000002 0.0000029 0 Lrg1 292.0465 2.194472 0.4557481 4.815099 0.0000015 0.0000192 0 Rspo3 217.0326 -2.193289 0.4262989 -5.144957 0.0000003 0.0000043 0 Phlda3 669.0042 2.193277 0.2347928 9.341329 0.0000000 0.0000000 0 Jag2 397.4450 2.191055 0.3298827 6.641923 0.0000000 0.0000000 0 Itga5 710.4103 2.190287 0.3800142 5.763697 0.0000000 0.0000002 0 Lef1 147.9467 2.184183 0.3720886 5.870061 0.0000000 0.0000001 0 Ppic 1841.8759 2.175869 0.3921562 5.548474 0.0000000 0.0000006 0 P2ry14 130.0805 -2.173069 0.5343359 -4.066859 0.0000477 0.0004008 0 Timp2 7088.9776 2.172977 0.3653826 5.947128 0.0000000 0.0000001 0 Bdkrb2 192.9493 2.160832 0.4139064 5.220580 0.0000002 0.0000030 0 Alas2 110.7376 2.155679 0.7621005 2.828601 0.0046752 0.0194589 0 Plpp1 320.0070 2.152741 0.2882076 7.469411 0.0000000 0.0000000 0 Scpep1 3644.4909 2.150081 0.2445198 8.793076 0.0000000 0.0000000 0 Vwf 167.3556 2.146961 0.3809412 5.635937 0.0000000 0.0000004 0 Rbp7 657.3019 -2.144750 0.3587147 -5.978985 0.0000000 0.0000001 0 Ccn3 254.3234 2.142841 0.5171161 4.143830 0.0000342 0.0002997 0 Nrgn 300.4902 2.129246 0.7284252 2.923081 0.0034659 0.0152843 0 Tns1 322.6064 2.121534 0.3374609 6.286755 0.0000000 0.0000000 0 Nnat 320.0474 2.118320 0.3430343 6.175244 0.0000000 0.0000000 0 Chsy1 348.9624 2.111802 0.3264637 6.468719 0.0000000 0.0000000 0 Kdr 132.8522 2.111645 0.6760797 3.123367 0.0017879 0.0088352 0 Krt17 3165.8624 2.107356 0.3810992 5.529678 0.0000000 0.0000006 0 Spef2 353.1161 -2.106277 0.3283794 -6.414156 0.0000000 0.0000000 0 P3h3 815.4425 2.105157 0.2645743 7.956770 0.0000000 0.0000000 0 Tgfbr2 774.9813 2.100430 0.2984957 7.036715 0.0000000 0.0000000 0 Zfhx4 175.5838 2.094610 0.4028859 5.199014 0.0000002 0.0000033 0 Pthlh 114.9678 2.094431 0.3263659 6.417434 0.0000000 0.0000000 0 Cd48 974.4632 2.082031 0.3800856 5.477795 0.0000000 0.0000008 0 Rps4y2 120.7338 2.079510 0.4401057 4.725024 0.0000023 0.0000283 0 Vsir 277.8053 2.078914 0.2885379 7.204993 0.0000000 0.0000000 0 Apoe 44435.0745 2.069904 0.2743201 7.545579 0.0000000 0.0000000 0 Fstl1 4836.5303 2.066790 0.2897093 7.134014 0.0000000 0.0000000 0 Nrp2 152.7282 2.063204 0.3837499 5.376429 0.0000001 0.0000014 0 Cdkn1c 376.0666 2.062469 0.3886471 5.306792 0.0000001 0.0000020 0 Ccl3 127.1550 -2.059621 0.6299330 -3.269587 0.0010770 0.0057971 0 Arc 168.7765 2.055382 0.4749757 4.327342 0.0000151 0.0001479 0 Phldb1 590.8156 2.053968 0.3091370 6.644198 0.0000000 0.0000000 0 Cdo1 4213.2359 -2.048688 0.3383167 -6.055534 0.0000000 0.0000000 0 Abcc5 186.1390 2.039198 0.3093206 6.592507 0.0000000 0.0000000 0 Mllt11 164.6249 2.039191 0.2457632 8.297381 0.0000000 0.0000000 0 Tgfb1i1 478.1620 2.037312 0.2652556 7.680561 0.0000000 0.0000000 0 Nrg2 191.5248 2.036211 0.3424484 5.946036 0.0000000 0.0000001 0 Adm 358.1838 2.034742 0.3851795 5.282582 0.0000001 0.0000022 0 Bco2 2469.9775 -2.032112 0.3269436 -6.215480 0.0000000 0.0000000 0 Tent5a 394.6876 2.016925 0.2884229 6.992942 0.0000000 0.0000000 0 Capn6 139.6396 2.013373 0.4497923 4.476228 0.0000076 0.0000811 0 P3h1 777.6716 1.998406 0.2605474 7.670026 0.0000000 0.0000000 0 Foxa1 967.2220 -1.976790 0.3267742 -6.049407 0.0000000 0.0000000 0 Cfap77 104.0725 -1.975423 0.3307899 -5.971837 0.0000000 0.0000001 0 Afap1l2 222.7816 1.971291 0.3228717 6.105495 0.0000000 0.0000000 0 Irak3 229.6248 1.967927 0.3774932 5.213145 0.0000002 0.0000031 0 Rhoj 957.3351 1.966950 0.2213780 8.885027 0.0000000 0.0000000 0 Spry4 258.1436 1.962823 0.3045133 6.445772 0.0000000 0.0000000 0 Id3 1160.9061 1.961442 0.3613197 5.428551 0.0000001 0.0000011 0 Fkbp14 186.9944 1.959809 0.3037552 6.451936 0.0000000 0.0000000 0 Dpp4 143.5438 1.954322 0.6079097 3.214822 0.0013053 0.0068027 0 Vegfc 135.6573 1.950214 0.4496622 4.337064 0.0000144 0.0001421 0 Praf2 239.1089 1.948095 0.2850065 6.835265 0.0000000 0.0000000 0 Stard13 234.0770 1.947479 0.2975881 6.544210 0.0000000 0.0000000 0 Kirrel1 121.7888 1.947392 0.2520810 7.725264 0.0000000 0.0000000 0 Cited4 2335.8131 -1.938469 0.3378359 -5.737901 0.0000000 0.0000002 0 Spp1 1145.9973 1.929532 0.5613678 3.437198 0.0005878 0.0034569 0 Mcam 165.4784 1.922274 0.3637071 5.285227 0.0000001 0.0000022 0 Snai2 126.3892 1.919757 0.3530212 5.438077 0.0000001 0.0000010 0 Gja1 4243.0828 1.919267 0.3433512 5.589807 0.0000000 0.0000005 0 Gpsm1 272.0116 1.919067 0.3574974 5.368060 0.0000001 0.0000015 0 Kctd8 150.8724 -1.917079 0.3439654 -5.573465 0.0000000 0.0000005 0 Myl9 2009.7089 1.915863 0.3033816 6.315027 0.0000000 0.0000000 0 Timp1 3024.0672 1.913752 0.3496099 5.473964 0.0000000 0.0000009 0 Fbp2 157.1759 -1.908509 0.2951823 -6.465526 0.0000000 0.0000000 0 Olfm1 103.2304 1.902150 0.4698879 4.048094 0.0000516 0.0004309 0 Scara3 627.4913 1.896222 0.3664970 5.173908 0.0000002 0.0000037 0 Pamr1 162.6180 1.883333 0.5352891 3.518347 0.0004342 0.0026827 0 Pxdn 1708.7109 1.879982 0.2285945 8.224091 0.0000000 0.0000000 0 Pde2a 268.5033 1.876865 0.3241064 5.790890 0.0000000 0.0000002 0 Il18 1746.5610 -1.876248 0.2996070 -6.262366 0.0000000 0.0000000 0 Slit3 696.1098 1.871654 0.4462017 4.194636 0.0000273 0.0002467 0 Plat 4342.5292 1.870963 0.3258474 5.741839 0.0000000 0.0000002 0 B4galt5 311.8365 1.867767 0.4322674 4.320860 0.0000155 0.0001518 0 Rasa3 168.3716 1.867648 0.3599097 5.189214 0.0000002 0.0000034 0 Plagl1 117.1561 1.866061 0.4577889 4.076248 0.0000458 0.0003874 0 Col9a2 636.2130 1.862511 0.2608074 7.141328 0.0000000 0.0000000 0 Arhgef25 654.1540 1.860317 0.2082681 8.932321 0.0000000 0.0000000 0 Hs3st1 150.0095 1.851171 0.3096475 5.978316 0.0000000 0.0000001 0 Sulf1 262.5807 1.846637 0.3654231 5.053421 0.0000004 0.0000065 0 Hpgd 939.3799 -1.842757 0.4501817 -4.093363 0.0000425 0.0003639 0 Chst8 294.4151 -1.842657 0.4138792 -4.452161 0.0000085 0.0000892 0 Clic2 202.6435 1.829544 0.5107717 3.581922 0.0003411 0.0021717 0 Btc 160.5154 -1.829117 0.3540044 -5.166934 0.0000002 0.0000038 0 Tmprss6 287.5316 -1.821977 0.4246939 -4.290093 0.0000179 0.0001704 0 Tpm2 3093.1884 1.820140 0.3186052 5.712839 0.0000000 0.0000003 0 Nbl1 2539.0808 1.819643 0.3847042 4.729978 0.0000022 0.0000277 0 Sgcb 504.3680 1.812927 0.2500935 7.248995 0.0000000 0.0000000 0 Ptgfrn 1115.8317 1.808888 0.2773658 6.521668 0.0000000 0.0000000 0 Dclk1 577.7272 1.808853 0.2966535 6.097528 0.0000000 0.0000000 0 Aqp5 4790.9935 -1.797177 0.3333185 -5.391770 0.0000001 0.0000013 0 Gulp1 149.3323 1.793143 0.3405501 5.265429 0.0000001 0.0000024 0 Adamts9 113.0675 1.791069 0.4111173 4.356588 0.0000132 0.0001313 0 Col16a1 3247.3847 1.790478 0.2630643 6.806237 0.0000000 0.0000000 0 Prlr 1830.2520 -1.788853 0.2908595 -6.150229 0.0000000 0.0000000 0 Areg 5738.6354 -1.785208 0.3414109 -5.228913 0.0000002 0.0000028 0 Car2 920.1181 1.784736 0.4125369 4.326246 0.0000152 0.0001484 0 Padi3 121.3018 1.781312 0.4625349 3.851196 0.0001175 0.0008820 0 Slc7a8 139.5822 1.778907 0.4961996 3.585063 0.0003370 0.0021494 0 Schip1 175.6069 1.777938 0.3505882 5.071301 0.0000004 0.0000060 0 Ptprm 246.8389 1.763532 0.3127544 5.638712 0.0000000 0.0000004 0 Mmp14 11659.4689 1.762158 0.2879969 6.118669 0.0000000 0.0000000 0 Metrnl 525.9811 1.754758 0.2804253 6.257489 0.0000000 0.0000000 0 Vldlr 250.5702 1.754625 0.3031471 5.788030 0.0000000 0.0000002 0 Tmem150c 921.8799 -1.749252 0.3629124 -4.820039 0.0000014 0.0000189 0 Bcar3 222.0998 1.746383 0.3913208 4.462792 0.0000081 0.0000855 0 Fabp4 131.6055 1.745334 0.5320583 3.280344 0.0010368 0.0056107 0 Shisa8 488.2182 -1.744847 0.4055915 -4.301981 0.0000169 0.0001631 0 Klf4 1311.7147 1.740997 0.3321124 5.242191 0.0000002 0.0000027 0 Akap12 337.3340 1.739330 0.4047791 4.296986 0.0000173 0.0001662 0 Acsm3 619.8282 -1.732318 0.3753817 -4.614819 0.0000039 0.0000455 0 Slc6a8 175.8189 1.726498 0.3000728 5.753598 0.0000000 0.0000002 0 Il17b 299.0491 1.724299 0.4045464 4.262301 0.0000202 0.0001895 0 Zfp36l2 411.7016 1.721964 0.2651594 6.494070 0.0000000 0.0000000 0 Cd302 373.2032 1.721762 0.2368938 7.268072 0.0000000 0.0000000 0 Abcc8 318.7616 -1.718633 0.4899581 -3.507715 0.0004520 0.0027660 0 Tph1 1150.4348 -1.714776 0.3373177 -5.083565 0.0000004 0.0000057 0 Vasn 812.5685 1.714069 0.3354931 5.109102 0.0000003 0.0000051 0 Insyn1 140.7366 1.709526 0.2985606 5.725891 0.0000000 0.0000002 0 Sgce 345.8542 1.707644 0.3633766 4.699377 0.0000026 0.0000317 0 Evc 172.5371 1.705499 0.4089077 4.170865 0.0000303 0.0002709 0 Cfd 103.2919 1.705180 0.5255550 3.244533 0.0011764 0.0062201 0 Ctse 1016.3349 -1.702829 0.3245447 -5.246823 0.0000002 0.0000026 0 Slc43a2 358.7947 1.693392 0.2720174 6.225309 0.0000000 0.0000000 0 Lrp12 141.0970 1.692678 0.3303652 5.123659 0.0000003 0.0000047 0 Map6 376.7269 1.685383 0.3080463 5.471200 0.0000000 0.0000009 0 Gpc1 2328.4743 1.682722 0.2214336 7.599214 0.0000000 0.0000000 0 Tmem263 150.3927 1.678469 0.2541402 6.604500 0.0000000 0.0000000 0 Glb1l 275.9631 1.676486 0.2901912 5.777176 0.0000000 0.0000002 0 Crip1 1977.6282 1.675823 0.4073677 4.113785 0.0000389 0.0003365 0 Cd200 6760.6787 -1.675388 0.2805830 -5.971094 0.0000000 0.0000001 0 Msx2 407.4077 -1.675011 0.3393384 -4.936109 0.0000008 0.0000111 0 Rps6ka2 118.6621 1.673294 0.4564952 3.665524 0.0002468 0.0016473 0 Hdhd3 312.7452 -1.672435 0.2128887 -7.855913 0.0000000 0.0000000 0 Srxn1 693.5379 1.668068 0.4429237 3.766040 0.0001659 0.0011756 0 Bcl2a1 241.9477 -1.657547 0.4997168 -3.316973 0.0009100 0.0050188 0 Fzd2 186.9258 1.655353 0.2730855 6.061667 0.0000000 0.0000000 0 Slc39a2 356.0166 -1.654753 0.3965334 -4.173048 0.0000301 0.0002688 0 Fer1l4 124.1589 -1.654401 0.4922240 -3.361073 0.0007764 0.0044005 0 Plod1 2051.9489 1.652251 0.1940068 8.516457 0.0000000 0.0000000 0 Fgfrl1 236.9568 1.651685 0.2486313 6.643112 0.0000000 0.0000000 0 Actg2 539.8916 1.649824 0.5019804 3.286630 0.0010139 0.0055010 0 Rab31 748.2437 1.646877 0.3279322 5.022006 0.0000005 0.0000075 0 Tnfsf10 1097.3777 -1.645927 0.2669959 -6.164615 0.0000000 0.0000000 0 Krt15 1705.1517 1.644313 0.3953128 4.159524 0.0000319 0.0002819 0 Mfsd2a 222.5901 1.644011 0.3969442 4.141667 0.0000345 0.0003019 0 Dlx3 132.1440 1.643874 0.3973418 4.137180 0.0000352 0.0003069 0 Pls1 119.6970 -1.641552 0.3203104 -5.124880 0.0000003 0.0000047 0 Des 401.3741 1.639154 0.5026964 3.260724 0.0011113 0.0059365 0 Sh3kbp1 395.6466 1.636813 0.3375887 4.848542 0.0000012 0.0000166 0 Dgkb 110.9180 -1.636492 0.5178996 -3.159863 0.0015784 0.0079818 0 Nrp1 497.3358 1.635359 0.3693311 4.427894 0.0000095 0.0000986 0 Cspg5 124.8139 1.630541 0.3816266 4.272608 0.0000193 0.0001820 0 Rasl11b 246.0697 1.628369 0.2911849 5.592215 0.0000000 0.0000005 0 Tmem100 461.4873 1.626095 0.2528052 6.432205 0.0000000 0.0000000 0 Serpinb9 2992.0232 -1.624124 0.2870347 -5.658285 0.0000000 0.0000003 0 Iffo1 406.2362 1.617511 0.2752392 5.876748 0.0000000 0.0000001 0 Cited1 7906.8887 -1.615559 0.3795161 -4.256892 0.0000207 0.0001932 0 Epha4 138.1749 1.610480 0.2429482 6.628905 0.0000000 0.0000000 0 Fcrlb 369.3775 -1.609652 0.4842464 -3.324035 0.0008872 0.0049115 0 Mustn1 116.2718 1.603387 0.3318055 4.832309 0.0000013 0.0000178 0 Slpi 397.7191 -1.600147 0.5095737 -3.140168 0.0016885 0.0084302 0 Ccnd2 705.9704 1.599913 0.2871723 5.571264 0.0000000 0.0000005 0 Ghr 360.5454 1.594410 0.2777837 5.739754 0.0000000 0.0000002 0 Podxl2 285.3952 1.578838 0.2209865 7.144499 0.0000000 0.0000000 0 Pear1 1186.9914 1.578822 0.2104603 7.501756 0.0000000 0.0000000 0 Spdef 436.7141 -1.578703 0.3010778 -5.243505 0.0000002 0.0000027 0 Frmpd1 179.6637 -1.578377 0.5002591 -3.155120 0.0016043 0.0080936 0 Klf2 1438.5342 1.571775 0.3242437 4.847511 0.0000013 0.0000167 0 Pelo 681.5882 1.570255 0.2332854 6.731046 0.0000000 0.0000000 0 Arhgdib 786.4187 1.570099 0.4605865 3.408912 0.0006522 0.0037871 0 Nectin1 445.3311 1.559745 0.1709112 9.126056 0.0000000 0.0000000 0 C4b 6332.3885 1.559685 0.3801207 4.103130 0.0000408 0.0003503 0 Vstm4 268.8867 1.559367 0.3314511 4.704667 0.0000025 0.0000310 0 Pdlim1 571.6938 1.558993 0.3123685 4.990878 0.0000006 0.0000087 0 Tubb6 2199.7301 1.556347 0.2739198 5.681761 0.0000000 0.0000003 0 Cbs 991.0743 -1.554683 0.3533517 -4.399816 0.0000108 0.0001104 0 Slit2 311.9405 1.553595 0.4555367 3.410471 0.0006485 0.0037699 0 Pcp4 177.4179 -1.553452 0.4763417 -3.261213 0.0011094 0.0059326 0 Egfr 509.8697 1.552845 0.2609059 5.951742 0.0000000 0.0000001 0 Nrg1 360.5283 1.551680 0.3079499 5.038740 0.0000005 0.0000069 0 Rps19 209.2642 1.551030 0.5409993 2.866973 0.0041442 0.0176313 0 Aplp1 553.1096 1.550737 0.2886425 5.372517 0.0000001 0.0000014 0 Il1rn 545.8045 -1.549482 0.3716479 -4.169221 0.0000306 0.0002721 0 Cst6 503.1537 1.548567 0.3865136 4.006501 0.0000616 0.0005053 0 Cerk 266.2464 1.548556 0.2926497 5.291501 0.0000001 0.0000021 0 Prr7 112.0424 1.545974 0.3094572 4.995760 0.0000006 0.0000085 0 Fam181b 113.1225 1.545330 0.4185720 3.691911 0.0002226 0.0015049 0 Tagln 2624.4932 1.544899 0.2958339 5.222185 0.0000002 0.0000029 0 Lrrc8c 239.2720 1.543264 0.3984249 3.873413 0.0001073 0.0008160 0 Scn1b 214.9447 1.543260 0.2974027 5.189123 0.0000002 0.0000034 0 Pik3cd 194.6883 1.541470 0.4128931 3.733340 0.0001890 0.0013138 0 Ckb 3038.5151 1.540677 0.2448073 6.293425 0.0000000 0.0000000 0 Fads3 135.8083 1.539584 0.3182040 4.838357 0.0000013 0.0000174 0 Prkcb 135.0218 1.538840 0.4532593 3.395056 0.0006861 0.0039579 0 Erbb4 125.6701 -1.537713 0.3590362 -4.282890 0.0000184 0.0001749 0 Fut2 336.6208 -1.536448 0.3755802 -4.090864 0.0000430 0.0003668 0 Tnfaip2 419.8491 1.535503 0.2989798 5.135807 0.0000003 0.0000045 0 Paqr5 354.3519 -1.531292 0.3074586 -4.980482 0.0000006 0.0000091 0 Npr2 206.1419 1.530276 0.3701870 4.133792 0.0000357 0.0003107 0 Pmp22 1647.3979 1.527858 0.2791268 5.473708 0.0000000 0.0000009 0 Wnt4 1279.7850 -1.527614 0.2745663 -5.563737 0.0000000 0.0000005 0 Rasip1 138.5032 1.523296 0.3551644 4.288988 0.0000179 0.0001711 0 Uap1 1175.6289 1.521917 0.3408833 4.464628 0.0000080 0.0000849 0 Smtn 715.9009 1.521074 0.2601365 5.847216 0.0000000 0.0000001 0 Thbs3 335.9262 1.517784 0.2961045 5.125838 0.0000003 0.0000047 0 Sidt1 656.7297 -1.514287 0.2648492 -5.717544 0.0000000 0.0000002 0 Timp3 3167.9109 1.513588 0.2674382 5.659580 0.0000000 0.0000003 0 Kremen1 268.4609 1.513346 0.3096050 4.887990 0.0000010 0.0000139 0 Rpl8 254.1429 1.510537 0.4786577 3.155777 0.0016007 0.0080803 0 Maged2 1039.7005 1.510531 0.2242516 6.735878 0.0000000 0.0000000 0 Ankh 365.6035 1.507616 0.3102127 4.859944 0.0000012 0.0000158 0 Kdelr3 1070.8402 1.504935 0.2185224 6.886869 0.0000000 0.0000000 0 Sh2d3c 149.8640 1.504773 0.3034615 4.958696 0.0000007 0.0000101 0 HighExprGenes=rownames(resDNeprslt2)[which(resDNeprslt2$baseMean&gt;100 &amp; resDNeprslt2$log2FoldChange&lt;0) ] colSide=factor(infoTableFinal$Fraction[ which(infoTableFinal$Fraction!=&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide2=factor(infoTableFinal$Growth[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide3=factor(infoTableFinal$Treatment[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide4=cut(infoTableFinal$CD8Frac[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], c(-1, 0.025, 0.05, 0.1, 1), brewer.pal(4, &quot;Greens&quot;)) colSide5=cut(infoTableFinal$IFEpCAM[which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], c(-1, 0.05, 0.1, 0.15, 1), brewer.pal(4, &quot;Greens&quot;)) TableCols=rbind(palette()[colSide], palette()[colSide2], palette()[colSide3], as.character(colSide4), as.character(colSide5)) rownames(TableCols)=c(&quot;Fraction&quot;, &quot;growth&quot;, &quot;treatment&quot;, &quot;cd8 fraction&quot;, &quot;cd8 int. fraction&quot;) colnames(TableCols)=colnames(assay(vsdDNep)) #pdf(sprintf(&quot;rslt/DESeq/difference_between_DN_ep_samples_%s.pdf&quot;, Sys.Date()), height=7, width=8) t1=assay(vsdDNep)[rownames(vsdDNep)%in%unlist(GeneListRat), ] heatmap.2(t1, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;cell type specific markers&quot;) t2=assay(vsdDNep)[which(rownames(vsdDNep)%in%RatCosmic &amp; rownames(vsdDNep)%in%rownames(resDNeprslt2)), ] heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;DEG cosmic genes&quot;) t2=assay(vsdDNep)[which( rownames(vsdDNep)%in%HighExprGenes), ] a1=heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;Enriched in Ep genes&quot;) #heatmap.2(t2[ ,-grep(&quot;CD45&quot;, colnames(t2))], trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide2], scale=&quot;row&quot;, main=&quot;Enriched in Ep genes&quot;) TableCols2=TableCols[ ,a1$colInd] colOutput=melt(TableCols2) colOutput$Var2=factor(colOutput$Var2, levels=unique(colOutput$Var2)) #write.csv(resDNeprslt2, file=sprintf(&quot;outputs/DESeq/difference_between_DN_Ep(ref)_samples_%s.csv&quot;, Sys.Date())) #Note that there seems to be two main groups of Ep cells: #The first one is enriched for canonical tumour progression pathways: eg. expression of wnt, fox1a etc. #The second one doesnt seem to have as high expression of these genes, but have high immune related signalling pathways. #We can append this information into the overall data file and determine whether there is an association with growth or treatment a2=heatmap.2(t2[ ,grep(&quot;Ep&quot;, colnames(t2))], trace=&quot;none&quot;, col=RdBu[11:1], scale=&quot;row&quot;, main=&quot;Enriched in Ep genes&quot;, ColSideColors = TableCols[2, grep(&quot;Ep&quot;, colnames(t2))]) ac=as.hclust(a2$colDendrogram) ad=cutree(ac, 3) #table(ad) head(ad) infoTableFinal$EpCAMsubtype=NA infoTableFinal$EpCAMsubtype[match(names(ad), rownames(infoTableFinal))]=ad table(infoTableFinal$EpCAMsubtype, infoTableFinal$Growth) table(infoTableFinal$EpCAMsubtype, infoTableFinal$Treatment) table(infoTableFinal$EpCAMsubtype, infoTableFinal$SpatialManual) 8.2 No. samples in comparisons Separate out the tables into CD45, DN and Ep fractions. Below, we check the number of samples in each subgroup, based on Treatment growth rate fraction infoTableFinal$Treatment=factor(infoTableFinal$Treatment)#[which(is.na(infoTableFinal$Treatment))]=&quot;PDL1&quot; infoTableFinal$SpatialManual=factor(infoTableFinal$SpatialManual) infoTableFinal$treatA=factor(ifelse(infoTableFinal$Treatment==&quot;Vehicle&quot;, &quot;control&quot;, &quot;imm&quot;)) infoTableFinal$MHcut=factor(ifelse(infoTableFinal$MHEpCAM&gt;=median(df.Spatial$MH.EpCAM, na.rm = T), &quot;inf&quot;, &quot;res&quot;)) infoTableFinal$CD8FracCut=factor(ifelse(infoTableFinal$CD8Frac&gt;=median(df.Spatial$CD8frac, na.rm = T), &quot;high&quot;, &quot;low&quot;)) infoTableFinal$Growth=factor(infoTableFinal$Growth) # print(&#39;number of samples for each treatment and growth rate&#39;) # table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$Growth) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$Growth) par(mfrow=c(3,2)) ContTable(t(a1[ , , 1]), &quot;growing&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;stable&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$MHcut) ContTable(t(a1[ , , 1]), &quot;infiltrating (MH)&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;restricted (MH)&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$CD8FracCut) ContTable(t(a1[ , , 1]), &quot;CD8 low&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;CD8 high&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) Note that based on the above tables, there some comparisons which are slightly imbalanced: Note that PDL1/LY treatment with high cd8 content results in very few epithelial cells for analysis There are few “stable” samples for comparisons LY samples are overwhelmingly “infiltrating” 8.3 Set-up cell-type specific the comparisons Setup the following comparisons for each cell type (Separate out the tables into CD45, DN and Ep fractions) \\[ expression ~ growing + treatment + batch (exclude 1) \\] Compare: Treatment (EpddsTreat) Any immunotherapy treatment (Epdds) Growth alone: (EpddsGrowth) MH index: (EpddsStrMH) CD8 content (EpddsCD8) We remove genes which have 0 counts in more than half the samples, and genes which have a row sum less than \\(10^{(log10(mean(rowsums))-log10(sd(rowsums)))}\\) # find epithelial samples epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;Ep&quot; &amp; !is.na(infoTableFinal$Growth))]) # 2: ep Epdds=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~treatA+factor(Batch)) a1x=rowSums(counts(Epdds)) a1b=apply(counts(Epdds), 1, function(c) sum(c!=0)) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(Epdds))&gt;10^sd1vals) keep2=which(apply(counts(Epdds), 1, function(c) sum(c!=0))&gt; (ncol(Epdds)/2)) Epdds=Epdds[intersect(keep, keep2), ] Epdds=DESeq(Epdds) # 1: ep EpddsTreat=Epdds design(EpddsTreat)=~Treatment+factor(Batch) EpddsTreat=DESeq(EpddsTreat) # 3. ep EpddsGrowth=Epdds design(EpddsGrowth)=~Growth+factor(Batch) ## error is here! EpddsGrowth=DESeq(EpddsGrowth) # 4. ep EpddsStrMH=Epdds[ ,which(!is.na(Epdds$MHcut))] design(EpddsStrMH)=~MHcut+factor(Batch) EpddsStrMH=DESeq(EpddsStrMH) # 5.ep Epddscd8=Epdds[ ,which(!is.na(Epdds$CD8FracCut))] design(Epddscd8)=~CD8FracCut+factor(Batch) Epddscd8=DESeq(Epddscd8) #R1=results(EpddsTreatG, contrast = list(c(&quot;Treatment_LY_vs_Vehicle&quot;, &quot;Growthgrowing&quot;))) ## CD45 samples cdidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;CD45&quot; &amp; !is.na(infoTableFinal$Growth))]) CDdds=DESeqDataSetFromMatrix(allstarFinal[ ,cdidx], infoTableFinal[cdidx, ], design=~treatA+factor(Batch)) ## change class a1x=rowSums(counts(CDdds)) a1b=apply(counts(CDdds), 1, function(c) sum(c!=0)) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(CDdds))&gt;10^sd1vals) keep2=which(apply(counts(CDdds), 1, function(c) sum(c!=0))&gt; (ncol(CDdds)/2)) CDdds=CDdds[intersect(keep, keep2), ] #1. CD45 CDdds=DESeq(CDdds) #2, CD45 CDddsTreat=CDdds design(CDddsTreat)=~Treatment+factor(Batch) CDddsTreat=DESeq(CDddsTreat) # 3. Cd45 CDddsGrowth=CDdds design(CDddsGrowth)=~Growth+factor(Batch) CDddsGrowth=DESeq(CDddsGrowth) #4 CDddsStrMH=CDdds[ ,which(!is.na(CDdds$MHcut))] design(CDddsStrMH)=~MHcut+factor(Batch) CDddsStrMH=DESeq(CDddsStrMH) CDddscd8=CDdds[ ,which(!is.na(CDdds$CD8FracCut))] design(CDddscd8)=~CD8FracCut+factor(Batch) CDddscd8=DESeq(CDddscd8) ## DN samples DNidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;DN&quot; &amp; !is.na(infoTableFinal$Growth))]) DNdds=DESeqDataSetFromMatrix(allstarFinal[ ,DNidx], infoTableFinal[DNidx, ], design=~treatA+factor(Batch)) ## change class a1x=rowSums(counts(DNdds)) a1b=apply(counts(DNdds), 1, function(c) sum(c!=0)) # par(mfrow=c(1,2)) # hist(log10(a1x+1), main=&quot;log10 total counts&quot;) # hist((a1b+1), main=&quot;Non-zero entries&quot;) sd1vals=median(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(DNdds))&gt;10^sd1vals) keep2=which(apply(counts(DNdds), 1, function(c) sum(c!=0))&gt; (ncol(DNdds)/2)) keep=which(rowSums(counts(DNdds))&gt;(ncol(DNdds))) keep2=which(apply(counts(DNdds), 1, function(c) sum(c!=0))&gt; (ncol(DNdds)/2)) DNdds=DNdds[intersect(keep, keep2), ] DNdds=DESeq(DNdds) DNddsTreat=DNdds design(DNddsTreat)=~Treatment+factor(Batch) DNddsTreat=DESeq(DNddsTreat) DNddsGrowth=DNdds design(DNddsGrowth)=~Growth+factor(Batch) DNddsGrowth=DESeq(DNddsGrowth) DNddsStrMH=DNdds[ ,which(!is.na(DNdds$MHcut))] design(DNddsStrMH)=~MHcut+factor(Batch) DNddsStrMH=DESeq(DNddsStrMH) DNddscd8=DNdds[ ,which(!is.na(DNdds$CD8FracCut))] design(DNddscd8)=~CD8FracCut+factor(Batch) DNddscd8=DESeq(DNddscd8) save(Epdds, EpddsTreat,CDdds, CDddsTreat, DNdds, DNddsTreat, EpddsGrowth, CDddsGrowth, DNddsGrowth, DNddscd8, DNddsStrMH, CDddscd8, CDddsStrMH, Epddscd8, EpddsStrMH, file=sprintf(&quot;outputs/subfraction_analysis_%s.RData&quot;, Sys.Date())) # Alist=results(EpddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # Clist=results(CDddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # Dlist=results(DNddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) #load(&quot;rslt/DESeq/subfraction_analysis_2020-09-29.RData&quot;) #write.csv(a2, sprintf(&quot;rslt/DESeq/Spatial_Manual_comparison_%s.csv&quot;, Sys.Date())) These comparisons are saved in the temporary outputfile outputs/subfraction_analysis_2021-02-20.RData. In each comparison, there are 13134 genes compared. 8.4 PCA plots Below, we look at PCA plots with information on treatment, growth, spatial patterns overlaid. These are separated based on cell type 8.4.1 EpCAM We see that treatment nor growth separates out these samples Epdds$cd8MH=paste(Epdds$CD8FracCut, Epdds$MHcut) vstEp=vst(Epdds, blind=F) #vstEp$Treatment2=ifelse(vstEp$Treatment==&quot;Vehicle&quot;, &quot;no&quot;, &quot;yes&quot;) vsdLimmaEp=vstEp assay(vsdLimmaEp)&lt;- limma::removeBatchEffect(assay(vsdLimmaEp),vsdLimmaEp$Batch) plotPCA(vsdLimmaEp, c(&quot;Growth&quot;))+scale_color_manual(values=c(ColSizeb, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth Ep&quot;) a2=plotPCA(vsdLimmaEp, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment Ep&quot;)+scale_color_manual(values=c(ColMerge[ ,1], &quot;#5D5D5D&quot;)) a2 write.csv(a2$data, file=&quot;nature-tables/3i_epcam.csv&quot;) #plotPCA(vstEp, intgroup=c(&quot;Treatment&quot;))+geom_text(aes(label=colnames(vstEp)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: treatment&quot;) #plotPCA(vstEp, intgroup=c(&quot;Treatment&quot;))+geom_text(aes(label=colnames(vstEp)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: treatment&quot;) #plotPCA(vstEp, intgroup=c(&quot;Treatment&quot;, &quot;Growth&quot;))+geom_text(aes(label=colnames(vstEp)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: treatment + growth&quot;) #plotPCA(vstEp, intgroup=c(&quot;MHcut&quot;))+geom_text(aes(label=Epdds$MHEpCAM),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: MH ep to stroma index&quot;) #plotPCA(vstEp, intgroup=c(&quot;CD8FracCut&quot;))+geom_text(aes(label=Epdds$CD8FracCut),vjust=2,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: cd8 + MH&quot;) #pdf(&quot;figure-outputs/Ext3j-cor-plot.pdf&quot;, height=6, width = 6) #plotPCA(vstEp, intgroup=c(&quot;Growth&quot;))+geom_text(aes(label=colnames(vstEp)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: growth: kinetics vs final tum size&quot;)+scale_color_manual(values=c(ColSize[2:1], &quot;black&quot;))+theme_bw() 8.4.2 CD45 Note there is a strong batch effect: need to apply limma remove Batch Effect prior to creating PCA plots #CDdds$cd8MH=paste(CDdds$CD8FracCut, CDdds$MHcut) vstCD=vst(CDdds, blind=F) plotPCA(vstCD, &quot;Batch&quot;) vsdLimmaCD=vstCD assay(vsdLimmaCD)&lt;- limma::removeBatchEffect(assay(vsdLimmaCD),vstCD$Batch) # library(cluster) ax1=plotPCA(vsdLimmaCD, c(&quot;Batch&quot;), returnData=T) plotPCA(vsdLimmaCD, c(&quot;Growth&quot;))+scale_color_manual(values=c(ColSizeb, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth CD45&quot;) a2=plotPCA(vsdLimmaCD, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment CD45&quot;)+scale_color_manual(values=c(ColMerge[,1], &quot;#5D5D5D&quot;)) a2 write.csv(a2$data, file=&quot;nature-tables/3i_cd45.csv&quot;) # plotPCA(vstCD, intgroup=c(&quot;Treatment&quot;))+geom_text(aes(label=colnames(vstCD)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: treatment&quot;) # plotPCA(vstCD, intgroup=c(&quot;Treatment&quot;, &quot;Growth&quot;))+geom_text(aes(label=colnames(vstCD)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: treatment + growth&quot;) # plotPCA(vstCD, intgroup=c(&quot;Growth&quot;))+geom_text(aes(label=CDdds$TumSize),vjust=2,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: growth: kinetics vs final tum size&quot;) # plotPCA(vstCD, intgroup=c(&quot;MHcut&quot;))+geom_text(aes(label=CDdds$MHEpCAM),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 treatment MH value&quot;) # plotPCA(vstCD, intgroup=c(&quot;CD8FracCut&quot;))+geom_text(aes(label=CDdds$CD8FracCut),vjust=2,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: cd8 + MH&quot;) # # # #pdf(&quot;~/Desktop/FigS2-cd45-pca-cor-plot.pdf&quot;, height=6, width = 6) # # plotPCA(vstCD, intgroup=c(&quot;Growth&quot;))+geom_text(aes(label=colnames(vstCD)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: growth: kinetics vs final tum size&quot;)+scale_color_manual(values=c(ColSize[2:1], &quot;black&quot;))+theme_bw() 8.4.3 DN DNdds$cd8MH=paste(DNdds$CD8FracCut, DNdds$MHcut) vstDN=vst(DNdds, blind=T) vstDN$Treatment2=ifelse(vstDN$Treatment==&quot;Vehicle&quot;, &quot;no&quot;, &quot;imm&quot;) vsdLimmaDN=vstDN assay(vsdLimmaDN)&lt;- limma::removeBatchEffect(assay(vsdLimmaDN),vstDN$Batch) # library(cluster) # PAMx=pam(t(assay(vsdLimmaCD)), 2) # autoplot(PAMx ) # # ax1=plotPCA(vsdLimmaDN, c(&quot;Batch&quot;), returnData=T) plotPCA(vsdLimmaDN, c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth DN&quot;) a2=plotPCA(vsdLimmaDN, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment DN&quot;)+scale_color_manual(values=c(ColMerge[,1], &quot;#5D5D5D&quot;)) a2 write.csv(a2$data, file=&quot;nature-tables/3i_dn.csv&quot;) # plotPCA(vstDN, intgroup=c(&quot;Treatment&quot;))+geom_text(aes(label=colnames(vstDN)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;DN population: treatment &quot;) # plotPCA(vstDN, intgroup=c(&quot;Treatment&quot;, &quot;Growth&quot;))+geom_text(aes(label=colnames(vstDN)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;DN population: treatment + growth&quot;) # plotPCA(vstDN, intgroup=c(&quot;Growth&quot;))+geom_text(aes(label=DNdds$TumSize),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;DN population: growth: kinetics vs final tum size&quot;) # plotPCA(vstDN, intgroup=c(&quot;MHcut&quot;))+geom_text(aes(label=DNdds$MHEpCAM),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;DN treatment (immune vs control) + growth&quot;) # plotPCA(vstDN, intgroup=c(&quot;CD8FracCut&quot;))+geom_text(aes(label=DNdds$CD8FracCut),vjust=2,check_overlap = TRUE,size = 4)+ggtitle(&quot;CD45 population: cd8 + MH&quot;) # #dev.off() #pdf(&quot;~/Desktop/FigS3-dn-pca-cor-plot.pdf&quot;, height=6, width = 6) # plotPCA(vstDN, intgroup=c(&quot;Growth&quot;))+geom_text(aes(label=colnames(vstDN)),vjust=1,check_overlap = TRUE,size = 4)+ggtitle(&quot;Ep population: growth: kinetics vs final tum size&quot;)+scale_color_manual(values=c(ColSize[2:1], &quot;black&quot;))+theme_bw() 8.5 Pearson correlation plots of samples Below are pearson correlation plots of the samples in each comparison, colored by growth status Xa1=cor(assay(vsdLimmaEp)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstEp$Growth], trace=&quot;none&quot;, main=&quot;Ep&quot;) #dev.off() write.csv(Xa1, file=&quot;nature-tables/Ext3j.csv&quot;) Xa1=cor(assay(vsdLimmaCD)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstCD$Growth], trace=&quot;none&quot;, main=&quot;CD45&quot;) write.csv(Xa1, file=&quot;nature-tables/FIgS2-cd45-pca-cor-plot.csv&quot;) Xa1=cor(assay(vsdLimmaDN)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstDN$Growth], trace=&quot;none&quot;, main=&quot;DN&quot;) #dev.off() write.csv(Xa1, file=&quot;nature-tables/DNsamples_progression_similarity.csv&quot;) "],["collating-results-and-running-gsea.html", "Chapter 9 Collating results and running GSEA", " Chapter 9 Collating results and running GSEA In this section, we combine all the comparisons together for downstream analysis, including number of differential genes per comparisons number of samples per comparison write the output to file (outputs/DESeq/Ep_growth_treat.xlsx) For GSEA we convert rat to human symbols run overlap analysis if there are more than 3 hits (outputs/DESeq/HyperGeo_Ep_growth_treat.xlsx) run gene set enrichment analysis on all samples (outputs/DESeq/GSEA_Ep_growth_treat.xlsx) all outputs saved to outputs/all_differential_comparisons.RData) An example of the code is below: hits=EpCompSig[[i]] ## list of significant genes hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=EpComp4[[i]]$log2FoldChange names(fcTab)=epGenesConv gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) #load(&quot;rslt/DESeq/Epithelial_fraction.RData&quot;) #table(Epdds$Comp4) #xsearch=c(&quot;stablecontrol&quot;,&quot;growingimm&quot;, &quot;stableimm&quot;, &quot;stableimm&quot;) #ysearch=c(&quot;growingcontrol&quot;,&quot;growingcontrol&quot;, &quot;stablecontrol&quot;, &quot;growingimm&quot;) ## for treatment control: big differences here which are not replicated EpComp4=list() EpCompSig=list() UpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:2){ Eres1=results(Epdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) EpComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) EpCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) UpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(EpddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) EpComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[i+1]]=g1 UpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } # xsearchA=c(&quot;stable.Vehicle&quot;,&quot;stable.LY&quot;, &quot;stable.PDL1+LY&quot;, &quot;stable.PDL1&quot;) # ysearchB=c(&quot;growing.Vehicle&quot;,&quot;growing.LY&quot;, &quot;growing.PDL1+LY&quot;, &quot;growing.PDL1&quot;) # # # for (i in 1:4){ # Eres5=results(EpddsTreatG, contrast=c(&quot;Comp8&quot;, xsearchA[i], ysearchB[i])) # EpComp4[[i+7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # EpCompSig[[i+7]]=g1 # UpDn1[ ,i+7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } Eres5=results(EpddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) EpComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[5]]=g1 UpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(EpddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) EpComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[6]]=g1 UpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(EpddsStrIF, contrast=c(&quot;IFcut&quot;, &quot;res&quot;, &quot;inf&quot;)) # EpComp4[[14]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # EpCompSig[[14]]=g1 # UpDn1[ ,14]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # Eres5=results(EpddsStrknn, contrast=c(&quot;knncut&quot;, &quot;res&quot;, &quot;inf&quot;)) # EpComp4[[15]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # EpCompSig[[15]]=g1 # UpDn1[ ,15]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(Epddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) EpComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[7]]=g1 UpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(EpddsSpatMan, contrast=c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # EpComp4[[17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # EpCompSig[[17]]=g1 # UpDn1[ ,17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # xsearchC=c(&quot;low.inf&quot;,&quot;high.inf&quot;, &quot;low.inf&quot;, &quot;low.res&quot;) # ysearchD=c(&quot;low.res&quot;,&quot;high.res&quot;, &quot;high.inf&quot;, &quot;high.res&quot;) # # for (i in 1:4){ # Eres5=results(Epddscd8MH, contrast=c(&quot;cd8MH&quot;, xsearchC[i], ysearchD[i])) # EpComp4[[i+17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # EpCompSig[[i+17]]=g1 # UpDn1[ ,i+17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } # #boxplot(assay(Epdds)[&quot;Snca&quot;, ]~Epdds$treatA+Epdds$Growth) rownames(UpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(UpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(EpComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(EpCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) ## write to a xls write_xlsx(EpComp4, path=sprintf(&quot;outputs/DESeq/DGEA_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) #load(&quot;anntotations/Rat_biomart_gene_annotations.RData&quot;) epGenes=rownames(Epdds) cdGenes=rownames(CDdds) dnGenes=rownames(DNdds) l1=SymHum2Rat$HGNC.symbol[match(epGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(epGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(epGenes, Mouse2Hum$MGI.symbol)] epGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, epGenes))) l1=SymHum2Rat$HGNC.symbol[match(cdGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(cdGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(cdGenes, Mouse2Hum$MGI.symbol)] cdGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, cdGenes))) l1=SymHum2Rat$HGNC.symbol[match(dnGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(dnGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(dnGenes, Mouse2Hum$MGI.symbol)] dnGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, dnGenes))) load(&quot;../anntotations/ListofGeneSets2.RData&quot;) #save(ListGSC, file=&quot;anntotations/ListofGeneSets2.RData&quot;) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(EpComp4)*2, nrow=length(x))) ismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) ismrB&lt;-ismr3 for (i in 1:length(EpComp4)){ hits=EpCompSig[[i]] hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=EpComp4[[i]]$log2FoldChange names(fcTab)=epGenesConv if (length(hits)&gt;2){ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca=GSCA(listOfGeneSetCollections=ListGSC, geneList=fcTab) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(ismr3[[j]])) ismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;2){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(ismrB[[j]])) ismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } Epismr3 &lt;- lapply(ismr3, function(x){ colnames(x)&lt;- paste(rep(names(EpComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(Epismr3)=names(ListGSC) Epismr3&lt;-lapply(Epismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(Epismr3, path=sprintf(&quot;outputs/DESeq/GSEA_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) EpismrHG &lt;- lapply( ismrB, function(x){ colnames(x)&lt;- paste(rep(names(EpComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(EpismrHG)=names(ListGSC) EpismrHG&lt;-lapply(EpismrHG, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(EpismrHG, path=sprintf(&quot;outputs/DESeq/HyperGeo_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) #load(&quot;rslt/DESeq/Epithelial_fraction.RData&quot;) ## for treatment control: big differences here which are not replicated CDComp4=list() CDCompSig=list() CDUpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:4){ Eres1=results(CDdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) CDComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) CDCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) CDUpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(CDddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) CDComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[i+1]]=g1 CDUpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } # xsearchA=c(&quot;stable.Vehicle&quot;,&quot;stable.LY&quot;, &quot;stable.PDL1+LY&quot;, &quot;stable.PDL1&quot;) # ysearchB=c(&quot;growing.Vehicle&quot;,&quot;growing.LY&quot;, &quot;growing.PDL1+LY&quot;, &quot;growing.PDL1&quot;) # # # for (i in 1:4){ # Eres5=results(CDddsTreatG, contrast=c(&quot;Comp8&quot;, xsearchA[i], ysearchB[i])) # CDComp4[[i+7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # CDCompSig[[i+7]]=g1 # CDUpDn1[ ,i+7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } #boxplot(assay(CDdds)[&quot;Snca&quot;, ]~CDdds$treatA+CDdds$Growth) Eres5=results(CDddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) CDComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[5]]=g1 CDUpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(CDddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) CDComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[6]]=g1 CDUpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(CDddsStrIF, contrast=c(&quot;IFcut&quot;, &quot;res&quot;, &quot;inf&quot;)) # CDComp4[[14]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # CDCompSig[[14]]=g1 # CDUpDn1[ ,14]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # Eres5=results(CDddsStrknn, contrast=c(&quot;knncut&quot;, &quot;res&quot;, &quot;inf&quot;)) # CDComp4[[15]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # CDCompSig[[15]]=g1 # CDUpDn1[ ,15]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(CDddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) CDComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[7]]=g1 CDUpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(CDddsSpatMan, contrast=c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # CDComp4[[17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # CDCompSig[[17]]=g1 # CDUpDn1[ ,17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # xsearchC=c(&quot;low.inf&quot;,&quot;high.inf&quot;, &quot;low.inf&quot;, &quot;low.res&quot;) # ysearchD=c(&quot;low.res&quot;,&quot;high.res&quot;, &quot;high.inf&quot;, &quot;high.res&quot;) # for (i in 1:4){ # Eres5=results(CDddscd8MH, contrast=c(&quot;cd8MH&quot;, xsearchC[i], ysearchD[i])) # CDComp4[[i+17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # CDCompSig[[i+17]]=g1 # CDUpDn1[ ,i+17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } # rownames(CDUpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(CDUpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(CDComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(CDCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) ## write to a xls write_xlsx(CDComp4, path=sprintf(&quot;outputs/DESeq/CD_growth_treat_%s.xlsx&quot;, Sys.Date())) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(CDComp4)*2, nrow=length(x))) CDismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) CDismrB=CDismr3 for (i in 1:length(CDComp4)){ hits=CDCompSig[[i]] hits=cdGenesConv[match(hits, rownames(CDdds))] fcTab=CDComp4[[i]]$log2FoldChange names(fcTab)=cdGenesConv if (length(hits)&gt;3){ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(CDismr3[[j]])) CDismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;3){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(CDismrB[[j]])) CDismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } CDismr3 &lt;- lapply(CDismr3, function(x){ colnames(x)&lt;- paste(rep(names(CDComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(CDismr3)=names(ListGSC) CDismr3&lt;-lapply(CDismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(CDismr3, path=sprintf(&quot;outputs/DESeq/GSEA_CD_growth_treat.xlsx&quot;)) CDismrB &lt;- lapply(CDismrB, function(x){ colnames(x)&lt;- paste(rep(names(CDComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(CDismrB)=names(ListGSC) CDismrB&lt;-lapply(CDismrB, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(CDismrB, path=sprintf(&quot;outputs/DESeq/HyperGeom_CD_growth_treat.xlsx&quot;)) #load(&quot;rslt/DESeq/Epithelial_fraction.RData&quot;) # xsearch=c(&quot;stablecontrol&quot;,&quot;growingimm&quot;, &quot;stableimm&quot;, &quot;stableimm&quot;) # ysearch=c(&quot;growingcontrol&quot;,&quot;growingcontrol&quot;, &quot;stablecontrol&quot;, &quot;growingimm&quot;) ## for treatment control: big differences here which are not replicated DNComp4=list() DNCompSig=list() DNUpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:4){ Eres1=results(DNdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) DNComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) DNCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) DNUpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(DNddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) DNComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[i+1]]=g1 DNUpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } # xsearchA=c(&quot;stable.Vehicle&quot;,&quot;stable.LY&quot;, &quot;stable.PDL1+LY&quot;, &quot;stable.PDL1&quot;) # ysearchB=c(&quot;growing.Vehicle&quot;,&quot;growing.LY&quot;, &quot;growing.PDL1+LY&quot;, &quot;growing.PDL1&quot;) # # # for (i in 1:4){ # Eres5=results(DNddsTreatG, contrast=c(&quot;Comp8&quot;, xsearchA[i], ysearchB[i])) # DNComp4[[i+7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # DNCompSig[[i+7]]=g1 # DNUpDn1[ ,i+7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } # Eres5=results(DNddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) DNComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[5]]=g1 DNUpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(DNddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) DNComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[6]]=g1 DNUpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(DNddsStrIF, contrast=c(&quot;IFcut&quot;, &quot;res&quot;, &quot;inf&quot;)) # DNComp4[[14]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # DNCompSig[[14]]=g1 # DNUpDn1[ ,14]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # Eres5=results(DNddsStrknn, contrast=c(&quot;knncut&quot;, &quot;res&quot;, &quot;inf&quot;)) # DNComp4[[15]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # DNCompSig[[15]]=g1 # DNUpDn1[ ,15]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(DNddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) DNComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[7]]=g1 DNUpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # Eres5=results(DNddsSpatMan, contrast=c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # DNComp4[[17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # DNCompSig[[17]]=g1 # DNUpDn1[ ,17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # # xsearchC=c(&quot;low.inf&quot;,&quot;high.inf&quot;, &quot;low.inf&quot;, &quot;low.res&quot;) # ysearchD=c(&quot;low.res&quot;,&quot;high.res&quot;, &quot;high.inf&quot;, &quot;high.res&quot;) # # for (i in 1:4){ # Eres5=results(DNddscd8MH, contrast=c(&quot;cd8MH&quot;, xsearchC[i], ysearchD[i])) # DNComp4[[i+17]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) # g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) # DNCompSig[[i+17]]=g1 # DNUpDn1[ ,i+17]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), # length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) # } rownames(DNUpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(DNUpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(DNComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(DNCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) # rownames(DNUpDn1)=c(&quot;down&quot;, &quot;up&quot;) # colnames(DNUpDn1)=c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;), &quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;, &quot;res_vs_inf.knn&quot;, &quot;lo_vs_hi_cd8&quot;, &quot;inf_vs_res.SpatMan&quot;, &quot;low.inf_vs_low.res.cd8.mh&quot;, &quot;hi.inf_vs_hi.res.cd8.mh&quot;, &quot;low.inf_vs_hi.inf.cd8.mh&quot;, &quot;low.res_vs_hi.res.cd8.mh&quot;) # # #c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;) # # # names(DNComp4)=c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;), &quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;, &quot;res_vs_inf.knn&quot;, &quot;lo_vs_hi_cd8&quot;, &quot;inf_vs_res.SpatMan&quot;, &quot;low.inf_vs_low.res.cd8.mh&quot;, &quot;hi.inf_vs_hi.res.cd8.mh&quot;, &quot;low.inf_vs_hi.inf.cd8.mh&quot;, &quot;low.res_vs_hi.res.cd8.mh&quot;) # # #c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;) # names(DNCompSig)=c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;), &quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;, &quot;res_vs_inf.knn&quot;, &quot;lo_vs_hi_cd8&quot;, &quot;inf_vs_res.SpatMan&quot;, &quot;low.inf_vs_low.res.cd8.mh&quot;, &quot;hi.inf_vs_hi.res.cd8.mh&quot;, &quot;low.inf_vs_hi.inf.cd8.mh&quot;, &quot;low.res_vs_hi.res.cd8.mh&quot;) #c(paste(xsearch, &quot;vs&quot;, ysearch, sep=&quot;_&quot;), paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;), paste(xsearchA, &quot;vs&quot;, ysearchB, sep=&quot;_&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;res_vs_inf.IF&quot;) ## write to a xls write_xlsx(DNComp4, path=sprintf(&quot;outputs/DN_growth_treat_%s.xlsx&quot;, Sys.Date())) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(DNComp4)*2, nrow=length(x))) DNismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) DNismrB=DNismr3 for (i in 1:length(DNComp4)){ hits=DNCompSig[[i]] hits=dnGenesConv[match(hits, rownames(DNdds))] fcTab=DNComp4[[i]]$log2FoldChange names(fcTab)=dnGenesConv gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) if (length(hits)&gt;0){ gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(DNismr3[[j]])) DNismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;2){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(DNismrB[[j]])) DNismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } DNismr3 &lt;- lapply(DNismr3, function(x){ colnames(x)&lt;- paste(rep(names(DNComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(DNismr3)=names(ListGSC) DNismr3&lt;-lapply(DNismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(DNismr3, path=sprintf(&quot;outputs/GSEA_DN_growth_treat.xlsx&quot;)) DNismrB &lt;- lapply(DNismrB, function(x){ colnames(x)&lt;- paste(rep(names(DNComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(DNismrB)=names(ListGSC) DNismrB&lt;-lapply(DNismrB, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(DNismrB, path=sprintf(&quot;outputs/DESeq/HyperGeom_DN_growth_treat.xlsx&quot;)) save(DNComp4, EpComp4, CDComp4, DNismr3,Epismr3, CDismr3,DNismrB, EpismrHG, CDismrB, DNCompSig, EpCompSig, CDCompSig, UpDn1, CDUpDn1, DNUpDn1, file=sprintf(&quot;outputs/all_differential_comparisons_%s.RData&quot;, Sys.Date())) ## Pathway: PDL1+LY vs vehicle dneg1=as.numeric(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle NES`[which(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle padj`&lt;0.05)]) names(dneg1)=rownames(DNismr3$ProcessNetworks)[which(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle padj`&lt;0.05)] par(oma=c(5,2, 1, 1)) barplot(sort(dneg1), las=2) xx2=sapply(c(&quot;Cell adhesion&quot;, &quot;Proteolysis&quot;, &quot;Autophagy&quot;, &quot;Inflammation&quot;, &quot;Development&quot;), function(x) grep(x, names(dneg1))) barplot(sort(dneg1[unlist(xx2)]), las=2) "],["erpgr-subtyping.html", "Chapter 10 ER/Pgr Subtyping 10.1 Gene List 10.2 Progression cohort 10.3 Charcterisation cohort 10.4 DN samples 10.5 Comparison with staining 10.6 Summary of expression markers for each subtype/cell fraction", " Chapter 10 ER/Pgr Subtyping In this section, we will look at whether there are differences in rat subtype by: creating a list of specific markers of interest applying PAM clsutering (partitioning around medoids) As the DN samples do have keratin expression, we will also try to determine the subtypes in these samples too. In the below analyses, we will conduct this subtyping as follows: progression specific epithelial cohort characterisation specific epithelial cohort dn specific cohort (progression) 10.1 Gene List We will assess clustering using two different lists. A. is a more comprehensive list containing epithelial, mesenchymal markers and proliferation markers, B. has a more narrow list of subtype specific markers ‘Ar’, ‘Cd24’, ‘Cdh1’, ‘Foxa1’, ‘Gata3’, ‘Krt8’, ‘Krt18’, ‘Krt5’, ‘Vim’, ‘Erbb2’, ‘Esr1’, ‘Pgr’, ‘Mki67’, ‘Pcna’ ‘Ar’, ‘Foxa1’, ‘Gata3’, ‘Erbb2’, ‘Esr1’, ‘Pgr’ 10.2 Progression cohort We will be using variance stabilised counts in this section. Firstly, we will look at the progression cohort. Note that the overlap between the two gene-sets are similar, and the heatmap is row-scaled. Markers1=c(&#39;Ar&#39;, &#39;Cd24&#39;, &#39;Cdh1&#39;, &#39;Foxa1&#39;, &#39;Gata3&#39;, &#39;Krt8&#39;, &#39;Krt18&#39;, &#39;Krt5&#39;, &#39;Vim&#39;, &#39;Erbb2&#39;, &#39;Esr1&#39;, &#39;Pgr&#39;, &#39;Mki67&#39;, &#39;Pcna&#39;) Markers2=c(&#39;Ar&#39;, &#39;Foxa1&#39;, &#39;Gata3&#39;, &#39;Erbb2&#39;, &#39;Esr1&#39;, &#39;Pgr&#39;) # Progression cohort Ax1a=assay(vstEp)[ match(Markers1, rownames(assay(vstEp))),] Ax2a=assay(vstEp)[ match(Markers2, rownames(assay(vstEp))),] Pam1=pam(t(Ax1a), 2) Pam2=pam(t(Ax2a), 2) par(mfrow=c(2,2)) plot(Pam1, main=&quot;List A, progression cohort&quot;) plot(Pam2, main=&quot;List B, progression cohort&quot;) ColA=Pam1$clustering ColA=ifelse(ColA==1, &quot;Basal&quot;, &quot;Lum&quot;) ColB=Pam2$clustering ColB=ifelse(ColB==1, &quot;Basal&quot;, &quot;Lum&quot;) The following shows the heatmaps using these list, using average distances in the hclustering approaches: #colnames(Ax1a)=infoTableFinal$TumorIDnew[match(colnames(Ax1a), rownames(infoTableFinal))] #hclust.ave &lt;- function(x) hclust(x, method=&quot;average&quot;) ax1=heatmap.2(Ax1a, trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, main=&quot;narrow list&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColA)]) Figure 10.1: HR clustering ax1=heatmap.2(Ax2a, trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, main=&quot;narrow list&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColB)]) Figure 10.2: HR clustering We can save this information to our main data file # axb2=cutree(as.hclust(ax1$colDendrogram), 4) # ## Also perform a clustering analysis of the samples and see if they cluster according to subtype: # # CorMatEp=cor(assay(vsdLimmaEp)) # colnames(CorMatEp)=infoTableFinal$TumorIDnew[match(colnames(CorMatEp), rownames(infoTableFinal))] # rownames(CorMatEp)=colnames(CorMatEp) #ColSideCol=ifelse(axb2==2, &quot;blue&quot;, &quot;red&quot;) #ColSideColB=ifelse(ColA==&quot;Basal&quot;, &quot;red&quot;, &quot;blue&quot;) colnames(Ax2a)=infoTableFinal$TumorIDnew[match(colnames(Ax2a), rownames(infoTableFinal))] Cdata$HR_status=NA Cdata$HR_status[match(colnames(Ax2a), Cdata$NewID)]=ColB #ax1=heatmap.2(Ax2a, trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, ColSideColors = ColB) write.csv(ax1$carpet, file=&quot;nature-tables/Ext3i.csv&quot;) #heatmap.2(CorMatEp, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSideColB) 10.3 Charcterisation cohort We can perform a similar analysis to the characterisation cohort: (and save to file) c2=infoTableFinal$SampleID[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] Ax1=assay(vsd)[ match(Markers1, rownames(assay(vsd))), match(c2, colnames(vsd))] Ax2=assay(vsd)[ match(Markers2, rownames(assay(vsd))), match(c2, colnames(vsd))] Pam3=pam(t(Ax1), 2) Pam4=pam(t(Ax2), 2) #plot(Pam3) plot(Pam4, main=&quot;narrow list&quot;) Ax1b=scale(t(Ax1)) #plot(Pam3, &quot;extended list&quot;) ColC=Pam3$clustering ColC=ifelse(ColC==2, &quot;Basal&quot;, &quot;Lum&quot;) ColD=Pam4$clustering ColD=ifelse(ColD==1, &quot;Basal&quot;, &quot;Lum&quot;) #table(ColC, ColD) #pdf(&quot;~/Desktop/PAM50-characterisation-different-list2.pdf&quot;, width=8, height=8) # heatmap.plus(t(Ax1b), col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =CTable,scale=&quot;none&quot;, main=&quot;Char cohort vsd marker list2&quot;, trace=&quot;none&quot;) colnames(Ax1)=infoTableFinal$TumorIDnew[match(rownames(Ax1b), rownames(infoTableFinal))] heatmap.2((Ax1), trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColC)]) colnames(Ax2)=infoTableFinal$TumorIDnew[match(rownames(Ax1b), rownames(infoTableFinal))] heatmap.2((Ax2), trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColD)]) Figure 10.3: HR status in characterisation cohort write.csv(Ax2, file=&quot;nature-tables/1f.csv&quot;) 10.4 DN samples DN samples: note there is variability in DN expression of PR, Foxa1, Esr1, Ar, Erbb2 and Gata3 shows fairly stable expression values Ax2=assay(vsdLimmaDN)[ match(Markers2, rownames(assay(vsdLimmaDN))),] Pam5=pam(t(Ax2), 2) plot(Pam5, main=&quot;extended list DN&quot;) ColE=Pam5$clustering ColE=ifelse(ColE==1, &quot;Basal&quot;, &quot;Lum&quot;) ColE=gsub(&quot;Basal&quot;, &quot;red&quot;, ColE) ColE=gsub(&quot;Lum&quot;, &quot;blue&quot;, ColE) #pdf(&quot;~/Desktop/5X-DN-samples-HR-status.pdf&quot;, width=6, height=5) colnames(Ax2)=infoTableFinal$TumorIDnew[match(colnames(Ax2), rownames(infoTableFinal))] heatmap.2(Ax2, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =ColE,scale=&quot;row&quot;, main=&quot;DN samples vsd marker list1&quot;, trace=&quot;none&quot;, hclustfun = hclust.ave) # Check which samples are also in the epithelial samples: V2=intersect(colnames(Ax1a), colnames(Ax2)) colnames(Ax1a) colnames(Ax2) dim(Ax2) heatmap.2(Ax2[ ,V2], col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =ColE[V2],scale=&quot;row&quot;, main=&quot;DN samples vsd marker list1&quot;, trace=&quot;none&quot;, hclustfun = hclust.ave) names(ColSideColB)=colnames(Ax1a) heatmap.2(Ax1a[ ,V2], col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =ColSideColB[V2],scale=&quot;row&quot;, main=&quot;Ep samples&quot;, trace=&quot;none&quot;, hclustfun = hclust.ave) Tx1=cbind(Ax2[ ,V2], Ax1a[ ,V2]) ColSide=c(rep(&quot;blue&quot;, length(V2)), rep(&quot;Green&quot;, length(V2))) ColSide=c(ColE[V2],ColSideColB[V2] ) ColSide=Cdata$Tumor.Growth[match(colnames(Tx1), Cdata$NewID)] ColSide=ifelse(ColSide==&quot;growing&quot;, &quot;orange&quot;, &quot;forestgreen&quot;) heatmap.2(Tx1, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =ColSide,scale=&quot;row&quot;, main=&quot;Ep samples&quot;, trace=&quot;none&quot;, hclustfun = hclust.ave) heatmap.2(cor((Tx1)), trace = &quot;none&quot;, col=RdBu[11:1], symm = F, ColSideColors = ColSide) axnew=cor(Tx1) t2=sapply(1:nrow(axnew), function(x) axnew[x, which(colnames(axnew)==rownames(axnew)[x]) ]) colnames(t2)=colnames(axnew) boxplot(t2[2, 1:16]~ColSide[1:16]) Do a heatmap with the Epithelial samples vsdProg=vsd[, which(infoTableFinal$Fraction!=&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] CNamesList=rep(NA, ncol(vsdProg)) CNamesList[match(rownames(CTablea), colnames(vsdProg))]=CTablea[ ,1] CNamesList[match(rownames(CTabled), colnames(vsdProg))]=CTabled[ ,1] CNamesList2=ifelse(CNamesList==&quot;Lum&quot;, &quot;blue&quot;, &quot;red&quot;) X2=rep(&quot;darkgreen&quot;, ncol(vsdProg)) X2[grep(&quot;Ep&quot;, colnames(vsdProg))]=&quot;pink&quot; X3=vsdProg$Growth X3=gsub(&quot;growing&quot;, &quot;orange&quot;, X3) X3=gsub(&quot;stable&quot;, &quot;forestgreen&quot;, X3) #pdf(&quot;~/Desktop/5X-DN+Ep-HR-status.pdf&quot;, width=6, height=5) Ax1=assay(vsdProg)[match(Markers2, rownames(assay(vsdProg))), ] heatmap.plus(Ax1, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =cbind(CNamesList2, X2, X3),scale=&quot;none&quot;, main=&quot;DN samples vsd marker list1&quot;, trace=&quot;none&quot;) heatmap.2(Ax1, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =CNamesList2,scale=&quot;row&quot;, main=&quot;Ep+DN markers&quot;, trace=&quot;none&quot;) par(mfrow=c(2,2)) boxplot(Ax1[&quot;Pgr&quot;, ]~vsdProg$Growth+vsdProg$Fraction, ylab=&quot;Pgr&quot;) boxplot(Ax1[&quot;Foxa1&quot;, ]~vsdProg$Growth+vsdProg$Fraction, ylab=&quot;Foxa1&quot;) boxplot(Ax1[&quot;Gata3&quot;, ]~vsdProg$Growth+vsdProg$Fraction, ylab=&quot;Gata3&quot;) boxplot(Ax1[&quot;Esr1&quot;, ]~vsdProg$Growth+vsdProg$Fraction, ylab=&quot;Esr1&quot;) Mx1=table(vsdProg$Growth, CNamesList2, vsdProg$Fraction) ContTable(Mx1[ , , 3], &quot;HR-status-growth-Epithelial&quot;, T, &quot;Hr-status&quot;,&quot;growth&quot;) #dev.off() 10.5 Comparison with staining We can collate these different scores and assess whether there are similarities with PgR and ER staining: ## match to infoTable here # Contingency Tables par(mfrow=c(1,2)) a1=table(Cdata$HR_status, Cdata$PgR.IF) ContTable(a1[ ,-2], &quot;Pgr Expr&quot;, T, &quot;Pgr IF&quot;, &quot;compressed subtype&quot;) # Contingency Tables a1=table(Cdata$HR_status, Cdata$ER.IF) ContTable(a1[ ,-2], &quot;ER Expr&quot;, T, &quot;ER IF&quot;, &quot;compressed subtype&quot;) 10.6 Summary of expression markers for each subtype/cell fraction We can pull out the main markers of interest: ER, PGR, Erbb2 and Ki67 (or PCNA). We also compare these expression distribution of these markers to CD45, DN and Ep overall: Notes: Pgr highest in luminal samples Esr1 dynamic range is lower Ar is higher in basal samples Pcna is higher in Basal # midx=match(ExpressedaprilChar$X, colnames(allTPMFinal)) # midx3=match(Pall$X[grep(&quot;DN&quot;,Pall$X)], colnames(allTPMFinal)) # midx2=match(ExpressedaprilProg2$X, colnames(allTPMFinal)) # # summ1=table(ExpressedaprilChar$Call) # summ2=table(ExpressedaprilProg2$Call) # summ3=table(Pall$Call[grep(&quot;DN&quot;,Pall$X)]) gList=c(&quot;Esr1&quot;, &quot;Pgr&quot;, &quot;Erbb2&quot;, &quot;Ar&quot;, &quot;Pcna&quot;, &quot;Mki67&quot;, &quot;Acta2&quot;, &quot;Epcam&quot;, &quot;Krt18&quot;) # par(mfrow=c(2,3)) # # for (i in gList){ # boxplot(allTPMFinal[i, midx ]~ExpressedaprilChar$Call, main=&quot;Char&quot;, names=paste(names(summ1),&quot; N=&quot;,summ1, sep=&quot;&quot;), las=2, ylab=i, xlab=&quot;&quot;) # boxplot(allTPMFinal[i, midx2 ]~ExpressedaprilProg2$Call, main=&quot;Prog&quot;, names=paste(names(summ2),&quot; N=&quot;,summ2, sep=&quot;&quot;), las=2,ylab=i, xlab=&quot;&quot;) # boxplot(allTPMFinal[i, midx3 ]~Pall$Call[grep(&quot;DN&quot;,Pall$X)], main=&quot;DN&quot;, names=paste(names(summ3),&quot; N=&quot;,summ3, sep=&quot;&quot;), ylab=i, las=2, xlab=&quot;&quot;) # } # summ4=table(infoTableFinal$Fraction) #pdf(&quot;~/Desktop/FigS3-plot-gene-of-interest-average-expression.pdf&quot;, height=8, width=8) par(mfrow=c(2,3)) for (i in gList){ boxplot(allTPMFinal[i, ]~infoTableFinal$Fraction, main=i, names=paste(names(summ4),&quot; N=&quot;,summ4, sep=&quot;&quot;), las=2, ylab=i, xlab=&quot;&quot;) } #dev.off() Based on the above calls, we can condense the calls: * Her2, LumB are sumilar and can be combined with LumA * Normal and Basal are most likely most similar Pall$Call2=Pall$Call Pall$Call2[which(Pall$Call2==&quot;Her2&quot;)]=&quot;LumB&quot; Pall$Call3=&quot;Basal&quot; Pall$Call3[grep(&quot;Lum&quot;, Pall$Call2)]=&quot;Lum&quot; BLcall=ifelse(Pall$Call3==&quot;Basal&quot;, &quot;blue&quot;, &quot;red&quot;) midx4=match(Pall$X, colnames(allTPMFinal)) Ax4=assay(vsd)[match(Markers2, rownames(assay(vsd))),na.omit(midx4)] Ax4b=allRSEMnorm2log[na.omit(match(toupper(Markers2), rownames(allRSEMnorm2log))), na.omit(midx4)] heatmap.2(Ax4, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors = BLcall, scale=&quot;row&quot;, main=&quot;vsd marker list3&quot;, trace=&quot;none&quot;) heatmap.2(Ax4b, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors = BLcall, trace=&quot;none&quot;, scale=&quot;row&quot;, main=&quot;RSEM marker3&quot;) ## Clustering based on random genes In this section we randomly select the most variable 200, 500, 1000, 2000 genes: we use both the standard deviation and coefficient of variation (sd normalised by the mean) to select these most variable genes. Below is a correlation plot which visualises the concordance between the different methods. ProgCoh=assay(vsd)[ ,which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] CharCoh=assay(vsd)[ ,which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] GeneVar1=sapply(1:nrow(ProgCoh), function(x) sd(ProgCoh[x, ])) GeneVar2=sapply(1:nrow(ProgCoh), function(x) sd(ProgCoh[x, ])/mean(ProgCoh[x, ])) names(GeneVar2)=rownames(ProgCoh) names(GeneVar1)=rownames(ProgCoh) OrdGene1=sort(GeneVar1, decreasing = T) OrdGene2=sort(GeneVar2, decreasing = T) xsearch=c(200, 500, 1000, 2000) CallsTableProg=matrix(NA, ncol=ncol(ProgCoh), nrow=10) colnames(CallsTableProg)=colnames(ProgCoh) CallsTableProg[1, ]=Pall$Call3[match(colnames(CallsTableProg), Pall$X)] #CallsTableProg[2, ]=Pall$Call2[match(colnames(CallsTableProg), Pall$X)] #CallsTableProg[2, ]=Pall$PamCallLong[match(colnames(CallsTableProg), Pall$X)] CallsTableProg[2, ]=Pall$PamCallshort[match(colnames(CallsTableProg), Pall$X)] count=3 par(mfrow=c(2,2)) for (i in xsearch){ # Int1=venn(list(SD=names(OrdGene1)[1:i], CoV=names(OrdGene2)[1:i])) ax1=pam(t(ProgCoh[names(OrdGene1)[1:i], ]), 2) bx1=pam(t(ProgCoh[names(OrdGene2)[1:i], ]), 2) CallsTableProg[count, ]=ax1$clustering CallsTableProg[count+1, ]=bx1$clustering count=count+2 } ConcordanceMat=matrix(NA, nrow=nrow(CallsTableProg), ncol=nrow(CallsTableProg)) for (i in 1:nrow(CallsTableProg)){ for (j in 1:nrow(CallsTableProg)){ a1=table(CallsTableProg[i, ], CallsTableProg[j, ]) ConcordanceMat[i, j]=sum(diag(a1))/sum(a1) } } colnames(ConcordanceMat)=c(&quot;P50&quot;, &quot;PamShort&quot;, paste(rep(c(&quot;sd&quot;, &quot;cov&quot;), 4), rep(xsearch, each=2), sep=&quot;.&quot;)) rownames(ConcordanceMat)=colnames(ConcordanceMat) ConcordanceMat2=ConcordanceMat ConcordanceMat2[which(ConcordanceMat2&lt;0.5, arr.ind=T)]=1-ConcordanceMat2[which(ConcordanceMat2&lt;0.5, arr.ind=T)] # Example heatmap Ax1=assay(vstEp)[ match(Markers2, rownames(assay(vstEp))),] TabOutput=cbind(ifelse(CallsTableProg[4, ]==1, &quot;blue&quot;, &quot;red&quot;),ifelse(CallsTableProg[5, ]==1, &quot;blue&quot;, &quot;red&quot;)) x1=match(colnames(Ax1), colnames(CallsTableProg)) heatmap.plus(Ax1, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =(TabOutput[ x1,]),scale=&quot;row&quot;, main=&quot;Progression cohort vsd marker list1&quot;, trace=&quot;none&quot;) ## Consolidating the different results Below is a concordance map of the similarity between the different metrics calculated as $$ \\frac{N_{b,b}+N_{l,l}}{N_{total}} $$ where $N_{b,b}$ is the number of cases which are basal in two comparisons and $N_{l,l}$ the number of cases which are luminal in both comparisons. Note that the values extend from 0.5 to 1, which indicates that any two methods overlap more than just by chance. There is good overlap between the in-house specific list characterisation, and some overlap between pam50 calling and in-house short list. heatmap.2(ConcordanceMat2, col=RdBu[11:1], trace=&quot;none&quot;,scale=&quot;none&quot;) heatmap.2(ConcordanceMat2[1:7, 1:7], col=RdBu[11:1], trace=&quot;none&quot;,scale=&quot;none&quot;) Below is a summary of the average expression values of the classes defined by the different methods: * The targeted lists show differences in esr1, pgr, erbb2, pcna * Ar has differing directions for the pam classifications * Random genes selected show differences in pgr, erbb2, Ar and perhaps Mki67 par(mfrow=c(2,3)) compv=c(&quot;PAM50&quot;, &quot;pamshort&quot;, &quot;top200sd&quot;, &quot;top500sd&quot;, &quot;top1000sd&quot;, &quot;top2000sd&quot;) gList=c(gList, &quot;Foxa1&quot;, &quot;Gata3&quot;, &quot;Vim&quot;) for (j in gList){ for (i in c(1:3,5, 7, 9)){ boxplot(ProgCoh[j, ]~CallsTableProg[i, ], main=rownames(ConcordanceMat2)[i], ylab=j, xlab=&quot;&quot;) }} mtext(&quot;ESR1&quot;, side=2, outer=T, line=-2) We can summarise the outputs for each sample below CallsTableProg2=CallsTableProg[c(1:3,5, 7, 9), ] rownames(CallsTableProg2)=compv scroll_box(kable(t(CallsTableProg2), format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) "],["expression-in-specific-pathways.html", "Chapter 11 Expression in Specific pathways", " Chapter 11 Expression in Specific pathways The above plots suggest that there could be a different in growing and stable based on: inflammation Kras signalling MHC presentation checkpoint proteins We can pull out the genes in these sets and visualise the relative expression in a heatmap in the DN, CD45 and Ep samples: Note that red is growing and green is stable # library(org.Hs.eg.db) load(&quot;../anntotations/ListofGeneSets.RData&quot;) SetNamesc2=names(PathInc2) #names(ListGSC$c2List) x1=grep(&quot;MHC&quot;, SetNamesc2) GeneNames=unique(unlist(geneIds(PathInc2[x1[c(1, 4,5)]]))) #test1=mapIds(org.Hs.eg.db, GeneNames, &#39;SYMBOL&#39;,&#39;ENTREZID&#39;) RatGeneNamesMHC=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) #RatGeneNamesKras=mapIds(org.Hs.eg.db, ListGSC$Hallmark$HALLMARK_KRAS_SIGNALING_UP, &#39;SYMBOL&#39;,&#39;ENTREZID&#39;) GeneNames=unlist(geneIds(PathInH[&quot;HALLMARK_KRAS_SIGNALING_UP&quot;])) RatGeneNamesKras=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) GeneNames=unlist(geneIds(PathInH[&quot;HALLMARK_INFLAMMATORY_RESPONSE&quot;])) RatGeneNamesInf=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) CheckpointProt=unlist(ImmSuppAPC) RatGeneNamesCheckpoint=na.omit(unique(SymHum2Rat$RGD.symbol[match(CheckpointProt, SymHum2Rat$HGNC.symbol)])) # RatCP=read.delim(&quot;../anntotations/immune_Suppression.csv&quot;, sep=&quot;\\t&quot;, stringsAsFactors = F) # RatCP=na.omit(unique(SymHum2Rat$RGD.symbol[match(unique(unlist(RatCP)), SymHum2Rat$HGNC.symbol)])) # # # RatMHC=read.csv(&quot;../anntotations/MHCloss.csv&quot;, header = F, stringsAsFactors = F)[ ,1] # RatMHCb=na.omit(unique(SymHum2Rat$RGD.symbol[match(RatMHC, SymHum2Rat$HGNC.symbol)])) # read in checkpoint proteins 11.0.0.1 DN samples: Note the distribution of growing/stable in DN is: 21, 9 ColsideColsC=hue_pal()(2)[DNdds$Growth] heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesMHC, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesKras, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesInf, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstDN)[na.omit(match(MHCPres2Rat, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) 11.0.0.2 CD45 samples: Note the distribution of growing/stable in CD is: 26, 8 ColsideColsC=hue_pal()(2)[CDdds$Growth] heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesMHC, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesKras, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesInf, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstCD)[na.omit(match(MHCPres2Rat, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) 11.0.0.3 Epithelial samples: ColsideColsC=hue_pal()(2)[Epdds$Growth] heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesMHC, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesKras, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesInf, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstEp)[na.omit(match(MHCPres2Rat, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) ### comapre DN samples: PAM50 Lum vs Basal/Normal? DNdds$PAM50_v2=&quot;ERplus&quot; DNdds$PAM50_v2[which(DNdds$PAM50%in%c(&quot;Basal&quot;, &quot;Normal&quot;))]=&quot;ERneg&quot; DNdds$PAM50_v2=factor(DNdds$PAM50_v2) design(DNdds)=~PAM50_v2+factor(Batch) DNddsP50=DESeq(DNdds) DNresP50=results(DNddsP50) x1=rownames(DNresP50)[which(abs(DNresP50$log2FoldChange)&gt;2 &amp; DNresP50$padj&lt;0.05)] "],["deseq-analysis-immunotherapygrowth-comparisons.html", "Chapter 12 DESeq analysis: Immunotherapy/Growth comparisons 12.1 Summary of comparisons 12.2 DESeq: any treatment vs control 12.3 Growing vs stable emphasis", " Chapter 12 DESeq analysis: Immunotherapy/Growth comparisons 12.1 Summary of comparisons Quick plot of the differences in number of differential genes: Allchanges=rbind(UpDn1, CDUpDn1, DNUpDn1) Allchanges=cbind(Allchanges, Frac=c(&quot;Ep&quot;, &quot;Ep&quot;, &quot;CD&quot;, &quot;CD&quot;, &quot;DN&quot;, &quot;DN&quot;), dir=rownames(Allchanges)) AllchangesB=melt(as.data.frame(Allchanges), id.vars = c(&quot;Frac&quot;, &quot;dir&quot;)) ggplot(AllchangesB, aes(x=variable, y=as.numeric(value), fill=dir))+geom_bar(stat=&quot;identity&quot;,position = &quot;dodge&quot;)+facet_grid(Frac~., scale=&quot;free_y&quot;, space=&quot;free_y&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ylab(&quot;No. differential genes&quot;)+ggtitle(&quot;number of differential genes&quot;)+scale_y_log10() ## plot the number of samples in each comparison Nsamp=matrix(NA, nrow=6, ncol=ncol(Allchanges)) ta=table(Epdds$Comp4) tb=table(CDdds$Comp4) tc=table(DNdds$Comp4) for (i in 1:4){ Nsamp[1:2, i]=c(ta[xsearch[i]], ta[ysearch[i]]) Nsamp[3:4, i]=c(tb[xsearch[i]], tb[ysearch[i]]) Nsamp[5:6, i]=c(tc[xsearch[i]], tc[ysearch[i]]) } ta=table(Epdds$Treatment) tb=table(CDdds$Treatment) tc=table(DNdds$Treatment) for (i in 1:3){ Nsamp[1:2, i+4]=c(ta[cList[i]], ta[&quot;Vehicle&quot;]) Nsamp[3:4, i+4]=c(tb[cList[i]], tb[&quot;Vehicle&quot;]) Nsamp[5:6, i+4]=c(tc[cList[i]], tc[&quot;Vehicle&quot;]) } ta=table(EpddsTreatG$Comp8) tb=table(CDddsTreatG$Comp8) tc=table(DNddsTreatG$Comp8) for (i in 1:4){ Nsamp[1:2, i+7]=c(ta[xsearchA[i]], ta[ysearchB[i]]) Nsamp[3:4, i+7]=c(tb[xsearchA[i]], tb[ysearchB[i]]) Nsamp[5:6, i+7]=c(tc[xsearchA[i]], tc[ysearchB[i]]) } Nsamp[ ,12]=c(table(EpddsGrowth$Growth), table(CDddsGrowth$Growth), table(DNddsGrowth$Growth)) Nsamp[ ,13]=c(table(EpddsStrMH$MHcut), table(CDddsStrMH$MHcut), table(DNddsStrMH$MHcut)) Nsamp[ ,14]=c(table(EpddsStrIF$IFcut), table(CDddsStrIF$IFcut), table(DNddsStrIF$IFcut)) Nsamp[ ,15]=c(table(EpddsStrknn$knncut), table(CDddsStrknn$knncut), table(DNddsStrknn$knncut)) Nsamp[ ,16]=c(table(Epddscd8$CD8FracCut), table(CDddscd8$CD8FracCut), table(DNddscd8$CD8FracCut)) Nsamp[ ,17]=c(table(EpddsSpatMan$SpatialManual), table(CDddsSpatMan$SpatialManual), table(DNddsSpatMan$SpatialManual)) ta=table(Epddscd8MH$cd8MH) tb=table(CDddscd8MH$cd8MH) tc=table(DNddscd8MH$cd8MH) for (i in 1:4){ Nsamp[1:2, i+17]=c(ta[xsearchC[i]], ta[ysearchD[i]]) Nsamp[3:4, i+17]=c(tb[xsearchC[i]], tb[ysearchD[i]]) Nsamp[5:6, i+17]=c(tc[xsearchC[i]], tc[ysearchD[i]]) } colnames(Nsamp)=colnames(Allchanges) Nsamp[ , 22:23]=Allchanges[ ,22:23] Nsamp2=melt(as.data.frame(Nsamp), id.vars=c(&quot;Frac&quot;, &quot;dir&quot;)) ggplot(Nsamp2, aes(x=variable, y=as.numeric(value), fill=dir))+geom_bar(stat=&quot;identity&quot;,position = &quot;dodge&quot;)+facet_grid(Frac~., scale=&quot;free_y&quot;, space=&quot;free&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_fill_discrete(name = &quot;Comparison&quot;, labels = c(&quot;numerator&quot;, &quot;reference&quot;))+ylab(&quot;No. samples in comparison&quot;)+ggtitle(&quot;number of samples in comparison&quot;) #dev.off() Notes: Comparison Type Main cell type impacted Treatment CD45+, PDL1+LY in the DN, LY may affect Ep growth Ep and CD45 growth in control CD and DN Spatial Patterns CD45, Ep Spatial, high cd8 all cases 12.2 DESeq: any treatment vs control What are the differential genes if we compare any immunotherapy to the control arm? First look at the epithelial fraction: # EpddsTreatB=EpddsTreat # design(EpddsTreatB)=~treatA+factor(Batch) # EpddsTreatB=DESeq(EpddsTreatB) epr=results(Epdds) Xa1=epr[which(epr$padj&lt;0.05 &amp; epr$baseMean&gt;60), ] epvsd=vst(Epdds) assay(epvsd)&lt;- limma::removeBatchEffect(assay(epvsd),factor(epvsd$Batch)) Mat2=epvsd[match(rownames(Xa1), rownames(epvsd)), ] colSCols=ColMerge[ ,1][Mat2$Treatment] heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) DN List of markers from xcell: xcellgenes=readxl::read_xlsx(&quot;../anntotations/xcell_genes.xlsx&quot;, sheet=1) AllGenes=as.vector(xcellgenes[ ,-c(1:2)]) AllGenes=firstup(tolower(unique(as.character(unlist(AllGenes))))) #rm list rmList=c(&quot;15L_B_DN&quot;, &quot;6R_B_DN&quot;, &quot;10L_C_DN&quot;, &quot;6R_D_DN&quot;) DNr=results(DNdds) Xa1=DNr[which(DNr$padj&lt;0.05 &amp; DNr$baseMean&gt;100 &amp; abs(DNr$log2FoldChange)&gt;1.5), ] # DNvsd=vst(DNddsTreatB) # assay(DNvsd)&lt;- limma::removeBatchEffect(assay(DNvsd),factor(DNvsd$Batch)) AllG2=rownames(Xa1)[which(rownames(Xa1)%in%c(AllGenes, &quot;Il6&quot;))] Mat2=vsdLimmaDN[match(AllG2, rownames(vsdLimmaDN)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-3), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1]) CD45 # CDddsTreatB=CDddsTreat # design(CDddsTreatB)=~treatA # CDddsTreatB=DESeq(CDddsTreatB) CDr=results(CDdds) Xa1=CDr[which(CDr$padj&lt;0.05 &amp; CDr$baseMean&gt;100 &amp; abs(CDr$log2FoldChange)&gt;1.5), ] AllG2=rownames(Xa1)[which(rownames(Xa1)%in%RatAllImm)] Mat2=vsdLimmaCD[match(AllG2, rownames(vsdLimmaCD)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-5), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] pdf(&quot;figure-outputs/FIgure3j_1_vs_all.pdf&quot;, height=7, width=6) heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) dev.off() ## quartz_off_screen ## 2 write.csv(assay(Mat2), file=&quot;nature-tables/Figure3j_1_vs_all.csv&quot;) ## ALSO LOOK AT the pairwise comparisons and pull out those genes ax1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) bx1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;PDL1&quot;, &quot;Vehicle&quot;)) cx1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;PDL1+LY&quot;, &quot;Vehicle&quot;)) G1=rownames(ax1)[which(ax1$baseMean&gt;100 &amp; ax1$padj&lt;0.05 &amp; abs(ax1$log2FoldChange)&gt;2)] G2=rownames(bx1)[which(bx1$baseMean&gt;100 &amp; bx1$padj&lt;0.05 &amp; abs(bx1$log2FoldChange)&gt;2)] G3=rownames(cx1)[which(cx1$baseMean&gt;100 &amp; cx1$padj&lt;0.05 &amp; abs(cx1$log2FoldChange)&gt;2)] AllG=unique(c(G1, G2, G3)) AllG2=AllG[which(AllG%in%RatAllImm)] Mat2=vsdLimmaCD[match(AllG2, rownames(vsdLimmaCD)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-5), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] pdf(&quot;figure-outputs/FIgure3j_all_comparisons.pdf&quot;, height=9, width=6) heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) dev.off() ## quartz_off_screen ## 2 write.csv(assay(Mat2), file=&quot;nature-tables/Figure3j_all_comparisons.csv&quot;) 12.2.1 EPCAM samples Note that there are a subset of samples different from the other based on CD8, growth and MH index (6RB, 3NB, 10LD, 8LD, 11ND) but these parameters don’t group the other samples well There is a small subset of samples which have high expression of CCLs and based on the top variable genes, there seems to be three types of epithelial cases. SampleFrac=&quot;Ep&quot; allEpGenes=unlist(EpCompSig) allEpTab=table(allEpGenes) EpGenesList=names(allEpTab)[which(allEpTab&gt;1)] #EpGenesList=EpGenesList[-grep(&quot;LOC&quot;, EpGenesList)] #EpGenesList=EpGenesList[-grep(&quot;RGD&quot;, EpGenesList)] # also, remove all samples which have a base mean less than 10 x1=EpComp4[[1]]$baseMean[match(EpGenesList, EpComp4[[1]]$Gene)] x2=which(x1&gt;100) vstEp=vst(Epdds, blind=T) #EpddsTreatG$Comp8_v2=factor(paste(EpddsTreatG$Treatment, EpddsTreatG$Growth)) ColsideCols=hue_pal()(2)[Epdds$CD8FracCut] ColsideColsB=hue_pal()(4)[Epdds$Treatment] ColsideColsC=hue_pal()(2)[Epdds$Growth] ColsideColsD=hue_pal()(2)[Epdds$MHcut] colTable=rbind(ColsideCols, ColsideColsB, ColsideColsC, ColsideColsD) rownames(colTable)=c(&quot;CD8&quot;, &quot;Treatment&quot;, &quot;growth&quot;, &quot;MH&quot;) #pdf(sprintf(&quot;rslt/DESeq/DEseq_comparisons_%s.pdf&quot;, SampleFrac), width=7, height=10) sampleDist=dist(t(assay(vstEp))) sampleDistMatrix &lt;- as.matrix(sampleDist) heatmap.plus(sampleDistMatrix, trace=&quot;none&quot;, scale=&quot;none&quot;, col=brewer.pal(9, &quot;Blues&quot;)[9:1], ColSideColors = t(colTable), main=sprintf(&quot;Similarity between %s samples&quot;, SampleFrac)) # Take the top 150 variable genes # compute the sds for each genes sds = rowSds(assay(vstEp)) means=rowMeans(assay(vstEp)) CVs=sds/means CVs=CVs[-which(means&lt;7)] sds2=sort(CVs, decreasing = T) heatmap.plus(assay(vstEp)[names(sds2)[1:100], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;top 100 variable genes all %s samples&quot;, SampleFrac)) heatmap.plus(assay(vstEp)[EpGenesList[x2], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;DEG at least 2 %s samples&quot;, SampleFrac)) # Make a table for these genes FCvalues=matrix(NA, nrow=length(x2), ncol=length(EpComp4)) for (i in 1:length(EpComp4)){ FCvalues[ ,i]=EpComp4[[i]]$log2FoldChange[match(EpGenesList[x2], EpComp4[[i]]$Gene)] } colnames(FCvalues)=names(EpComp4) rownames(FCvalues)=EpGenesList[x2] # for each list pick the top 50 diff genes FC&gt;2 and baseman &gt; 50 glist=NA for (i in 1:length(EpComp4)){ glist=c(glist, EpComp4[[i]]$Gene[which(EpComp4[[i]]$padj&lt;0.1 &amp; abs(EpComp4[[i]]$log2FoldChange)&gt;2 &amp; EpComp4[[i]]$baseMean&gt;25)]) } ColsideCols=SetCols[EpddsTreatG$Comp8] glistmod=unique(glist) glistmod=glistmod[-grep(&quot;LOC&quot;, glistmod)] glistmod=na.omit(glistmod[-grep(&quot;RGD&quot;, glistmod)]) #heatmap.plus(assay(vstEp)[glistmod, ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;All DEG %s samples&quot;, SampleFrac)) We can also view this in the form of what is highly expressed in each comparison. Below is a heatmap of the fold changes: # distance of the samples to one another par(oma=c(1,0,0,0)) heatmap.2(FCvalues, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], main=sprintf(&quot;All comparisons %s, log2FC for each gene&quot;, SampleFrac)) #dev.off() Below, we visualise the enrichment scores using different gene sets and ## GSEA results temp. pdf(&quot;~/Desktop/Fig5Gene_set_enrichment.pdf&quot;, height=10, width=10) #Epismr3=ismr4 #pdf(sprintf(&quot;rslt/DESeq/GSEA_signature_comparisons_%s.pdf&quot;, SampleFrac), width=10, height=12) for (i in 1:length(Epismr3)){ x1=Epismr3[[i]] # find padj&lt;0.1 idx2=lapply(seq(3, ncol(x1), by=2), function(x) which(as.numeric(as.character(x1[ ,x]))&lt;0.01)) unList=table(unlist(idx2)) #pickThese=names(unList)#[which(unList&gt;1)] pickThese2=names(unList)[which(unList&gt;1)] if (length(pickThese2)&gt;100){ temp=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] temp2=sapply(temp, function(x) as.numeric(as.character(x))) temp2=rowSds(abs(temp2)) names(temp2)=pickThese2 temp2=sort(temp2, decreasing = T) pickThese2=names(temp2)[1:100] } x23=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] x234=sapply(x23, function(x) as.numeric(as.character(x))) rownames(x234)=rownames(x23) par(oma=c(2,0,0,2)) heatmap.2(x234, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, main=sprintf(&quot;%s pathways %s fraction&quot;, names(Epismr3)[i], SampleFrac)) } #dev.off() # boxplot(assay(vstEp)[&quot;Tap1&quot;, ]~EpddsTreatG$Treatment) # boxplot(assay(vstEp)[&quot;Cd74&quot;, ]~EpddsTreatG$Comp4) # boxplot(assay(vstEp)[&quot;Cd8a&quot;, ]~EpddsTreatG$Treatment) # boxplot(assay(vstEp)[&quot;Ctla4&quot;, ]~EpddsTreatG$Treatment) # boxplot(assay(vstEp)[&quot;Tgfbr1&quot;, ]~EpddsTreatG$Comp8) dev.off() ### CD45 comparisons SampleFrac=&quot;CD&quot; allCDGenes=unlist(CDCompSig) allCDTab=table(allCDGenes) CDGenesList=names(allCDTab)[which(allCDTab&gt;1)] #CDGenesList=CDGenesList[-grCD(&quot;LOC&quot;, CDGenesList)] #CDGenesList=CDGenesList[-grCD(&quot;RGD&quot;, CDGenesList)] # also, remove all samples which have a base mean less than 10 x1=CDComp4[[1]]$baseMean[match(CDGenesList, CDComp4[[1]]$Gene)] x2=which(x1&gt;25) vstCD=vst(CDdds, blind=T) CDddsTreatG$Comp8_v2=factor(paste(CDddsTreatG$Treatment, CDddsTreatG$Growth)) ColsideCols=DiffCols[CDddsTreatG$Comp8_v2] ColsideColsB=hue_pal()(4)[CDddsTreatG$Treatment] ColsideColsC=hue_pal()(2)[CDddsTreatG$Growth] colTable=rbind(ColsideCols, ColsideColsB, ColsideColsC) rownames(colTable)=c(&quot;Treat+growth&quot;, &quot;Treatment&quot;, &quot;growth&quot;) #pdf(sprintf(&quot;rslt/DESeq/DEseq_comparisons_%s.pdf&quot;, SampleFrac), width=7, height=10) sampleDist=dist(t(assay(vstCD))) sampleDistMatrix &lt;- as.matrix(sampleDist) heatmap.plus(sampleDistMatrix, trace=&quot;none&quot;, scale=&quot;none&quot;, col=brewer.pal(11, &quot;Blues&quot;)[11:1], ColSideColors = t(colTable), main=sprintf(&quot;Similarity between %s samples&quot;, SampleFrac)) # Take the top 150 variable genes # compute the sds for each genes sds = rowSds(assay(vstCD)) means=rowMeans(assay(vstCD)) CVs=sds/means CVs=CVs[-which(means&lt;7)] sds2=sort(CVs, decreasing = T) heatmap.plus(assay(vstCD)[names(sds2)[1:200], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;top 200 variable genes all %s samples&quot;, SampleFrac)) heatmap.plus(assay(vstCD)[CDGenesList[x2], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;DEG at least 2 %s samples&quot;, SampleFrac)) # Make a table for these genes FCvalues=matrix(NA, nrow=length(x2), ncol=length(CDComp4)) for (i in 1:length(CDComp4)){ FCvalues[ ,i]=CDComp4[[i]]$log2FoldChange[match(CDGenesList[x2], CDComp4[[i]]$Gene)] } colnames(FCvalues)=names(CDComp4) rownames(FCvalues)=CDGenesList[x2] # for each list pick the top 50 diff genes FC&gt;2 and baseman &gt; 50 glist=NA for (i in 1:length(CDComp4)){ glist=c(glist, CDComp4[[i]]$Gene[which(CDComp4[[i]]$padj&lt;0.1 &amp; abs(CDComp4[[i]]$log2FoldChange)&gt;2 &amp; CDComp4[[i]]$baseMean&gt;25)]) } ColsideCols=SetCols[CDddsTreatG$Comp8] glistmod=unique(glist) #glistmod=glistmod[-grep(&quot;LOC&quot;, glistmod)] #glistmod=na.omit(glistmod[-grCD(&quot;RGD&quot;, glistmod)]) heatmap.plus(assay(vstCD)[na.omit(glistmod), ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;All DEG %s samples&quot;, SampleFrac)) # distance of the samples to one another par(oma=c(2,0,0,0)) heatmap.2(FCvalues, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], main=sprintf(&quot;All comparisons %s, log2FC for each gene&quot;, SampleFrac)) #dev.off() #CDismr3=ismr4 #pdf(sprintf(&quot;rslt/DESeq/GSEA_signature_comparisons_%s.pdf&quot;, SampleFrac), width=10, height=12) for (i in 1:length(CDismr3)){ x1=CDismr3[[i]] # find padj&lt;0.1 idx2=lapply(seq(3, ncol(x1), by=2), function(x) which(as.numeric(as.character(x1[ ,x]))&lt;0.01)) unList=table(unlist(idx2)) #pickThese=names(unList)#[which(unList&gt;1)] pickThese2=names(unList)[which(unList&gt;1)] if (length(pickThese2)&gt;100){ temp=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] temp2=sapply(temp, function(x) as.numeric(as.character(x))) temp2=rowSds(abs(temp2)) names(temp2)=pickThese2 temp2=sort(temp2, decreasing = T) pickThese2=names(temp2)[1:100] } x23=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] x234=sapply(x23, function(x) as.numeric(as.character(x))) rownames(x234)=rownames(x23) par(oma=c(2,0,0,2)) heatmap.2(x234, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, main=sprintf(&quot;%s pathways %s fraction&quot;, names(CDismr3)[i], SampleFrac)) } #dev.off() ### DN samples SampleFrac=&quot;DN&quot; allDNGenes=unlist(DNCompSig) allDNTab=table(allDNGenes) DNGenesList=names(allDNTab)[which(allDNTab&gt;1)] #DNGenesList=DNGenesList[-grep(&quot;LOC&quot;, DNGenesList)] #DNGenesList=DNGenesList[-grep(&quot;RGD&quot;, DNGenesList)] # also, remove all samples which have a base mean less than 10 x1=DNComp4[[1]]$baseMean[match(DNGenesList, DNComp4[[1]]$Gene)] x2=which(x1&gt;25) vstDN=vst(DNdds, blind=T) DNddsTreatG$Comp8_v2=factor(paste(DNddsTreatG$Treatment, DNddsTreatG$Growth)) ColsideCols=DiffCols[DNddsTreatG$Comp8_v2] ColsideColsB=hue_pal()(4)[DNddsTreatG$Treatment] ColsideColsC=hue_pal()(2)[DNddsTreatG$Growth] colTable=rbind(ColsideCols, ColsideColsB, ColsideColsC) rownames(colTable)=c(&quot;Treat+growth&quot;, &quot;Treatment&quot;, &quot;growth&quot;) #pdf(sprintf(&quot;rslt/DESeq/DEseq_comparisons_%s.pdf&quot;, SampleFrac), width=7, height=10) sampleDist=dist(t(assay(vstDN))) sampleDistMatrix &lt;- as.matrix(sampleDist) heatmap.plus(sampleDistMatrix, trace=&quot;none&quot;, scale=&quot;none&quot;, col=brewer.pal(11, &quot;Blues&quot;)[11:1], ColSideColors = t(colTable), main=sprintf(&quot;Similarity between %s samples&quot;, SampleFrac)) # Take the top 150 variable genes # compute the sds for each genes sds = rowSds(assay(vstDN)) means=rowMeans(assay(vstDN)) CVs=sds/means CVs=CVs[-which(means&lt;7)] sds2=sort(CVs, decreasing = T) heatmap.plus(assay(vstDN)[names(sds2)[1:200], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;top 200 variable genes all %s samples&quot;, SampleFrac)) heatmap.plus(assay(vstDN)[DNGenesList[x2], ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;DEG at least 2 %s samples&quot;, SampleFrac)) # Make a table for these genes FCvalues=matrix(NA, nrow=length(x2), ncol=length(DNComp4)) for (i in 1:length(DNComp4)){ FCvalues[ ,i]=DNComp4[[i]]$log2FoldChange[match(DNGenesList[x2], DNComp4[[i]]$Gene)] } colnames(FCvalues)=names(DNComp4) rownames(FCvalues)=DNGenesList[x2] # for each list pick the top 50 diff genes FC&gt;2 and baseman &gt; 50 glist=NA for (i in 1:length(DNComp4)){ glist=c(glist, DNComp4[[i]]$Gene[which(DNComp4[[i]]$padj&lt;0.1 &amp; abs(DNComp4[[i]]$log2FoldChange)&gt;2 &amp; DNComp4[[i]]$baseMean&gt;25)]) } ColsideCols=SetCols[DNddsTreatG$Comp8] glistmod=na.omit(unique(glist)) #glistmod=glistmod[-grep(&quot;LOC&quot;, glistmod)] #glistmod=na.omit(glistmod[-grep(&quot;RGD&quot;, glistmod)]) heatmap.plus(assay(vstDN)[glistmod, ], trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], ColSideColors = t(colTable), main=sprintf(&quot;All DEG %s samples&quot;, SampleFrac)) # distance of the samples to one another par(oma=c(2,0,0,0)) heatmap.2(FCvalues, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], main=sprintf(&quot;All comparisons %s, log2FC for each gene&quot;, SampleFrac)) #dev.off() #DNismr3=ismr4 #pdf(sprintf(&quot;rslt/DESeq/GSEA_signature_comparisons_%s.pdf&quot;, SampleFrac), width=10, height=12) for (i in 1:length(DNismr3)){ x1=DNismr3[[i]] # find padj&lt;0.1 idx2=lapply(seq(3, ncol(x1), by=2), function(x) which(as.numeric(as.character(x1[ ,x]))&lt;0.01)) unList=table(unlist(idx2)) #pickThese=names(unList)#[which(unList&gt;1)] pickThese2=names(unList)[which(unList&gt;1)] if (length(pickThese2)&gt;100){ temp=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] temp2=sapply(temp, function(x) as.numeric(as.character(x))) temp2=rowSds(abs(temp2)) names(temp2)=pickThese2 temp2=sort(temp2, decreasing = T) pickThese2=names(temp2)[1:100] } x23=x1[as.numeric(pickThese2), seq(2, ncol(x1), by=2)] x234=sapply(x23, function(x) as.numeric(as.character(x))) rownames(x234)=rownames(x23) par(oma=c(2,0,0,2)) heatmap.2(x234, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, main=sprintf(&quot;%s pathways %s fraction&quot;, names(DNismr3)[i], SampleFrac)) } #dev.off() 12.3 Growing vs stable emphasis Below, we focus specifically on the growing vs stable comparison in greater depth. Here, we look at the 3 different fractions in greater depth and look at volcano plots of DEG and heatmaps of differential genes. Samples are colored according to whether they are growing or stable 12.3.1 DN fraction #pdf(sprintf(&quot;rslt/DESeq/volcano_plots_differences_stable_vs_growing_%s.pdf&quot;, Sys.Date()), height=7, width=8) DNa1=DNComp4$stable_vs_growing DNa=DNComp4$stable_vs_growing[ which(DNComp4$stable_vs_growing$padj&lt;0.1 &amp; DNComp4$stable_vs_growing$baseMean&gt;50 &amp; abs(DNComp4$stable_vs_growing$log2FoldChange)&gt;1.5), ] with(DNa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: DN Stable (+) vs Growing (-)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(DNa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(DNa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), text(log2FoldChange+0.05, -log10(padj)+0.05, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) heatmap.2(assay(vstDN)[ DNa$Gene, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstDN$Growth)), col=RdBu[11:1], main=&quot;DN genes&quot;) 12.3.2 CD fraction Volcano plot #pdf(&quot;~/Desktop/Figure4G_CD_stable_growing.pdf&quot;, height=12, width=12) CDa1=CDComp4$stable_vs_growing CDa=CDComp4$stable_vs_growing[ which(CDComp4$stable_vs_growing$padj&lt;0.05 &amp; CDComp4$stable_vs_growing$baseMean&gt;100 &amp; abs(CDComp4$stable_vs_growing$log2FoldChange)&gt;2), ] with(CDa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: CD Stable (+) vs Growing (-)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(CDa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(CDa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), text(log2FoldChange+0.05, -log10(padj)+0.05, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) Figure 12.1: volcano plot of DEG stable vs growing CD45 write.csv(CDa1, file=&quot;nature-tables/4g.csv&quot;) Here are a bunch of heatmaps, which are then separated by wehther genes are downregulated (growing specific) or upregulated (stable specific) heatmap.2(assay(vstCD)[ CDa$Gene, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstCD$Growth)), col=RdBu[11:1], main=&quot;CD genes&quot;) ## growing specific CDg=CDa$Gene[which(CDa$log2FoldChange&lt;0)] heatmap.2(assay(vstCD)[CDg, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstCD$Growth)), col=RdBu[11:1], main=&quot;CD genes growing&quot;) ## stable specific CDs=CDa$Gene[which(CDa$log2FoldChange&gt;0)] heatmap.2(assay(vstCD)[CDs, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstCD$Growth)), col=RdBu[11:1], main=&quot;CD genes stable&quot;) #dev.off() 12.3.3 Ep Fraction Epa1=EpComp4$stable_vs_growing Epa=EpComp4$stable_vs_growing[ which(EpComp4$stable_vs_growing$padj&lt;0.1 &amp; EpComp4$stable_vs_growing$baseMean&gt;50 &amp; abs(EpComp4$stable_vs_growing$log2FoldChange)&gt;1.5), ] with(Epa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: Ep Stable vs Growing&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(Epa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(Epa1, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), text(log2FoldChange+0.05, -log10(padj)+0.1, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) heatmap.2(assay(vstEp)[ Epa$Gene, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstEp$Growth)), col=RdBu[11:1], main=&quot;Ep genes&quot;) "],["summary-of-gsea-runs.html", "Chapter 13 Summary of GSEA runs 13.1 Stable vs growing: all samples 13.2 Comparisons based on treatment 13.3 Pathways of Interest 2", " Chapter 13 Summary of GSEA runs 13.1 Stable vs growing: all samples Below is a summary of growing vs stable comparisons using Process Networks: d1=DNismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] e1=Epismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] c1=CDismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] # ds=which(d1[ ,2]&lt;0.05) es=which(e1[ ,2]&lt;0.05) cs=which(c1[ ,2]&lt;0.05) AUnique=c(rownames(d1)[ds], rownames(e1)[es], rownames(c1)[cs]) xalist=unique(AUnique) tx=cbind(as.numeric(d1[match(xalist, rownames(d1)), 1]),as.numeric(e1[match(xalist, rownames(e1)), 1]), as.numeric(c1[match(xalist, rownames(c1)), 1])) tx2=cbind(as.numeric(d1[match(xalist, rownames(d1)), 2]),as.numeric(e1[match(xalist, rownames(e1)), 2]), as.numeric(c1[match(xalist, rownames(c1)), 2])) tx[which(tx2&gt;0.1, arr.ind = T)]=0 rownames(tx)=substr(xalist, 2, 100) txb=sapply(strsplit(rownames(tx), &quot;_&quot;), function(x) x[1]) rCol=c(brewer.pal(12, &quot;Set3&quot;), brewer.pal(8, &quot;Set2&quot;))[factor(txb)] colnames(tx)=c(&quot;DN&quot;, &quot;Ep&quot;, &quot;CD&quot;) #pdf(&quot;~/Desktop/5A-summary-pathways-process-networks.pdf&quot;, height=9, width=4) par(oma=c(1, 1, 1, 5)) ax=heatmap.2(tx, col=RdBu[11:1], trace = &quot;none&quot;, scale = &quot;none&quot;, RowSideColors = rCol) Figure 13.1: GSEA summary stable growing ## re-order this? axb=ax$carpet an2=c(brewer.pal(12, &quot;Set3&quot;), brewer.pal(8, &quot;Set2&quot;))[factor(sapply(strsplit(colnames(axb), &quot;_&quot;), function(x) x[1]))] colnames(axb)=sapply(strsplit(colnames(axb), &quot;_&quot;), function(x) x[length(x)]) rOrd=order(an2) par(oma=c(1, 1, 1, 5)) heatmap.2(t(axb[, rOrd]), col=RdBu[11:1], trace = &quot;none&quot;, scale = &quot;none&quot;, RowSideColors = an2[rOrd], Rowv = NA, main=&quot;stable red, growing blue&quot;) dev.off() ## null device ## 1 write.csv(tx, file=&quot;nature-tables/5a.csv&quot;) write.csv(t(axb[, rOrd]), file=&quot;nature-tables/5a_version2.csv&quot;) 13.1.1 barplots of enriched pathways Below are the bar-plots for the enriched pathways in CD45 cells: termA=c1[cs, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: TermType[which(TermType==&quot;Apoptosis&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Proliferation&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Translation&quot;)]=&quot;Transcription&quot; testType=c(&quot;Inflammation&quot;, &quot;Immune response&quot;, &quot;Transcription&quot;) #pdf(&quot;~/Desktop/4H-growing(-ve)-vs-stable(+ve)-CD45.pdf&quot;, height=8, width=8) par(oma=c(2, 5, 0,0), mfrow=c(2,2)) for (i in testType){ barplot(as.numeric(termA[which(TermType==i), 1]), names.arg = sigTerms[which(TermType==i)], horiz = T, las=2, xlab=&quot;NES&quot;, main=testType, col=factor(sign(as.numeric(termA[which(TermType==i), 1])))) } Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) write.csv(Ntab, file=&quot;nature-tables/4h.csv&quot;) Figure 13.2: CD45 cells enriched pathways 13.2 Comparisons based on treatment We can do the same analysis for the DN compartment, but for comparing treatment effect: d1=DNismr3$ProcessNetworks[, c(&quot;imm_vs_control NES&quot;, &quot;stable_vs_growing padj&quot;)] ds=which(d1[ ,2]&lt;0.05) termA=d1[ds, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: # TermType[which(TermType==&quot;Apoptosis&quot;)]=&quot;Transcription&quot; # TermType[which(TermType==&quot;Proliferation&quot;)]=&quot;Transcription&quot; # TermType[which(TermType==&quot;Translation&quot;)]=&quot;Transcription&quot; # testType=c(&quot;Inflammation&quot;, &quot;Immune response&quot;, &quot;Transcription&quot;) # # #pdf(&quot;~/Desktop/4H-growing(-ve)-vs-stable(+ve)-CD45.pdf&quot;, height=8, width=8) # par(oma=c(2, 5, 0,0), mfrow=c(2,2)) # for (i in testType){ # barplot(as.numeric(termA[which(TermType==i), 1]), names.arg = sigTerms[which(TermType==i)], horiz = T, las=2, # xlab=&quot;NES&quot;, main=testType, col=factor(sign(termA[which(TermType==i), 1]))) # } barplot(as.numeric(termA[, 1]), names.arg = sigTerms, horiz = T, las=2, xlab=&quot;NES&quot;, main=testType, col=factor(sign(as.numeric(termA[, 1])))) Figure 13.3: DN assoc treatment GSEA Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) write.csv(Ntab, file=&quot;nature-tables/Ext3h.csv&quot;) 13.3 Pathways of Interest 2 Focus on: JAK-STAT signalling interferon-gamma signalling IL-6 signalling BCR pathway TCR pathway antigen presentation KRAS signalling? T helper differentiation In DN samples: androgen receptor signalling? esr1 signalling? myc targets EMT Perform GSVA on these pathways load(&quot;../anntotations/Metacore_extracted_Process_networks_nov2020.RData&quot;) sList=PathwayMapAllComp[match(substr(rownames(e1)[es], 2, 100), names(PathwayMapAllComp))] rNames2=SymHum2Rat$HGNC.symbol[match(rownames(allTPMFinal), SymHum2Rat$RGD.symbol)] rNames2[which(is.na(rNames2))]=toupper(rownames(allTPMFinal)[which(is.na(rNames2))]) tpmTemp=allTPMFinal[ , match(vstEp$SampleID, colnames(allTPMFinal))] rownames(tpmTemp)=rNames2 colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] gsva1=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva1), function(x) sd(gsva1[x, ])) a1=which(nx2&gt;0.03) sList=PathwayMapAllComp[match(substr(rownames(d1)[ds], 2, 100), names(PathwayMapAllComp))] tpmTemp=allTPMFinal[ , match(vstDN$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva2=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva2), function(x) sd(gsva2[x, ])) a2=which(nx2&gt;0.03) sList=PathwayMapAllComp[match(substr(rownames(c1)[cs], 2, 100), names(PathwayMapAllComp))] tpmTemp=allTPMFinal[ , match(vstCD$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva3=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva3), function(x) sd(gsva3[x, ])) a3=which(nx2&gt;0.03) #pdf(&quot;~/Desktop/5B-ssgsea-scores.pdf&quot;, height=5, width=5) par(oma=c(1, 1, 1, 5)) heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstEp$Growth], main=&quot;Ep&quot;) heatmap.2(gsva2[a2, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstDN$Growth], main=&quot;DN&quot;) heatmap.2(gsva3[a3, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstCD$Growth], main=&quot;CD&quot;) #dev.off() "],["epcam-inflammatory-vs-non-inflammatory-samples.html", "Chapter 14 Epcam+ Inflammatory vs non-inflammatory samples 14.1 Identification of inflammatory samples 14.2 DEG: inflammatory vs non-inflammatory 14.3 Finding 3 signatures for 3 branches 14.4 Analyse the non-inflammatory samples 14.5 Luminal-only non-inflammtory samples samples", " Chapter 14 Epcam+ Inflammatory vs non-inflammatory samples 14.1 Identification of inflammatory samples Here, look at individual enrichment scores (ssGSEA). We notice in the Epithelial samples there are 5 samples which appear to be hyperinflammatory: They have higher enrichment for TNFA, interferon signalling for example. d1=DNismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] e1=Epismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] c1=CDismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] # ds=which(d1[ ,2]&lt;0.05) es=which(e1[ ,2]&lt;0.05) cs=which(c1[ ,2]&lt;0.05) AUnique=c(rownames(d1)[ds], rownames(e1)[es], rownames(c1)[cs]) xalist=unique(AUnique) sList=PathInH[match((rownames(e1)[es]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstEp$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva1=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva1), function(x) sd(gsva1[x, ])) a1=which(nx2&gt;0.03) sList=PathInH[match((rownames(d1)[ds]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstDN$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva2=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva2), function(x) sd(gsva2[x, ])) a2=which(nx2&gt;0.03) sList=PathInH[match((rownames(c1)[cs]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstCD$SampleID, colnames(allTPMFinal))] rownames(tpmTemp)=rNames2 gsva3=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva3), function(x) sd(gsva3[x, ])) a3=which(nx2&gt;0.03) #pdf(&quot;~/Desktop/5B-ssgsea-scores-hallmark-pathways.pdf&quot;, height=5, width=5) HRstat2=Cdata$HR_status[match(vstEp$TumorID, Cdata$TumorID)] HRstat2[which(HRstat2==&quot;Basal&quot;)]=NA Check which pathways are enriched in which specific samples: par(oma=c(1, 1, 1, 5)) # heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstEp$Growth], # main=&quot;Ep&quot;) heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColMerge[ vstEp$Treatment,1], main=&quot;Ep&quot;) Figure 14.1: ssGSEA specific pathways write.csv(gsva1[a1, ], file=&quot;nature-tables/5b.csv&quot;) Below are the pathways specific to cd45 and dn heatmap.2(gsva2[a2, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstDN$Growth], main=&quot;DN&quot;) heatmap.2(gsva3[a3, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstCD$Growth], main=&quot;CD&quot;) #dev.off() 14.2 DEG: inflammatory vs non-inflammatory What genes are different between inflammatory and non-inflammatory? Inflamm=c(&quot;11N_D_Ep&quot;, &quot;6R_B_Ep&quot;, &quot;8L_D_Ep&quot;, &quot;10L_D_Ep&quot;, &quot;3N_B_Ep&quot;) Epdds$Inflammation=&quot;no&quot; Epdds$Inflammation[which(colnames(Epdds)%in%Inflamm)]=&quot;yes&quot; Epdds$Inflammation=factor(Epdds$Inflammation) vstEpInf=Epdds design(vstEpInf)=~Inflammation vstEpInf=DESeq(vstEpInf) vstEpInfRes=results(vstEpInf) sigGenes=rownames(vstEpInfRes)[which(vstEpInfRes$padj&lt;0.05 &amp; abs(vstEpInfRes$log2FoldChange)&gt;2.5 &amp; vstEpInfRes$baseMean&gt;200)] colnames(vstEp)=infoTableFinal$TumorIDnew[match(colnames(vstEp), rownames(infoTableFinal))] heatmap.2(assay(vstEp)[sigGenes, ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;row&quot;, ColSideColors = ColSizeb[vstEpInf$Growth], hclustfun = hclust.ave) Figure 14.2: Differential gene exp inflammatory vs non-inflammatory write.csv(assay(vstEp)[sigGenes, ], file=&quot;nature-tables/Ext5c_heatmap.csc&quot;) There are 27 genes which differentiates these two, which includes Csf3, Ccl22, Ccl3, Pltp, Lck, Rac2, Mmp12, Rsad2, Bcl2a1, Cxcl1, Lyz2, C1s, Ccl2, Nr4a2, Plaur, Ets1, Plau, Angptl4, Il1b, Cxcl2, Hbegf, Cd74, Ccl17, Thbs1, RT1-Da, Oasl, Tyrobp. We can also assess whether there is an association between immune infiltration. We can compare whether the non-inflammatory have differences in T-cell infiltration, mixing indices based on imaging data. Below ‘no’ samples are non-inflammatory and ‘yes’ samples are hyper-inflammatory. ## boxplots for nTab=data.frame(inf=vstEpInf$Inflammation, MH=vstEpInf$MHEpCAM, cd8=vstEpInf$CD8Frac, knn=vstEpInf$knnEpCAM) nTabmelt=melt(nTab, measure.vars = c(&quot;cd8&quot;, &quot;knn&quot;, &quot;MH&quot;)) ggplot(data=nTabmelt, aes(x=inf, y=value))+geom_boxplot()+geom_point()+theme_bw()+facet_wrap(~variable, scale=&quot;free&quot;) Figure 14.3: association signature with WSI write.csv(nTabmelt, file=&quot;nature-tables/Ext5d.csv&quot;) Cdata$Inflammation=NA Cdata$Inflammation=vstEpInf$Inflammation2[match(Cdata$NewID, colnames(vstEp))] nTab ## inf MH cd8 knn ## 1 yes 0.61918860 0.06810877 34.33110 ## 2 no 0.43765215 0.02027148 44.92703 ## 3 no 0.23771466 0.15217774 69.10296 ## 4 yes 0.67778543 0.38006717 26.89773 ## 5 no 0.26460731 0.02244524 73.82461 ## 6 no 0.02617825 0.05041860 153.33513 ## 7 no 0.67710428 0.02236926 12.74758 ## 8 no 0.26412928 0.05412980 45.49485 ## 9 no NA NA NA ## 10 no NA NA NA ## 11 no NA NA NA ## 12 no 0.05741998 0.04769261 71.64542 ## 13 no 0.76751419 0.11152672 15.06388 ## 14 no 0.34918782 0.03010410 47.77260 ## 15 yes 0.63717941 0.27682992 32.31159 ## 16 no 0.38112224 0.02321393 32.11938 ## 17 yes 0.50296493 0.15548043 76.37955 ## 18 no NA NA NA ## 19 yes 0.64888492 0.05623363 16.36623 ## 20 no 0.36761266 0.02876680 50.00101 Statistics are below: print(&#39;assoc with cd8&#39;) ## [1] &quot;assoc with cd8&quot; #t.test(nTab$cd8~nTab$inf) #table(nTab$cd8, nTab$inf) print(&#39;assoc with MH index&#39;) ## [1] &quot;assoc with MH index&quot; #t.test(nTab$MH~nTab$inf) #table(nTab$MH,nTab$inf) print(&#39;assoc with knn&#39;) ## [1] &quot;assoc with knn&quot; #t.test(nTab$knn~nTab$inf) #table(nTab$knn~nTab$inf) nTab ## inf MH cd8 knn ## 1 yes 0.61918860 0.06810877 34.33110 ## 2 no 0.43765215 0.02027148 44.92703 ## 3 no 0.23771466 0.15217774 69.10296 ## 4 yes 0.67778543 0.38006717 26.89773 ## 5 no 0.26460731 0.02244524 73.82461 ## 6 no 0.02617825 0.05041860 153.33513 ## 7 no 0.67710428 0.02236926 12.74758 ## 8 no 0.26412928 0.05412980 45.49485 ## 9 no NA NA NA ## 10 no NA NA NA ## 11 no NA NA NA ## 12 no 0.05741998 0.04769261 71.64542 ## 13 no 0.76751419 0.11152672 15.06388 ## 14 no 0.34918782 0.03010410 47.77260 ## 15 yes 0.63717941 0.27682992 32.31159 ## 16 no 0.38112224 0.02321393 32.11938 ## 17 yes 0.50296493 0.15548043 76.37955 ## 18 no NA NA NA ## 19 yes 0.64888492 0.05623363 16.36623 ## 20 no 0.36761266 0.02876680 50.00101 14.3 Finding 3 signatures for 3 branches Below we can perform a 1 vs all analysis i.e. compare growing vs the rest inflammatory vs the rest stable vs the rest #vstEpInf$Inflammation2=vstEpInf$Inflammation vstEpInf$Inflammation2=factor(ifelse(vstEpInf$Inflammation==&quot;yes&quot;, &quot;inf&quot;, ifelse(vstEpInf$Growth==&quot;growing&quot;, &quot;grow&quot;, &quot;stab&quot;))) design(vstEpInf)=~Inflammation2 vstEpInf=DESeq(vstEpInf) vstEpInfRes1=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;stab&quot;, &quot;inf&quot;)) res1genes=rownames(vstEpInfRes1)[which(vstEpInfRes1$padj&lt;0.05 &amp; abs(vstEpInfRes1$log2FoldChange)&gt;1.5 &amp; vstEpInfRes1$baseMean&gt;100)] vstEpInfRes2=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;stab&quot;, &quot;grow&quot;)) res2genes=rownames(vstEpInfRes2)[which(vstEpInfRes2$padj&lt;0.05 &amp; abs(vstEpInfRes2$log2FoldChange)&gt;1.5 &amp; vstEpInfRes2$baseMean&gt;100)] vstEpInfRes3=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;grow&quot;, &quot;inf&quot;)) res3genes=rownames(vstEpInfRes3)[which(vstEpInfRes3$padj&lt;0.05 &amp; abs(vstEpInfRes3$log2FoldChange)&gt;1.5 &amp; vstEpInfRes3$baseMean&gt;100)] aUnique=c(res1genes, res2genes, res3genes) AX1=setdiff(res2genes, res1genes) ax2=setdiff(res3genes, res1genes) heatmap.2(assay(vstEp)[AX1, ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;row&quot;, ColSideColors = ColSizec[vstEpInf$Inflammation2], hclustfun = hclust.ave) write.csv(assay(vstEp)[AX1, ], file=&quot;nature-tables/Ext5c.csv&quot;) nTab=data.frame(inf=vstEpInf$Inflammation2, MH=vstEpInf$MHEpCAM, cd8=vstEpInf$CD8Frac, knn=vstEpInf$knnEpCAM) nTabmelt=melt(nTab, measure.vars = c(&quot;cd8&quot;, &quot;knn&quot;, &quot;MH&quot;)) ggplot(data=nTabmelt, aes(x=inf, y=value))+geom_boxplot()+geom_point()+theme_bw()+facet_wrap(~variable, scale=&quot;free&quot;) vstOut=vst(vstEpInf) plotPCA(vstOut, &quot;Inflammation2&quot;) We see that the growing vs stable samples are very similary overall, however, DEGs between growing and stable are also expressed in the inflammatory branch. We can use these gene signatures to identify each branch: Below, we see the separation between the 3 groups using these genes. (note that the stable branch has no identifiable upregulated genes and is defined by the negative score of the downregulated genes:). We use ssGSEA to get a score for each sample vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation3==&quot;stab&quot;)]=&quot;inf&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesGrow=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&lt;(-1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation2==&quot;grow&quot;)]=&quot;inf&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesStab=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&lt;(-1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation2==&quot;stab&quot;)]=&quot;grow&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesInf=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&gt;(1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] ## perform ssGSEA on these samples and see where they fit: RatssGSEA=gsva(assay(vsdLimmaEp), list(grow=res1genesGrow, inh=res1genesInf, nonstab=res1genesStab), method=&quot;ssgsea&quot;, ssgsea.norm=T) par(mfrow=c(1,2)) plot(RatssGSEA[1, ], RatssGSEA[2, ], col=factor(vstEpInf$Inflammation2), xlab=&quot;grow score&quot;, ylab=&quot;inh score&quot;) plot(RatssGSEA[1, ], -RatssGSEA[3, ], col=factor(vstEpInf$Inflammation2), xlab=&quot;grow score&quot;, ylab=&quot;-stab score&quot;) RatssGSEA[3, ]=-RatssGSEA[3, ] We can also overlay these signatures from ssGSEA to see how well it can predict each group: # plot histograms for the 3 samples: par(mfrow=c(3,3)) for (i in 1:3){ for (j in c(&quot;inf&quot;, &quot;grow&quot;, &quot;stab&quot;)){ plot(density(RatssGSEA[i, which(vstEpInf$Inflammation2==j)]), main=paste(j, rownames(RatssGSEA)[i]), xlim=c(-0.6, 0.8)) } } GSEA for the above 3 groups? l1=SymHum2Rat$HGNC.symbol[match(rownames(vstEpInfRes1), SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(rownames(vstEpInfRes1), Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(rownames(vstEpInfRes1), Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, rownames(vstEpInfRes1)))) ## run 1 hits=EpGenesConv[match(res1genes, rownames(vstEpInfRes1))] fcTab=vstEpInfRes1$log2FoldChange names(fcTab)=EpGenesConv gscaepInf1=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf1 &lt;- preprocess(gscaepInf1, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf1 &lt;- analyze(gscaepInf1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## run2 hits=EpGenesConv[match(res2genes, rownames(vstEpInfRes2))] fcTab=vstEpInfRes2$log2FoldChange names(fcTab)=EpGenesConv gscaepInf2=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf2 &lt;- preprocess(gscaepInf2, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf2 &lt;- analyze(gscaepInf2, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## run3 hits=EpGenesConv[match(res3genes, rownames(vstEpInfRes3))] fcTab=vstEpInfRes3$log2FoldChange names(fcTab)=EpGenesConv gscaepInf3=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf3 &lt;- preprocess(gscaepInf3, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf3 &lt;- analyze(gscaepInf3, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) GSEA1=gscaepInf1@result$GSEA.results$ProcessNetworks GSEA2=gscaepInf2@result$GSEA.results$ProcessNetworks GSEA3=gscaepInf3@result$GSEA.results$ProcessNetworks lx1=unique(c(rownames(GSEA1)[which(GSEA1[ ,3]&lt;0.05)], rownames(GSEA2)[which(GSEA2[ ,3]&lt;0.05)], rownames(GSEA3)[which(GSEA3[ ,3]&lt;0.05)])) Fx=cbind(GSEA1[lx1, 1], GSEA3[lx1, 1], GSEA2[lx1, 1]) Fx2=cbind(GSEA1[lx1, 3], GSEA3[lx1, 3], GSEA2[lx1, 3]) Fx[which(Fx2&gt;0.05, arr.ind=T)]=0 rownames(Fx)=lx1 colnames(Fx)=c(&quot;s/i&quot;, &quot;g/i&quot;, &quot;s/g&quot;) ltest=which(rowSums(sign(abs(Fx)))&gt;1) ltest2=which(abs(Fx[,3])&gt;0) par(oma=c(1,1,1,5)) heatmap.2(Fx[unique(c(ltest,ltest2)), ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;none&quot;, hclustfun = hclust.ave) 14.4 Analyse the non-inflammatory samples We remove all the inflammtory samples and compare differences between stable and growing here. Below is the volcano plot for the #Remove inflammatory samples #Also remove samples which are basal-like Inflamm=c(&quot;11N_D_Ep&quot;, &quot;6R_B_Ep&quot;, &quot;8L_D_Ep&quot;, &quot;10L_D_Ep&quot;, &quot;3N_B_Ep&quot;) #,&quot;2N__Ep&quot;, &quot;15N_C_Ep&quot;, &quot;7N_A_Ep&quot;, &quot;8R_CU_Ep&quot;, &quot;12L_D_Ep&quot;, &quot;14N_D_Ep&quot;) EpddsInflam=EpddsGrowth EpddsInflam=EpddsInflam[, -match(Inflamm, colnames(EpddsInflam))] EpddsInflam=DESeq(EpddsInflam) ResA=results(EpddsInflam, contrast = c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) ResAb=ResA[which(ResA$padj&lt;0.05 &amp; abs(ResA$log2FoldChange)&gt;1.5), ] #pdf(&quot;~/Desktop/5C-heatmap-inflamm-vs-non-inflamm-lowexpressing-included.pdf&quot;, width=8, height=12) plot(ResA$log2FoldChange, -log10(ResA$padj), pch=20, col=&quot;black&quot;, main=&quot;growing (-ve) vs stable (+ve)&quot;) text(ResAb$log2FoldChange, -log10(ResAb$padj), rownames(ResAb), col=&quot;red&quot;) Figure 14.4: ep non-inflammatory comparison write.csv(ResA, file=&quot;nature-tables/5f.csv&quot;) Followed by the heatmap for this analysis vst2=vst(EpddsInflam) heatmap.2(assay(vst2)[match(rownames(ResAb), rownames(vst2)), ], col=RdBu[11:1], ColSideColors = ColSizeb[vst2$Growth], trace=&quot;none&quot;, scale=&quot;row&quot;) Figure 14.5: ep non-inflammatory comparison heatmap # heatmap.2(assay(vstEp)[match(rownames(ResAb), rownames(vstEp)), ], col=RdBu[11:1], # ColSideColors = ColSizeb[vstEp$Growth], trace=&quot;none&quot;, scale=&quot;row&quot;) #dev.off() #write.csv(ResAb, file=&quot;~/Desktop/5C-growing-stable-in-non-inflammatory-Ep-lowexpressing-included.csv&quot;) 14.4.1 GSEA Quickly run GSEA for these samples: EpGenes=rownames(ResA) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(ResAb), EpGenes)] fcTab=ResA$log2FoldChange names(fcTab)=EpGenesConv gscaepInf=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf &lt;- preprocess(gscaepInf, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## -- 30 genes (out of 265) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaepInf &lt;- analyze(gscaepInf, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --146 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --848 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --269 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --110 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --377 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== A1=summarize(gscaepInf) ## ## -No of genes in Gene set collections: ## input above min size ## c2List 2199 2053 ## c5BP 7530 6682 ## c5MF 1663 1394 ## c5CC 999 889 ## ProcessNetworks 158 158 ## MetPathway 1480 1103 ## Hallmark 50 50 ## ## ## -No of genes in Gene List: ## input valid duplicate removed converted to entrez ## Gene List 12449 12449 12341 11814 ## ## ## -No of hits: ## input preprocessed ## Hits 265 235 ## ## ## -Parameters for analysis: ## minGeneSetSize pValueCutoff pAdjustMethod ## HyperGeo Test 5 0.05 BH ## ## minGeneSetSize pValueCutoff pAdjustMethod nPermutations exponent ## GSEA 5 0.05 BH 100 1 ## ## ## -Significant gene sets (adjusted p-value&lt; 0.05 ): ## c2List c5BP c5MF c5CC ProcessNetworks MetPathway Hallmark ## HyperGeo NA NA NA NA NA NA NA ## GSEA 188 641 116 130 17 16 19 ## Both NA NA NA NA NA NA NA PNresultsef=gscaepInf@result$GSEA.results$ProcessNetworks TermsA=sapply(strsplit(rownames(gscaepInf@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaepInf@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaepInf@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaepInf, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 14.6: 5g: non inflammatory branch #plotGSEA(gscaepInf, gscs=c(&quot;ProcessNetworks&quot;), filepath=&quot;figure-outputs/&quot;, output=&quot;pdf&quot;) save(gscaepInf2, file=&quot;figure-outputs/5g.Rdata&quot;) # save this file to change the color scheme write.csv(gscaepInf@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/Ext5g_perhaps.csv&quot;) We’ve noticed that some of the differentially expressed genes above are splicing related or epigenetic related. Could there be an association with transcriptional diversity? Below we calculate the transcriptional diversity based on rsem values local.rnaseq.shannon &lt;- function(exp.mat, pseudoNum = 0){ # calculate shannon index from transcriptome matrix apply(exp.mat, 2, function(x){ x&lt;-x+pseudoNum prop&lt;-x/sum(x) #prop&lt;-prop[prop&gt;0] shidx = -sum(prop*log(prop), na.rm=T)/log(length(prop)) shidx }) } Output1=local.rnaseq.shannon(allrsemFinal) Output2=Output1[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] tab2=data.frame(inf=vstEpInf$Inflammation2, het=Output2[-3]) ggplot(tab2, aes(x=inf, y=het))+geom_boxplot()+geom_point()+ggtitle(&quot;transcriptional heterogeneity: rsem&quot;) Figure 14.7: Transcriptional heterogeneity wilcox.test(tab2$het[tab2$inf!=&quot;inf&quot;]~tab2$inf[tab2$inf!=&quot;inf&quot;]) ## ## Wilcoxon rank sum exact test ## ## data: tab2$het[tab2$inf != &quot;inf&quot;] by tab2$inf[tab2$inf != &quot;inf&quot;] ## W = 9, p-value = 0.05528 ## alternative hypothesis: true location shift is not equal to 0 write.csv(tab2, file=&quot;nature-tables/Ext5j_transcriptional_heterigeneity.csv&quot;) 14.5 Luminal-only non-inflammtory samples samples We removed all the basal samples and did the same comparison: Epdds$HR=Cdata$HR_status[match(substr(colnames(Epdds), 1, nchar(colnames(Epdds))-3), Cdata$TumorID)] vstLumOnly=Epdds[, which(Epdds$HR==&quot;Lum&quot;)] design(vstLumOnly)=~Growth vstLumOnly=DESeq(vstLumOnly) colnames(Epdds) ## [1] &quot;10L_D_Ep&quot; &quot;10R_BL_Ep&quot; &quot;11L_B_Ep&quot; &quot;11N_D_Ep&quot; &quot;11R_D_Ep&quot; &quot;11R_C_Ep&quot; ## [7] &quot;12L_D_Ep&quot; &quot;14N_C_Ep&quot; &quot;14N_D_Ep&quot; &quot;14R_B_Ep&quot; &quot;15N_C_Ep&quot; &quot;16L_C_Ep&quot; ## [13] &quot;17N_D_Ep&quot; &quot;2N__Ep&quot; &quot;3N_B_Ep&quot; &quot;3R_C_Ep&quot; &quot;6R_B_Ep&quot; &quot;7N_A_Ep&quot; ## [19] &quot;8L_D_Ep&quot; &quot;8R_CU_Ep&quot; vstLumRes=results(vstLumOnly) vsdLumvst=vst(vstLumOnly) write.csv(vstLumRes, file=&quot;nature-tables/5j_lumonly_ep_growing_vs_stable.csv&quot;) genes2=rownames(vstLumRes)[which(vstLumRes$padj&lt;0.05 &amp; abs(vstLumRes$log2FoldChange)&gt;1.5 &amp; vstLumRes$baseMean&gt;100)] ColSideCols=ColSizeb[vstLumOnly$Growth] #pdf(&quot;figure-outputs/Figure5_XX_heatmap_lumonly_growing_vs_stable.pdf&quot;, height=9, width=5) heatmap.2(assay(vsdLumvst)[ genes2, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = ColSideCols, col=RdBu[11:1], main=&quot;Ep genes&quot;) Figure 14.8: DEG non-inflamm Lum only #dev.off() write.csv(assay(vsdLumvst)[ genes2, ], file=&quot;nature-tables/5xx_lum_only_growing_vs_stable.csv&quot;) Quickly run GSEA for these samples: EpGenes=rownames(vstLumRes) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(vstLumRes), EpGenes)] fcTab=vstLumRes$log2FoldChange names(fcTab)=EpGenesConv gscaepNI_lum=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepNI_lum&lt;- preprocess(gscaepNI_lum, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaepNI_lum &lt;- analyze(gscaepNI_lum, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --146 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --848 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --269 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --110 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --377 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== A1=summarize(gscaepNI_lum) ## ## -No of genes in Gene set collections: ## input above min size ## c2List 2199 2053 ## c5BP 7530 6682 ## c5MF 1663 1394 ## c5CC 999 889 ## ProcessNetworks 158 158 ## MetPathway 1480 1103 ## Hallmark 50 50 ## ## ## -No of genes in Gene List: ## input valid duplicate removed converted to entrez ## Gene List 12449 12449 12341 11814 ## ## ## -No of hits: ## input preprocessed ## Hits 12449 11814 ## ## ## -Parameters for analysis: ## minGeneSetSize pValueCutoff pAdjustMethod ## HyperGeo Test 5 0.05 BH ## ## minGeneSetSize pValueCutoff pAdjustMethod nPermutations exponent ## GSEA 5 0.05 BH 100 1 ## ## ## -Significant gene sets (adjusted p-value&lt; 0.05 ): ## c2List c5BP c5MF c5CC ProcessNetworks MetPathway Hallmark ## HyperGeo NA NA NA NA NA NA NA ## GSEA 243 768 98 100 52 84 22 ## Both NA NA NA NA NA NA NA PNresultsef=gscaepNI_lum@result$GSEA.results$ProcessNetworks TermsA=sapply(strsplit(rownames(gscaepNI_lum@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaepNI_lum@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) save(gscaepNI_lum, file=&quot;figure-outputs/5xx_lumonly.Rdata&quot;) # save this file to change the colors ## check whether this runs: gscaepNI_lum@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaepNI_lum, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 14.9: luminal non inflammatory branch write.csv(gscaepNI_lum@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/5g_lumxx.csv&quot;) "],["associate-epcam-inflammatory-with-survival.html", "Chapter 15 Associate Epcam+ inflammatory with survival 15.1 Associating CD74 with phenotype and outcome 15.2 Signature: Lum cases non-inflammatory: growing vs stable", " Chapter 15 Associate Epcam+ inflammatory with survival Associate the signature with outcome in TCGA: Load in TCGA right now TCGArsem=read.delim(&quot;../data/TCGA/BRCA.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.data.txt&quot;, sep=&quot;\\t&quot;) rownames(TCGArsem)=TCGArsem[ ,1] TCGArsem=TCGArsem[, grep(&quot;01A&quot;, colnames(TCGArsem))] colnames(TCGArsem)=substr(colnames(TCGArsem), 1, 12) colnames(TCGArsem)=gsub(&quot;\\\\.&quot;, &quot;-&quot;, colnames(TCGArsem)) TCGArsem=TCGArsem[-1, ] TCGArsem2=apply(TCGArsem, 2, as.numeric) #TCGArsem2=t(TCGArsem2) #colnames(TCGArsem2)=colnames(TCGArsem) #TCGArsem2=data.frame(TCGArsem2) rownames(TCGArsem2)=rownames(TCGArsem) rownames(TCGArsem2)=sapply(strsplit(rownames(TCGArsem2), &quot;\\\\|&quot;), function(x) x[1]) TCGArsem2=TCGArsem2[-which(rownames(TCGArsem2)==&quot;?&quot;), ] load(&quot;../data/TCGA/BrClin_clinical_Nov2017.RData&quot;) ax1=match(BrClin$Patient.ID, colnames(TCGArsem)) BrClin=BrClin[-which(is.na(ax1)), ] TCGArsem=TCGArsem[ , na.omit(ax1)] ## load in the inflammation subtype information ThorssData=read.xlsx(&quot;../data/TCGA/Thorsson2018_table1.xlsx&quot;,1) Edit the clinical data to make sure data is censored at 60 months (5 years) and that stage is given an integer value (no 2A, 2b etc.) for easier comparisons #m1=match(colnames(TCGAssgsea), BrClin$Patient.ID) BrClin$Stage=(substr(BrClin$American.Joint.Committee.on.Cancer.Tumor.Stage.Code, 2, 2)) BrClin$Stage[which(BrClin$Stage==&quot;&quot;|BrClin$Stage==&quot;X&quot;)]=NA BrClin$Overall.Survival..Months.[which(BrClin$Overall.Survival..Months.&gt;=60)]=60 BrClin$Overall.Survival.Status[which(BrClin$Overall.Survival..Months.&gt;=60)]=&quot;LIVING&quot; BrClin$Disease.Free..Months.[which(BrClin$Disease.Free..Months.&gt;=60)]=60 BrClin$Disease.Free.Status[which(BrClin$Disease.Free..Months.&gt;=60)]=&quot;Disease Free&quot; ## Load the old file Nickold=read.csv(&quot;outputs/EpCAM_IFNg_low_growing_vs_stable.filtered.csv&quot;, row.names = 1) GlistGrowing=rownames(Nickold)[which(sign(Nickold$log2FoldChange)&lt;0 &amp; Nickold$baseMean&gt;100)] Glistnon=rownames(Nickold)[which(sign(Nickold$log2FoldChange)&gt;0 &amp; Nickold$baseMean&gt;100)] #alist=results(vstLumRes) 15.1 Associating CD74 with phenotype and outcome The Thorsson data has pre-calculated scores for: immune subtypes leukocyte fractins proportion of data with coding mutations TCR shannon index Z-Scale CD74 scores prior to analysis: TCGAssgsea=scale(TCGArsem2[match(&quot;CD74&quot;, rownames(TCGArsem2)), ]) m1=match(colnames(TCGArsem2), BrClin$Patient.ID) tinfo=data.frame(pam=BrClin$PAM50[m1], OSM=BrClin$Overall.Survival..Months.[m1], OSS=BrClin$Overall.Survival.Status[m1], cd74=TCGAssgsea, DFS=BrClin$Disease.Free.Status[m1], DFM=BrClin$Disease.Free..Months.[m1], Stage=BrClin$Stage[m1]) ThorssData=ThorssData[which(ThorssData$TCGA.Study==&quot;BRCA&quot;), ] n1=match(rownames(tinfo), ThorssData$TCGA.Participant.Barcode) tinfo$immSub=ThorssData$Immune.Subtype[n1] tinfo$leukFrac=as.numeric(ThorssData$Leukocyte.Fraction[n1]) tinfo$codingMut=as.numeric(ThorssData$Nonsilent.Mutation.Rate[n1]) tinfo$TCRshann=as.numeric(ThorssData$TCR.Shannon[n1]) #pdf(&quot;figure-outputs/Figure5_CD74_output.pdf&quot;, height=7, width=9) par(mfrow=c(2,3)) boxplot(tinfo$cd74~tinfo$pam, ylab=&quot;gene exp&quot;, main=&quot;PAM50&quot;) boxplot(tinfo$cd74~tinfo$immSub, ylab=&quot;gene exp&quot;, main=&quot;Immune sbtype&quot;) ax=cor.test(tinfo$cd74, log10(tinfo$codingMut+1), method=&quot;pearson&quot;) smoothScatter(tinfo$cd74, log10(tinfo$codingMut+1), xlab=&quot;gene exp&quot;, ylab=&quot;log10 mut&quot;) text(4,0.5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) ax=cor.test(tinfo$cd74, tinfo$leukFrac, method=&quot;pearson&quot;) smoothScatter(tinfo$cd74, (tinfo$leukFrac), xlab=&quot;gene exp&quot;, ylab=&quot;leuk frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) ax=cor.test(tinfo$cd74, tinfo$TCRshann, method=&quot;pearson&quot;) smoothScatter(tinfo$cd74, tinfo$TCRshann, xlab=&quot;gene exp&quot;, ylab=&quot;TCR diversity&quot;) text(4,1, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) hist(tinfo$cd74) Figure 15.1: CD74 assoc with patient data #dev.off() write.csv(tinfo, file=&quot;nature-tables/5d-TCGA_data.csv&quot;) We can also check if there is an association with survival: axD=Surv(tinfo$DFM, ifelse(tinfo$DFS==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS==&quot;DiseaseFree&quot;, 0, NA))) axO=Surv(tinfo$OSM, ifelse(tinfo$OSS==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS==&quot;LIVING&quot;, 0, NA))) SurvOSS=coxph(axO~tinfo$pam+tinfo$Stage+tinfo$cd74) SurvDFS=coxph(axD~tinfo$pam+tinfo$Stage+tinfo$cd74) ao=summary(SurvOSS) ao ## Call: ## coxph(formula = axO ~ tinfo$pam + tinfo$Stage + tinfo$cd74) ## ## n= 804, number of events= 78 ## (276 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 0.3709 1.4491 0.3780 0.981 0.3265 ## tinfo$pamLumA -0.8365 0.4332 0.3091 -2.707 0.0068 ** ## tinfo$pamLumB -0.3137 0.7308 0.3409 -0.920 0.3574 ## tinfo$pamNormal -0.2546 0.7752 0.6282 -0.405 0.6853 ## tinfo$Stage2 0.6162 1.8519 0.3309 1.862 0.0626 . ## tinfo$Stage3 0.6636 1.9417 0.4315 1.538 0.1241 ## tinfo$Stage4 1.9960 7.3594 0.4255 4.691 2.72e-06 *** ## tinfo$cd74 -0.3021 0.7392 0.1530 -1.974 0.0484 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 1.4491 0.6901 0.6907 3.0400 ## tinfo$pamLumA 0.4332 2.3083 0.2364 0.7939 ## tinfo$pamLumB 0.7308 1.3685 0.3747 1.4253 ## tinfo$pamNormal 0.7752 1.2899 0.2263 2.6557 ## tinfo$Stage2 1.8519 0.5400 0.9681 3.5425 ## tinfo$Stage3 1.9417 0.5150 0.8335 4.5234 ## tinfo$Stage4 7.3594 0.1359 3.1963 16.9448 ## tinfo$cd74 0.7392 1.3528 0.5477 0.9978 ## ## Concordance= 0.715 (se = 0.031 ) ## Likelihood ratio test= 42.32 on 8 df, p=1e-06 ## Wald test = 47.41 on 8 df, p=1e-07 ## Score (logrank) test = 56.19 on 8 df, p=3e-09 as=summary(SurvDFS) as ## Call: ## coxph(formula = axD ~ tinfo$pam + tinfo$Stage + tinfo$cd74) ## ## n= 587, number of events= 69 ## (493 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 -0.4626 0.6296 0.4860 -0.952 0.34117 ## tinfo$pamLumA -1.0004 0.3677 0.3158 -3.168 0.00153 ** ## tinfo$pamLumB -0.8377 0.4327 0.3701 -2.263 0.02361 * ## tinfo$pamNormal -0.8810 0.4143 0.7608 -1.158 0.24681 ## tinfo$Stage2 0.5470 1.7281 0.3389 1.614 0.10648 ## tinfo$Stage3 1.0539 2.8687 0.4440 2.373 0.01762 * ## tinfo$Stage4 2.6058 13.5422 0.4836 5.388 7.13e-08 *** ## tinfo$cd74 -0.1134 0.8928 0.1456 -0.779 0.43600 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 0.6296 1.58824 0.24287 1.6323 ## tinfo$pamLumA 0.3677 2.71950 0.19802 0.6828 ## tinfo$pamLumB 0.4327 2.31113 0.20948 0.8937 ## tinfo$pamNormal 0.4143 2.41342 0.09329 1.8404 ## tinfo$Stage2 1.7281 0.57866 0.88943 3.3577 ## tinfo$Stage3 2.8687 0.34859 1.20151 6.8493 ## tinfo$Stage4 13.5422 0.07384 5.24827 34.9432 ## tinfo$cd74 0.8928 1.12006 0.67121 1.1876 ## ## Concordance= 0.69 (se = 0.039 ) ## Likelihood ratio test= 32.15 on 8 df, p=9e-05 ## Wald test = 39.03 on 8 df, p=5e-06 ## Score (logrank) test = 50.73 on 8 df, p=3e-08 Note that CD74 is associated with survival: The harzards ratio is 1.851886 (95CI:0.9680967, 3.5424989), p value 1.176905110^{-6}. This means that this is associated with survival regardless of subtype. We can look at these values in forestplots data1=data.frame(X1=c(&quot;&quot;,&quot;PAM50&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;CD74&quot;), X2=c(&quot;&quot;,&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;, &quot;Normal&quot; ,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;&quot;), X3=c(&quot;NSamp&quot;, table(tinfo$pam), table(tinfo$Stage), length(na.omit(tinfo$cd74))), X4=c(&quot;HR&quot;, &quot;&quot;, round(summary(SurvOSS)$coefficients[ 1:4,2],2), &quot;&quot;, round(summary(SurvOSS)$coefficients[ 5:8,2],2))) mdata=data.frame(summary(SurvOSS)$conf.int[ ,c(1,3:4)]) mdata=rbind(NA,NA, mdata[1:4, ], NA, mdata[5:8, ]) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata, xlog=T, boxsize=0.5) Figure 15.2: forest plot CD74 #dev.off() write.csv(cbind(data1, mdata), file=&quot;nature-tables/5e_forest_plot.csv&quot;) We can look below what the association with subtype is in KM curves: par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$OSM[l1], ifelse(tinfo$OSS[l1]==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS[l1]==&quot;LIVING&quot;, 0, NA))) TCGAvalCut=cut(tinfo$cd74[l1], quantile(tinfo$cd74[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;CD74 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.3: OS CD74 by subtype par(mfrow=c(2,2)) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$DFM[l1], ifelse(tinfo$DFS[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS[l1]==&quot;DiseaseFree&quot;, 0, NA))) TCGAvalCut=cut(tinfo$cd74[l1], quantile(tinfo$cd74[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;CD74 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.4: DFS CD74 by subtype 15.2 Signature: Lum cases non-inflammatory: growing vs stable Here, use the signature which was applied before to see the difference between the non-inflammatory growing vs stable samples GlistGrowing=rownames(vstLumRes)[which(vstLumRes$log2FoldChange&gt;1.5 &amp; vstLumRes$baseMean&gt;100 &amp; vstLumRes$padj&lt;0.05 )] Glistnon=rownames(vstLumRes)[which(vstLumRes$log2FoldChange&lt;(-1.5) &amp; vstLumRes$baseMean&gt;100 &amp; vstLumRes$padj&lt;0.05 )] HumGeneList=SymHum2Rat$HGNC.symbol[match(GlistGrowing, SymHum2Rat$RGD.symbol)] HumGeneList2=Rat2Hum$HGNC.symbol[match(GlistGrowing, Rat2Hum$RGD.symbol)] TCGAssgsea=gsva((TCGArsem2), list(grow=na.omit(HumGeneList2), stab=Rat2Hum$HGNC.symbol[match(Glistnon, Rat2Hum$RGD.symbol)]), method=&quot;ssgsea&quot;, ssgsea.norm=T) par(mfrow=c(1,2)) hist(TCGAssgsea[1, ], main=&quot;stable&quot;) hist(TCGAssgsea[2, ], main=&quot;growing&quot;) plot(TCGAssgsea[1, ], TCGAssgsea[2, ], xlab=&quot;stable&quot;, ylab=&quot;growing&quot;) Below are the survival curves: #pdf(&quot;figure-outputs/Fig5_survival_analysis_Lum_samples_baseMean_greater100.pdf&quot;, height=8, width = 8) par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) ax=Surv(BrClin$Overall.Survival..Months.[l1], ifelse(BrClin$Overall.Survival.Status[l1]==&quot;DECEASED&quot;, 1, ifelse(BrClin$Overall.Survival.Status[l1]==&quot;LIVING&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[1, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[1, lx2], quantile(TCGAssgsea[1, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum stable&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) } for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[1, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[1, lx2], quantile(TCGAssgsea[1, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum stable&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) } Below are firstly the OS curves for the growing signature par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) ax=Surv(BrClin$Overall.Survival..Months.[l1], ifelse(BrClin$Overall.Survival.Status[l1]==&quot;DECEASED&quot;, 1, ifelse(BrClin$Overall.Survival.Status[l1]==&quot;LIVING&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[2, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[2, lx2], quantile(TCGAssgsea[2, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time&quot;, ylab=&quot;OS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) } Figure 15.5: OS: growing signature Followed by the DFS plots for this signature par(mfrow=c(2,2)) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[2, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[2, lx2], quantile(TCGAssgsea[2, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) } Figure 15.6: DFS forgrowing signature The gene lists are Stable: Fgfr2, Mx1, Endou, Grhl3, Slpi, Gbp2, Plg, Aldh1a3, Upk3a Growing: Setd7, Hspa1l, Hbb, Kifc2, Kmt5c, Pik3c2b, Lmntd2, Nsmf, Nrbp2, LOC100134871, Hsp90aa1, Coro6, Chst8, Slc4a3, Fhod1, Rpl8, Spp1, Catsperg, Col5a1, LOC100911498, Noxa1, F8, Rps19, Rps6, Irs1, Leng8, Plekhh1, Lmbr1l, Ikbke, Pnisr, Adamts10, Zfp692, Trim41, Sema6d, Mgp, Cdc42bpg, Slc16a13, Dmpk We can see whether this signature associates with leukocyte content and TCR diversity in the TCGA cohort: l1=which(BrClin$PAM50==&quot;LumA&quot;) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) lx3=match(BrClin$Patient.ID[l1], ThorssData$TCGA.Participant.Barcode) newinfoTab=data.frame(pat=BrClin$Patient.ID[l1], TCGAval=TCGAssgsea[2, lx2], leuk=as.numeric(ThorssData$Leukocyte.Fraction[lx3]), TCRshann=as.numeric(ThorssData$TCR.Shannon[lx3]), immSub=ThorssData$Immune.Subtype[lx3]) #pdf(&quot;figure-outputs/Fig5_assoc_growing_stable_signature.pdf&quot;, height=6, width=9) par(mfrow=c(1,2)) ax=cor.test(newinfoTab$TCGA, newinfoTab$leuk, method=&quot;pearson&quot;) smoothScatter(newinfoTab$TCGA, newinfoTab$leuk) text(0.6,0.6, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) ax=cor.test(newinfoTab$TCGA, newinfoTab$TCRshann, method=&quot;pearson&quot;) smoothScatter(newinfoTab$TCGA, newinfoTab$TCRshann) text(0.6,5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) Figure 15.7: luminal signature associated with clinical variables As well as whether it associates with any of the previously identified immune subtypes: ggplot(newinfoTab, aes(x=immSub, y=TCGAval))+geom_boxplot()+geom_point()+theme_bw() write.csv(newinfoTab, file=&quot;nature-tables/5h_lum_growing_vs_stable.csv&quot;) 15.2.1 TCGA: LumA high vs low signatures We can pull out the samples here which have high vs low signature (in the lumA group) and perform differential gene expression analysis on these cases: newinfoTab$TCGAvalcut=cut(newinfoTab$TCGAval, quantile(newinfoTab$TCGAval, c(0, 0.33, 0.67, 1) ), c(&quot;L&quot;, &quot;M&quot;, &quot;O&quot;)) colDataTCGA=newinfoTab[which(newinfoTab$TCGAvalcut!=&quot;M&quot;), ] head(colDataTCGA) ## pat TCGAval leuk TCRshann immSub TCGAvalcut ## 1 TCGA-A1-A0SD 0.4276658 0.1307793 2.966943 C2 L ## 2 TCGA-A1-A0SE 0.4281833 0.1157228 3.404928 C1 L ## 3 TCGA-A1-A0SF 0.4348571 0.2502148 4.145625 C1 L ## 4 TCGA-A1-A0SH 0.4311287 0.1707323 2.441015 C6 L ## 5 TCGA-A1-A0SJ 0.4293603 0.1281564 2.978508 C1 L ## 7 TCGA-A1-A0SQ 0.4376568 0.1028228 2.025326 C3 L TCGAdeseq=DESeqDataSetFromMatrix(round(TCGArsem2[ ,match(colDataTCGA$pat, colnames(TCGArsem2))]), colDataTCGA, design=~TCGAvalcut) TCGAdeseq=DESeq(TCGAdeseq) TCGAdeseqRes=results(TCGAdeseq) write.csv(TCGAdeseqRes, file=&quot;nature-tables/5j_TCGA.csv&quot;) TCGAdeseqRes2=TCGAdeseqRes[which(TCGAdeseqRes$padj&lt;0.05 &amp; abs(TCGAdeseqRes$log2FoldChange)&gt;1.5 &amp; TCGAdeseqRes$baseMean&gt;100), ] We can plot the differential genes here in a volcano plot: #pdf(&quot;figure-outputs/Fig5_TCGA_deg.pdf&quot;, height=8, width=8) with(TCGAdeseqRes, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: Low exp (+) vs high (-)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(TCGAdeseqRes, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(TCGAdeseqRes, padj&lt;0.1 &amp; abs(log2FoldChange)&gt;1.5), text(log2FoldChange+0.05, -log10(padj)+0.05, rownames(TCGAdeseqRes2), pch=20, col=&quot;red&quot;, cex=0.75)) Figure 15.8: yet another volcano plot #dev.off() vstTCGA=vst(assay(TCGAdeseq)) ColSideCols=c(&quot;skyblue&quot;, &quot;blue&quot;)[factor(TCGAdeseq$TCGAvalcut)] ax1=vstTCGA[ match(rownames(TCGAdeseqRes2), rownames(vstTCGA)), ] ax1[1:5, 1:5] ## TCGA-A1-A0SD TCGA-A1-A0SE TCGA-A1-A0SF TCGA-A1-A0SH TCGA-A1-A0SJ ## ARHGAP33 7.384462 7.604834 8.112232 6.986648 8.694451 ## ATG16L2 8.875778 7.670891 8.619986 7.414996 9.107129 ## ATHL1 8.714318 10.375118 8.319105 8.276105 7.447886 ## C1orf95 7.008673 6.021883 6.083560 5.901986 9.197793 ## CARTPT 8.789410 5.223711 5.223711 5.223711 5.223711 pdf(&quot;figure-outputs/Figure5_XX_heatmap_LumA_TCGA.pdf&quot;, height=15, width=10) heatmap.2(vstTCGA[ rownames(TCGAdeseqRes2), ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = ColSideCols, col=RdBu[11:1], main=&quot;LumA TCGA&quot;) dev.off() ## quartz_off_screen ## 2 boxplot(vstTCGA[&quot;CD8A&quot;, ]~TCGAdeseq$TCGAvalcut) Figure 15.9: because someone will ask for it Run gsea here hits=rownames(TCGAdeseqRes2) fcTab=TCGAdeseqRes$log2FoldChange names(fcTab)=rownames(TCGAdeseq) gscaTCGA=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaTCGA&lt;- preprocess( gscaTCGA, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 2818 genes (out of 20055) could not be mapped to any identifier, and were removed from the data. ## -- 2 genes (out of 29) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaTCGA &lt;- analyze( gscaTCGA, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --21 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --257 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --73 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --60 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --301 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== save( gscaTCGA, file=&quot;figure-outputs/TCGA_hairball.RData&quot;) TermsA=sapply(strsplit(rownames(gscaTCGA@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaTCGA@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaTCGA@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaTCGA, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 15.10: pointless TCGA hairball write.csv(gscaTCGA@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/5XX_TCGA_lumA_GSEA.csv&quot;) "],["deseq-analysis-characterisation-cohort-big-vs-small.html", "Chapter 16 DESeq analysis: Characterisation cohort (big vs small) 16.1 CD45 samples 16.2 Epithelial samples 16.3 Check expression of checkpoint proteins", " Chapter 16 DESeq analysis: Characterisation cohort (big vs small) This document sets up DESeq runs to compare: CD45 samples Ep samples according to size of the cohort samples 16.1 CD45 samples In section 6.2, we have noticed that some DN samples had expression of epithelial markers. Here, we perform a differential gene expression analysis to find genes which are different between these two fractions. Below is a summary of the number of differential genes, using p value cut off of 0.05 and log2 fold change of 1.5 and base expression of 100+. infoTableFinal$TumSize=Cdata$Tumor.diameter.sac.mm[match(infoTableFinal$TumorID, Cdata$TumorID)] infoTableFinal$SizeCat=factor(ifelse(infoTableFinal$Cohort==&quot;Progression&quot;, ifelse(infoTableFinal$TumSize&gt;X2a, &quot;big&quot;, &quot;small&quot;), ifelse(infoTableFinal$TumSize&gt;7, &quot;big&quot;, &quot;small&quot;))) epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort!=&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;CD45&quot; &amp; !is.na(infoTableFinal$SizeCat))]) CD45ddsChar=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~(SizeCat)) ## change class a1x=rowSums(counts(CD45ddsChar)) a1b=apply(counts(CD45ddsChar), 1, function(c) sum(c!=0)) # par(mfrow=c(1,2)) # hist(log10(a1x+1), main=&quot;log10 total counts&quot;) # hist((a1b+1), main=&quot;Non-zero entries&quot;) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(CD45ddsChar))&gt;10^sd1vals) keep2=which(apply(counts(CD45ddsChar), 1, function(c) sum(c!=0))&gt; (ncol(CD45ddsChar)/2)) CD45ddsChar=CD45ddsChar[intersect(keep, keep2), ] CD45ddsChar=DESeq(CD45ddsChar) 16.1.1 PCA plot First, have a look at the samples in a PCA plot: do they separate based on size: #pdf(&quot;~/Desktop/S2C-CD45-characterisation-PCA-outcome.pdf&quot;, width=6, height=6) vst1=vst(CD45ddsChar) ax1=plotPCA(vst1, &quot;SizeCat&quot;)+theme_bw()+geom_text(aes(label=colnames(vst1)))+ggtitle(&quot;CD45 cells&quot;)+scale_color_manual(values=ColSize) # nclude the control CD45 sample vst1=vsd[, which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] vst1$SizeCat=infoTableFinal$SizeCat[match(colnames(vst1), infoTableFinal$SampleID)] ax1=heatmap.2(cor((assay(vst1))), col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSize[(vst1$SizeCat)]) t1=ax1$carpet t1r=c(1:ncol(t1)) t1r[10:11]=c(11:10) Slightly re-order this to make sure the normal mammary gland is on the outside heatmap.2(t1, Colv = t1r, Rowv = t1r, trace=&quot;none&quot;, col=RdBu[11:1]) Figure 16.1: correlation matrix of cd45 cells rownames(t1)=infoTableFinal$TumorIDnew[match(rownames(t1), rownames(infoTableFinal))] colnames(t1)=rownames(t1) write.csv(t1, file=&quot;nature-tables/Ext2d.csv&quot;) #dev.off() 16.1.2 Differential Gene Expression Below are volcano plots of the differentially expressed genes with abs(log2change)&gt;1.5, padj&lt;0.05 and baseMean&gt;100. The first plot lists all differentially expressed genes, the second only lists those which are known to be immune related. print(&#39;significant differential genes&#39;) ## [1] &quot;significant differential genes&quot; CD45res=results(CD45ddsChar, contrast=c(&quot;SizeCat&quot;, &quot;big&quot;, &quot;small&quot;)) CD45res2=CD45res[which(CD45res$padj&lt;0.05 &amp; abs(CD45res$log2FoldChange)&gt;1.5 &amp; CD45res$baseMean&gt;100), ] scroll_box(kable(CD45res2, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) baseMean log2FoldChange lfcSE stat pvalue padj Tpm1 225.7236 1.635526 0.4394593 3.721678 0.0001979 0.0132725 Ubl4a 486.5711 2.120412 0.5899452 3.594252 0.0003253 0.0173336 Cox4i1 3620.9732 2.221777 0.6584109 3.374454 0.0007396 0.0268454 Cd300le 734.7210 2.768017 0.8102677 3.416176 0.0006351 0.0252065 Bnip3 297.5951 3.064051 0.8081186 3.791585 0.0001497 0.0116894 Tspan17 219.8617 1.697501 0.5037056 3.370027 0.0007516 0.0270077 Mrps18c 711.2449 2.137547 0.6333376 3.375051 0.0007380 0.0268454 Rab11fip1 1566.8366 -1.737739 0.4729619 -3.674163 0.0002386 0.0145796 Slirp 443.6626 2.248552 0.6491694 3.463737 0.0005327 0.0223834 Antkmt 572.9753 1.574493 0.4662688 3.376793 0.0007334 0.0268404 C1qtnf6 738.4991 1.937921 0.4652341 4.165475 0.0000311 0.0046289 Zfp608 128.1046 -2.178131 0.5975256 -3.645251 0.0002671 0.0151934 Ptn 481.4702 1.543886 0.4931948 3.130379 0.0017458 0.0429026 Prdx4 780.6528 1.550755 0.5013755 3.093002 0.0019814 0.0450808 Acsl3 334.5394 -1.984525 0.5583537 -3.554243 0.0003791 0.0184257 Atp5me 1466.6207 1.501695 0.4591856 3.270343 0.0010742 0.0330409 Rab30 211.4808 -2.141097 0.6341509 -3.376321 0.0007346 0.0268404 Pygl 1872.6472 1.542582 0.4631292 3.330781 0.0008660 0.0294023 Rps15 10227.5667 2.051618 0.6555822 3.129460 0.0017513 0.0429066 Fcer2 126.8445 -7.144686 1.8626534 -3.835757 0.0001252 0.0105436 Pnkd 791.1064 1.983361 0.5200667 3.813666 0.0001369 0.0109477 Serinc2 272.1386 2.954146 0.8742223 3.379170 0.0007270 0.0268404 Spr 229.7673 2.625501 0.6174048 4.252479 0.0000211 0.0037478 Mrpl14 649.4248 1.846473 0.5377981 3.433394 0.0005961 0.0240039 LOC310926 976.8605 2.885044 0.6632666 4.349751 0.0000136 0.0031330 Cox7b 3457.0160 1.676319 0.5296869 3.164735 0.0015522 0.0405864 Zfp472 259.3711 -1.924861 0.4923007 -3.909929 0.0000923 0.0093458 Eci1 836.5719 1.814687 0.5582873 3.250454 0.0011522 0.0344538 Ltc4s 114.5213 3.293390 1.0502192 3.135907 0.0017132 0.0424805 Frmd6 196.2698 -1.615629 0.5101254 -3.167122 0.0015396 0.0404481 Ndufv2 1787.7339 1.785991 0.4887973 3.653848 0.0002583 0.0149242 Gclc 862.4812 -1.786596 0.4323699 -4.132101 0.0000359 0.0051510 Smoc2 112.4893 4.093812 1.3282830 3.082033 0.0020559 0.0456439 Apoe 10558.1957 4.412493 0.8105911 5.443550 0.0000001 0.0001441 Elob 2209.9504 1.539354 0.4798280 3.208138 0.0013360 0.0376658 Gadd45gip1 1711.8635 1.707324 0.5430937 3.143701 0.0016683 0.0419767 Oser1 2513.1964 -1.564183 0.3933298 -3.976772 0.0000699 0.0076365 Wfdc2 148.8788 1.857311 0.5632821 3.297302 0.0009762 0.0313269 Ifng 439.2720 -1.768404 0.5780068 -3.059486 0.0022172 0.0477818 Lamtor2 1630.3451 2.062411 0.5441212 3.790351 0.0001504 0.0116894 Zbtb2 134.6254 -2.225846 0.5701002 -3.904307 0.0000945 0.0093595 Leprotl1 2279.7364 1.564575 0.4658737 3.358368 0.0007840 0.0277280 Nars1 1870.2929 -1.599625 0.4371663 -3.659076 0.0002531 0.0148511 Ccl12 767.5684 6.695491 1.7359949 3.856861 0.0001149 0.0100617 Exosc4 437.6465 1.543434 0.4790299 3.221999 0.0012730 0.0365787 Tox2 107.2996 2.037101 0.6545659 3.112141 0.0018574 0.0439561 Mrps16 592.2683 1.906390 0.5592676 3.408726 0.0006527 0.0256283 Vps25 950.8456 1.602858 0.5123580 3.128395 0.0017576 0.0429066 Rbis 816.6874 2.304974 0.6177337 3.731339 0.0001905 0.0129728 Dnaaf2 1951.2370 -1.941238 0.4026617 -4.821016 0.0000014 0.0009270 Gja1 113.8356 4.395759 0.9895861 4.442018 0.0000089 0.0023413 S100a6 9536.6290 2.729293 0.6256029 4.362661 0.0000128 0.0030165 Aifm2 128.0836 2.985702 0.7360478 4.056396 0.0000498 0.0065035 Fuom 214.5222 3.364530 0.7939028 4.237962 0.0000226 0.0037961 Mcoln2 409.1057 -2.874464 0.8061747 -3.565560 0.0003631 0.0182101 Anapc11 1674.4064 2.068591 0.6427674 3.218258 0.0012897 0.0369630 Tmem223 929.0744 2.797968 0.7254702 3.856765 0.0001149 0.0100617 Luzp1 306.1489 -1.909721 0.4575265 -4.174012 0.0000299 0.0045360 Txnrd1 4452.4352 -1.534272 0.4339917 -3.535257 0.0004074 0.0190467 Mgst1 850.8643 1.991664 0.4345438 4.583344 0.0000046 0.0017411 Ndufb8 4394.4676 1.902341 0.5943451 3.200735 0.0013708 0.0380540 Cdkn1c 284.4589 -1.882688 0.5402501 -3.484845 0.0004924 0.0214412 H1f4 1572.0012 1.630742 0.4857397 3.357234 0.0007873 0.0277529 Tm4sf1 143.9938 5.150439 1.0644921 4.838401 0.0000013 0.0009270 Nedd9 2709.6173 -1.573968 0.4659587 -3.377912 0.0007304 0.0268404 Hip1r 1259.9404 -1.944713 0.4327959 -4.493373 0.0000070 0.0021863 Pigp 430.6699 2.048422 0.5723378 3.579043 0.0003449 0.0177810 Pim2 539.0256 -1.693931 0.4394682 -3.854502 0.0001160 0.0100753 Uqcr11 2980.0966 2.210654 0.5878677 3.760462 0.0001696 0.0123056 Tmem160 1261.5347 2.250444 0.6543224 3.439351 0.0005831 0.0237418 Ndufa12 898.2993 1.862732 0.5317447 3.503058 0.0004599 0.0205469 Nop56 3865.2175 -1.656724 0.3711232 -4.464082 0.0000080 0.0022182 Plk2 3783.3661 -1.875562 0.4263874 -4.398727 0.0000109 0.0027306 Flot2 1786.2047 1.658514 0.4463815 3.715464 0.0002028 0.0134822 Tmsb4x 431490.4999 2.171533 0.6392436 3.397036 0.0006812 0.0260985 Srxn1 958.0017 -2.115480 0.5999629 -3.526018 0.0004219 0.0195579 Havcr2 851.0420 -1.609073 0.4926866 -3.265916 0.0010911 0.0334424 Tmem205 777.1213 3.355037 0.7357990 4.559720 0.0000051 0.0017709 Pusl1 164.7734 1.633586 0.5061251 3.227633 0.0012482 0.0360537 Bloc1s1 1627.3548 1.904231 0.5343904 3.563370 0.0003661 0.0182755 B3gat3 1414.5231 2.571987 0.6432995 3.998118 0.0000638 0.0074158 Hist1h2an 392.0103 2.077731 0.5424054 3.830587 0.0001278 0.0106058 Crlf2 1216.0187 2.402284 0.6938431 3.462287 0.0005356 0.0223834 Atp5md 1418.9697 2.258806 0.6472613 3.489790 0.0004834 0.0211660 Ost4 4684.5076 2.183852 0.6120124 3.568314 0.0003593 0.0181851 Prxl2b 1833.3430 2.326108 0.4936299 4.712250 0.0000024 0.0010813 Micos13 2382.6829 2.128242 0.6287871 3.384679 0.0007126 0.0267637 Rps14 10006.0321 2.340833 0.7020131 3.334457 0.0008547 0.0292182 Krt17 362.8432 9.184631 1.1430749 8.035021 0.0000000 0.0000000 Slbp 4075.0639 -1.757299 0.3275549 -5.364899 0.0000001 0.0001787 Slc38a2 7079.8096 -2.028532 0.5213521 -3.890906 0.0000999 0.0094054 Ache 140.4139 -2.054011 0.5895180 -3.484221 0.0004936 0.0214412 Tagln 236.2634 3.029826 0.9847395 3.076779 0.0020925 0.0461774 Fam162a 1162.6672 2.277466 0.5356240 4.251987 0.0000212 0.0037478 Chka 803.4985 -2.574837 0.3694303 -6.969752 0.0000000 0.0000000 Ndufb9 3002.5480 1.574921 0.5163101 3.050339 0.0022858 0.0488796 Atp5mf 2758.2928 1.863846 0.5105245 3.650845 0.0002614 0.0150211 Cox7c 4654.8552 2.048890 0.6402085 3.200347 0.0013726 0.0380540 Ncl 7653.4917 -1.578077 0.3714821 -4.248056 0.0000216 0.0037478 Dbt 515.9902 -2.017021 0.5420714 -3.720950 0.0001985 0.0132725 Ccdc184 250.3745 2.510446 0.7824742 3.208344 0.0013350 0.0376658 Azin1 2266.5677 -1.825733 0.4499221 -4.057887 0.0000495 0.0065035 Ndufa11 1309.7187 2.492529 0.6497390 3.836200 0.0001250 0.0105436 Gla 2508.8375 -1.523366 0.4225760 -3.604951 0.0003122 0.0168901 Igfbp6 351.9075 5.985620 1.9437905 3.079354 0.0020745 0.0458718 Rarres2 124.5916 4.761427 1.3587494 3.504272 0.0004579 0.0205366 Tpsb2 2409.4349 9.035253 2.2933255 3.939804 0.0000815 0.0084887 Urm1 174.4139 2.471087 0.7985992 3.094276 0.0019729 0.0450712 Gpx4 5005.4967 1.947138 0.5528219 3.522179 0.0004280 0.0196075 Nudt14 695.5699 3.119277 0.6986470 4.464740 0.0000080 0.0022182 Tmem134 2614.0336 1.784092 0.5590938 3.191043 0.0014176 0.0388855 Cox8a 4345.3292 1.925215 0.6276850 3.067167 0.0021610 0.0469375 Prkaca 215.1871 1.719790 0.5076243 3.387919 0.0007043 0.0267035 Gmfg 8131.2063 2.065450 0.5055354 4.085668 0.0000440 0.0061386 Il3ra 579.1933 2.578834 0.7825732 3.295326 0.0009831 0.0313505 Dnajc15 413.1767 1.814724 0.5353961 3.389498 0.0007002 0.0267035 H1f5 237.6212 1.982665 0.5102746 3.885486 0.0001021 0.0094054 Ifitm3 497.7629 2.811264 0.9038278 3.110398 0.0018684 0.0439561 Cd3g 8448.2178 1.560865 0.4239108 3.682059 0.0002314 0.0144226 Lst1 213.5814 2.218086 0.6976057 3.179570 0.0014749 0.0395011 Nqo1 955.0315 -3.107931 0.8241835 -3.770922 0.0001626 0.0123056 Hist3h2ba 142.4051 2.172870 0.5776332 3.761677 0.0001688 0.0123056 Ndufs5 310.2798 2.060919 0.4923253 4.186092 0.0000284 0.0044462 Enpp3 221.8434 1.977122 0.6372182 3.102740 0.0019174 0.0445865 Mgst3 161.4859 2.328478 0.7366143 3.161055 0.0015720 0.0409088 Yif1a 511.9411 1.565721 0.4957952 3.157999 0.0015886 0.0411460 Bcar3 750.4378 -2.241450 0.7301079 -3.070026 0.0021404 0.0467870 Pigx 832.8220 1.885373 0.4368033 4.316298 0.0000159 0.0035035 Ctsd 6258.4678 1.657787 0.3982567 4.162609 0.0000315 0.0046289 Abhd8 282.0663 2.218303 0.6453637 3.437291 0.0005876 0.0238352 Mrpl55 543.3502 1.610145 0.5130245 3.138534 0.0016980 0.0423772 Arid5a 2402.0935 -1.578518 0.3729000 -4.233087 0.0000231 0.0037961 Mrps33 520.9945 1.568609 0.5026513 3.120671 0.0018044 0.0435661 Lrg1 1183.1645 3.512290 1.0562163 3.325351 0.0008831 0.0297179 Mrpl20 1180.0067 2.005730 0.6350417 3.158422 0.0015863 0.0411460 Crabp1 162.9152 4.839521 1.1031848 4.386863 0.0000115 0.0028197 Capg 8703.9654 1.614420 0.4789435 3.370794 0.0007495 0.0270077 Ciart 1410.9594 -2.059004 0.6619659 -3.110438 0.0018681 0.0439561 Lsm7 872.1325 2.031586 0.5838066 3.479896 0.0005016 0.0216201 Mcpt8l2 554.6216 4.896634 1.5138322 3.234595 0.0012182 0.0357148 Mycl 277.3030 -2.053319 0.6387592 -3.214543 0.0013065 0.0372510 Ap2s1 2909.1001 2.578295 0.6045796 4.264608 0.0000200 0.0037478 Slc7a2 117.9429 3.877384 1.2223603 3.172047 0.0015137 0.0401125 Commd7 1269.3129 1.556394 0.4813576 3.233343 0.0012235 0.0357148 Rps6ka4 1203.5589 2.025510 0.6210870 3.261233 0.0011093 0.0336402 Fau 4398.5110 1.591881 0.5185454 3.069897 0.0021413 0.0467870 Srsf7 4714.4421 -1.582020 0.4338166 -3.646748 0.0002656 0.0151835 Blvrb 188.1921 2.760587 0.6902868 3.999188 0.0000636 0.0074158 Nr4a2 2534.7786 -2.393890 0.6185613 -3.870093 0.0001088 0.0096809 Dctpp1 311.1611 2.711634 0.8613266 3.148207 0.0016428 0.0418305 Atp5po 2730.4094 1.653201 0.5116990 3.230808 0.0012344 0.0358433 Trappc6a 965.9822 1.889178 0.5336159 3.540332 0.0003996 0.0190467 Hsd17b10 1603.4469 1.765526 0.5577359 3.165523 0.0015480 0.0405727 Rabac1 3693.7309 1.645371 0.5050702 3.257708 0.0011232 0.0337682 Vamp8 1810.0860 1.877138 0.5960061 3.149528 0.0016353 0.0417694 Dnajb9 2619.2620 -1.876042 0.3810180 -4.923763 0.0000008 0.0007806 Selenom 346.6457 2.793769 0.8715748 3.205427 0.0013486 0.0377683 Rpl36a 1887.3072 2.066038 0.6225918 3.318446 0.0009052 0.0302168 Tmem208 1218.1282 2.108059 0.6406641 3.290428 0.0010004 0.0317180 Atp6v1g1 6962.3607 1.697547 0.4490755 3.780093 0.0001568 0.0120580 Cmtr2 104.8868 -3.249353 1.0259678 -3.167110 0.0015396 0.0404481 Cited1 185.2336 3.986649 1.0437711 3.819467 0.0001337 0.0107715 Ift172 406.6820 2.035937 0.5747350 3.542392 0.0003965 0.0190467 Abtb2 245.4819 -1.793989 0.5742544 -3.124032 0.0017839 0.0433562 Hexim1 3625.3095 -2.195961 0.4235131 -5.185107 0.0000002 0.0002978 Uqcrq 3599.3884 2.355335 0.6356561 3.705360 0.0002111 0.0137821 Hps4 735.4632 -2.327812 0.5438633 -4.280143 0.0000187 0.0037478 Ndufb7 1291.6795 1.573563 0.4883739 3.222046 0.0012728 0.0365787 Ebpl 284.3069 2.091715 0.6706437 3.118966 0.0018149 0.0436280 Eef1akmt2 231.3269 1.680247 0.5447626 3.084366 0.0020399 0.0455625 Gabarap 12946.5826 1.686514 0.5461773 3.087851 0.0020161 0.0452146 Mapk3 428.5573 1.976767 0.4863058 4.064863 0.0000481 0.0064671 Bcl7c 1771.1235 1.835083 0.5134790 3.573823 0.0003518 0.0179714 Fam20c 254.7404 2.045561 0.5744375 3.560981 0.0003695 0.0182814 Megf8 114.8475 2.633742 0.7890563 3.337838 0.0008443 0.0291039 Hebp1 174.8388 2.627201 0.8463560 3.104133 0.0019084 0.0445865 Ift43 134.6588 2.148903 0.4532273 4.741335 0.0000021 0.0010239 Alkbh7 638.5051 2.318341 0.6933160 3.343844 0.0008263 0.0285799 Nfkb1 11735.4093 -1.523757 0.4668037 -3.264234 0.0010976 0.0335484 Nipsnap3b 503.1925 1.601396 0.4432129 3.613153 0.0003025 0.0168282 Hmgcs1 1002.5478 -1.728928 0.5584747 -3.095804 0.0019628 0.0450388 Fkbp2 1721.7331 1.881648 0.5696954 3.302902 0.0009569 0.0310542 Ube2m 3126.3233 1.938052 0.5752273 3.369194 0.0007539 0.0270077 Ifi27l2b 7841.2864 2.204510 0.4215167 5.229947 0.0000002 0.0002978 Ifi27 22012.4028 2.174449 0.5795761 3.751792 0.0001756 0.0124282 Ppp1r11 2144.0738 1.776122 0.5076210 3.498914 0.0004672 0.0207848 Scand1 3432.1327 1.947862 0.5850174 3.329580 0.0008698 0.0294388 Pam16 553.4770 2.100404 0.6068899 3.460930 0.0005383 0.0223834 Exosc5 633.0106 1.879090 0.5944201 3.161216 0.0015711 0.0409088 Rnf7 464.7979 2.272311 0.6136425 3.702988 0.0002131 0.0138298 Maged2 263.5369 1.864215 0.5154029 3.617006 0.0002980 0.0166927 Itsn1 214.7123 -2.434125 0.5746212 -4.236051 0.0000227 0.0037961 Gpx3 809.9972 6.304522 1.6822603 3.747649 0.0001785 0.0125450 Acads 579.3041 2.253722 0.5774748 3.902718 0.0000951 0.0093595 Col1a1 1334.6784 5.450565 1.7304104 3.149868 0.0016334 0.0417694 Mea1 4442.8875 1.919073 0.5211774 3.682188 0.0002312 0.0144226 Fam241b 330.9803 1.663984 0.4273584 3.893651 0.0000987 0.0094054 Pfdn5 1544.7915 1.739894 0.5222665 3.331430 0.0008640 0.0294023 LOC500035 1891.5663 2.689042 0.7739645 3.474374 0.0005120 0.0219842 Dhrsx 1250.1041 1.658443 0.5220589 3.176735 0.0014894 0.0397927 Ndufa6 1456.2988 2.069677 0.5503809 3.760445 0.0001696 0.0123056 Slamf7 491.4783 -2.426485 0.5649689 -4.294900 0.0000175 0.0037085 Krt14 103.7233 5.284908 1.3175555 4.011147 0.0000604 0.0072606 S100a16 160.4802 5.308511 0.7685515 6.907164 0.0000000 0.0000000 Ndufa2 1621.5010 2.367044 0.6654152 3.557243 0.0003748 0.0184257 Smim20 432.3251 1.605888 0.4849346 3.311556 0.0009278 0.0307101 Ndufs8 1663.5647 2.013212 0.5694192 3.535554 0.0004069 0.0190467 Giot1 2167.0963 -2.146880 0.6168608 -3.480332 0.0005008 0.0216201 Ppp1r14b 1658.5499 2.053824 0.5154523 3.984509 0.0000676 0.0076365 Cyba 13741.7919 2.172771 0.6550534 3.316937 0.0009101 0.0302471 Gngt2 785.6395 2.182453 0.5684231 3.839487 0.0001233 0.0105436 Gfod1 135.4758 -2.472866 0.5591378 -4.422642 0.0000098 0.0025019 Sem1 4081.0074 2.183638 0.6081919 3.590377 0.0003302 0.0173336 Dynlrb1 3509.4071 2.026450 0.5928946 3.417893 0.0006311 0.0251384 Camk1 172.0958 2.031285 0.4966202 4.090219 0.0000431 0.0060965 Atp5mc2 2997.2548 1.752958 0.5613925 3.122517 0.0017931 0.0433887 Cd79b 312.5753 -3.584088 1.1363525 -3.154028 0.0016103 0.0416123 Hint2 1210.4052 2.175004 0.5567928 3.906309 0.0000937 0.0093595 Metrnl 1583.0249 1.573890 0.5017912 3.136544 0.0017095 0.0424805 Des 153.8722 2.260727 0.6842128 3.304128 0.0009527 0.0310098 Emp3 8399.0826 1.944475 0.6012138 3.234248 0.0012196 0.0357148 R3hdm4 5048.8965 1.672032 0.4693758 3.562246 0.0003677 0.0182755 Pkig 158.1651 2.852712 0.8100603 3.521604 0.0004289 0.0196075 Arf5 4899.0050 2.180934 0.6299069 3.462311 0.0005356 0.0223834 Gtf2h5 586.8661 1.951559 0.4783001 4.080197 0.0000450 0.0062063 Asmtl 743.3035 2.312206 0.5766508 4.009717 0.0000608 0.0072606 RGD735065 1207.7459 1.524872 0.4475694 3.407007 0.0006568 0.0256988 Ptprcap 8036.9063 1.966522 0.5832102 3.371893 0.0007465 0.0270075 Mrpl23 1087.8789 2.037390 0.5797933 3.513994 0.0004414 0.0200439 Cox7a2 1084.4115 1.947301 0.6009096 3.240589 0.0011928 0.0352861 Tmem256 884.3616 2.284739 0.5028559 4.543526 0.0000055 0.0018497 Ap1s1 719.8002 2.068238 0.6342123 3.261113 0.0011098 0.0336402 Uqcr10 3649.8961 2.084421 0.5778902 3.606950 0.0003098 0.0168901 Gnb2 2412.0869 2.359880 0.5879945 4.013439 0.0000598 0.0072606 Atp5mg 8948.5382 3.086778 0.7952870 3.881338 0.0001039 0.0094054 Lbh 748.1932 1.834295 0.4673002 3.925302 0.0000866 0.0089325 Ggh 233.6436 1.596140 0.5002780 3.190507 0.0014202 0.0388855 H2az2 741.2712 1.666318 0.5040750 3.305694 0.0009474 0.0309718 Fis1 3477.3904 1.932507 0.5859949 3.297823 0.0009744 0.0313269 Lage3 951.6530 2.151609 0.6370237 3.377596 0.0007312 0.0268404 Ndufa7 1833.0063 2.231933 0.6304146 3.540420 0.0003995 0.0190467 Lcn2 247.3737 4.094619 0.8478356 4.829496 0.0000014 0.0009270 Trappc2l 458.5888 1.906487 0.6075596 3.137942 0.0017014 0.0423772 Ndufaf8 554.9544 2.143440 0.6759681 3.170919 0.0015196 0.0401125 Cwc25 1014.4056 -1.513371 0.4033359 -3.752136 0.0001753 0.0124282 Ssr4 4236.1920 1.824609 0.5141206 3.548990 0.0003867 0.0187148 Tspo 9707.9220 2.749193 0.6375981 4.311796 0.0000162 0.0035035 Ndufb2 1808.9326 2.260353 0.6169712 3.663627 0.0002487 0.0146728 Fmc1 526.9636 2.361579 0.5921919 3.987862 0.0000667 0.0076365 Bckdha 1034.3957 2.068557 0.5866062 3.526313 0.0004214 0.0195579 Polr1b 116.8514 -2.415714 0.7757049 -3.114218 0.0018443 0.0438235 Myl9 193.1595 2.961138 0.8924306 3.318060 0.0009064 0.0302168 Naxe 588.2397 1.807379 0.5390636 3.352813 0.0007999 0.0281103 Rpl36 7911.5333 1.871905 0.5985517 3.127390 0.0017637 0.0429585 Bach2 131.0064 -2.375427 0.5677058 -4.184257 0.0000286 0.0044462 Rex1bd 489.2713 1.813513 0.5009041 3.620480 0.0002941 0.0165542 Churc1 877.7497 2.145117 0.6636285 3.232406 0.0012275 0.0357375 Fkbp8 6110.5474 1.549392 0.5065274 3.058851 0.0022219 0.0477899 Ctdp1 2283.3044 -1.851992 0.4652876 -3.980316 0.0000688 0.0076365 Coa3 661.8679 1.657795 0.5110125 3.244138 0.0011781 0.0350372 Cops9 1247.6499 1.793050 0.5763311 3.111146 0.0018636 0.0439561 Znhit1 329.5320 1.847732 0.4121285 4.483387 0.0000073 0.0021909 RGD1563941 354.7113 2.838331 0.6965206 4.075013 0.0000460 0.0062678 Siva1 841.7826 2.412414 0.7319741 3.295764 0.0009815 0.0313505 Serpinh1 264.5143 5.240395 1.2216854 4.289480 0.0000179 0.0037285 Calm3 3495.2606 2.064702 0.5220387 3.955074 0.0000765 0.0081372 Cox6c 7144.3637 2.466617 0.7142237 3.453563 0.0005532 0.0227775 Mrpl54 1654.3365 2.195152 0.5864745 3.742963 0.0001819 0.0126930 Uqcc2 502.0386 2.328825 0.6082732 3.828584 0.0001289 0.0106126 Npc2 2922.6202 1.594887 0.5140783 3.102421 0.0019195 0.0445865 Ramp1 4187.2452 1.944012 0.5617693 3.460517 0.0005391 0.0223834 Slc39a8 843.0714 -2.013363 0.5693969 -3.535957 0.0004063 0.0190467 Fstl1 149.6891 4.560962 1.3058771 3.492642 0.0004783 0.0210811 Ndufa13 1848.9955 1.674914 0.5277405 3.173746 0.0015049 0.0400110 Sik3 1832.5059 -1.933797 0.4525633 -4.272987 0.0000193 0.0037478 Serf2 12382.0649 1.527259 0.4972860 3.071188 0.0021321 0.0467703 Mat2a 1624.7797 -1.544715 0.4041060 -3.822550 0.0001321 0.0107715 Sowahc 832.2954 -1.725084 0.5572481 -3.095720 0.0019634 0.0450388 Spryd3 230.7620 1.782479 0.3706525 4.809031 0.0000015 0.0009297 Lgals7 113.7423 4.061911 0.8422445 4.822722 0.0000014 0.0009270 Pik3r1 439.1419 -2.143661 0.4432905 -4.835793 0.0000013 0.0009270 Mgp 973.2239 5.680296 1.7665002 3.215565 0.0013019 0.0372149 Gmppa 598.5465 1.852493 0.5284800 3.505322 0.0004561 0.0205366 Tbx21 708.1759 -1.715296 0.3762310 -4.559156 0.0000051 0.0017709 Dnajc19 999.3825 2.368471 0.6119382 3.870441 0.0001086 0.0096809 Cd276 197.1885 3.370869 0.9528468 3.537683 0.0004037 0.0190467 Fosl1 289.7392 -2.186836 0.5960969 -3.668592 0.0002439 0.0146254 Mfsd3 214.1047 1.607754 0.5247876 3.063629 0.0021867 0.0473099 Cklf 864.4112 2.843122 0.7292435 3.898728 0.0000967 0.0093595 Atp5f1e 4997.7931 2.346596 0.6389280 3.672709 0.0002400 0.0145796 Lbp 109.7039 4.652545 0.9817403 4.739079 0.0000021 0.0010239 Lamtor4 1590.2913 2.838269 0.6377925 4.450145 0.0000086 0.0023094 Gas2l1 162.1761 2.003890 0.6423589 3.119579 0.0018111 0.0436280 Oas1a 560.8785 1.716771 0.4542743 3.779151 0.0001574 0.0120580 Tmem250 299.2828 1.896330 0.5829571 3.252950 0.0011421 0.0342455 Rnd1 598.3031 -1.641189 0.4069452 -4.032948 0.0000551 0.0069065 Itgb3bp 262.1020 1.835747 0.5969566 3.075176 0.0021038 0.0462413 Zfand2a 5101.0097 -2.416745 0.5603291 -4.313081 0.0000161 0.0035035 Pycr2 622.2892 1.667617 0.4676705 3.565793 0.0003628 0.0182101 Fbxo30 633.4634 -2.058277 0.3957565 -5.200867 0.0000002 0.0002978 Mtln 504.9573 2.843291 0.6696007 4.246249 0.0000217 0.0037478 Hcst 2840.2609 1.838885 0.5010693 3.669922 0.0002426 0.0146254 Isoc2b 478.5051 1.681135 0.5258537 3.196963 0.0013888 0.0383107 Slc39a3 233.5792 2.077932 0.5124164 4.055163 0.0000501 0.0065035 Them6 275.8066 1.696844 0.5443254 3.117333 0.0018250 0.0436801 Acy3 124.9416 1.646791 0.5340796 3.083418 0.0020464 0.0456156 Galk1 1173.9016 2.791835 0.7287574 3.830953 0.0001276 0.0106058 Sh3glb2 555.6811 2.362382 0.5829559 4.052420 0.0000507 0.0065037 Il33 142.1857 3.727617 1.2069196 3.088538 0.0020114 0.0452146 Krt8 409.7107 4.096694 0.8830596 4.639205 0.0000035 0.0014843 Pclaf 300.5517 2.615954 0.8401112 3.113819 0.0018468 0.0438235 Slc25a39 1935.0340 1.642183 0.4557985 3.602870 0.0003147 0.0169398 Clp1 391.3911 -1.603680 0.4332589 -3.701435 0.0002144 0.0138334 Capns1 252.5914 2.484222 0.6986667 3.555662 0.0003770 0.0184257 Itm2c 2590.0094 2.762136 0.7006615 3.942184 0.0000807 0.0084850 Chrac1 1160.1288 2.315246 0.6814443 3.397557 0.0006799 0.0260985 Pf4 365.3983 3.246581 0.8853997 3.666797 0.0002456 0.0146488 Ndufc2 2001.3878 2.199706 0.6708310 3.279076 0.0010415 0.0323708 Nenf 462.6880 2.448591 0.6919834 3.538511 0.0004024 0.0190467 Serpinb6a 556.2132 2.171158 0.4835894 4.489673 0.0000071 0.0021863 Krt19 347.4756 3.157806 0.7519943 4.199241 0.0000268 0.0042868 Gnl3 1794.8140 -1.923570 0.4065338 -4.731637 0.0000022 0.0010239 Spg21 2427.5344 1.620621 0.4761824 3.403363 0.0006656 0.0257182 Cdca3 191.1771 1.963691 0.5741217 3.420339 0.0006254 0.0250036 Gpsm3 1088.7158 1.558807 0.3919928 3.976623 0.0000699 0.0076365 Emc10 3276.9714 1.981571 0.5728530 3.459126 0.0005419 0.0223957 Igfbp4 502.3126 4.102890 1.0236369 4.008150 0.0000612 0.0072606 Etfb 949.8376 2.039964 0.6212187 3.283810 0.0010241 0.0321947 Fxyd4 325.7380 4.539040 0.9577218 4.739414 0.0000021 0.0010239 Fastk 783.0175 1.509927 0.4710060 3.205748 0.0013471 0.0377683 #pdf(&quot;~/Desktop/DESeq-small-vs-largeCD45-characterisation.pdf&quot;, height=6, width=6) namId=which(rownames(vsd)%in%RatAllImm &amp; rownames(vsd)%in%rownames(CD45res2)) namIdN=rownames(vsd)[namId] plot(CD45res$log2FoldChange, -log10(CD45res$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(CD45res2$log2FoldChange, -log10(CD45res2$padj), rownames(CD45res2), col=&quot;red&quot;) CD45res3=CD45res[match(namIdN, rownames(CD45res)), ] plot(CD45res$log2FoldChange, -log10(CD45res$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(CD45res3$log2FoldChange, -log10(CD45res3$padj), rownames(CD45res3), col=&quot;red&quot;) We can also visualise this in a heatmap below, showing immune specific differentially expressed genes: #HighExprGenes=rownames(CD45res2)[which(CD45res2$baseMean&gt;100 &amp; CD45res2$log2FoldChange&lt;0) ] colSide=CD45ddsChar$SizeCat t2=assay(vsd)[namId, match(colnames(CD45ddsChar), colnames(vsd))] colnames(t2)=infoTableFinal$TumorIDnew[match(colnames(t2), rownames(t2))] heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;immune genes DEG&quot;) Figure 16.2: Differential CD45 genes big vs small #dev.off() write.csv(CD45res2, file=sprintf(&quot;outputs/DESeq/difference_between_cd45characterisation-big-small%s.csv&quot;, Sys.Date())) write.csv(t2, file=&quot;nature-tables/2d.csv&quot;) 16.1.3 GSEA Run GSEA. Here, we will look specifically at the Process Network pathways which are enriched, focusing specifically on immune related terms cd45Genes=rownames(CD45res) l1=SymHum2Rat$HGNC.symbol[match(cd45Genes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(cd45Genes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(cd45Genes, Mouse2Hum$MGI.symbol)] cd45GenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, cd45Genes))) hits=cd45GenesConv[match(rownames(CD45res2), cd45Genes)] #hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=CD45res$log2FoldChange names(fcTab)=cd45GenesConv gscacd=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscacd &lt;- preprocess(gscacd, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscacd &lt;- analyze(gscacd, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) A1=summarize(gscacd) PNresults=gscacd@result$GSEA.results$ProcessNetworks Ax1=which(PNresults$Adjusted.Pvalue&lt;0.1) Lx1=PNresults[Ax1, 1:2] Lx1$Group=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[1]) Lx1$Process=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[2]) ## replace certain groups Lx1$Group[grep(&quot;ymphocyte&quot;, Lx1$Process)]=&quot;NImmune response&quot; # plot for inflammation, immune response, cell adhesion, transcription? TestGrp=c(&quot;NInflammation&quot;, &quot;NCell adhesion&quot;, &quot;NImmune response&quot;, &quot;NTranscription&quot;) #pdf(&quot;~/Desktop/2E-process-networks-significant-pathways.pdf&quot;, width=6, height=6) par(mfrow=c(2,2), oma=c(0, 3, 0, 0)) for (i in TestGrp){ x1=which(Lx1$Group==i) barplot(Lx1$Observed.score[x1], names.arg = Lx1$Process[x1], horiz = T, las=2, main=i) } Figure 16.3: gsea for cd45 samples #dev.off() write.csv(Lx1, file=&quot;nature-tables/2e.csv&quot;) In the following hairball, we can look at all the terms TermsA=sapply(strsplit(rownames(gscacd@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscacd@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscacd@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscacd, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot;) Figure 16.4: gsea hairball for all cd45 samples save(gscacd, file=&quot;figure-outputs/2e.Rdata&quot;) 16.2 Epithelial samples infoTableFinal$TumSize=Cdata$Tumor.diameter.sac.mm[match(infoTableFinal$TumorID, Cdata$TumorID)] #infoTableFinal$SizeCat=factor(ifelse(infoTableFinal$Cohort==&quot;Progression&quot;, ifelse(infoTableFinal$TumSize&gt;X2a, &quot;big&quot;, &quot;small&quot;), ifelse(infoTableFinal$TumSize&gt;X1a, &quot;big&quot;, &quot;small&quot;))) epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort!=&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;Ep&quot; &amp; !is.na(infoTableFinal$SizeCat))]) EpddsChar=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~(SizeCat)) ## change class a1x=rowSums(counts(EpddsChar)) a1b=apply(counts(EpddsChar), 1, function(c) sum(c!=0)) # par(mfrow=c(1,2)) # hist(log10(a1x+1), main=&quot;log10 total counts&quot;) # hist((a1b+1), main=&quot;Non-zero entries&quot;) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(EpddsChar))&gt;10^sd1vals) keep2=which(apply(counts(EpddsChar), 1, function(c) sum(c!=0))&gt; (ncol(EpddsChar)/2)) EpddsChar=EpddsChar[intersect(keep, keep2), ] EpddsChar=DESeq(EpddsChar) 16.2.1 PCA plot First, have a look at the samples in a PCA plot: do they separate based on size: #pdf(&quot;~/Desktop/S1CD-Ep-characterisation-PCA-outcome.pdf&quot;, width=6, height=6) vst1=vst(EpddsChar) plotPCA(vst1, &quot;SizeCat&quot;)+theme_bw()+geom_text(aes(label=colnames(vst1)))+ggtitle(&quot;Ep cells&quot;)+scale_color_manual(values=ColSize) Figure 16.5: PCA plot of epithelial samples And the plot of how much samples correlate with each other ax1=heatmap.2(cor((assay(vst1))), col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSize[(vst1$SizeCat)]) Figure 16.6: correlation plot epithelial samples #dev.off() write.csv(cor((assay(vst1))), file=&quot;nature-tables/Ext1g.csv&quot;) Here is a volcano plot the significant differential genes showing the difference between big and small tumors in the Ep fraction: Epres=results(EpddsChar, contrast=c(&quot;SizeCat&quot;, &quot;big&quot;, &quot;small&quot;)) Epres2=Epres[which(Epres$padj&lt;0.05 &amp; abs(Epres$log2FoldChange)&gt;1.5 &amp; Epres$baseMean&gt;100), ] plot(Epres$log2FoldChange, -log10(Epres$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(Epres2$log2FoldChange, -log10(Epres2$padj), rownames(Epres2), col=&quot;red&quot;) Figure 16.7: Ep DEG big-small And the accompanying heatmap: colSide=EpddsChar$SizeCat t2=assay(vsd)[which( rownames(vsd)%in%rownames(Epres2)), match(colnames(EpddsChar), colnames(vsd))] a1=heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;all DEG&quot;) Figure 16.8: heatmap of big vs small boxplot(assay(vsd)[&quot;Creb1&quot;, match(colnames(EpddsChar), colnames(vsd))]~EpddsChar$SizeCat, main=&quot;Creb1 gene small vs big vst expression&quot;) Figure 16.9: heatmap of big vs small write.csv(Epres2, file=sprintf(&quot;nature-tables/1gl%s.csv&quot;, Sys.Date())) 16.2.2 GSEA Run GSEA. Here, we will look specifically at the Process Network pathways which are enriched EpGenes=rownames(Epres) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(Epres2), EpGenes)] #hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=Epres$log2FoldChange names(fcTab)=EpGenesConv gscaep=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaep &lt;- preprocess(gscaep, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaep &lt;- analyze(gscaep, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) A1=summarize(gscaep) save(gscaep, file=&quot;figure-outputs/1h.Rdata&quot;) TermsA=sapply(strsplit(rownames(gscaep@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaep@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaep@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaep, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot;) We can also look at the results using barplots, as shown below PNresultse=gscaep@result$GSEA.results$ProcessNetworks Ax1=which(PNresultse$Adjusted.Pvalue&lt;0.1) Lx1=PNresultse[Ax1, 1:2] Lx1$Group=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[1]) Lx1$Process=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[2]) ## replace certain groups Lx1$Group[grep(&quot;ymphocyte&quot;, Lx1$Process)]=&quot;NInflammation&quot; Lx1$Group[which(Lx1$Group==&quot;NImmune response&quot;)]=&quot;NInflammation&quot; # plot for inflammation, immune response, cell adhesion, transcription? TestGrp=c(&quot;NCell adhesion&quot;, &quot;NDevelopment&quot;, &quot;NTranscription&quot;, &quot;NInflammation&quot;) #pdf(&quot;~/Desktop/1E-process-networks-significant-pathways_ep.pdf&quot;, width=6, height=6) par(mfrow=c(2,2), oma=c(0, 3, 0, 0)) for (i in TestGrp){ x1=which(Lx1$Group==i) barplot(Lx1$Observed.score[x1], names.arg = Lx1$Process[x1], horiz = T, las=2, main=i) } #dev.off() write.csv(Lx1, file=&quot;nature-tables/1h.csv&quot;) load(&quot;../anntotations/Metacore_extracted_Process_networks_nov2020.RData&quot;) # match the genes in the Tgfb pathway Genes1=PathwayMapAllComp$`Cell adhesion_Leucocyte chemotaxis` mid=match(Genes1, toupper(rownames(vst1))) heatmap.2(assay(vst1)[na.omit(mid), ], col=RdBu[11:1], ColSideColors = ColSize[vst1$SizeCat], trace=&quot;none&quot;, scale=&quot;row&quot;) Double check the above result by running a ssGSEA and checking the directionality Mx1=assay(vst1) rownames(Mx1)=toupper(rownames(Mx1)) testOut=gsva(Mx1, PathwayMapAllComp,method=&quot;ssgsea&quot;, kcdf=&quot;Gaussian&quot;, ssgsea.norm=T) boxplot(testOut[&quot;Cell cycle_S phase&quot;, ]~vst1$SizeCat) boxplot(testOut[&quot;Cell adhesion_Cell-matrix interactions&quot;, ]~vst1$SizeCat) 16.3 Check expression of checkpoint proteins ImmSuppAPCRat=sapply(ImmSuppAPC, function(x) na.omit(SymHum2Rat$RGD.symbol[match(x, SymHum2Rat$HGNC.symbol)])) vstB=assay(vst1)[match(unlist(ImmSuppAPCRat), rownames(vst1)), ] #colnames(vstB)=infoTableFinal$TumorIDnew[match(colnames(vstB), rownames(infoTableFinal))] ColSideCols=rep(c(&quot;red&quot;, &quot;blue&quot;, &quot;purple&quot;), times=sapply(ImmSuppAPCRat, length)) rmx=which(is.na(vstB[ ,1])) heatmap.2(vstB[-rmx, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, RowSideColors = ColSideCols[-rmx], hclustfun = hclust.ave) Write the tables to file write.csv(infoTableFinal, file=&quot;nature-tables/infoTableFinal_output.csv&quot;) write.csv(allstarFinal, file=&quot;nature-tables/allstarFinal_output.csv&quot;) "],["signature-analysis.html", "Chapter 17 Signature analysis 17.1 MHC signature analysis", " Chapter 17 Signature analysis In this section, we use ss gene-set enrichment analysis to investigate differences in Major signalling pathways MHC expression signatures 17.1 MHC signature analysis Look if there is an association between MHC class I and class II and checkpoint proteins with growth in the different fractions. The summary appears: class I: association with stable in ep samples class II: low expression in DN stable sampels MHC presentation: higher in stable samples Ep (and also the characterisation cohort in general), may also be the case in DN samples 17.1.1 MHC-I classI &lt;- c(&quot;RT1-A1&quot;, &quot;RT1-A2&quot;, &quot;RT1-A3&quot;, &quot;RT1-Cl&quot;, &quot;RT1-M2&quot;, &quot;RT1-M3-1&quot;, &quot;RT1-M4&quot;, &quot;RT1-M5&quot;, &quot;RT1-N1&quot;, &quot;RT1-N2&quot;, &quot;RT1-N3&quot;, &quot;RT1-O1&quot;, &quot;RT1-S2&quot;, &quot;RT1-S3&quot;) classII &lt;- c(&quot;RT1-Ba&quot;, &quot;RT1-Bb&quot;, &quot;RT1-Da&quot;, &quot;RT1-Db1&quot;, &quot;RT1-Db2&quot;, &quot;RT1-DMa&quot;, &quot;RT1-DMb&quot;, &quot;RT1-DOa&quot;, &quot;RT1-DOb&quot;, &quot;RT1-Ha&quot;) #pdf(sprintf(&quot;rslt/signatureAnalysis/MHC_presentation_%s.pdf&quot;, Sys.Date()), height=6, width=7) MHCclassSumm2=assay(vsd)[na.omit(match(classI, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD: MHC class I&quot;, hclustfun = hclust.ave) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC class I&quot;, hclustfun = hclust.ave) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors =ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC class I&quot;, hclustfun = hclust.ave) 17.1.2 MHC-II MHCclassSumm2=assay(vsd)[na.omit(match(classII, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD: MHC class II&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC class II&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC class II&quot;) 17.1.3 MHC presentation proteins MHCclassSumm2=assay(vsd)[na.omit(match(MHCPres2Rat[-1], rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD45: MHC presentation&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC presentation&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC presentation&quot;) #dev.off() 17.1.4 inflammation related genes: IL6-JAK-STAT and TNF/NFKB InflammGenes=c(&quot;Jak1&quot;,&quot;Jak3&quot;, &quot;Jak2&quot;, &quot;Stat3&quot;, &quot;Il6&quot;, &quot;Il2&quot;, &quot;Il5&quot;,&quot;Ifng&quot;, &quot;Ifna1&quot;, &quot;Nfkb1&quot;, &quot;Cdf&quot;, &quot;Stat5a&quot;, &quot;Stat1&quot;, &quot;Stat2&quot;, &quot;Il6r&quot;, &quot;Socs3&quot;, &quot;Il5r&quot;, &quot;Il2r&quot;, &quot;Tnf&quot;, &quot;Tnfrsf1a&quot;, &quot;Tnfrsf1b&quot;) MHCclassSumm2=assay(vsd)[na.omit(match(InflammGenes, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: JAK/STAT signalling&quot;, hclustfun = hclust.ave) Figure 17.1: Genes associated with inflammation write.csv(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], file=&quot;nature-tables/Ext5b.csv&quot;) "],["immune-estimation.html", "Chapter 18 Immune estimation 18.1 Overview of the cell types 18.2 characterisation cohort: assoc with size 18.3 Comparison with FACS data 18.4 Progression cohort 18.5 Clinical associations 18.6 Summary of the outcome", " Chapter 18 Immune estimation In this section, we will look at Deconvolution methods (CIBERSORT, TIMER etc) for estimating immune fractions and cell types Deconvolution was performed using the TIMER website, which lists results from TIMER, XCELL, CIBERSORT, EPIC, MMPCOUNTER TPM counts were used for this analysis (using Rat gene names) on the TIMER website () ProgSpecCD45=read.csv(&quot;../data/RNA_expression/CD45_TPM_rgd_names_prog_12-08_estimation_matrix.csv&quot;) colnames(ProgSpecCD45)=gsub(&quot;X&quot;, &quot;&quot;, colnames(ProgSpecCD45)) CharSpecCD45=read.csv(&quot;../data/RNA_expression/CD45-tpm-rgdnames-char-2020-11-22-estimation_matrix.csv&quot;) colnames(CharSpecCD45)=gsub(&quot;X&quot;, &quot;&quot;, colnames(CharSpecCD45)) ## merge the two together output1=merge(ProgSpecCD45, CharSpecCD45, by.x=&quot;cell_type&quot;, by.y=&quot;cell_type&quot;, all=T) 18.1 Overview of the cell types Below, we will look at the enrichment scores of specific cell types compared to others using these different methods. It appears that most methods have scores which skews towards high representation of T cells: TIMER for example shows an enrichment of dendritic and CD8 T cells. EPIC in contrast shows enrichment for CD4+ and to a lesser extend CD8 T cells MMPCOUNTER puts an unusually large weighting to T cells and this does not fit our FACS analysis XCELL enriches for T cells RowNames=c(&quot;TIMER&quot;, &quot;CIBERSORT$&quot;, &quot;CIBERSORT-ABS&quot;, &quot;EPIC&quot;, &quot;MMCPCOUNTER&quot;, &quot;XCELL&quot;) Type=c(&quot;enrichment&quot;, &quot;fraction&quot;, &quot;enrichment&quot;, &quot;fraction&quot;, &quot;enrichment&quot;, &quot;enrichment&quot;) par(mfrow=c(3, 2)) for (i in 1:length(RowNames)){ timSamples=output1[grep(RowNames[i], output1$cell_type), ] rownames(timSamples)=sapply(strsplit(as.character(timSamples$cell_type), &quot;_&quot;), function(x) x[1]) boxplot(t(timSamples[ ,-1]), las=2, main=RowNames[i], ylab=Type[i]) } 18.2 characterisation cohort: assoc with size Associations with size? Perform a correlation test between all of the information above and tumor size. We obtain a matrix which is colored with a coefficient correlation (red is associative, blue is negatively associated). Correlations which are significant are marked with an asterisk: sizeInfo=infoTableFinal$TumSize[match(colnames(CharSpecCD45)[-1], rownames(infoTableFinal))] CorVals=rep(NA, nrow(CharSpecCD45)) names(CorVals)=CharSpecCD45$cell_type CorValsP=CorVals CorVals=sapply(1:nrow(CharSpecCD45), function(x) cor(t(CharSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)) CorValsP=sapply(1:nrow(CharSpecCD45), function(x) cor.test(t(CharSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)$p.value) naidx=which(CorValsP&lt;0.05) RNames1=sapply(strsplit(CharSpecCD45$cell_type, &quot;_&quot;), function(x) x[1]) RNamesMethod=sapply(strsplit(CharSpecCD45$cell_type, &quot;_&quot;), function(x) x[2]) df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorVals, p=CorValsP) ax1=acast(df2[ ,c(1:3)], RNames1~RNamesMethod) #df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorValsP) ax2=acast(df2[ ,c(1:2, 4)], RNames1~RNamesMethod) ax2[which(ax2&gt;0.1, arr.ind=T)]=0 ax2[which(is.na(ax2), arr.ind = T)]=0 #par(oma=c(3, 5, 2, 2)) #OutputplotFun(ax1, scaleR=&quot;none&quot;, main=&quot;cell type correlation&quot;, classN=&quot;no&quot;, sigMat=ax2) ## Also plot these all separately sizeInfoCut=infoTableFinal$SizeCat[match(colnames(CharSpecCD45)[-1], rownames(infoTableFinal))] ttestVal=sapply(1:nrow(CharSpecCD45), function(x) wilcox.test(t(CharSpecCD45[x, -1])~sizeInfoCut)$p.value) df3=data.frame(cell=RNames1, method=RNamesMethod, cor=ttestVal) ax3=acast(df3, RNames1~RNamesMethod) ax3[which(ax3&gt;0.1, arr.ind=T)]=0 ax3[which(is.na(ax3), arr.ind = T)]=0 The above matrices are sparse, and we can zoom in on specific methods to see whether there is an association #pdf(&quot;~/Desktop/2F_characterisation_association_size_immune_types.pdf&quot;, width=8, height=3) par(mfrow=c(2,2)) for (i in 1:ncol(ax1)){ t1=ax1[, i] t2=which(!is.na(t1)) image(cbind(ax1[t2, i],ax1[t2, i]), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, main=sprintf(&quot;correlation %s (* sig p&lt;0.1)&quot;, colnames(ax1)[i])) axis(1, at=seq(0, 1, length=length(t2)), names(t1)[t2], las=2, cex=0.7) axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) mx=which(ax2[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 0 , &quot;*&quot;) mx=which(ax3[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 1 , &quot;*&quot;) } Figure 18.1: correlation coefficient values write.csv(df2, file=&quot;nature-tables/2f_correlation_coefficients_pvalues.csv&quot;) #write.csv(ax1, file=&quot;nature-tables/2f_correlation_coefficients.csv&quot;) #dev.off() Figure 18.2: correlation coefficient values These accompany the following plots with individual samples: #pdf(&quot;~/Desktop/2F-sample-celltypes.pdf&quot;, height=6, width=7) x2=c(colnames(CharSpecCD45)[order(sizeInfo)+1]) ax1=grep(&quot;TIMER&quot;, CharSpecCD45$cell_type) T1melt=melt(CharSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) T1melt$NewID=infoTableFinal$TumorIDnew[match(T1melt$variable, rownames(infoTableFinal))] ggplot(T1melt, aes(x=NewID, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;TIMER:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 18.3: TIMER And below is the result for CIBERSORT ax1=grep(&quot;CIBERSORT$&quot;, CharSpecCD45$cell_type) T1melt=melt(CharSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90)) # Also do a version where the Bcells, Macrophages,NK, Mast Cells, CD4, CD8 Cells are merged together, NK T1melt$cell_type2=substr(T1melt$cell_type, 1, 4) T1melt$cell_type2[grep(&quot;CD8&quot;, T1melt$cell_type)]=&quot;T CD8&quot; T1melt$cell_type2[grep(&quot;CD4&quot;, T1melt$cell_type)]=&quot;T CD4&quot; ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) T1melt$sdat=paste(T1melt$variable, T1melt$cell_type2, sep=&quot;.&quot;) T2=by(T1melt$value, T1melt$sdat, sum) T2m=stack(T2) T2m$ind1=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[1]) T2m$ind2=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[2]) T2mTab=acast(T2m[ ,c(1, 3:4)], ind2~ind1, value.var=&quot;values&quot;) CorV=sapply(1:nrow(T2mTab), function(x) cor(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)) CorVP=sapply(1:nrow(T2mTab), function(x) cor.test(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)$p.value) wilP=sapply(1:nrow(T2mTab), function(x) wilcox.test(T2mTab[x, ]~ sizeInfoCut)$p.value) # dev.off() write.csv(T1melt, file=&quot;nature-tables/2f.csv&quot;) 18.3 Comparison with FACS data In this section, we compare how well the estimates from RNAseq deconvolution methods associate with FACS data. Below is a heatmap showing the correlation coefficient of each cell type (by FACS) and the method, Note that there are twice as manay samples with reliable myeloid derived cell information than for leukocytes. ## annotate the FACS data here infoTableFinal$Name2=NA infoTableFinal$Name2[which(infoTableFinal$Fraction==&quot;CD45&quot;)]=paste(infoTableFinal$Rat_ID[which(infoTableFinal$Fraction==&quot;CD45&quot;)], infoTableFinal$Location[which(infoTableFinal$Fraction==&quot;CD45&quot;)], sep=&quot;&quot;) m2=match(colnames(Fdata), infoTableFinal$Name2) ## get rid of the NA samples naom=infoTableFinal$SampleID[m2[which(!is.na(m2))]] mid=colnames(Fdata)[which(!is.na(m2))] lx1=Fdata[, c(1, match(mid, colnames(Fdata)))] out2=output1[, c(1,match(naom, colnames(output1)))] #head(out2) colnames(lx1)=colnames(out2) # Run all the association tests here ## New Table # -cd8 # Th # Tregs # B cells # Macrophage # MergedTable=matrix(NA, ncol=21, nrow=1) colnames(MergedTable)=colnames(out2) tx1=sapply(strsplit(as.character(out2$cell_type), &quot;_&quot;), function(x) x[1]) MethodSumm=sapply(strsplit(as.character(out2$cell_type), &quot;_&quot;), function(x) x[2]) tabtx1=table(tx1) TheseFracs=names(tabtx1)[which(tabtx1&gt;3)] testSetB=c(&quot;B cell&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;, &quot;Monocyte&quot;, &quot;Neutrophil&quot;, &quot;NK cells&quot;, &quot;CD8&quot;, &quot;Treg&quot;) # &quot;CD8&quot;, &quot;Th&quot;, &quot;Treg&quot;, &quot;B cells&quot;, &quot;NK cells&quot;, &quot;DC&quot;, &quot;Neutrophil&quot;, &quot;Monocyte&quot;, &quot;gd T&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;) testSet=TheseFracs[-2]#c(&quot;CD8&quot;, &quot;CD4&quot;, &quot;Treg&quot;, &quot;B cell&quot;, &quot;NK&quot;, &quot;dendritic&quot;, &quot;Neutrophil&quot;, &quot;Monocyte&quot;, &quot;gamma delta&quot;, &quot;M1&quot;, &quot;M2&quot;) CMat=matrix(NA, nrow=length(testSet), ncol=length(unique(MethodSumm))) rownames(CMat)=testSet colnames(CMat)=unique(MethodSumm) PMat=CMat #testSet=&quot;M2&quot; #testSetB=&quot;MHCII-lo&quot; for (j in 1:length(testSet)){ CD8Table=rbind(lx1[grep(testSetB[j], lx1$cell_type), ], out2[which(tx1==testSet[j]), ]) CD8Table[1,1]=paste(testSetB[j], &quot;facs&quot;, sep=&quot;_&quot;) ms=MethodSumm[which(tx1==testSet[j])] par(mfrow=c(3,3)) cVals=sapply(2:nrow(CD8Table), function(x) cor(t(CD8Table[1, -1]), t(CD8Table[x, -1]), use=&quot;complete&quot;)) cVals2=sapply(2:nrow(CD8Table), function(x) cor.test(t(CD8Table[1, -1]), t(CD8Table[x, -1]), use=&quot;complete&quot;)$p.value) CMat[j, match(ms, colnames(CMat))]=cVals PMat[j, match(ms, colnames(PMat))]=cVals2 MergedTable=rbind(MergedTable, CD8Table) #for (i in 2:nrow(CD8Table)){ #a1=cor(t(CD8Table[1, -1]), t(CD8Table[i, -1]), use=&quot;complete&quot;) #plot(t(CD8Table[1, -1]), t(CD8Table[i, -1]), main=CD8Table[i,1], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) #text(min(t(CD8Table[1, -1]), na.rm=T)*2, max(t(CD8Table[i, -1]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } ##for the following, find the terms and calculate the sum testSetB=c(&quot;Macro&quot;, &quot;Th&quot;, &quot;B cell&quot;) testSet=c(&quot;Macro&quot;, &quot;CD4&quot;, &quot;B cell&quot;) rmThese=c(&quot;M0&quot;, &quot;naive&quot;, NULL) savTemp=matrix(NA, nrow=3, ncol=ncol(CMat)) rownames(savTemp)=paste(&quot;all&quot;, testSet, sep=&quot;&quot;) savTempP=savTemp for (j in 1:length(testSetB)){ CD8Table=lx1[grep(testSetB[j], lx1$cell_type), ] CD8Table=colSums(CD8Table[, -1]) #rownames(CD8Table)=&quot;facs&quot; outB=out2[grep(testSet[j], out2$cell_type), ] rm2=grep(rmThese[j], outB$cell_type) if (length(na.omit(rm2))&gt;0){ outB=outB[-rm2, ] } namOut=sapply(strsplit(as.character(outB$cell_type), &quot;_&quot;), function(x) x[2]) nam2=unique(namOut[which(duplicated(namOut))]) outC=sapply(nam2, function(x) colSums(outB[which(namOut==x), -1 ])) outB=outB[-which(namOut%in%nam2), ] rownames(outB)=sapply(strsplit(as.character(outB$cell_type), &quot;_&quot;), function(x) x[2]) allD=rbind(CD8Table, outB[, -1], t(outC)) rownames(allD)[1]=&quot;facs&quot; allD$method=rownames(allD) # allD=data.matrix(allD) #pdf(sprintf(&quot;rslt/Immune decomposition/correlations_combined_%s.pdf&quot;, testSetB[j]), width=10, height=10) #ggplot(temp8, aes(x=method, y=value, col=variable))+geom_bar(stat=&quot;identity&quot;)+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) par(mfrow=c(3,3)) for (i in 2:nrow(allD)){ a1=cor(t(allD[1, -ncol(allD)]), t(allD[i, -ncol(allD)]), use=&quot;complete&quot;) a2=cor.test(t(allD[1, -ncol(allD)]), t(allD[i, -ncol(allD)]), use=&quot;complete&quot;)$p.value savTemp[j, match(rownames(allD)[i], colnames(CMat))]=a1 savTempP[j, match(rownames(allD)[i], colnames(CMat))]=a2 # plot(t(allD[1, -ncol(allD)]), t(allD[i,-ncol(allD)]), main=allD[i,ncol(allD)], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) # text(min(t(allD[1, -ncol(allD)]), na.rm=T)*2, max(t(allD[i, -ncol(allD)]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } cell_type=paste(testSetB[j], allD$method, sep=&quot;_all_&quot;) MergedTable=rbind(MergedTable, cbind(cell_type, allD[ ,-21])) } CorMatAll=rbind(CMat, savTemp) CorMatP=rbind(PMat, savTempP) par(oma=c(2, 0,0,5)) heatmap.2(CorMatAll, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, main=&quot;correlation FACS and GE&quot;) We can plot associations between the different cell types below, here selecting: Bcells CD8 T cells M2 macophage M1 macrophage with each method. The correlation coefficient is indicated. testSetB=c(&quot;CD8&quot;, &quot;B cells&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;) testSet=c(&quot;CD8&quot;, &quot;B cell&quot;,&quot;M1&quot;, &quot;M2&quot;) par(mfrow=c(3,3)) for (j in 1:length(testSetB)){ CMat=matrix(NA, ncol=length(testSet), nrow=10) CD8Table=rbind(lx1[grep(testSetB[j], lx1$cell_type), ], out2[grep(testSet[j], out2$cell_type), ]) for (i in 2:nrow(CD8Table)){ a1=cor(t(CD8Table[1, -1]), t(CD8Table[i, -1]), use=&quot;complete&quot;) plot(t(CD8Table[1, -1]), t(CD8Table[i, -1]), main=CD8Table[i,1], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) text(min(t(CD8Table[1, -1]), na.rm=T)*2, max(t(CD8Table[i, -1]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } mtext(testSetB[j], side=3, line=-2, outer=T) } 18.4 Progression cohort We perform the same sort of analysis for the progression cohort: # drop samples #dsamp=c(&quot;2R_D_CD45&quot;, &quot;3L_D_CD45&quot;) sizeInfo=infoTableFinal$GrowthRate[match(colnames(ProgSpecCD45)[-1], rownames(infoTableFinal))] CorVals=rep(NA, nrow(ProgSpecCD45)) names(CorVals)=ProgSpecCD45$cell_type CorValsP=CorVals CorVals=sapply(1:nrow(ProgSpecCD45), function(x) cor(t(ProgSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)) CorValsP=sapply(1:nrow(ProgSpecCD45), function(x) cor.test(t(ProgSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)$p.value) naidx=which(CorValsP&lt;0.05) RNames1=sapply(strsplit(ProgSpecCD45$cell_type, &quot;_&quot;), function(x) x[1]) RNamesMethod=sapply(strsplit(ProgSpecCD45$cell_type, &quot;_&quot;), function(x) x[2]) df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorVals, p=CorValsP) ax1=acast(df2[ ,c(1:3)], RNames1~RNamesMethod) #df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorValsP) ax2=acast(df2[ ,c(1:2,4)], RNames1~RNamesMethod) ax2[which(ax2&gt;0.1, arr.ind=T)]=0 ax2[which(is.na(ax2), arr.ind = T)]=0 pdf(&quot;~/Desktop/4F_progression_association_growthrate_all_methods.pdf&quot;, width=8, height=6) par(oma=c(2, 2, 2, 2)) OutputplotFun(ax1, scaleR=&quot;none&quot;, main=&quot;cell type correlation&quot;, classN=&quot;no&quot;, sigMat=ax2) dev.off() ## quartz_off_screen ## 2 ## Also plot these all separately sizeInfoCut=infoTableFinal$Growth[match(colnames(ProgSpecCD45)[-1], rownames(infoTableFinal))] ttestVal=sapply(1:nrow(ProgSpecCD45), function(x) wilcox.test(t(ProgSpecCD45[x, -1])~sizeInfoCut)$p.value) df3=data.frame(cell=RNames1, method=RNamesMethod, cor=ttestVal) ax3=acast(df3, RNames1~RNamesMethod) ax3[which(ax3&gt;0.1, arr.ind=T)]=0 ax3[which(is.na(ax3), arr.ind = T)]=0 #pdf(&quot;~/Desktop/4F_progression_association_growth_types.pdf&quot;, width=8, height=3) par(mfrow=c(2,2)) for (i in 1:ncol(ax1)){ t1=ax1[, i] t2=which(!is.na(t1)) image(cbind(ax1[t2, i],ax1[t2, i]), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, main=sprintf(&quot;correlation %s (* sig p&lt;0.1)&quot;, colnames(ax1)[i])) axis(1, at=seq(0, 1, length=length(t2)), names(t1)[t2], las=2, cex=0.7) axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) mx=which(ax2[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 0 , &quot;*&quot;) mx=which(ax3[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 1 , &quot;*&quot;) } write.csv(df2, file=&quot;nature-tables/4f.csv&quot;) #dev.off() Make the plots with individual samples: #pdf(&quot;~/Desktop/4F-sample-celltypes-arranged_by_growth_rate.pdf&quot;, height=6, width=10) x2=c(colnames(ProgSpecCD45)[order(sizeInfo)+1]) ax1=grep(&quot;TIMER&quot;, ProgSpecCD45$cell_type) T1melt=melt(ProgSpecCD45[ax1, ]) T1melt$growth=infoTableFinal$Growth[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$treatment=infoTableFinal$Treatment[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$variable=factor(T1melt$variable, x2) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;, drop=T)+ggtitle(&quot;TIMER:prog growth&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 18.4: Progression CIBERSORT TIMER ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;, drop=T)+ggtitle(&quot;TIMER:prog treatment&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 18.5: Progression CIBERSORT TIMER ax1=grep(&quot;CIBERSORT$&quot;, ProgSpecCD45$cell_type) T1melt=melt(ProgSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) T1melt$growth=infoTableFinal$Growth[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$treatment=infoTableFinal$Treatment[match(T1melt$variable, infoTableFinal$SampleID)] ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90)) Figure 18.6: Progression CIBERSORT TIMER ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90)) Figure 18.7: Progression CIBERSORT TIMER # Also do a version where the Bcells, Macrophages,NK, Mast Cells, CD4, CD8 Cells are merged together, NK T1melt$cell_type2=substr(T1melt$cell_type, 1, 4) T1melt$cell_type2[grep(&quot;CD8&quot;, T1melt$cell_type)]=&quot;T CD8&quot; T1melt$cell_type2[grep(&quot;CD4&quot;, T1melt$cell_type)]=&quot;T CD4&quot; ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:prog growth&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 18.8: Progression CIBERSORT TIMER ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:prog treatment&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 18.9: Progression CIBERSORT TIMER T1melt$sdat=paste(T1melt$variable, T1melt$cell_type2, sep=&quot;.&quot;) T2=by(T1melt$value, T1melt$sdat, sum) T2m=stack(T2) T2m$ind1=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[1]) T2m$ind2=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[2]) T2mTab=acast(T2m[ ,c(1, 3:4)], ind2~ind1, value.var=&quot;values&quot;) CorV=sapply(1:nrow(T2mTab), function(x) cor(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)) CorVP=sapply(1:nrow(T2mTab), function(x) cor.test(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)$p.value) wilP=sapply(1:nrow(T2mTab), function(x) wilcox.test(T2mTab[x, ]~ sizeInfoCut)$p.value) # image(cbind(CorV,CorV), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, # main=&quot;correlation CIBERSORT growth rate (* sig p&lt;0.1)&quot;) # axis(1, at=seq(0, 1, length=length(CorV)), rownames(T2mTab), las=2, cex=0.7) # axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) # mx=which(CorVP&lt;0.1) # text((mx-1)/(CorVP-1), 0 , &quot;*&quot;) # mx=which(wilP&lt;0.1) # text((mx-1)/(wilP-1), 1 , &quot;*&quot;) #dev.off() write.csv(T1melt, file=&quot;nature-tables/4f_image.csv&quot;) 18.5 Clinical associations 18.5.1 Associate with Treatment Look at association with treatment, growth and spatial infiltration for each method. Associations with treatment: higher CD4, CD8 in most treatments growth: stable associated with higher CD8 infiltration: more neutrophils and CD8? maybe CD4 cells #sizeCutOff=7 MergedTablemelt=melt(MergedTable[-1, ]) MergedTablemelt$Treatment=infoTableFinal$Treatment[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$Growth=infoTableFinal$Growth[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$InfRes=infoTableFinal$MHcut[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$cell_type2=sapply(strsplit(MergedTablemelt$cell_type, &quot;_&quot;), function(x) x[1]) MergedTablemelt$method=sapply(strsplit(MergedTablemelt$cell_type, &quot;_&quot;), function(x) x[length(x)]) unValues=unique(MergedTablemelt$cell_type2) CompTest=list() for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=Treatment, y=as.numeric(value), col=Treatment))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Treatment&quot;)) print(p) #p&lt;-ggplot(ax, aes(x=Growth, y=as.numeric(value), col=Growth))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Growth&quot;)) #print(p) #p&lt;-ggplot(ax, aes(x=InfRes, y=as.numeric(value), col=InfRes))+geom_boxplot()+facet_wrap(~method, #scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Infiltration&quot;)) #print(p) unT=sort(unique(ax$Treatment)) unB=sort(unique(ax$method)) Outcome1=matrix(NA, nrow=5, ncol=length(unB)) rownames(Outcome1)=c(paste(unT[1:3], &quot;vs.Vehicle&quot;, sep=&quot;&quot;), &quot;Grow.Stable&quot;, &quot;Inf.res&quot;) colnames(Outcome1)=unB for (j in 1:nrow(Outcome1)){ Outcome1[1 , ]=sapply(unB, function(x) wilcox.test(ax$value[which(ax$Treatment==&quot;LY&quot; &amp; ax$method==x)], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[2 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Treatment==&quot;PDL1&quot; &amp; ax$method==x], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[3 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Treatment==&quot;PDL1+LY&quot; &amp; ax$method==x], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[4 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Growth==&quot;growing&quot; &amp; ax$method==x], ax$value[ax$Growth==&quot;stable&quot; &amp; ax$method==x])$p.value) Outcome1[5 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$InfRes==&quot;inf&quot; &amp; ax$method==x], ax$value[ax$InfRes==&quot;res&quot; &amp; ax$method==x])$p.value) } CompTest[[i]]=t(Outcome1) o1=Outcome1 o1[which(o1&lt;0.05, arr.ind=T)]=3 o1[which(o1&lt;0.1, arr.ind=T)]=2 o1[which(o1&lt;=1, arr.ind=T)]=0 #heatmap.2(o1, col=brewer.pal(9, &quot;Blues&quot;), scale=&quot;none&quot;, trace=&quot;none&quot;, main=paste(&quot;pvalue summary&quot;, unValues[i]), Colv = NA, Rowv = NA) } Using wilcox tests for significance, we can make the above comparisons and see if there is an association with outcome: There are differences in B-cell content between LY vs V comaprisons using xcell and cibersort Macrophages are different in PDL1+LY 18.5.2 Association with Growth for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=Growth, y=as.numeric(value), col=Growth))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Growth&quot;)) print(p) } for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=InfRes, y=as.numeric(value), col=InfRes))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Infiltration&quot;)) print(p) } 18.6 Summary of the outcome CompTest2=do.call(rbind, CompTest) write.csv(CompTest2, file=sprintf(&quot;outputs/p_values_differences_treatment_growth_infiltration_%s.csv&quot;, Sys.Date())) scroll_box(kable(CompTest2, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) LYvs.Vehicle PDL1vs.Vehicle PDL1+LYvs.Vehicle Grow.Stable Inf.res CIBERSORT 0.4126984 0.5476190 1.0000000 0.5880289 0.1892774 CIBERSORT-ABS 0.4126984 1.0000000 0.6623377 0.6426471 0.5358197 EPIC 0.5031709 0.6764350 0.3052553 0.2388414 0.8841264 facs 0.0265187 0.1979593 0.0265187 0.1028077 0.5031709 MMCPCOUNTER 0.0004218 0.0110240 0.0372030 0.0027499 0.8841264 QUANTISEQ 0.8735909 0.1566299 0.3301798 0.4282170 0.0562203 TIMER 0.7506528 0.9082682 0.1930218 0.3922756 0.4516905 XCELL 0.0912068 0.0288056 0.0802331 0.2334498 0.6325687 facs 0.9047619 0.6904762 0.5367965 1.0000000 0.8665113 CIBERSORT 0.3710934 0.4237108 NaN 0.0572674 0.4226781 CIBERSORT-ABS 0.3710934 0.4237108 NaN 0.0572674 0.4226781 QUANTISEQ 0.2857143 0.3095238 0.1610557 0.0707781 0.6843748 XCELL 0.1111111 0.0952381 0.0519481 0.0033561 0.7282210 facs 0.2857143 0.2222222 0.5367965 0.2749226 0.1205905 CIBERSORT 0.2857143 0.0317460 0.2467532 0.1574303 0.4634033 CIBERSORT-ABS 0.1904762 0.0317460 0.0519481 0.0968008 0.2809635 QUANTISEQ 0.2622393 0.4633439 0.1908413 0.0288101 0.9048611 XCELL 0.5555556 0.4633439 0.5830249 0.0088199 0.6843748 CIBERSORT 0.1904762 0.6904762 0.5367965 0.0144737 0.3968920 CIBERSORT-ABS 0.1904762 1.0000000 0.2467532 0.0144737 0.5358197 facs 0.1904762 1.0000000 0.3290043 0.4377967 0.1519814 MMCPCOUNTER 0.1312104 0.0720057 0.4652088 0.3530684 1.0000000 QUANTISEQ 0.5023350 0.4237108 0.3613104 0.5293681 NaN XCELL 0.1399825 0.1612376 0.0995755 0.0080464 0.6827511 CIBERSORT NaN NaN 0.4652088 0.2084128 0.3495748 CIBERSORT-ABS NaN NaN 0.4652088 0.2084128 0.3495748 facs 0.7301587 0.5476190 0.6623377 0.8167957 1.0000000 QUANTISEQ 0.2404208 0.1797125 0.1363802 0.3228308 0.4226781 TIMER 0.5555556 1.0000000 0.9307359 0.1574303 0.2318570 XCELL 0.9008654 1.0000000 0.6321424 1.0000000 0.5500973 facs 0.6666667 0.5333333 0.3333333 0.4206349 0.1904762 EPIC 0.9047619 0.2222222 0.6623377 0.4854231 0.6943279 MMCPCOUNTER 0.2857143 0.4206349 0.3290043 0.0004902 1.0000000 QUANTISEQ 0.9047619 0.4206349 0.9307359 0.0264435 0.9550894 XCELL 0.4126984 0.5476190 0.9307359 0.0296956 0.0400932 facs 0.3333333 0.2666667 1.0000000 0.0317460 0.0634921 CIBERSORT 0.2857143 0.3095238 0.1255411 0.3928793 0.5358197 CIBERSORT-ABS 0.1904762 0.6904762 0.1255411 0.5880289 1.0000000 EPIC 0.9047619 0.8412698 0.0519481 0.3506966 0.2809635 QUANTISEQ 0.5385943 0.0317460 0.0519481 0.7807063 0.5207033 TIMER 0.4126984 0.8412698 0.6623377 0.0455624 0.0721057 XCELL 1.0000000 0.8412698 1.0000000 0.0011610 0.2809635 facs 1.0000000 0.2666667 0.3333333 0.3095238 0.1111111 CIBERSORT 0.9047619 1.0000000 0.7922078 0.0455624 0.7788656 CIBERSORT-ABS 0.9047619 0.4206349 0.5367965 0.0186017 0.8665113 QUANTISEQ 0.5555556 0.4206349 0.5367965 0.9384675 0.5358197 XCELL 0.7301587 0.1507937 0.1255411 0.1826883 0.6943279 CIBERSORT 0.2857143 0.0555556 0.2467532 0.1574303 0.4634033 CIBERSORT-ABS 0.1904762 0.0317460 0.0519481 0.1146285 0.2809635 EPIC 0.1111111 0.0952381 0.1774892 0.0034056 0.8665113 facs 0.1904762 0.2222222 0.7922078 0.4854231 0.2809635 QUANTISEQ 0.4126984 0.5476190 0.1669941 0.0054748 0.7721395 TIMER 0.2622393 0.4633439 0.2621926 0.6271128 1.0000000 XCELL 0.1111111 0.2222222 0.1774892 0.0034056 0.7788656 CIBERSORT 0.2857143 0.2222222 0.2722293 0.1653588 0.9538159 CIBERSORT-ABS 0.4126984 0.2222222 0.2722293 0.2845377 0.8620647 EPIC 0.4126984 0.1507937 0.0173160 0.2749226 0.4634033 facs 0.3333333 0.5333333 0.3333333 0.0555556 0.1904762 QUANTISEQ 0.5023350 1.0000000 0.3413145 1.0000000 0.1582563 TIMER 0.2008251 0.1059975 0.0616637 0.4698277 0.5207033 XCELL 0.2857143 0.0952381 0.1774892 0.7573013 0.5358197 CompTest2=data.frame(CompTest2) # CompTest2$Method=sapply(strsplit(rownames(CompTest2), &quot;_&quot;), function(x) x[2]) # CompTest2$CellType=sapply(strsplit(rownames(CompTest2), &quot;_&quot;), function(x) x[1]) # # x2=unique(CompTest2$CellType[which(duplicated(CompTest2$CellType))]) # # CompTest3=CompTest2[which(CompTest2$CellType%in%x2), ] # CompTest3melt=melt(CompTest3) # # CompTest3melt$P2=ifelse(CompTest3melt$value&lt;0.05, &quot;**&quot;, ifelse(CompTest3melt$value&lt;0.1, &quot;*&quot;, &quot;ns&quot;)) # # # # p=ggplot(CompTest3melt, aes(x=CellType, y=Method, fill=P2))+geom_tile()+facet_wrap(~variable)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ylab(&quot;No. differential genes&quot;)+scale_fill_manual(values=c(&quot;#084594&quot;, &quot;#2171b5&quot;, &quot;#deebf7&quot;))+ggtitle(&quot;p values of comparisons&quot;) # print(p) ##dev.off() "],["bcr-clonotype-analysis.html", "Chapter 19 BCR clonotype analysis 19.1 Processing summary 19.2 Summary Stats 19.3 Diversity metrics 19.4 Compare the characterisation cohort 19.5 Associate with clinicopathological data (progression) 19.6 Associate with signature scores", " Chapter 19 BCR clonotype analysis 19.1 Processing summary Fastq files have previously been run through TRUST4 using the Rn6 BCR annotations using the following code (not run here). Note that the bcr/tcr .fa files were assembled using the ensembl annotation (these annotations are not present in the UCSC genomic files). Annotation files for the rn6 BCR regions are available at IMGT, but TCR regions are not available # obtain the gene names for rat: library(biomaRt) human = useEnsembl(&quot;ensembl&quot;, mirror=&quot;useast&quot;, dataset = &quot;hsapiens_gene_ensembl&quot;) rat = useEnsembl(&quot;ensembl&quot;, mirror=&quot;useast&quot;, data=&quot;rnorvegicus_gene_ensembl&quot;) TS = human_igg_trv_list Hum2RatProt = getLDS(attributes = c(&quot;hgnc_symbol&quot;, &quot;ensembl_transcript_id&quot;), filters = &quot;hgnc_symbol&quot;, values = TS , mart = human, attributesL = c(&quot;rgd_symbol&quot;, &quot;ensembl_transcript_id”, “ensemble_gene_id&quot;), martL = rat, uniqueRows=T) write.table(unique(Hum2RatProt$ensemble_gene_id), &quot;ensbl_rat_bcr.txt&quot;, quote=F, row.names=F,colnames=F) # obtain the tcr/bcr.fa file #(Note that BuildDatabaseFa.pl needs to be edited on lines 95, 102, 114 and 121 to use transcript_id or gene_id instead) perl BuildDatabaseFa.pl Rattus_norvegicus.Rnor_6.0.dna_sm.toplevel.fa Rattus_norvegicus.Rnor_6.0.99.gtf ensbl_rat_bcr.txt &gt; bcrtcr_rat_ens.fa # Obtain the reference annotation file perl BuildImgtAnnot.pl Rattus_norvegicus &gt; Rnor_IMGT+C.fa # Run TRUST (below is single end) ./run-trust4 -u 20170125_NMU7_Tumor_RLU_CD45_CGDA5146_S1_R1_001.fastq.gz -f bcrtcr_rat_ens.fa --ref Rnor_IMGT+C.fa #Annotation file: Load in an annotation file indicating all the samples, batch effects etc TRUST4path=&quot;../data/TRUST4/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) matchidx=match(TRUST4files, infoTableFinal$TRUSTName) #RepNames=paste(infoTableFinal$Rat_ID, tempAnnot$Location, tempAnnot$Fraction, sep=&quot;_&quot;)[matchidx] # load in all the files and save the list to file RatTrust=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrust)=infoTableFinal$SampleID[matchidx] TRUST4path=&quot;../data/TRUST4/matchedNormal/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) FileNames=paste(substr(TRUST4files, 10, 12), &quot;matchedNMUCD45&quot;, sep=&quot;_&quot;) RatTrustNormal=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrustNormal)=FileNames RatTrust=c(RatTrust, RatTrustNormal) save(RatTrust, file=sprintf(&quot;outputs/Rat_TRUST4_%s.RData&quot;, Sys.Date())) 19.2 Summary Stats Firstly, look at the number of BCR regions which have been identified by TRUST4. In green are the CD45 populations, which as expected appear to have a higher number of clonotypes compared to the epithelial and the double-negative populations (in read and orange). NSamples=sapply(RatTrust, nrow) NSamplesCt2=sapply(RatTrust, function(x) length(which(x$X.count&gt;=2))) NSamplesCDR3comp=sapply(RatTrust, function(x) length(which(x$CDR3aa!=&quot;partial&quot;))) NSamplesCDR3compCt2=sapply(RatTrust, function(x) length(which(x$CDR3aa!=&quot;partial&quot; &amp; x$X.count&gt;=2))) TableOut=cbind(NSamples, NSamplesCt2, NSamplesCDR3comp, NSamplesCDR3compCt2) matchidx=match(rownames(TableOut), infoTableFinal$SampleID) ColOut=factor(paste(infoTableFinal$Fraction[matchidx], infoTableFinal$Batch[matchidx])) #palette(c(&quot;#e5f5e0&quot;,&quot;#a1d99b&quot;, &quot;#31a354&quot;, &quot;#fd8d3c&quot;,&quot;#fa9fb5&quot;, &quot;#f03b20&quot;, &quot;#005824&quot;)) #pdf(sprintf(&quot;rslt/TRUST4/BCR_summary_QC_%s.pdf&quot;, Sys.Date()), height=5, width = 7) # plot the clonotype diversity, color-code according to both batch and the sample used par(mar = c(4, 4, 4, 2), xpd = TRUE) barplot(NSamplesCt2+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Overview of clonotype diversity (2+ reads)&quot;, col=ColOut, cex.names = 0.75) legend(&quot;top&quot;, inset = c(-0.5, 0.03), legend = levels(ColOut), pch = c(19, 19, 19, 19, 19), col = c(1:6), horiz = T) # plot the number of full vs partial clonotypes PartialvsFull=rbind(NSamplesCDR3compCt2,NSamplesCt2-NSamplesCDR3compCt2) rownames(PartialvsFull)=c(&quot;full&quot;, &quot;partial&quot;) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(PartialvsFull+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Proportion of full vs partial CDR3a&quot;, col=c(1:2), cex.names = 0.75) legend(&quot;bottom&quot;, inset = c(-0.5, -0.5), legend = c(&quot;full&quot;, &quot;partial&quot;), pch = c(19, 19), col = c(1:2), horiz = T) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(t(TableOut[ which(infoTableFinal$Fraction[matchidx]==&quot;CD45&quot;),]+1), las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Clonotype diversity CD45+ samples&quot;, col=c(1:4), cex.names = 0.75, beside = T) legend(&quot;bottom&quot;, inset = c(-0.5, -0.5), legend = c(&quot;# clonotypes&quot;, &quot;clonotypes &gt;2reads&quot;, &quot;complete CDR3&quot;, &quot;both&quot;), pch = c(19, 19, 19), col = c(1:4), horiz = T) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(NSamplesCDR3compCt2+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Filtered Clonotypes based on batch&quot;, col=ColOut, cex.names = 0.75, beside = T) legend(&quot;top&quot;, inset = c(-0.5, 0.03), legend = levels(ColOut), pch = c(19, 19, 19, 19, 19), col = c(1:5), horiz = T) #dev.off() We will refine the above plot to contain only the CD45 population and assess: number of clonotypes number of clonotypes with at least 2 reads number of clonotypes which have a complete CDR3a region Note: although this does not look like a big drop, the data is plotted on a log-scale. For example, in the control 4 (first column) a quarter of the clonotypes have at least 2 counts and about half have a complete CDR3 sequence. For the following analyses, the clonotypes are filtered to only clonotypes with at least 2 supporting reads and a complete VDJ read . When applying this restriction, we have the following distribution of BCR regions. Almost all the epithelial cases do not have supporting reads, and few of the DN cases have supporting reads too. RatTrustB=lapply(RatTrust, function(x) x[which(x$CDR3aa!=&quot;partial&quot; &amp; x$X.count&gt;=2), ]) for (i in 1:length(RatTrustB)){ RatTrustB[[i]]$frequency=RatTrustB[[i]]$X.count/sum(RatTrustB[[i]]$X.count) } 19.3 Diversity metrics We will assess BCR diversity using the following metrics: ** Shannon index ** The shannon index is computed by: filtering through reads of interest recalculate the fraction such that the new list sums to 1 compute entropy as the sum of log(freq_x)*freq_x amongst all populations x compute the maximum entropy expected for that case -log(1/N), where N is the number of populations present to determine confidence intervals, bootstrap the population (500 times) and compute the expected entropy ** Gini index ** The Gini index can be considered as an inverse of the Shannon index ** Top Clonotypes ** We will see the proportion of the BCR repertoire which is computed using the top 10 frequent clones. This will give an idea of whether there is a clonal expansion # compute values here Div1=sapply(RatTrustB, function(x) -sum(x$frequency*log(x$frequency), na.rm=T)) EDiv=sapply(NSamplesCDR3compCt2, function(x) -log(1/x)) NormDiv=Div1/EDiv ## Shannon index # bootstrap rslt BSrslt=sapply(RatTrustB, function(x) tryCatch(BootstrapShannonIdx(x[ ,1], 1000), error=function(e) c(NA, NA))) # divide the CI by the maximum possible diversity BSCI=t(BSrslt)/EDiv df=data.frame(sample=rownames(BSCI), Val=NormDiv, Lower=BSCI[ , 1], Upper=BSCI[ ,2 ], Type=infoTableFinal$Fraction[matchidx], Batch=infoTableFinal$Batch[matchidx]) ## Gini index Gini=sapply(RatTrustB, function(x) gini(x$frequency)) PGini=sapply(RatTrustB, function(x) tryCatch(PermuteGini(x$X.count, 1000), error=function(e) c(NA, NA))) df$Calc=&quot;shannon&quot; df2=data.frame(sample=df$sample, Val=Gini, Lower=PGini[1, ], Upper=PGini[2, ], Type=df$Type, Batch=df$Batch, Calc=&quot;Gini&quot;) dfAll=rbind(df, df2) ## Top Clonotypes TopClones=sapply(RatTrustB, function(x) sum(x$frequency[1:5], na.rm = T)) TopClones[which(NSamplesCDR3compCt2==0)]=0 df2$Val=TopClones df2$Calc=&quot;Top10&quot; df2$Lower=TopClones df2$Upper=TopClones dfAll=rbind(dfAll, df2) dfAll$Batch=as.character(dfAll$Batch) dfAll$Batch[grep(&quot;matchedNMU&quot;, rownames(dfAll))]=&quot;match&quot; dfAll$Type[grep(&quot;matchedNMU&quot;, rownames(dfAll))]=&quot;CD45&quot; #ggplot(df[df$Type==&quot;CD45&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of BCR diversity&quot;) The following plot demonstrates the relationship between the above metrics #pdf(sprintf(&quot;rslt/TRUST4/summary_Scores_diversity_%s.pdf&quot;, Sys.Date()), width=7, height=5) ggplot(dfAll[dfAll$Type==&quot;CD45&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(Calc~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;BCR diversity across samples&quot;)+ylab(&quot;index value&quot;) #dev.off() Notice that some samples have very few clones. An example is 5RB which is represented by a single clonotype, accounting for the absence of a Gini or shannon index 19.4 Compare the characterisation cohort In the characterisation cohort, we have 3 cases which have CD45 samples in both the tumor and a matched NMU treated mammary gland. Is there a difference in the clonotypes between these samples? CharTemp=dfAll[which(dfAll$Type==&quot;CD45&quot; &amp; dfAll$Batch%in%c(&quot;1&quot;, &quot;match&quot;)), ] CharTemp$Batch[grep(&quot;Control&quot;, CharTemp$sample)]=&quot;Normal&quot; Nclonotypes=TableOut[which(rownames(TableOut)%in%CharTemp$sample), ] Nclonotypes2=melt(Nclonotypes) Nclonotypes2$Case=&quot;tumor&quot; Nclonotypes2$Case[grep(&quot;match&quot;, Nclonotypes2$Var1)]=&quot;mammary&quot; Nclonotypes2$Case[grep(&quot;Control&quot;, Nclonotypes2$Var1)]=&quot;control&quot; #pdf(sprintf(&quot;rslt/TRUST4/compare_mammary_vs_tumor_%s.pdf&quot;, Sys.Date()), width=8, height=6) a1=sapply(unique(CharTemp$Calc), function(x) wilcox.test(CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==1], CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==&quot;match&quot;])$p.value) p=ggplot(CharTemp, aes(x=Batch, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+geom_jitter(col=&quot;grey&quot;)+theme_bw() print(p) Figure 19.1: bcr clonotypes in tumor and normal mammary glands write.csv(CharTemp, file=&quot;nature-tables/2h.csv&quot;) Next, we check whether this could be attributed to the total number of clones. Here is a plot which assesses whether these are similar or different a1=sapply(unique(Nclonotypes2$Var2), function(x) wilcox.test(Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;tumor&quot;], Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;mammary&quot;])$p.value) ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(a1,4),sep=&quot;&quot;), Var2=unique(Nclonotypes2$Var2), Case=1, value=2) p=ggplot(Nclonotypes2, aes(x=Case, y=value))+geom_boxplot()+facet_grid(~Var2)+ggtitle(&quot;Nclonotype with different filters&quot;)+geom_jitter(col=&quot;grey&quot;)+theme_bw()+ geom_text(data=ann_text2, aes(label=lab)) print(p) What about association with size? CharTemp2=CharTemp[which(CharTemp$Batch==&quot;1&quot;), ] midx=Cdata$Tumor.diameter.sac.mm[match(substr(as.character(CharTemp2$sample), 1, nchar(as.character(CharTemp2$sample))-5), Cdata$TumorID)] CharTemp2$size=midx ggplot(CharTemp2, aes(x=size, y=Val))+geom_point()+facet_grid(~Calc)+theme_bw() Figure 19.2: clonotype assoc with size write.csv(CharTemp2, file=&quot;nature-tables/Ext2e.csv&quot;) ProgTemp=dfAll[which(dfAll$Type==&quot;CD45&quot; &amp; dfAll$sample%in%infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot;)]), ] a1=match(ProgTemp$sample, infoTable) ProgTemp$Growth=infoTableFinal$Growth[a1] ProgTemp$NewID=infoTableFinal$TumorIDnew[a1] ProgTemp$Treatment=infoTableFinal$Treatment[a1] Nclonotypes=TableOut[which(rownames(TableOut)%in%ProgTemp$sample), ] Nclonotypes2=melt(Nclonotypes) # Nclonotypes2$Case=&quot;tumor&quot; # Nclonotypes2$Case[grep(&quot;match&quot;, Nclonotypes2$Var1)]=&quot;mammary&quot; # Nclonotypes2$Case[grep(&quot;Control&quot;, Nclonotypes2$Var1)]=&quot;control&quot; head(Nclonotypes2) #pdf(sprintf(&quot;rslt/TRUST4/compare_mammary_vs_tumor_%s.pdf&quot;, Sys.Date()), width=8, height=6) #a1=sapply(unique(ProgTemp$Calc), function(x) wilcox.test(ProgTemp$Val[ProgTemp$Calc==x &amp; ProgTemp$Batch==1], ProgTemp$Val[ProgTemp$Calc==x &amp; ProgTemp$Batch==&quot;match&quot;])$p.value) p=ggplot(ProgTemp, aes(x=Growth, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+geom_jitter(col=&quot;grey&quot;)+theme_bw() print(p) write.csv(ProgTemp, file=&quot;nature-tables/4i_clonotypes.csv&quot;) # a1=sapply(unique(Nclonotypes2$Var2), function(x) wilcox.test(Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;tumor&quot;], Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;mammary&quot;])$p.value) # # ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(a1,4),sep=&quot;&quot;), Var2=unique(Nclonotypes2$Var2), Case=1, value=2) # p=ggplot(Nclonotypes2, aes(x=Case, y=value))+geom_boxplot()+facet_grid(~Var2)+ggtitle(&quot;Nclonotype with different filters&quot;)+geom_jitter(col=&quot;grey&quot;)+theme_bw()+ # geom_text(data=ann_text2, aes(label=lab)) # print(p) 19.5 Associate with clinicopathological data (progression) We will associate the following metrics: total unique clones diversity with the following immune data: CD45 fraction (from FACS) CD8 fraction (from WSI) MH-mixing indices Tumor Size Growth Treatment matchidx=match(rownames(TableOut), infoTableFinal$SampleID) TrustTab=infoTableFinal[matchidx, ] TrustTab$TrustNclonotypes=TableOut[match(TrustTab$SampleID, rownames(TableOut)) ,2] TrustTab$TrustShannon=dfAll$Val[match(TrustTab$SampleID, dfAll$sample) ] TrustTab$TrustTop10=df2$Val[match(TrustTab$SampleID, df2$sample)] TrustTab$TrustGini=dfAll$Val[which(dfAll$Calc==&quot;Gini&quot;)[match(TrustTab$SampleID, dfAll$sample)] ] TrustTab$CD45FACS=as.numeric(as.character(Cdata$CD45.Frac.FACS[match(TrustTab$TumorID, Cdata$TumorID)])) TrustTab$UnclassFrac=as.numeric(as.character(Cdata$UnclassFraction[match(TrustTab$TumorID, Cdata$TumorID)])) CD45F=which(TrustTab$Fraction==&quot;CD45&quot;) #TrustTab=TrustTab[TrustTab$Fraction==&quot;CD45&quot;, ] paramSearch=c(&quot;CD8Frac&quot;, &quot;TumSize&quot;, &quot;CD45FACS&quot;, &quot;MHEpCAM&quot;, &quot;MHSMA&quot;, &quot;IFEpCAM&quot;, &quot;IFSMA&quot;, &quot;UnclassFrac&quot;) FeatTrust=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;, &quot;TrustTop10&quot;) Nclon=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[ CD45F,c(&quot;TrustNclonotypes&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) SDiv=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[CD45F ,c(&quot;TrustShannon&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) GDiv=sapply(paramSearch, function(x) cor.test(TrustTab[ CD45F,x], TrustTab[CD45F ,c(&quot;TrustGini&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) TDiv=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[CD45F ,c(&quot;TrustTop10&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) AllSmerge=rbind(Nclon, SDiv, GDiv, TDiv) #pdf(sprintf(&quot;rslt/TRUST4/association_trustmetrics_clinicopathological_%s.pdf&quot;, Sys.Date()), width=10, height=8) heatmap.2(AllSmerge, scale=&quot;none&quot;, col=RdBu[11:1], trace=&quot;none&quot;, main=&quot;p values of associations&quot;) Figure 19.3: 4i: trust result par(mfrow=c(2,2)) idx=which(AllSmerge&lt;0.1, arr.ind=T) for (i in 1:nrow(idx)){ a1=cor.test(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], use=&quot;complete&quot;, method=&quot;spearman&quot;) plot(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], xlab=FeatTrust[idx[i, 1]], ylab=paramSearch[idx[i, 2]], main=sprintf(&quot;cor:%s p:%s&quot;, round(a1$estimate,2), round(a1$p.value,2))) text(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], rownames(TrustTab)[CD45F], cex=0.75) } Figure 19.4: 4i: trust result #pdf(&quot;~/Desktop/4L-TRUST-rslt-associate-outcome-progression.pdf&quot;, height=8, width=8) CD45F2=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot;) yvals=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;, &quot;TrustTop10&quot;) ## associate with growth and treatment type par(mfrow=c(2,2)) Figure 19.5: 4i: trust result CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;PDL1&quot;)) a1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;LY&quot;)) b1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;PDL1+LY&quot;)) c1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) TrustTabmelt=melt(TrustTab[CD45F2, ], measure.vars=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;)) head(TrustTabmelt) ## starSampleName FqFile Rat_ID Fraction ## 1 CD45_10L_D 20190213_25_CGDA6432-2of3_S1_R1_001.fastq.gz 10L CD45 ## 2 CD45_10R_BL 20190213_26_CGDA6432-2of3_S2_R1_001.fastq.gz 10R CD45 ## 3 CD45_11N_D 20190213_27_CGDA6432-2of3_S3_R1_001.fastq.gz 11N CD45 ## 4 CD45_11R_D 20190213_28_CGDA6432-2of3_S4_R1_001.fastq.gz 11R CD45 ## 5 CD45_14N_B 20190213_30_CGDA6432-2of3_S5_R1_001.fastq.gz 14N CD45 ## 6 CD45_14N_D 20190213_31_CGDA6432-2of3_S6_R1_001.fastq.gz 14N CD45 ## Batch Location Cohort TRUSTName ## 1 2 D Progression 20190213_25_CGDA6432-2of3_S1_R1_001_report.tsv ## 2 2 BL Progression 20190213_26_CGDA6432-2of3_S2_R1_001_report.tsv ## 3 2 D Progression 20190213_27_CGDA6432-2of3_S3_R1_001_report.tsv ## 4 2 D Progression 20190213_28_CGDA6432-2of3_S4_R1_001_report.tsv ## 5 2 B Progression 20190213_30_CGDA6432-2of3_S5_R1_001_report.tsv ## 6 2 D Progression 20190213_31_CGDA6432-2of3_S6_R1_001_report.tsv ## Treatment SampleID TumorID Growth SpatialManual CD8Frac TumSize ## 1 PDL1 10L_D_CD45 10L_D stable Infiltrating 0.06810877 10 ## 2 PDL1 10R_BL_CD45 10R_BL growing restricted 0.02027148 40 ## 3 PDL1 11N_D_CD45 11N_D stable Infiltrating 0.38006717 3 ## 4 PDL1 11R_D_CD45 11R_D growing restricted 0.02244524 25 ## 5 PDL1+LY 14N_B_CD45 14N_B growing restricted 0.10615200 23 ## 6 PDL1+LY 14N_D_CD45 14N_D stable &lt;NA&gt; NA 5 ## Time.NMU2Sac Age.Injection IFEpAntstrRatio MHEpAntstrRatio GrowthRate ## 1 79 32-36 0.416700736 0.9499329 1.9729730 ## 2 98 32-36 0.319648094 0.8754987 4.9761905 ## 3 127 32-36 0.005010206 0.8141016 0.1065574 ## 4 112 32-36 0.652759670 0.9303400 3.6428571 ## 5 79 32-36 1.447412008 0.9239682 3.3150685 ## 6 79 32-36 NA NA 0.7621622 ## MHEpCAM IFEpCAM MHSMA IFSMA TumorIDnew knnEpCAM treatA MHcut ## 1 0.6191886 0.2944373 0.7442853 0.14528823 P24T3 34.33110 imm inf ## 2 0.4376521 0.2213380 0.7448562 0.20100206 P26T1 44.92703 imm inf ## 3 0.6777854 0.4326199 0.7633779 0.12801387 P28T1 26.89773 imm inf ## 4 0.2646073 0.2323507 0.4526483 0.07717074 P29T2 73.82461 imm res ## 5 0.3688258 0.2540062 0.4970472 0.04933051 P31T1 49.22243 imm inf ## 6 NA NA NA NA P31T3 NA imm &lt;NA&gt; ## CD8FracCut SizeCat Name2 TrustTop10 CD45FACS UnclassFrac variable ## 1 high small 10LD 0.7132988 49.8 0.1239434 TrustNclonotypes ## 2 low big 10RBL 1.0000000 14.5 0.2265650 TrustNclonotypes ## 3 high small 11ND 0.4119670 70.3 0.1642079 TrustNclonotypes ## 4 low big 11RD 0.4836957 NA 0.2807970 TrustNclonotypes ## 5 high big 14NB 0.0000000 19.6 0.2793663 TrustNclonotypes ## 6 &lt;NA&gt; small 14ND 1.0000000 25.3 NA TrustNclonotypes ## value ## 1 36 ## 2 5 ## 3 102 ## 4 79 ## 5 2 ## 6 11 AllP=c(a1, b1, c1) AllP=AllP[c(seq(2, 12, by=3), seq(1, 12, by=3), seq(3, 12, by=3))] ann_text=data.frame(Glabel=round(AllP, 2), Treatment=rep(c(&quot;LY&quot;, &quot;PDL1&quot;, &quot;PDL1+LY&quot;), 4), variable=rep(yvals, each=3), value=0.7) print(&#39;P values for something&#39;) ## [1] &quot;P values for something&quot; a1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.07565166 0.76182641 0.14827564 0.75673324 b1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.06908261 0.73961333 0.23880663 0.73419223 c1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.5623927 0.3281335 0.2388066 0.9380125 tablex=TrustTab[CD45F2, c(&quot;Treatment&quot;, &quot;Growth&quot;, &quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustTop10&quot;, &quot;TrustGini&quot;)] head(tablex) ## Treatment Growth TrustNclonotypes TrustShannon TrustTop10 ## 10L_D_CD45 PDL1 stable 36 0.7722279 0.7132988 ## 10R_BL_CD45 PDL1 growing 5 0.9656336 1.0000000 ## 11N_D_CD45 PDL1 stable 102 0.8111291 0.4119670 ## 11R_D_CD45 PDL1 growing 79 0.8748310 0.4836957 ## 14N_B_CD45 PDL1+LY growing 2 0.0000000 0.0000000 ## 14N_D_CD45 PDL1+LY stable 11 0.2684248 1.0000000 ## TrustGini ## 10L_D_CD45 0.6318240 ## 10R_BL_CD45 0.1481481 ## 11N_D_CD45 0.6484852 ## 11R_D_CD45 0.4571093 ## 14N_B_CD45 NaN ## 14N_D_CD45 0.5988701 tablexM=melt(tablex) save(tablex, file=&quot;figure-outputs/figure-trust.Rdata&quot;) ggplot(tablexM, aes(x=Treatment, y=value, col=Treatment))+geom_point()+facet_grid(variable~., scale=&quot;free_y&quot;, space=&quot;free_y&quot;)+theme_bw() Figure 19.6: trust treatment #+scale_colour_manual(values=c(ColMerge[ ,1], &quot;black&quot;))+theme_bw() boxplot(TrustTab[CD45F2 ,c(&quot;TrustNclonotypes&quot;)]~TrustTab[CD45F2, &quot;Treatment&quot;], main=paste(&quot;PDL1&quot;, round(a1[1],2), &quot;LY&quot;, round(b1[1],2), &quot;PDL1+LY&quot;, round(c1[1], 2)), xlab=&quot;treat&quot;, ylab=&quot;no clonotypes&quot;, col=ColMerge[ ,1]) Figure 19.7: trust treatment boxplot(TrustTab[CD45F2 ,c(&quot;TrustShannon&quot;)]~TrustTab[CD45F2, &quot;Treatment&quot;], main=paste(&quot;PDL1&quot;, round(a1[2],2), &quot;LY&quot;, round(b1[2],2), &quot;PDL1+LY&quot;, round(c1[2], 2)), xlab=&quot;growth&quot;, ylab=&quot;shannon&quot;,col=ColMerge[ ,1]) Figure 19.8: trust treatment par(mfrow=c(2,2)) a1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2 ,x]~TrustTab[CD45F2, &quot;Growth&quot;])$p.value) boxplot(TrustTab[CD45F2 ,c(&quot;TrustNclonotypes&quot;)]~TrustTab[CD45F2, &quot;Growth&quot;], main=sprintf(&quot;Growth: BCR # clonotypes %s&quot;, round(a1[1], 2)), xlab=&quot;growth&quot;, ylab=&quot;no clonotypes&quot;, col=ColSizeb) boxplot(TrustTab[CD45F2 ,c(&quot;TrustShannon&quot;)]~TrustTab[CD45F2, &quot;Growth&quot;], main=sprintf(&quot;Growth: BCR # shan %s&quot;, round(a1[2], 2)), xlab=&quot;growth&quot;, ylab=&quot;shannon&quot;, col=ColSizeb) boxplot(TrustTab[CD45F2 ,c(&quot;TrustGini&quot;)]~TrustTab[CD45F2, &quot;Growth&quot;], main=sprintf(&quot;Growth: Gini %s&quot;, round(a1[3], 2)), ylab=&quot;gini&quot;, xlab=&quot;growth&quot;, col=ColSizeb) boxplot(TrustTab[CD45F2 ,c(&quot;TrustTop10&quot;)]~TrustTab[CD45F2, &quot;Growth&quot;], main=sprintf(&quot;Growth: Top10&quot;, round(a1[4], 2)), ylab=&quot;top10 clonotypes&quot;, xlab=&quot;growth&quot;, col=ColSizeb) Figure 19.9: trust growth write.csv(TrustTab[CD45F2, ], file=&quot;nature-tables/4i_trust.csv&quot;) 19.6 Associate with signature scores Compare to B cell counts and activation status based on RNA-seq B cell signature enrichments scores (from RNA data) bidx=grep(&quot;B cell&quot;, output1$cell_type) idx2=match(TrustTab$SampleID, colnames(output1)) Bsig=output1[bidx, na.omit(idx2)] rownames(Bsig)=output1$cell_type[bidx] Bassoc=sapply(FeatTrust, function(y) sapply(1:nrow(Bsig), function(x) cor( t(Bsig[x, ]),(TrustTab[CD45F, y]), use=&quot;complete&quot;, method=&quot;spearman&quot;))) Bassoc2=sapply(FeatTrust, function(y) sapply(1:nrow(Bsig), function(x) cor.test( t(Bsig[x, ]),(TrustTab[CD45F, y]), use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value)) rownames(Bassoc)=rownames(Bsig) BassocM=Bassoc BassocM[which(Bassoc2&lt;0.1, arr.ind=T)]=0 #pdf(sprintf(&quot;rslt/TRUST4/association_Bcell_signatures_%s.pdf&quot;, Sys.Date()), width=7, height=6) par(oma=c(3, 0,0,5)) heatmap.2(Bassoc, scale=&quot;none&quot;, trace=&quot;none&quot;, col=RdBu[11:1], main=&quot;correlation&quot;) heatmap.2(BassocM, scale=&quot;none&quot;, trace=&quot;none&quot;, col=RdBu[11:1], main=&quot;significant associations p&lt;0.1 only&quot;) #dev.off() B cell frequencies based on FACS: lx1=match(colnames(Fdata), gsub(&quot;_&quot;, &quot;&quot;, unlist(strsplit( rownames(TrustTab), &quot;_CD45&quot;)))) #pdf(sprintf(&quot;rslt/TRUST4/BCR_association_FACS_%s.pdf&quot;, Sys.Date()), width=8, height=8) par(mfrow=c(2,2)) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustNclonotypes[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustNclonotypes[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;# clonotypes&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2) ,sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustNclonotypes[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustShannon[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustShannon[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Shannon Index&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustShannon[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustGini[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustGini[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Gini Index&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustGini[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustTop10[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustTop10[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Top10&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustTop10[lx1], TrustTab$TumorID[lx1]) #dev.off() "],["whole-genome-sequencing-mutations.html", "Chapter 20 Whole Genome Sequencing Mutations 20.1 Data 20.2 Plots 20.3 Coding variants 20.4 Overview of the mutations 20.5 Metacore analysis of commonly mutated pathways", " Chapter 20 Whole Genome Sequencing Mutations Whole genome sequencing was performed on XX samples by the new york genome centre. The pipeline involves: Insert information on the NYGC pipeline here 20.1 Data In this section, we load the maf output files and create lists which filter out coding mutations Determine mutational signatures by: Creating bed files with genomic locations of the SNP +- 1 base location Extracting the nucleotide sequence using bedtools Convert all mutations to C &gt; N and T &gt; N to obtain 96 mutational signatures run with single sample SigProfiler to obtain the signature scores Annotate data with common human variants # Load and save for the first time here # redo mafdir=&#39;../data/wholegenome_mutations/maf/&#39; x1=dir(mafdir, &#39;annotated.maf&#39;) #names2=sapply(strsplit( x1,&quot;--&quot;), function(x) x[1]) AllMutWGS=lapply(x1, function(x) read.delim(paste(mafdir, x, sep=&quot;&quot;), sep=&quot;\\t&quot;, skip = 1)) names(AllMutWGS)=sapply(strsplit( x1,&quot;--&quot;), function(x) x[1]) # # ## summary of the number of mutations? print(&#39;no of mutations&#39;) ## [1] &quot;no of mutations&quot; TotCount=lapply(AllMutWGS, nrow) SearchVars=c(&quot;Splice_Site&quot;, &quot;Nonstop_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Missense_Mutation&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Frame_Shift_Del&quot;) AllMutWGS=lapply(AllMutWGS, function(x) {x$VAF&lt;-x$t_alt_count/(x$t_alt_count+x$t_ref_count); x}) AllMutWGScoding=lapply(AllMutWGS, function(x) x[ x$Variant_Classification%in%SearchVars, ]) A2=sapply(AllMutWGScoding, nrow) # Save the combined mutation lists save(AllMutWGS, AllMutWGScoding, file=sprintf(&quot;outputs/WGS_mutations_coding_%s.RData&quot;, Sys.Date())) ## filters on VAF and depth? AllMutWGScoding=lapply(AllMutWGScoding, function(x) {x&lt;-x[which(x$VAF&gt;=0.1 &amp; x$n_ref_count&gt;8 &amp; (x$t_alt_count+x$t_ref_count)&gt;14), ]; x}) #load(&#39;data/wholegenome_mutations/WGS_mutations_coding_2020-10-14.RData&#39;) MeltWGSCoding=melt(AllMutWGScoding, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) MeltWGSCoding$Hum_Gene=SymHum2Rat$HGNC.symbol[match(MeltWGSCoding$Gene_Symbol, SymHum2Rat$RGD.symbol)] MeltWGSCoding$Hum_Gene[which(is.na(MeltWGSCoding$Hum_Gene))]=toupper(MeltWGSCoding$Gene_Symbol[which(is.na(MeltWGSCoding$Hum_Gene))]) MutAllCosmic=lapply(AllMutWGScoding, function(x) x[which(x$Gene_Symbol%in%RatCosmic), ]) MeltCosmic=melt(MutAllCosmic, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) # Find complete numbers here, so we don&#39;t have to go back TotCount=sapply(AllMutWGS, nrow) SearchVars=c(&quot;Splice_Site&quot;, &quot;Nonstop_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Missense_Mutation&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Frame_Shift_Del&quot;) head(TotCount) ## C1R-tumor C2N-tumor C2R1-tumor C2R2-tumor C2R3-tumor C4P-tumor ## 240153 262425 235677 222717 238324 258677 20.1.1 Extract mutation signatures Annotate the files so that the nucleotide codon can be extracted based on the genome file. For this, use all mutations (not just coding ones) See the bash file extract-trinucleotide-forSigProfiler.sh to see the output of this. The output table $fout3 should have 6 columns with the genomic location, the reference and alt allele and codon context. TBed=lapply(AllMutWGScoding, function(x) cbind(as.character(x$Chromosome), x$Start_Position-2, x$End_Position+1, as.character(x$Reference_Allele), as.character(x$Tumor_Seq_Allele2))) TBed=lapply(TBed, function(x) x[which(nchar(x[ ,4])==1), ]) sapply(1:length(TBed), function(x) write.table(TBed[[x]], file=paste(names(TBed)[x], &quot;coding_tricodon.bed&quot;, sep=&quot;_&quot;),col.names=F, row.names = F, sep=&quot;\\t&quot;, quote = F)) ## bedtools command bedtools getfasta -fi ../Genomic_Files/rn6.fa -bed $f -tab -fo $fout f3() { awk &#39;{print $1, $2, $3, $4 ,$5}&#39; &quot;$1&quot;; }; paste &lt;(f3 $f) &lt;(f3 $fout) &gt; $fout2 awk &#39;{if (length($7)==3) print $1, $2, $3, $4, $5, toupper($7)}&#39; $fout2 &gt; $fout3 ## see the bash file extract-trinucleotide-forSigProfiler.sh to see the output of this. Following running the above bash script, we can run the following extract the tri-nucleotide sequence FFiles=dir(&quot;../data/tricodon_mut_sigs/extract_context/&quot;, &quot;*.txt&quot;,full.names=T) OutputList=sapply(FFiles, function(x) FindTriNucleotideContext(x)) TableOut=sapply(1:ncol(OutputList), function(x) unlist(OutputList[3, x])) ## make a plot here # condense the type of mutations here a1=basename(FFiles) a2=sapply(strsplit(a1, &quot;_&quot;), function(x) x[1]) xall=as.character(unlist(OutputList[1, 1])) TestAll=sapply(1:ncol(TableOut), function(x) unlist(by(TableOut[ ,x], xall, sum))) TestAll2=t(TestAll)/colSums(TestAll) rownames(TestAll2)=sapply(a2, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) TestAll2melt=melt(TestAll2) #pdf(&quot;~/Desktop/Frequency_mutations_6types.pdf&quot;, height=5, width=6) ggplot(TestAll2melt, aes(x=Var1, y=value, fill=Var2))+geom_bar(stat=&quot;identity&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))+ylab(&quot;Frequency of Mutation&quot;) Figure 20.1: Frequency of different mutational codons #dev.off() write.csv(TestAll2melt, file=&quot;nature-tables/1j.csv&quot;) TableOut=cbind(as.character(unlist(OutputList[1, 1])), as.character(unlist(OutputList[2, 1])), TableOut) colnames(TableOut)=c(&quot;MutationType&quot;,&quot;Nutrinucleotide&quot;, paste(&quot;BRCA&quot;, a2, sep=&quot;::&quot;)) #write.csv(TableOut, file=&quot;../data/tricodon_mut_sigs/output4SigProfiler-jan2021.csv&quot;, sep = &quot;,&quot;, row.names = F) This is then run in python (sigprofiler) with the following code: module load gcc module load python/3.7.4 python3 import SigProfilerExtractor from sigproSS import spss_pcwag ## (spss uses only vcf files) spss_pcwag.single_sample_pcwag(&quot;output4SigProfiler-jan2021.csv&quot;, output=&quot;output-jan2021&quot;) The results from this analysis are shown below SBSprof=read.delim(&quot;../data/tricodon_mut_sigs/output-jan2021-allsamples/sig_activities.txt&quot;, sep=&quot;\\t&quot;) SBSprofb=SBSprof[ ,-1]/rowSums(SBSprof[ ,-1]) SBSprofb=SBSprofb[ ,-which(colSums(SBSprofb)==0)] rownames(SBSprofb)=SBSprof[ ,1] #pdf(sprintf(&quot;rslt/WGS/mutational_signatures_%s.pdf&quot;, Sys.Date()), height=9, width=7) heatmap.2(data.matrix(SBSprofb[ ,-1]), col=brewer.pal(9, &quot;Blues&quot;), scale=&quot;none&quot;, trace=&quot;none&quot;, Colv = NA, Rowv=NA) Figure 20.2: Alexandrov mutational signatures SBSmelt=melt(cbind(SBSprofb[ , -1], id=rownames(SBSprofb))) SBSsummary &lt;- aggregate(. ~ variable, mean, data=SBSmelt) ggplot(SBSmelt, aes(x=variable, y=value, col=variable))+geom_jitter()+geom_crossbar(data=SBSsummary , aes(ymin = value, ymax = value),size=0.5,col=&quot;black&quot;, width = .7)+theme_bw()+ylab(&quot;Percentage of mutations&quot;) Figure 20.3: Alexandrov mutational signatures write.csv(SBSmelt, file=&quot;nature-tables/Ext1j.csv&quot;) ## Assign with growth data or tumor size? tname=substr(SBSprof$Cancer.Types, 7, 20) idx=sapply(tname, function(x) grep(x, Cdata$WGS)) sizeInfo=Cdata$Tumor.diameter.sac.mm[idx] #par(mfrow=c(2,1)) cor1=cor.test(SBSprofb$SBS32+SBSprofb$SBS11, sizeInfo, use=&quot;complete&quot;) cor2=cor.test(SBSprofb$SBS32[which(SBSprofb$SBS32&gt;0)], sizeInfo[which(SBSprofb$SBS32&gt;0)], use=&quot;complete&quot;) cor3=cor.test(SBSprofb$SBS11[which(SBSprofb$SBS11&gt;0)], sizeInfo[which(SBSprofb$SBS11&gt;0)], use=&quot;complete&quot;) plot(SBSprofb$SBS32+SBSprofb$SBS11, sizeInfo, xlab=&quot;SBS 32 or 11 score&quot;, ylab=&quot;tumor size&quot;, col=ifelse(SBSprofb$SBS11==0, &quot;red&quot;, &quot;blue&quot;), main=sprintf(&quot;association between signature score and size, p=%s&quot;, round(cor1$p.value, 2))) legend(&quot;topleft&quot;,c(paste(&quot;SB32&quot;, round(cor2$p.value,2)), paste(&quot;SB11&quot;,round(cor3$p.value,2))), col=c(&quot;red&quot;, &quot;blue&quot;), lwd=2, pch=19) Figure 20.4: Alexandrov mutational signatures ## Associations version 2 SBSprofb$Age=Cdata$Time.NMU2Sac.days[sapply(substr(rownames(SBSprofb), 7, 30), function(x) grep(x, Cdata$WGS))] SBSprofb$Cohort=Cdata$Char.Cohort.Batch[sapply(substr(rownames(SBSprofb), 7, 30), function(x) grep(x, Cdata$WGS))] par(mfrow=c(2,2)) plot(SBSprofb$Age,SBSprofb$SBS1, ylab=&quot;Frequency Mut in SBS1&quot;, xlab=&quot;Time NMU2Sac&quot;, main=&quot;SBS1&quot;, col=factor(SBSprofb$Cohort)) plot( SBSprofb$Age, SBSprofb$SBS5, ylab=&quot;Frequency Mut in SBS5&quot;, xlab=&quot;Time NMU2Sac&quot;, main=&quot;SBS5&quot;, col=factor(SBSprofb$Cohort)) plot(SBSprofb$Age, SBSprofb$SBS32+SBSprofb$SBS11, ylab=&quot;SBS 32 or 11 score&quot;, xlab=&quot;tumor size&quot;, col=ifelse(SBSprofb$SBS11==0, &quot;red&quot;, &quot;blue&quot;), main=&quot;SBS11/32&quot;) Figure 20.5: Alexandrov mutational signatures 20.1.2 Annotate the data with human common variants ## The following is run independently and saved to fle ## issues with the RnvorV87 pointer when cached # remove sourcing CreateRnor87 ## Append to MeltCosmic? source(&quot;../rscript/CreateRnor87db.R&quot;) AAout=strsplit(as.character(MeltCosmic$HGVSp_Short), &quot;[0-9]+&quot;) AAwt=sapply(AAout, function(x) x[1]) AAmt=sapply(AAout, function(x) x[2]) AAno=regmatches(MeltCosmic$HGVSp_Short, gregexpr(&quot;[[:digit:]]+&quot;, MeltCosmic$HGVSp_Short)) MeltCosmic$AAno=NA MeltCosmic$AAno[which(sapply(AAno, length)==1)]=as.numeric(as.character(unlist(AAno))) FindVarTest=FindHumanAAHomolog(MeltCosmic$Gene_Symbol, AAwt, MeltCosmic$AAno, AAmt) MeltCosmic=cbind(MeltCosmic, FindVarTest) save(MeltCosmic, file=sprintf(&quot;outputs/MeltCosmic_coding_genes_WGS_rat_VAFncount%s.RData&quot;, Sys.Date())) #, sep=&quot;\\t&quot;, row.names=F) write.csv(MeltCosmic, file=&quot;outputs/SupplementalTable_AllRatMutations_annotated_w_human_homolog_VAFncount.csv&quot;, row.names = F, quote=F) From this analysis, below are the genes with mutations in known human hotpot mutations in common genes load(&quot;outputs/MeltCosmic_coding_genes_WGS_rat_VAFncount2021-01-11.RData&quot;) Xa=which(MeltCosmic$Gene_Symbol %in% BList$RatGene) Xb=match(paste(MeltCosmic$Gene_Symbol, MeltCosmic$AAno), paste(BList$RatGene,BList$RatAAno)) Xc=match(paste(MeltCosmic$Gene_Symbol, MeltCosmic$AAno), paste(ChangList2$RatGene, ChangList2$RatAAno)) x2=c(which(!is.na(Xb)), which(!is.na(Xc))) #head(MeltCosmic) Xb=match(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno), paste(BList$Gene,BList$AAno)) Xc=match(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno), paste(ChangList2$Gene, ChangList2$AAno)) x3=c(which(!is.na(Xb)), which(!is.na(Xc))) x4=unique(c(x2, x3)) kable(head(MeltCosmic)) Gene_Symbol Entrez_Gene_Id Center NCBI_Build Chromosome Start_Position End_Position Strand Variant_Classification Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 dbSNP_RS dbSNP_Val_Status Matched_Norm_Sample_Barcode Match_Norm_Seq_Allele1 Match_Norm_Seq_Allele2 Tumor_Validation_Allele1 Tumor_Validation_Allele2 Match_Norm_Validation_Allele1 Match_Norm_Validation_Allele2 Verification_Status Validation_Status Mutation_Status Sequencing_Phase Sequence_Source Validation_Method Score BAM_file Sequencer t_alt_count t_ref_count n_alt_count n_ref_count HGVSp_Short VAF variable value L1 AAno Gene AAno AA1 Variant HumGene RatSequence RatProt HumSequence HumProt HumAAno Ncor2 360801 nygenome.org rn6 chr12 37001310 37001310 Missense_Mutation SNP G G A novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 20 24 0 34 A804T 0.4545455 Tumor_Sample_Barcode C1R-tumor C1R-tumor 804 Ncor2 804 A T NCOR2 PPSPVASPPPA ENSRNOP00000001334 NA NA NA Ncor2 360801 nygenome.org rn6 chr12 37024167 37024167 Missense_Mutation SNP C C T novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 17 24 0 25 A1959V 0.4146341 Tumor_Sample_Barcode C1R-tumor C1R-tumor 1959 Ncor2 1959 A V NCOR2 PAKSLAPHHAS ENSRNOP00000001334 PAKNLAPHHAS ENSP00000384202 1990 Clip1 65201 nygenome.org rn6 chr12 38377153 38377153 Missense_Mutation SNP A A G novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 19 20 0 38 I5V 0.4871795 Tumor_Sample_Barcode C1R-tumor C1R-tumor 5 Clip1 5 I V CLIP1 MSDSILSAAA ENSRNOP00000073711 NA NA NA Clip1 65201 nygenome.org rn6 chr12 38407184 38407184 Missense_Mutation SNP A A G novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 15 11 0 43 T848A 0.5769231 Tumor_Sample_Barcode C1R-tumor C1R-tumor 848 Clip1 848 T A CLIP1 EEAVSTQTSMQ ENSRNOP00000073711 EEAVSVQRSMQ ENSP00000303585 859 Cxcr4 60628 nygenome.org rn6 chr13 45318778 45318778 Missense_Mutation SNP C C T novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 7 49 0 35 E2K 0.1250000 Tumor_Sample_Barcode C1R-tumor C1R-tumor 2 Cxcr4 2 E K CXCR4 MEIYTSD ENSRNOP00000005143 ISIYTSD ENSP00000241393 10 Nrg1 112400 nygenome.org rn6 chr16 63959893 63959893 Missense_Mutation SNP C C T novel control4-liver NA NA NA NA NA NA Unknown Untested Somatic Phase_I WGS none NA NA Illumina_HiSeq 10 47 0 26 P210S 0.1754386 Tumor_Sample_Barcode C1R-tumor C1R-tumor 210 Nrg1 210 P S NRG1 KSGTQPQTTET ENSRNOP00000072731 KSATQPQTTET ENSP00000433289 209 x2 ## [1] 114 191 211 293 319 412 423 484 486 114 191 211 259 293 319 412 423 455 484 ## [20] 486 499 x3 ## [1] 114 191 211 293 319 412 423 484 486 114 191 211 259 293 319 412 423 455 476 ## [20] 484 486 499 x4 ## [1] 114 191 211 293 319 412 423 484 486 259 455 499 476 And here, we plot the frequency of these different mutations what;s wrong here? idx=which(!is.na(MeltCosmic$HumAAno)) length(idx) ## [1] 383 Nx=paste(MeltCosmic$Gene[idx], MeltCosmic$AAno[idx]) T2=sort(table(Nx), decreasing = T) #head(T2) ind2=which(T2&gt;1) #pdf(&quot;~/Desktop/Frequency_of_mutations.pdf&quot;, height=6, width=9) barplot(T2[ind2]/31, ylim=c(0, 1), main=&quot;most frequent coding mutations with human homolog&quot;, las=2) Figure 20.6: most frequent mutations #dev.off() Nx=paste(MeltCosmic$Gene, MeltCosmic$AAno) T2=sort(table(Nx), decreasing = T) ind2=which(T2&gt;1) #pdf(&quot;~/Desktop/Frequency_of_mutations_2.pdf&quot;, height=6, width=9) barplot(T2[ind2]/31, ylim=c(0, 1), main=&quot;most frequent coding mutations &quot;, las=2) Figure 20.7: most frequent mutations #dev.off() write.csv(T2[ind2], file=&quot;nature-tables/Ext1k_maybe.csv&quot;) 20.2 Plots 20.2.1 Quick overview WGS all mutations summary: Look at the overall mutation burden, and the tumor mutational burden, defined as # coding mutations per MB. The following plot lists tumors in increasing size Make plots of: overall types of mutations per sample (ranked by size) correlation between mutation type and size type of mutation? #load(&quot;data/wholegenome_mutations/WGS_mutations_coding.RData&quot;) TabSamples=lapply(AllMutWGScoding, function(x) table(factor(x$Variant_Classification, levels=SearchVars))) TabSamples2=unlist(TabSamples) namidx=sapply(strsplit(names(TabSamples2), &quot;\\\\.&quot;), function(x) x[1]) namidx2=sapply(strsplit(names(TabSamples2), &quot;\\\\.&quot;), function(x) x[2]) namidx3=sapply(namidx, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) TotTabl=data.frame(val=TabSamples2, nam=namidx, variant=namidx2, nam2=namidx3) ## remove 0 samples # searchNo=stack(by(TotTabl$val, TotTabl$variant, sum)) # TotTabl=TotTabl[ which(TotTabl$variant %in% searchNo$ind[which(searchNo$values!=0)]), ] lx1=match(TotTabl$nam2, Cdata$NewID, function(x) tryCatch({x[1]}, error=function(e){NA})) TotTabl$Size=Cdata$Tumor.diameter.sac.mm[lx1] TotTabl=TotTabl[order(TotTabl$Size, TotTabl$val), ] levelNam=unique(TotTabl$nam2) TotTabl$nam2=factor(TotTabl$nam2, levels=levelNam) ##pdf(sprintf(&quot;rslt/WGS/coding_mutation_types_%s.pdf&quot;, Sys.Date()), height=6, width=9) #pdf(&quot;~/Desktop/No_mutations_VAFncount_adjusted_TMB.pdf&quot;, height = 5, width=7) ggplot(TotTabl, aes(x=nam2, y=val/43.423804, fill=variant))+geom_bar(stat=&quot;identity&quot;)+scale_fill_manual(values=c(&quot;black&quot;, brewer.pal(9, &quot;Set1&quot;)))+theme_bw()+theme(axis.text.x=element_text(angle=90))+ylab(&quot;Number of coding mutations/Mb&quot;)+ggtitle(&quot;sorted by increasing tumor size at sac&quot;) Figure 20.8: summary of mutation burden #dev.off() write.csv(TotTabl, file=&quot;nature-tables/1i.csv&quot;) We can also see whether any of these correlate with size, but didn’t find associations as shown below: ax1=lapply(sort(SearchVars), function(x) cor.test(TotTabl[TotTabl$variant==x , &quot;val&quot;], TotTabl[TotTabl$variant==x , &quot;Size&quot;], use=&quot;complete&quot;, method=&quot;spearman&quot;)) pvals=sapply(ax1, function(x) x$p.value) cors=sapply(ax1, function(x) x$estimate) ann_text2 &lt;- data.frame(lab=paste(&quot;cor=&quot;, round(cors, 2),&quot;p=&quot;, round(pvals,2),sep=&quot;&quot;), variant=sort(SearchVars), val=1, Size=5) ggplot(TotTabl, aes(x=Size, y=val, col=variant))+geom_point()+facet_wrap(~variant, scale=&quot;free&quot;)+geom_text(data=ann_text2, aes(label=lab)) #dev.off() #MeltWGSCoding=melt(AllMutWGScoding, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) 20.2.2 Coding variants &amp; TMB There are a few ways of figuring out the TMB. We can report the number of mutations (missense, insertion/deletion, frameshifts, nonsense) normalise the above value to the known length of coding regions in the rat genome (UCSC exon length 43,423,804) plot of TMB vs objective response rate: there is no true relationship between final tumor size and mutational burden. Could also be confounded by subclonality searchThese=c(&quot;Missense_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Frame_Shift_Del&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Nonstop_Mutation&quot;) NVar2=TotTabl[TotTabl$variant%in%searchThese, ] Ntot=by(NVar2$val, NVar2$nam, sum) # check this is unique based on the location Ntot2=stack(Ntot) colnames(Ntot2)[1]=&quot;NCodingMut&quot; Ntot2$TMB=Ntot2$NCodingMut/43.423804 TotMut=sapply(AllMutWGS, nrow) Ntot2$TotalMut=TotMut[match(Ntot2$ind, names(TotMut))] Ntot2$Tum.size=TotTabl$Size[match(Ntot2$ind, TotTabl$nam)] Ntot2=Ntot2[order(Ntot2$Tum.size), ] #Ntot2$normCov=Ntot2$values/43.423804 Ntot2$NsynFreq=Ntot2$NCodingMut/Ntot2$TotalMut Ntot2$ID2=sapply(Ntot2$ind, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) Ntot2=Ntot2[order(Ntot2$Tum.size), ] IDfact=Ntot2$ID2 Ntot2$cohort=Cdata$Char.Cohort.Batch[match(Ntot2$ID2, Cdata$NewID)] Ntot2melt=melt(Ntot2) Ntot2melt$ID2=factor(Ntot2melt$ID2, levels=IDfact) #pdf(sprintf(&quot;~/Desktop/frequency_mutational_types_VAF_ncount#2_%s.pdf&quot;, Sys.Date()), height=10, width=6) ggplot(Ntot2melt, aes(x=ID2, y=value, col=variable))+geom_bar(stat=&quot;identity&quot;)+facet_grid(variable~., scale=&quot;free_y&quot;)+ theme_bw()+theme(axis.text.x=element_text(angle=90)) Figure 20.9: summary of mutational burden? #dev.off() write.csv(Ntot2melt, file=&quot;nature-tables/1i_maybe.csv&quot;) ## As a metric for TMB, comapre the number of mutations to the covered genome Calculate whether there is an association of TMB with cohort type: Ntot2melt$size2=Cdata$Tumor.diameter.sac.mm[match(Ntot2melt$ID2, Cdata$NewID)] ax1=lapply(sort(SearchVars), function(x) cor.test(TotTabl[TotTabl$variant==x , &quot;val&quot;], TotTabl[TotTabl$variant==x , &quot;Size&quot;], use=&quot;complete&quot;, method=&quot;spearman&quot;)) pvals=sapply(ax1, function(x) x$p.value) cors=sapply(ax1, function(x) x$estimate) # p value calculation: figure out the latency and penetrance pvalOutputs=sapply(c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;,&quot;Tum.size&quot;, &quot;NsynFreq&quot;) , function(x) t.test(Ntot2[ Ntot2$cohort!=&quot;cohort-2&quot;,x]~ Ntot2$cohort[Ntot2$cohort!=&quot;cohort-2&quot;])$p.value) # cohort size calculation corOutputs=sapply(c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, &quot;NsynFreq&quot;) , function(x) cor.test(Ntot2[ ,x], Ntot2$Tum.size)$p.value) #pdf(&quot;~/Desktop/Supp_1G-H_WGS_mutations_assoc_clinico.pdf&quot;, width=8, height=5) ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(pvalOutputs, 2)), val=1, Size=5, cohort=&quot;latency-4&quot;, variable=c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, &quot;Tum.size&quot;,&quot;NsynFreq&quot;)) ggplot(Ntot2melt, aes(x=cohort, y=value, col=cohort))+geom_boxplot()+geom_point()+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))+geom_text(data=ann_text2, aes(label=lab, x=1, y=0)) Figure 20.10: assoc of mutations with cohort ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(corOutputs, 2)), val=1, Size=5, cohort=&quot;latency-4&quot;, variable=c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, &quot;NsynFreq&quot;)) ggplot(Ntot2melt, aes(x=size2, y=value, col=cohort))+geom_point()+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))+geom_text(data=ann_text2, aes(label=lab, x=10, y=0)) Figure 20.11: assoc of mutations with cohort #dev.off() write.csv(Ntot2melt, file = &quot;nature-tables/Ext1h-i.csv&quot;) # To obtain an idea of the coverage: Using bedtools and samtools here, counting only &quot;propoet pairs&quot; with maping quality greater than 30 see (https://www.biostars.org/p/11105/) samtools view -u -q 30 -f 0x2 aln.bam | coverageBed -abam stdin -b exons.bed &gt; exons.bed.proper.q30.coverage 20.3 Coding variants 20.3.1 Sites which are commonly mutated? Could this be a variant (SD strain “rsSNP”) or is it actually a mutation? Variants were annotated with snpeff. Raw data from this was obtained from https://www.biorxiv.org/content/10.1101/412924v1.full harlanRats=read.vcfR(&quot;~/Desktop/carlos_study_files/allChr.allSamps.90DR2.maf01.hweE7.noIBD.HarlanOnly.vcf.gz&quot;) harlanRats@fix[ ,1]=paste(&quot;chr&quot;, harlanRats@fix[ ,1], sep=&quot;&quot;) harlanRats@fix[ ,3]=paste(&quot;H&quot;, harlanRats@fix[ ,3], sep=&quot;.&quot;) harlanRats@meta=harlanRats@meta[-grep(&quot;##contig&quot;,harlanRats@meta )] # figure out the genotype distribution GT=sapply(1:nrow(harlanRats@gt), function(x) table(factor(harlanRats@gt[x, -1],levels=c(&quot;0/0&quot;,&quot;0/1&quot;,&quot;1/1&quot;)))) GT2=paste(GT[1, ], GT[2, ], GT[3, ], sep=&quot;,&quot;) GT3=paste(GT[1, ]/2281, GT[2, ]/2281, GT[3, ]/2281, sep=&quot;,&quot;) GenotypeS=cbind(FORMAT=&quot;GT&quot;, Annot=c(&quot;0/0,0/1,1/1&quot;), GT2, GT3 ) harlanRats@gt=GenotypeS ## save this to file or something write.vcf(harlanRats, file=&quot;~/Desktop/dbSNP_info/harlan_snps_mod_1-5-2020.vcf.gz&quot;) # loading the charles river rat snp sites CRRats=read.vcfR(&quot;~/Desktop/dbSNP_info/charles_river_200Ksnps.gz&quot;) CRRats@fix[ ,1]=paste(&quot;chr&quot;, CRRats@fix[ ,1], sep=&quot;&quot;) CRRats@fix[ ,3]=paste(&quot;CR&quot;, CRRats@fix[ ,3], sep=&quot;.&quot;) CRRats@meta=CRRats@meta[-grep(&quot;##contig&quot;,CRRats@meta )] crGT=sapply(1:nrow(CRRats@gt), function(x) table(factor(CRRats@gt[x, -1],levels=c(&quot;0/0&quot;,&quot;0/1&quot;,&quot;1/1&quot;)))) crGT2=paste(crGT[1, ], crGT[2, ], crGT[3, ], sep=&quot;,&quot;) crGT3=paste(crGT[1, ]/1780, crGT[2, ]/1780, crGT[3, ]/1780, sep=&quot;,&quot;) GenotypeS=cbind(FORMAT=&quot;GT&quot;, Annot=c(&quot;0/0,0/1,1/1&quot;), crGT2, crGT3 ) CRRats@gt=GenotypeS write.vcf(CRRats, file=&quot;~/Desktop/dbSNP_info/charlesRiver_snps_mod_1-5-2020.vcf.gz&quot;) Note that the nihRats package may not be required here. We probably just want the harlan snps # loading known list of rat snp sites nihRats=read.vcfR(&quot;../anntotations/dbSNP/rat_10116_00-All.wchr.SDsort.vcf.gz&quot;) #nihRats@fix[ ,1]=paste(&quot;chr&quot;, nihRats@fix[ ,1], sep=&quot;&quot;) r=regexpr(&quot;[a-z]+_[a-z]+&quot;,nihRats@fix[ ,8]) #ANN=[A-Z]\\\\| ModType=rep(NA, length(nihRats@fix[ ,8])) ModType[r!=-1]=regmatches(nihRats@fix[ ,8], r) #ModType=substr(ModType, 7, 25) # Harlan samples harlanRats=read.vcfR(&quot;../anntotations/dbSNP/harlan_snps_mod_1-5-2020.SDsort.vcf.gz&quot;) GT3=crGT3=1-as.numeric(sapply(strsplit(harlanRats@gt[ ,4], &quot;,&quot;), function(x) x[1])) r=regexpr(&quot;ANN=[A-Z]\\\\|[a-z]+_[a-z]+&quot;, harlanRats@fix[ ,8]) HarType=rep(NA, length(harlanRats@fix[ ,8])) HarType[r!=-1]=regmatches(harlanRats@fix[ ,8], r) HarType=substr(HarType, 7, 25) # charles river samples CRRats=read.vcfR(&quot;../anntotations/dbSNP/charlesRiver_snps_mod_1-5-2020.SDsort.vcf.gz&quot;) crGT3=1-as.numeric(sapply(strsplit(CRRats@gt[ ,4], &quot;,&quot;), function(x) x[1])) r=regexpr(&quot;ANN=[A-Z]\\\\|[a-z]+_[a-z]+&quot;, CRRats@fix[ ,8]) CRType=rep(NA, length(CRRats@fix[ ,8])) CRType[r!=-1]=regmatches(CRRats@fix[ ,8], r) CRType=substr(CRType, 7, 25) # This is just a plot that compares the different databases. ## Look at the overlap between all the databases: NIHr=paste(nihRats@fix[ ,1], nihRats@fix[ ,2]) harr=paste(harlanRats@fix[ ,1], harlanRats@fix[ ,2]) crr=paste(CRRats@fix[ ,1], CRRats@fix[ ,2]) # overview of the overlaps venn(list(NIH=NIHr, harlan=harr, CR=crr)) ## Annotate the above variants for protein coding regions first, then narrow down to known AllLevels=unique(c(HarType, CRType, ModType)) allTypes=rbind(table(factor(ModType, levels=AllLevels)), table(factor(HarType, levels=AllLevels)), table(factor(CRType, levels = AllLevels))) rownames(allTypes)=c(&quot;NIH&quot;, &quot;harlan&quot;, &quot;CR&quot;) allTypesNorm=allTypes/rowSums(allTypes) t2=melt(allTypesNorm) ggplot(t2[which(t2$value&lt;0.04), ], aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = &quot;identity&quot;)+ylab(&quot;frequency snp type&quot;)+xlab(&quot;dataset&quot;) SearchVars=c(&quot;missense_variant&quot;,&quot;stop_lost&quot;, &quot;stop_gained&quot;, &quot;initiator_codon&quot;, &quot;start_lost&quot;, &quot;frameshift_variant&quot;) NIHr2=NIHr[which(ModType%in%SearchVars)] harr2=harr[which(HarType%in%SearchVars)] crr2=crr[which(CRType%in%SearchVars)] venn(list(NIH=NIHr2, harlan=harr2, CR=crr2)) mtext(&quot;any coding variant&quot;, side=3) ## Genes affected r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, harlanRats@fix[which(HarType%in%SearchVars),8]) codhrgrp=rep(NA, length(which(HarType%in%SearchVars))) codhrgrp[r!=-1]=regmatches(harlanRats@fix[which(HarType%in%SearchVars),8], r) codhrgrp=substr(codhrgrp, 1, nchar(codhrgrp)-8) r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, CRRats@fix[which(CRType%in%SearchVars),8]) codcrgrp=rep(NA, length(which(CRType%in%SearchVars))) codcrgrp[r!=-1]=regmatches(CRRats@fix[which(CRType%in%SearchVars),8], r) codcrgrp=substr(codhrgrp, 1, nchar(codcrgrp)-8) r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, nihRats@fix[which(ModType%in%SearchVars),8]) codnihgrp=rep(NA, length(which(ModType%in%SearchVars))) codnihgrp[r!=-1]=regmatches(nihRats@fix[which(ModType%in%SearchVars),8], r) codnihgrp=substr(codnihgrp, 1, nchar(codnihgrp)-8) venn(list(NIH=codnihgrp, harlan=codhrgrp, CR=codcrgrp)) mtext(&quot;any cosmic coding variant&quot;, side=3) ## Look for Cosmic specific genes codcrgrp2=codcrgrp[codcrgrp%in%RatCosmic] codhrgrp2=codhrgrp[codhrgrp%in%RatCosmic] codnihgrp2=codnihgrp[codnihgrp%in%RatCosmic] #c(RatBreastCosmic, codhrgrp2, &quot;Tert&quot;, &quot;Atm&quot;)] Look at the distribution of mutations: Whole genome 1188 genes in more than 2 animals (1435 in at least 2) 59 variants were identified as population variant in Harlan 47 in charles river (6 are novel in this cohort only) Cosmic genes: 42 sites which have mutations in more than 2 animals 50 sites in more than 1 animal 5 sites which have been identified in GWAS studies of harlan rats. On average, the variant is found at a frequency of ~15%. The CR set, these variants appear in 50% of the population 4 of the 5 rats from above were identified in 0 sites in the nih dbSNP database for rats # Check TGFBr polymorphisms: r=grep(&quot;Tgfb&quot;, harlanRats@fix[,8]) harlanRatsTgfb=harlanRats[r] write.vcf(harlanRatsTgfb, file=&quot;~/Desktop/harlanRats_Tgfb.vcf.gz&quot;) r=grep(&quot;Tgfb&quot;, CRRats@fix[,8]) CRRatsTgfb=CRRats[r] write.vcf(CRRatsTgfb, file=&quot;~/Desktop/CRRats_Tgfb.vcf.gz&quot;) r=grep(&quot;Tgfb&quot;, nihRats@fix[,8]) nihRatsTgfb=nihRats[r] write.vcf(nihRatsTgfb, file=&quot;~/Desktop/nih_Tgfb.vcf.gz&quot;) Here, compare the frequencies of the most common mutations in our population with those reported in the harlan and charles river data-bases: filter out mutatations occuring in 2+ samples Nsamp=1 ## Firstly whole genome lx1=table(paste(MeltWGSCoding$Chromosome, MeltWGSCoding$Start_Position)) lx1=sort(lx1, decreasing=T) hist(lx1) length(which(lx1&gt;Nsamp)) ## [1] 1346 WGSList=names(lx1)[which(lx1&gt;Nsamp)] WGSList=strsplit(WGSList, &quot; &quot;) WGSList=data.frame(chr=sapply(WGSList, function(x) x[1]), pos=sapply(WGSList, function(x) x[2]), freq=lx1[which(lx1&gt;Nsamp)]) WGSList$gene=as.character(MeltWGSCoding$Gene_Symbol[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$AA=as.character(MeltWGSCoding$HGVSp_Short[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$VariantClass=as.character(MeltWGSCoding$Variant_Classification[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$Cosmic=ifelse(WGSList$gene%in%RatCosmic, 1, 0) ## Secondly, cosmic specific genes ## WGSList midx=match(WGSList$freq.Var1, paste(harlanRats@fix[ ,1], harlanRats@fix[ ,2], sep=&quot; &quot;)) WGSList$HarlanFreq=GT3[midx] midx=match(WGSList$freq.Var1, paste(nihRats@fix[ ,1], nihRats@fix[ ,2], sep=&quot; &quot;)) WGSList$rsID=nihRats@fix[midx, 3] ## CR midx=match(WGSList$freq.Var1, paste(CRRats@fix[ ,1], CRRats@fix[ ,2], sep=&quot; &quot;)) WGSList$CRFreq=crGT3[midx] WGSplot=melt(WGSList[ ,c(&quot;freq.Freq&quot;, &quot;gene&quot;, &quot;VariantClass&quot;, &quot;HarlanFreq&quot;, &quot;CRFreq&quot;, &quot;Cosmic&quot;)], measure.vars = c(&quot;HarlanFreq&quot;, &quot;CRFreq&quot;)) WGSplot=WGSplot[-which(is.na(WGSplot$value)), ] ggplot(WGSplot, aes(x=freq.Freq/16, y=value, col=VariantClass, label=WGSplot$gene))+facet_grid(~variable)+geom_point()+ geom_text(size=(WGSplot$Cosmic+3), col=&quot;black&quot;, nudge_y=0.01)+xlab(&quot;Cohort frequency&quot;)+ylab(&quot;Database frequency&quot;)+theme_bw()+theme(legend.position=&quot;bottom&quot;)+ggtitle(&quot;all genes compared to Harlan Frequencies&quot;) kable(WGSplot[WGSplot$Cosmic==1, ]) freq.Freq gene VariantClass Cosmic variable value 142 19 Prf1 Missense_Mutation 1 HarlanFreq 0.4528715 530 8 Tcf3 Missense_Mutation 1 HarlanFreq 0.0679527 676 6 Rnf213 Missense_Mutation 1 HarlanFreq 0.1402893 677 6 Rnf213 Missense_Mutation 1 HarlanFreq 0.1402893 678 6 Rnf213 Missense_Mutation 1 HarlanFreq 0.1411662 1195 2 Ptpn13 Missense_Mutation 1 HarlanFreq 0.0271811 1876 8 Tcf3 Missense_Mutation 1 CRFreq 0.1488764 2022 6 Rnf213 Missense_Mutation 1 CRFreq 0.5264045 2023 6 Rnf213 Missense_Mutation 1 CRFreq 0.5264045 2024 6 Rnf213 Missense_Mutation 1 CRFreq 0.5365169 20.4 Overview of the mutations 20.4.1 All mutations SNPs are removed from this analysis: based on frequencies in the harlan cohort Color codes: black: pink: green: blue: Nmut=86 ## was previously 92: this appears at least 17 times rmHarlanSNP=WGSList[which(!is.na(WGSList$HarlanFreq)), ] x1a=which(MeltWGSCoding$Gene_Symbol%in%rmHarlanSNP$gene &amp; MeltWGSCoding$Start_Position%in%rmHarlanSNP$pos) MeltWGSCodingB=MeltWGSCoding[-x1a, ] rGeneOut=acast(MeltWGSCodingB[ ,c(&quot;Gene_Symbol&quot;, &quot;L1&quot;, &quot;Variant_Classification&quot;)], L1~Gene_Symbol, value.var=&quot;Variant_Classification&quot;, fun.aggregate=function(x) paste(x, collapse = &quot;, &quot;)) mxl=unique(as.vector(rGeneOut)) rGeneOut2=rGeneOut rGeneOut2[grep(&quot;Nonsense&quot;,rGeneOut2)]=3 rGeneOut2[grep(&quot;Frame_Shift&quot;,rGeneOut2)]=2 rGeneOut2[grep(&quot;Missense_&quot;, rGeneOut2)]=1 rGeneOut2[grep(&quot;Splice_&quot;, rGeneOut2)]=4 rGeneOut2[which(rGeneOut2==&quot;&quot;)]=0 rGeneOut2=apply(rGeneOut2, 2, as.numeric) rownames(rGeneOut2)=rownames(rGeneOut) #get rid of genes which are associated with Olfactory receptors, AABR etc mutations rmThese=c(&quot;^AABR&quot;, &quot;^Olr&quot;, &quot;^LOC&quot;, &quot;^AC[0-9]+&quot;, &quot;^RGD&quot;, &quot;^Rpl&quot;, &quot;^1700&quot;, &quot;^RT1&quot;, &quot;^ENSRNOG&quot;, &quot;^Vom2&quot;) rmList=unlist(sapply(rmThese, function(x) grep(x, colnames(rGeneOut2)))) rGeneOut2=rGeneOut2[ ,-rmList] GeneList=colSums(sign(rGeneOut2), na.rm=T) samp2=rowSums(sign(rGeneOut2), na.rm=T) rGeneOut2=rGeneOut2[ order(samp2, decreasing=T),] topN=names(sort(GeneList, decreasing=T)[1:Nmut]) # do a plot of the top 30 most common mutations tempx=rGeneOut2[ ,topN] a2=heatmap(tempx, col=c(&quot;white&quot;, 1:9), scale=&quot;none&quot;, main=&quot;all mutations in cosmic&quot;) RowSC=ifelse(colnames(tempx)%in% c(RatCosmic, as.character(AllCancerPathwayGenes)), &quot;black&quot;, &quot;white&quot;) heatmap.2(tempx, Rowv = NA, Colv = NA,scale=&quot;none&quot;, trace=&quot;none&quot;, col=c(&quot;white&quot;, 1:4), ColSideColors=RowSC) # check if any of these are hotspot mutations Hotspots=MeltCosmic[which(!is.na(MeltCosmic$HumSequence)==T), ] #head(Hotspots) hotspotLocExtract=function(amat){ HList=sapply(1:nrow(Hotspots), function(i) ifelse(amat[match(Hotspots$L1[i], rownames(amat)),match(Hotspots$Gene_Symbol[i], colnames(amat))]&gt;0, paste(match(Hotspots$L1[i], rownames(amat)),match(Hotspots$Gene_Symbol[i], colnames(amat))), &quot;0 0&quot;)) List2=strsplit(as.character(HList), &quot; &quot;) Xcord=na.omit(as.numeric(sapply(List2, function(x) x[1]))) Ycord=na.omit(as.numeric(sapply(List2, function(x) x[2]))) return(list(X=Xcord, Y=Ycord)) } ## top 90 mutations a2=heatmap.2(sign(tempx), trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;grey&quot;)) tempxb=tempx[a2$rowInd, a2$colInd] hotspot1b=hotspotLocExtract(tempxb) rownames(tempxb)=Cdata$NewID[sapply(rownames(tempxb), function(x) grep(x, Cdata$WGS))] GeneList=unique(Hotspots$Gene_Symbol) Hotspots$Gene_Symbol ## [1] &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Cxcr4&quot; &quot;Nrg1&quot; &quot;Atp1a1&quot; &quot;Bcl10&quot; ## [7] &quot;Plcg1&quot; &quot;Ddx6&quot; &quot;Col3a1&quot; &quot;Tert&quot; &quot;Mecom&quot; &quot;Tert&quot; ## [13] &quot;Polg&quot; &quot;Ciita&quot; &quot;Rnf213&quot; &quot;Epha3&quot; &quot;Pik3r1&quot; &quot;Ros1&quot; ## [19] &quot;Braf&quot; &quot;Tert&quot; &quot;Tlx1&quot; &quot;Rnf213&quot; &quot;Epha3&quot; &quot;Fat1&quot; ## [25] &quot;Ros1&quot; &quot;Jun&quot; &quot;Tert&quot; &quot;Esr1&quot; &quot;Rnf213&quot; &quot;Aspscr1&quot; ## [31] &quot;Epha3&quot; &quot;Cacna1d&quot; &quot;Tbl1xr1&quot; &quot;Ros1&quot; &quot;Ros1&quot; &quot;Arid1a&quot; ## [37] &quot;Brd4&quot; &quot;Col3a1&quot; &quot;Tert&quot; &quot;Pold1&quot; &quot;Ncor2&quot; &quot;Clip1&quot; ## [43] &quot;Ros1&quot; &quot;Tcf3&quot; &quot;Ptprb&quot; &quot;Bcl9l&quot; &quot;Tert&quot; &quot;Pold1&quot; ## [49] &quot;Hras&quot; &quot;Robo2&quot; &quot;Robo2&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Mecom&quot; ## [55] &quot;Prcc&quot; &quot;Ros1&quot; &quot;Src&quot; &quot;Stag1&quot; &quot;Bcorl1&quot; &quot;Tert&quot; ## [61] &quot;Il21r&quot; &quot;Aff4&quot; &quot;Robo2&quot; &quot;Pms2&quot; &quot;Akt3&quot; &quot;Mecom&quot; ## [67] &quot;Ros1&quot; &quot;Acvr1&quot; &quot;Tal2&quot; &quot;Smarca4&quot; &quot;Tert&quot; &quot;Polg&quot; ## [73] &quot;Palb2&quot; &quot;Cpeb3&quot; &quot;Rnf43&quot; &quot;Prkar1a&quot; &quot;Epha3&quot; &quot;Eif3el1&quot; ## [79] &quot;N4bp2&quot; &quot;Fgfr3&quot; &quot;Fgfr3&quot; &quot;Crtc1&quot; &quot;Apc&quot; &quot;Mecom&quot; ## [85] &quot;Trim33&quot; &quot;Ros1&quot; &quot;Zfp384&quot; &quot;Hif1a&quot; &quot;Tcf3&quot; &quot;Ptprb&quot; ## [91] &quot;Ep300&quot; &quot;Fat3&quot; &quot;Fat3&quot; &quot;Rhoa&quot; &quot;Tert&quot; &quot;Hras&quot; ## [97] &quot;Men1&quot; &quot;Eif3el1&quot; &quot;Ktn1&quot; &quot;Mecom&quot; &quot;Ros1&quot; &quot;Ss18l1&quot; ## [103] &quot;Fkbp9&quot; &quot;Tcf3&quot; &quot;Ptprb&quot; &quot;Ddx6&quot; &quot;Sf3b1&quot; &quot;Tert&quot; ## [109] &quot;Hras&quot; &quot;Robo2&quot; &quot;Robo2&quot; &quot;Eif3el1&quot; &quot;Patz1&quot; &quot;Mecom&quot; ## [115] &quot;Pde4dip&quot; &quot;Ros1&quot; &quot;Msh2&quot; &quot;Tcf3&quot; &quot;Ptprb&quot; &quot;Bcorl1&quot; ## [121] &quot;Crebbp&quot; &quot;Rnf213&quot; &quot;Epha3&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Mecom&quot; ## [127] &quot;Tert&quot; &quot;Pold1&quot; &quot;Robo2&quot; &quot;Robo2&quot; &quot;Ncor2&quot; &quot;Nf2&quot; ## [133] &quot;Arhgef10&quot; &quot;Mecom&quot; &quot;Pik3ca&quot; &quot;Arid1a&quot; &quot;Tcf3&quot; &quot;Ebf1&quot; ## [139] &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Cdc73&quot; &quot;Fat1&quot; &quot;Ss18&quot; &quot;Calr&quot; ## [145] &quot;Lmna&quot; &quot;Trim33&quot; &quot;Mafb&quot; &quot;Tnc&quot; &quot;Fat3&quot; &quot;Smarca4&quot; ## [151] &quot;Foxo4&quot; &quot;Tert&quot; &quot;Picalm&quot; &quot;Hras&quot; &quot;Ncor2&quot; &quot;Clip1&quot; ## [157] &quot;Abl2&quot; &quot;Arhgap26&quot; &quot;Mecom&quot; &quot;Ctnnd1&quot; &quot;Plcg1&quot; &quot;Ret&quot; ## [163] &quot;Prex2&quot; &quot;Tnc&quot; &quot;Arid1a&quot; &quot;Fbxo11&quot; &quot;Erbb3&quot; &quot;Ptprb&quot; ## [169] &quot;Med12&quot; &quot;Tert&quot; &quot;Hras&quot; &quot;Rnf213&quot; &quot;Ncor2&quot; &quot;Clip1&quot; ## [175] &quot;Kat6b&quot; &quot;Fat1&quot; &quot;Ctcf&quot; &quot;Mecom&quot; &quot;Nras&quot; &quot;Nras&quot; ## [181] &quot;Mutyh&quot; &quot;Dicer1&quot; &quot;Ptprb&quot; &quot;Arid2&quot; &quot;Tert&quot; &quot;Shtn1&quot; ## [187] &quot;Rnf213&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Mlf1&quot; &quot;Creb3l2&quot; &quot;Lck&quot; ## [193] &quot;Arid1a&quot; &quot;Ptprb&quot; &quot;Fat3&quot; &quot;Fat3&quot; &quot;Fat3&quot; &quot;Muc16&quot; ## [199] &quot;Aff3&quot; &quot;Tert&quot; &quot;Rnf213&quot; &quot;Mecom&quot; &quot;Snd1&quot; &quot;Tcf3&quot; ## [205] &quot;Tert&quot; &quot;Tfpt&quot; &quot;Ros1&quot; &quot;Notch1&quot; &quot;Akap9&quot; &quot;Ptprd&quot; ## [211] &quot;Etv1&quot; &quot;Foxa1&quot; &quot;Ctnnb1&quot; &quot;Zmym3&quot; &quot;Tert&quot; &quot;Hras&quot; ## [217] &quot;Gnaq&quot; &quot;Cltc&quot; &quot;Pde4dip&quot; &quot;Ros1&quot; &quot;Akap9&quot; &quot;Braf&quot; ## [223] &quot;Foxa1&quot; &quot;Tert&quot; &quot;Pold1&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Mecom&quot; ## [229] &quot;Sdha&quot; &quot;Tert&quot; &quot;Men1&quot; &quot;Pten&quot; &quot;Snx29&quot; &quot;Usp32&quot; ## [235] &quot;Zcchc8&quot; &quot;Tbx3&quot; &quot;Mdm4&quot; &quot;Kat6b&quot; &quot;Mecom&quot; &quot;Pik3ca&quot; ## [241] &quot;Bcl9&quot; &quot;Pde4dip&quot; &quot;Gopc&quot; &quot;Gopc&quot; &quot;Set&quot; &quot;Creb3l2&quot; ## [247] &quot;Erc1&quot; &quot;Sfpq&quot; &quot;Arid1a&quot; &quot;Arhgap5&quot; &quot;Cbl&quot; &quot;Atm&quot; ## [253] &quot;Atr&quot; &quot;Mllt1&quot; &quot;Flna&quot; &quot;Tert&quot; &quot;Hras&quot; &quot;Tp53&quot; ## [259] &quot;Epha3&quot; &quot;Cblb&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Ddr2&quot; &quot;Pdgfra&quot; ## [265] &quot;Pdgfra&quot; &quot;Dcc&quot; &quot;Mecom&quot; &quot;Pik3ca&quot; &quot;Fat4&quot; &quot;Sdc4&quot; ## [271] &quot;Erc1&quot; &quot;Epha7&quot; &quot;Prdm2&quot; &quot;Ptprb&quot; &quot;Atm&quot; &quot;Tert&quot; ## [277] &quot;Smarce1&quot; &quot;Dgcr8&quot; &quot;Ncor2&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Mn1&quot; ## [283] &quot;Trim27&quot; &quot;Arhgap26&quot; &quot;Mecom&quot; &quot;Ppp6c&quot; &quot;Ext2&quot; &quot;Mitf&quot; ## [289] &quot;Ret&quot; &quot;Usp44&quot; &quot;Ptprb&quot; &quot;Med12&quot; &quot;Flna&quot; &quot;Tert&quot; ## [295] &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Casp3&quot; &quot;Fat1&quot; &quot;Fat1&quot; &quot;Cyld&quot; ## [301] &quot;Mecom&quot; &quot;Foxa1&quot; &quot;Dnm2&quot; &quot;Smarca4&quot; &quot;Tert&quot; &quot;Pold1&quot; ## [307] &quot;Crebbp&quot; &quot;Rara&quot; &quot;Robo2&quot; &quot;Cxcr4&quot; &quot;Ank1&quot; &quot;Syk&quot; ## [313] &quot;Csf1r&quot; &quot;Cyld&quot; &quot;Pde4dip&quot; &quot;Ros1&quot; &quot;Snd1&quot; &quot;Ncoa1&quot; ## [319] &quot;Foxa1&quot; &quot;Foxo4&quot; &quot;Flna&quot; &quot;Tert&quot; &quot;Cltc&quot; &quot;Stat5b&quot; ## [325] &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Cacna1d&quot; &quot;Casp3&quot; &quot;Fat1&quot; &quot;Fat1&quot; ## [331] &quot;Mecom&quot; &quot;Ranbp2&quot; &quot;Thrap3&quot; &quot;Foxa1&quot; &quot;Vav1&quot; &quot;Rbm10&quot; ## [337] &quot;Tert&quot; &quot;Ercc2&quot; &quot;Chd2&quot; &quot;Ncor2&quot; &quot;Clip1&quot; &quot;Hook3&quot; ## [343] &quot;Ros1&quot; &quot;Plcg1&quot; &quot;Arid1a&quot; &quot;Ptprb&quot; &quot;Fat3&quot; &quot;Fat3&quot; ## [349] &quot;Fat3&quot; &quot;Sf3b1&quot; &quot;Ncor2&quot; &quot;Mecom&quot; &quot;Akap9&quot; &quot;Gli1&quot; ## [355] &quot;Tert&quot; &quot;Men1&quot; &quot;Myh11&quot; &quot;Rabep1&quot; &quot;Ncor2&quot; &quot;Clip1&quot; ## [361] &quot;Pbrm1&quot; &quot;Itgav&quot; &quot;Gata2&quot; &quot;Zfp384&quot; &quot;Klf4&quot; &quot;Strn&quot; ## [367] &quot;Tcf3&quot; &quot;Fat3&quot; &quot;Fat3&quot; &quot;Fat3&quot; &quot;Cbl&quot; &quot;Med12&quot; ## [373] &quot;Tert&quot; &quot;Tp53&quot; &quot;Cdk12&quot; &quot;Epha3&quot; &quot;Ncor2&quot; &quot;Fat1&quot; ## [379] &quot;Fat1&quot; &quot;Pcm1&quot; &quot;Ros1&quot; &quot;Tshr&quot; &quot;Tcf3&quot; tempy=rGeneOut2[ ,match(GeneList, colnames(rGeneOut2))] #a2=heatmap.2(sign(tempy), trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;grey&quot;)) #tempyb=tempy[a2$rowInd, a2$colInd] #hotspot2=hotspotLocExtract(tempyb) #rownames(tempyb)=Cdata$NewID[sapply(rownames(tempyb), function(x) grep(x, Cdata$WGS))] ##cosmic genes x1=which(colnames(rGeneOut2)%in%RatCosmic) tempz=rGeneOut2[ ,x1] a2=heatmap.2(sign(tempz), trace=&quot;none&quot;, col=c(&quot;white&quot;, 1:4)) tempzb=tempz[a2$rowInd, a2$colInd] hotspotzb=hotspotLocExtract(tempzb) x2=which(colSums(sign(tempzb))==1) tempz2=tempzb[ , -x2] hotspotzb2=hotspotLocExtract(tempz2) rownames(tempzb)=Cdata$NewID[sapply(rownames(tempzb), function(x) grep(x, Cdata$WGS))] rownames(tempz2)=Cdata$NewID[sapply(rownames(tempz2), function(x) grep(x, Cdata$WGS))] topCOSMIC=colnames(tempz2) save(topN, topCOSMIC, file=&quot;outputs/genes-selected-common-WGX-mutations.RData&quot;) x3=table(colSums(rGeneOut2)) Note that in this table, the distribution of samples with mutations is as follows: 2695, 591, 289, 282, 131, 70, 45, 39, 40, 23, 15, 20, 19, 8, 8, 18, 10, 14, 5, 4, 14, 8, 6, 6, 1, 4, 8, 3, 2, 4, 1, 1, 1, 1, 1, 1 The number of genes which have shared mutations in 10 or more samples is: 206, which is why we have use these values here. The number of genes which are cosmic associated are: 221 and the number which appear in more than 1 sample is 82. These genes are tabulated below: (nice figures generated here) ### keep these values top90genes=colnames(rGeneOut2) #pdf(sprintf(&quot;~/Desktop/summary_mutations_top90_human_homology_%s.pdf&quot;, Sys.Date()), width=14, height=7) # # par(mar = c(4, 8, 4, 2), xpd = TRUE) # image(t(tempx), col=c(&quot;white&quot;, 1:3), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) # axis(1, at=seq(0, 1, length=ncol(tempx)), colnames(tempx), las=2, cex=0.5) # axis(2, at=seq(0, 1, length=nrow(tempx)), rownames(tempx), las=2, cex=0.5) # text(na.omit(hotspot1$Y-1)/(ncol(tempx)-1), na.omit(hotspot1$X-1)/(nrow(tempx)-1) , &quot;*&quot;) # legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:3, &quot;black&quot;), horiz = T) # par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempxb), col=c(&quot;white&quot;, 1:3), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempxb)), colnames(tempxb), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempxb)), rownames(tempxb), las=2, cex.axis=0.7) text(na.omit(hotspot1b$Y-1)/(ncol(tempxb)-1), na.omit(hotspot1b$X-1)/(nrow(tempxb)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;top 90 mutations&quot;, side=3, line=-1, outer=T) Figure 20.12: summary of mutations acccording to frequency cosmic # par(mar = c(4, 8, 4, 2), xpd = TRUE) # image(t(tempyb), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) # axis(1, at=seq(0, 1, length=ncol(tempyb)), colnames(tempyb), las=2, cex.axis=0.5) # axis(2, at=seq(0, 1, length=nrow(tempyb)), rownames(tempyb), las=2, cex.axis=0.5) # text(na.omit(hotspot2$Y-1)/(ncol(tempyb)-1), na.omit(hotspot2$X-1)/(nrow(tempyb)-1) , &quot;*&quot;) # legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) # mtext(&quot; &#39;Hotspot&#39; mutations only&quot;, side=3, line=-1, outer=T) ## Plot by picking out cancer related genes par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempzb), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempzb)), colnames(tempzb), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempzb)), rownames(tempzb), las=2, cex.axis=0.7) text(na.omit(hotspotzb$Y-1)/(ncol(tempzb)-1), na.omit(hotspotzb$X-1)/(nrow(tempzb)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;Cancer related genes&quot;, side=3, line=-1, outer=T) Figure 20.13: summary of mutations acccording to frequency cosmic par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempz2), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempz2)), colnames(tempz2), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempz2)), rownames(tempz2), las=2, cex.axis=0.7) text(na.omit(hotspotzb2$Y-1)/(ncol(tempz2)-1), na.omit(hotspotzb2$X-1)/(nrow(tempz2)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) Figure 20.14: summary of mutations acccording to frequency cosmic #dev.off() 20.5 Metacore analysis of commonly mutated pathways Save these lists for metacore allMut=unique(MeltWGSCodingB$Gene_Symbol) write.csv(allMut, file=sprintf(&quot;outputs/all_mut_rat_WGS_coding_metacore_%s.csv&quot;, Sys.Date()), row.names = F, quote=F) allMut=unique(MeltCosmic$Gene_Symbol) write.csv(allMut, file=sprintf(&quot;outputs/all_mut_rat_WES_cosmic_metacore_%s.csv&quot;, Sys.Date()), row.names = F, quote=F) Load the metacore results: Process_Networks=readxl::read_excel(&quot;../data/wholegenome_mutations/all rat WES coding process networks-jan2021.xls&quot;, 1, skip=2) #Pathway_Maps=readxl::read_excel(&quot;../data/wholegenome_mutations/all rat WES pathway maps coding-cosmic.xls&quot;, 1, skip = 2) Terms_PN=strsplit(Process_Networks$Networks, &quot;_&quot;) TermsPN1=sapply(Terms_PN, function(x) x[1]) TermsPN2=sapply(Terms_PN, function(x) x[2]) load(&quot;../anntotations/Metacore_extracted_Process_networks_nov2020.RData&quot;) n2=which(Process_Networks$FDR&lt;0.05) m1=match(Process_Networks$Networks[n2], names(PathwayMapSet)) #figure out which is significant N2=lapply(m1, function(x) which(MeltWGSCodingB$Hum_Gene %in% PathwayMapSet[[x]])) GList2=lapply(N2, function(x) MeltWGSCodingB[x, c(&quot;Hum_Gene&quot;, &quot;L1&quot;)]) SumTable2=sapply(GList2, function(x) summary(factor(x[ ,&quot;L1&quot;], levels=unique(MeltWGSCodingB$L1)))) colnames(SumTable2)=Process_Networks$Networks[n2] #listGenes=strsplit(Process_Networks$Network.Objects.from.Active.Data[1:15], &quot;,&quot;) head(SumTable2) ## Cell adhesion_Cadherins Cell adhesion_Integrin priming ## C1R-tumor 4 8 ## C2N-tumor 3 0 ## C2R1-tumor 6 5 ## C2R2-tumor 4 1 ## C2R3-tumor 5 3 ## C4P-tumor 6 3 ## Cytoskeleton_Cytoplasmic microtubules ## C1R-tumor 4 ## C2N-tumor 0 ## C2R1-tumor 2 ## C2R2-tumor 0 ## C2R3-tumor 2 ## C4P-tumor 5 ## Development_Skeletal muscle development ## C1R-tumor 2 ## C2N-tumor 3 ## C2R1-tumor 0 ## C2R2-tumor 0 ## C2R3-tumor 0 ## C4P-tumor 0 ## Development_Blood vessel morphogenesis ## C1R-tumor 5 ## C2N-tumor 4 ## C2R1-tumor 8 ## C2R2-tumor 6 ## C2R3-tumor 5 ## C4P-tumor 7 ## Signal transduction_ESR1-membrane pathway ## C1R-tumor 1 ## C2N-tumor 0 ## C2R1-tumor 3 ## C2R2-tumor 0 ## C2R3-tumor 2 ## C4P-tumor 0 ## Cell adhesion_Attractive and repulsive receptors ## C1R-tumor 1 ## C2N-tumor 1 ## C2R1-tumor 5 ## C2R2-tumor 1 ## C2R3-tumor 3 ## C4P-tumor 2 ## Signal transduction_ESR1-nuclear pathway ## C1R-tumor 8 ## C2N-tumor 0 ## C2R1-tumor 1 ## C2R2-tumor 2 ## C2R3-tumor 2 ## C4P-tumor 3 ## Cell adhesion_Integrin-mediated cell-matrix adhesion ## C1R-tumor 5 ## C2N-tumor 0 ## C2R1-tumor 4 ## C2R2-tumor 2 ## C2R3-tumor 2 ## C4P-tumor 1 ## Cytoskeleton_Regulation of cytoskeleton rearrangement ## C1R-tumor 2 ## C2N-tumor 0 ## C2R1-tumor 2 ## C2R2-tumor 0 ## C2R3-tumor 1 ## C4P-tumor 1 ## Development_Regulation of angiogenesis Muscle contraction ## C1R-tumor 11 5 ## C2N-tumor 3 2 ## C2R1-tumor 8 1 ## C2R2-tumor 6 0 ## C2R3-tumor 4 0 ## C4P-tumor 3 2 ## Signal transduction_ERBB-family signaling ## C1R-tumor 5 ## C2N-tumor 0 ## C2R1-tumor 1 ## C2R2-tumor 2 ## C2R3-tumor 0 ## C4P-tumor 0 ## Signal transduction_NOTCH signaling ## C1R-tumor 7 ## C2N-tumor 4 ## C2R1-tumor 3 ## C2R2-tumor 3 ## C2R3-tumor 2 ## C4P-tumor 4 ## Development_Neuromuscular junction Cell adhesion_Amyloid proteins ## C1R-tumor 6 6 ## C2N-tumor 0 4 ## C2R1-tumor 1 1 ## C2R2-tumor 0 1 ## C2R3-tumor 0 2 ## C4P-tumor 3 4 ## Cell cycle_Mitosis Signal Transduction_Cholecystokinin signaling ## C1R-tumor 5 2 ## C2N-tumor 4 0 ## C2R1-tumor 2 2 ## C2R2-tumor 2 0 ## C2R3-tumor 5 2 ## C4P-tumor 7 0 ## Development_Neurogenesis_Axonal guidance ## C1R-tumor 1 ## C2N-tumor 0 ## C2R1-tumor 5 ## C2R2-tumor 1 ## C2R3-tumor 4 ## C4P-tumor 1 ## Cell adhesion_Platelet aggregation ## C1R-tumor 3 ## C2N-tumor 0 ## C2R1-tumor 2 ## C2R2-tumor 0 ## C2R3-tumor 1 ## C4P-tumor 1 ## Development_ERK5 in cell proliferation and neuronal survival ## C1R-tumor 0 ## C2N-tumor 0 ## C2R1-tumor 0 ## C2R2-tumor 1 ## C2R3-tumor 1 ## C4P-tumor 1 ## Cell adhesion_Cell-matrix interactions ## C1R-tumor 12 ## C2N-tumor 5 ## C2R1-tumor 2 ## C2R2-tumor 2 ## C2R3-tumor 2 ## C4P-tumor 4 ## Development_Neurogenesis in general Cell cycle_Meiosis ## C1R-tumor 7 5 ## C2N-tumor 1 1 ## C2R1-tumor 5 2 ## C2R2-tumor 2 1 ## C2R3-tumor 3 2 ## C4P-tumor 8 1 ## Cardiac development_Wnt_beta-catenin, Notch, VEGF, IP3 and integrin signaling ## C1R-tumor 7 ## C2N-tumor 1 ## C2R1-tumor 3 ## C2R2-tumor 1 ## C2R3-tumor 1 ## C4P-tumor 1 ## Cell cycle_G1-S Growth factor regulation ## C1R-tumor 4 ## C2N-tumor 0 ## C2R1-tumor 2 ## C2R2-tumor 2 ## C2R3-tumor 0 ## C4P-tumor 0 ## Development_EMT_Regulation of epithelial-to-mesenchymal transition ## C1R-tumor 5 ## C2N-tumor 4 ## C2R1-tumor 6 ## C2R2-tumor 4 ## C2R3-tumor 5 ## C4P-tumor 4 ## Inflammation_IL-6 signaling Cytoskeleton_Spindle microtubules ## C1R-tumor 1 6 ## C2N-tumor 4 4 ## C2R1-tumor 2 2 ## C2R2-tumor 3 1 ## C2R3-tumor 1 3 ## C4P-tumor 2 9 ## Proliferation_Negative regulation of cell proliferation ## C1R-tumor 1 ## C2N-tumor 6 ## C2R1-tumor 7 ## C2R2-tumor 2 ## C2R3-tumor 3 ## C4P-tumor 1 ## Cytoskeleton_Actin filaments Immune response_Phagocytosis ## C1R-tumor 1 7 ## C2N-tumor 0 0 ## C2R1-tumor 1 3 ## C2R2-tumor 0 3 ## C2R3-tumor 1 1 ## C4P-tumor 0 1 ## do this for ERS1 networks er1=GList2[[8]] #6,8, 35 axtemp=table(er1[ ,1], er1[,2]) colnames(axtemp)=Cdata$NewID[sapply(colnames(axtemp), function(x) grep(x, Cdata$WGS) ) ] a2=heatmap.2(sign(axtemp)) Figure 20.15: summary of metacore common mutated pathways image(t(a2$carpet), xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, col=c(&quot;white&quot;, &quot;skyblue&quot;)) axis(1, at=seq(0, 1, length=nrow(axtemp)), colnames(a2$carpet), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=ncol(axtemp)), rownames(a2$carpet), las=2, cex.axis=0.7) Figure 20.16: summary of metacore common mutated pathways # load(&quot;../anntotations/Metacore_extracted_pathway_maps_nov2020.RData&quot;) # n2=which(Pathway_Maps$FDR...7&lt;0.001) # m1=match(Pathway_Maps$Maps[n2], names(PathwayMapSet)) # N2=lapply(m1, function(x) which(MeltWGSCodingB$Hum_Gene %in% PathwayMapSet[[x]])) # GList2=lapply(N2, function(x) MeltWGSCodingB[x, c(&quot;Hum_Gene&quot;, &quot;L1&quot;)]) # SumTable3=sapply(GList2, function(x) summary(factor(x[ ,&quot;L1&quot;], levels=unique(MeltWGSCodingB$L1)))) # colnames(SumTable3)=Pathway_Maps$Maps[n2] # #listGenes=strsplit(Process_Networks$Network.Objects.from.Active.Data[1:15], &quot;,&quot;) # head(SumTable3) #pdf(&quot;rslt/WGS/Metacore_analysis_coding_mutations.pdf&quot;, height=13, width=13) par(mfrow=c(1,2), mar=c(2,2, 2,2)) n2=order(Process_Networks$FDR) barplot(-log10(as.numeric(Process_Networks$FDR[n2[1:15]])), names.arg = Process_Networks$Networks[n2[1:15]], las=2, main=&quot;Process networks all coding&quot;, horiz = T, cex.names = 0.5) n2=order(Process_Networks$FDR) # barplot(-log10(as.numeric(Process_Networks$FDR...11[n2[1:15]])), names.arg = Process_Networks$Networks[n2[1:15]], las=2, main=&quot;Process networks cosmic only&quot;, horiz = T, cex.names = 0.5) # barplot(-log10(as.numeric(Pathway_Maps$FDR[1:15])), names.arg = Pathway_Maps$Maps[1:15], las=2, main=&quot;Pathway Maps&quot;, horiz = T, cex.names = 0.5) Figure 20.17: summary of metacore common mutated pathways par(oma=c(2, 0,0,3)) rNames=strsplit(colnames(SumTable2), &quot;_&quot;) rNames2=sapply(rNames, function(x) x[1]) cCols=brewer.pal(12,&quot;Set3&quot;)[factor(rNames2)] lx=order(cCols) colnames(SumTable2)=sapply(rNames, function(x) x[2]) rownames(SumTable2)=Cdata$NewID[sapply(rownames(SumTable2), function(x) grep(x, Cdata$WGS))] heatmap.2(sign(SumTable2[, lx]), scale=&quot;none&quot;, trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;skyblue&quot;), main=&quot;Process Networks: scaled No mutations affecting each pathway&quot;, ColSideColors = cCols[lx], Colv = NA) Figure 20.18: summary of metacore common mutated pathways write.csv(SumTable2[, lx], file=&quot;nature-tables/1l_samples_with_muttions.csv&quot;) # par(oma=c(2, 0,0,3)) # # rNames=strsplit(colnames(SumTable3), &quot;_&quot;) # # rNames2=sapply(rNames, function(x) x[1]) # # cCols=brewer.pal(12,&quot;Set3&quot;)[factor(rNames2)] # # lx=order(cCols)r # heatmap.2(SumTable3, scale=&quot;col&quot;, trace=&quot;none&quot;, col=brewer.pal(9, &quot;Blues&quot;), main=&quot;Pathway Maps&quot;) # write.csv(SumTable3, file=&quot;outputs/no mutations pathway maps all coding.csv&quot;) # write.csv(SumTable2, file=&quot;outputs/no mutations process networks all coding.csv&quot;) #dev.off() "],["mutations-in-rna.html", "Chapter 21 Mutations in RNA 21.1 Haplotype caller 21.2 Load files 21.3 Identifying polymorphisms: compare frequencies in CD45 and Ep data 21.4 Find coding mutations which are specific to ep cells 21.5 Filtering WGS data based on CD45 data", " Chapter 21 Mutations in RNA In this section, we will check RNA data for the common mutations identified in the previous section. Some of these mutations could be uncharacterised polymoprphisms, and if this is the case, we will see in both CD45 and Epithelial fractions 21.1 Haplotype caller Mutational calling from RNA data was performed using haplotype caller. The key steps are: run haplotype caller run snpeff to annotate from snpsift to convert to a text file that can be read Note that a dbSNP file is needed to filter for polymorphisms. We have used the harlan variants to perform filtering due to similarity in population frequencies in the previous section An example of the code is shown here: # pipeline # 1. run haplotyper # A. Assemble BAM files Inputs: $1 fastq file (if paired end, $2 will be the other) $2 aligned bam # fastq to unaligned BAM java -jar $PICARD/picard-2.8.0.jar FastqToSam F1=$1 O=$uBAM\\ ## for paired end: # java -jar $PICARD/picard-2.8.0.jar FastqToSam F1=$1 F2=$2 O=$uBAM \\ # change read groups in aligned BAM file to ensure uniqueness java -jar $PICARD/picard-2.8.0.jar AddOrReplaceReadGroups \\ I= $2 \\ O= &quot;${2/.bam/ARG.bam}&quot; \\ ID=$baseName2 \\ LB=library \\ PL=illumina \\ PU=hiseq2000 \\ SM=$baseName2 \\ CN=MFBC \\ DT=2018-08-20T00:00:00-0400 # merge files gatk MergeBamAlignment \\ --REFERENCE_SEQUENCE ../Alignment/rn6.fa \\ --UNMAPPED_BAM $uBAM \\ --ALIGNED_BAM &quot;${2/.bam/ARG.bam}&quot; \\ --OUTPUT $mBAM \\ --INCLUDE_SECONDARY_ALIGNMENTS false \\ --PAIRED_RUN true \\ --VALIDATION_STRINGENCY SILENT #B. Mark duplicates gatk MarkDuplicates \\ --INPUT $mBAM \\ --OUTPUT $dBAM \\ --CREATE_INDEX true \\ --VALIDATION_STRINGENCY SILENT \\ --METRICS_FILE ${outName}.metrics #C. Split sigar reads gatk SplitNCigarReads \\ -R ../Alignment/rn6.fa \\ -I $dBAM \\ -O $cBAM \\ #D. Base recalibration gatk BaseRecalibrator \\ -R ../Alignment/rn6.fa \\ -I $cBAM \\ -O ${outName}_recalibration \\ -known-sites harlan_snps_mod_1-5-2020.SDsort.vcf.gz gatk ApplyBQSR \\ --add-output-sam-program-record \\ -R ../Alignment/rn6.fa \\ -I $cBAM \\ --use-original-qualities \\ -O $bBAM \\ --bqsr-recal-file ${outName}_recalibration #E. Haplotype calling gatk HaplotypeCaller \\ -R ../Alignment/rn6.fa \\ -I $bBAM \\ -L ../Alignment/rn6_refGene_intervals.bed \\ -O ${outName}HCR.vcf.gz \\ --dont-use-soft-clipped-bases true \\ --standard-min-confidence-threshold-for-calling 20 \\ --dbsnp all_rat_snps_0504.SD.vcf.gz # F. Filtering gatk VariantFiltration \\ --R ../Alignment/rn6.fa \\ --V ${outName}HCR.vcf.gz \\ --window 35 \\ --cluster 3 \\ --filter-name &quot;FS&quot; \\ --filter &quot;FS &gt; 30.0&quot; \\ --filter-name &quot;QD&quot; \\ --filter &quot;QD &lt; 2.0&quot; \\ -O ${outName}_filt_HCR # 2. run SnpEff to annotate java -jar $SNPEFF/snpEff.jar -v Rnor_6.0.86 /n/scratch2/at268/carlos_data/20191030_Ep_NMU1_CGDA7428_S1_R1_001_filt &gt; /n/scratch2/at268/carlos_data/20191030_Ep_NMU1_CGDA7428_S1_R1_001_filt_ann # 3. run SnpSift to save as a .txt file that can be easily read cat $f | $SNPEFF/scripts/vcfEffOnePerLine.pl | java -jar $SNPEFF/SnpSift.jar extractFields -e &quot;&quot; - CHROM POS ID REF ALT QUAL FILTER AF AC DP MQ &quot;ANN[*].ANNOTATION&quot; &quot;ANN[*].GENE&quot; &quot;ANN[*].GENEID&quot; &quot;ANN[*].BIOTYPE&quot; &quot;ANN[*].HGVS_C&quot; &quot;ANN[*].HGVS_P&quot; &quot;ANN[*].CDNA_POS&quot; &quot;ANN[*].CDNA_LEN&quot; &quot;ANN[*].CDS_POS&quot; &quot;ANN[*].CDS_LEN&quot; &quot;ANN[*].AA_POS&quot; &quot;ANN[*].AA_LEN&quot; &quot;NMD[*].NUMTR&quot; &quot;NMD[*].PERC&quot; &quot;GEN[*]&quot; &gt; $ofile From processing the mutational information: Header information - Genotypes: GT: genotype AD: Allelic depths for the ref and alt alleles in the order listed DP: Approximate read depth (reads with MQ=255 or with bad mates are filtered) GQ: Genotype Quality PL: Normalized, Phred-scaled likelihoods for genotypes Header info: Info AC: Allele count in genotypes, for each ALT allele, in the same order as listed AF: Allele Frequency, for each ALT allele, in the same order as listed AN: Total number of alleles in called genotypes DB: dbSNP Membership DP: Approximate read depth; some reads may have been filtered ExcessHet: Phred-scaled p-value for exact test of excess heterozygosity FS: Phred-scaled p-value using Fisher’s exact test to detect strand bias MLEAC: Maximum likelihood expectation (MLE) for the allele counts (not necessarily the same as the AC) MLEAF: Maximum likelihood expectation (MLE) for the allele frequency (not necessarily the same as the AF) MQ: RMS Mapping Quality QD:Variant Confidence/Quality by Depth SOR: Symmetric Odds Ratio of 2x2 contingency table to detect strand bias SnpEff Annotations: Allele : C Annotation: missense_variant Annotation_Impact MODERATE Gene_Name Raet1l Gene_ID ENSRNOG00000040300 Feature_Type transcript Feature_ID ENSRNOT00000062027.4 Transcript_BioType protein_coding HGVS.c c.1017C&gt;G HGVS.p p.Cys339Trp cDNA.pos / cDNA.length 1017/1185 CDS.pos / CDS.length 1017/1185 AA.pos / AA.length 339/394 missense_variant|MODERATE|Raet1l|ENSRNOG00000040300|transcript|ENSRNOT00000062027.4|protein_coding|6/7|c.1017C&gt;G|p.Cys339Trp|1017/1185|1017/1185|339/394|| AC=2;AF=1.00;AN=2;DP=49;ExcessHet=3.0103;FS=0.000;MLEAC=2;MLEAF=1.00;MQ=60.00;QD=34.99;SOR=0.874;ANN=GC|frameshift_variant&amp;splice_region_variant|HIGH|Reps1|ENSRNOG00000059224|transcript|ENSRNOT00000089607.1|protein_coding|8/29|c.119dupC|p.Gln41fs|142/2608|120/1842|40/613||INFO_REALIGN_3_PRIME;LOF=(Reps1|ENSRNOG00000059224|2|0.50) AC=2;AF=1.00;AN=2;BaseQRankSum=1.593;ClippingRankSum=0.000;DP=9;ExcessHet=3.0103;FS=0.000;MLEAC=2;MLEAF=1.00;MQ=60.00;MQRankSum=0.000;QD=33.20;ReadPosRankSum=0.765;SOR=1.609;ANN=AT|frameshift_variant&amp;stop_gained|HIGH|Pacs1|ENSRNOG00000020350|transcript|ENSRNOT00000027632.5|protein_coding|3/24|c.464dupA|p.Tyr155fs|464/2886|464/2886|155/961||;LOF=(Pacs1|ENSRNOG00000020350|1|1.00);NMD=(Pacs1|ENSRNOG00000020350|1|1.00) 21.2 Load files hfiles=dir(&quot;../data/haplotypeCaller/output_HaplotypeCaller_May/characterisation/&quot;, pattern=&quot;.txt&quot;, full.names = T) allHfiles=list() allCodingHaplo=list() allCosmicHaplo=list() for (i in 1:length(hfiles)){ A1=read.delim(hfiles[i], sep=&quot;\\t&quot;, stringsAsFactors = F) A1[which(A1==(-1), arr.ind=T)]=&quot;&quot; cNames=sapply(strsplit(colnames(A1)[12:27], &quot;\\\\.\\\\.\\\\.\\\\.&quot;), function(x) x[2]) cNames[13:16]=paste(c(&quot;LOF&quot;, &quot;LOF&quot;, &quot;NMD&quot;, &quot;NMD&quot;), cNames[13:16], sep=&quot;.&quot;) colnames(A1)[12:28]=c(cNames, &quot;GEN&quot;) GEN2=sapply(strsplit(A1$GEN, &quot;:&quot;), function(x) x[2]) gRef=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[1]) gAlt=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[length(x)]) A1$n_ref=as.numeric(gRef) A1$n_alt=as.numeric(gAlt) A1$VAF=A1$n_alt/(A1$n_alt+A1$n_ref) allHfiles[[i]]=A1[which(A1$n_ref+A1$n_alt&gt;10), ] allCodingHaplo[[i]]=A1[which(A1$HGVS_P!=&quot;&quot; &amp; A1$n_ref+A1$n_alt&gt;10), ] allCosmicHaplo[[i]]=A1[which(A1$GENE%in%RatCosmic &amp; A1$n_ref+A1$n_alt&gt;10), ] } ## names of the files fNam=unlist(strsplit(hfiles, &quot;_filt_HCR_ann_siftB.txt&quot;)) #remove HCR where not needed fNam=unlist(strsplit(fNam, &quot;.vcf.g&quot;)) fNam2=paste(fNam, &quot;.fastq.gz&quot;, sep=&quot;&quot;) fNam2=sapply(strsplit(fNam2, &quot;/&quot;), function(x) x[length(x)]) idx1=infoTableFinal$SampleID[match(fNam2, infoTableFinal$FqFile)] idx1[which(is.na(idx1))]=fNam2[which(is.na(idx1))] idx1[grep(&quot;CD45plus&quot;, idx1)]=substr(idx1[grep(&quot;CD45plus&quot;, idx1)],10, 21) # sNames=paste(tempAnnot$Rat_ID[idx1],tempAnnot$Location[idx1], tempAnnot$Fraction[idx1], sep=&quot;_&quot;) names(allHfiles)=idx1 names(allCodingHaplo)=idx1 names(allCosmicHaplo)=idx1 # remove the samples which do not pass QC idx2rm=setdiff(grep(&quot;fastq.gz&quot;, idx1), grep(&quot;CD45plus&quot;, idx1)) ## write all these lists to file allHfiles=allHfiles[-idx2rm] allCodingHaplo=allCodingHaplo[-idx2rm] allCosmicHaplo=allCosmicHaplo[-idx2rm] save(allHfiles,allCodingHaplo, allCodingHaplo, file=sprintf(&quot;outputs/HaplotypeVariants_characterisation_all_%s.Rdata&quot;, Sys.Date())) 21.3 Identifying polymorphisms: compare frequencies in CD45 and Ep data Search for whether mutations in the cosmic set is present in the RNA data. We will firstly look at the 90 most common genes, and then repeat the same for the top cosmic genes. # replace topN with topCOSMIC # templace tempxb with tempz2 MeltWGSCoding$mutPos=paste(MeltWGSCoding$Gene_Symbol, MeltWGSCoding$Start_Position) MeltWGSCodingB$mutPos=paste(MeltWGSCodingB$Gene_Symbol, MeltWGSCodingB$Start_Position) MallCodingHaplo=melt(allCodingHaplo, measure.var=&quot;POS&quot;) MallCodingHaplo$mutPos=paste(MallCodingHaplo$GENE, MallCodingHaplo$value) xb=sort(table(MeltWGSCodingB$mutPos[MeltWGSCodingB$Gene_Symbol%in%topCOSMIC]), decreasing = T) allCoding_top90=lapply(allCodingHaplo, function(x) x[which(paste(x$GENE, x$POS)%in%names(xb)), ]) mallCoding90=melt(allCoding_top90, measure.var=&quot;POS&quot;) mallCoding90$mutUnique=paste(mallCoding90$GENE, mallCoding90$value) x1=table(mallCoding90$mutUnique) tabN=acast(mallCoding90[ , c(&quot;L1&quot;, &quot;GENE&quot;)],L1~GENE) #heatmap.2(tabN, Colv = NA, trace=&quot;none&quot;, scale=&quot;none&quot;, col=c(&quot;white&quot;, brewer.pal(5, &quot;Blues&quot;))) cNamesMatch=match(colnames(tabN), colnames(tempz2)) tabN2=matrix(0, nrow=nrow(tabN), ncol=ncol(tempz2)) tabN2[ ,cNamesMatch]=tabN colnames(tabN2)=colnames(tempz2) rownames(tabN2)=rownames(tabN) id2=grep(&quot;Ep&quot;, rownames(tabN)) id3=grep(&quot;CD45$&quot;, rownames(tabN)) id4=grep(&quot;CD45plus&quot;, rownames(tabN)) tabN2[id2, ]=sign(tabN2[id2, ]) tabN2[id3, ]=sign(tabN2[id3, ])*2 tabN2[id4, ]=sign(tabN2[id4, ])*3 tabN2=tabN2[c(id2, id3, id4), ] #heatmap.2(tabN2, Colv = NA, Rowv = NA, trace=&quot;none&quot;, scale=&quot;none&quot;, col=c(&quot;white&quot;, brewer.pal(5, &quot;Blues&quot;))) image(t((tabN2)), col=c(&quot;white&quot;, 1:3), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempz2)), colnames(tempz2), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tabN2)), rownames(tabN2), las=2, cex.axis=0.7) lx2=sapply(allCoding_top90, nrow) barplot(lx2, ylab=&quot;no# mutations in top 90 genes&quot;, las=2) 21.4 Find coding mutations which are specific to ep cells Here, look for mutations from RNA which are present in the epithelial cells specific VarTypes=c(&quot;frameshift&quot;, &quot;missense&quot;, &quot;start_lost&quot;, &quot;stop_gained&quot;, &quot;nonsense&quot;, &quot;stop_retained&quot;) n2=unique(unlist(sapply(VarTypes, function(x) grep(x, MallCodingHaplo$ANNOTATION)))) MallCodingHaploFunc=MallCodingHaplo[ n2, ] ## Look at epithealial samples xa=grep(&quot;Ep&quot;, MallCodingHaploFunc$L1) MallEpi=MallCodingHaploFunc[xa, ] EpVarList=table(MallCodingHaploFunc$GENE[xa]) EpVarNames=names(EpVarList) EpVarN2=names(EpVarList[which(EpVarList&gt;1)]) EpVarListB=table(MallCodingHaploFunc$mutPos[xa]) EpLoc=names(EpVarListB)[which(EpVarListB&gt;1)] ## Look at CD45 samples xa=grep(&quot;CD45$&quot;, MallCodingHaploFunc$L1) CDVarList=table(MallCodingHaploFunc$GENE[xa]) CDVarNames=names(CDVarList) CDVarN2=names(CDVarList[which(CDVarList&gt;=1)]) CDVarListB=table(MallCodingHaploFunc$mutPos[xa]) CDLoc=names(CDVarListB)[which(CDVarListB&gt;=1)] ## Look at CD45 normal xa=grep(&quot;CD45plus&quot;, MallCodingHaploFunc$L1) nCD45VarList=table(MallCodingHaploFunc$GENE[xa]) nCD45VarNames=names(nCD45VarList) nCD45VarN2=names(nCD45VarList[which(nCD45VarList&gt;=1)]) nCD45VarListB=table(MallCodingHaploFunc$mutPos[xa]) nCDLoc=names(nCD45VarListB)[which(nCD45VarListB&gt;=1)] ## List of ep-spec variants eplist1=setdiff(setdiff(EpVarN2, CDVarN2), nCD45VarN2) ## Obtain the list of Ep-specific variants and cross-reference with genomic data WGSListgenes=table(MeltWGSCodingB$Gene_Symbol) WGSListgenes=names(WGSListgenes)[which(WGSListgenes&gt;1)] RList=MallEpi[which(MallEpi$GENE%in%eplist1), ] Rlist2=table(RList$mutPos) Rlist2=names(Rlist2)[which(Rlist2&gt;1)] WGSList=paste(MeltWGSCodingB$Gene_Symbol, MeltWGSCodingB$Start_Position) t2=table(WGSList) WGSList=names(t2)[which(t2&gt;1)] mutlist=intersect(Rlist2, WGSList) #pdf(&quot;~/Desktop/RNA-specific-mutations-gene-level.pdf&quot;, height=6, width=6) venn(list(Ep=EpVarNames, CD45=CDVarNames, nCD45=nCD45VarNames)) mtext(&quot;no genes w mutations overlapping in different fractions&quot;) venn(list(Ep=EpVarN2, CD45=CDVarN2, nCD45=nCD45VarN2)) mtext(&quot;no genes with overlapping variants in 2+ samples&quot;) venn(list(Ep_RNA=eplist1, Ep_WGS=WGSListgenes)) mtext(&quot;No genes with overlaps in 2+ samples&quot;) #dev.off() Location specific mutations: #pdf(&quot;~/Desktop/RNA-specific-mutations-location-level.pdf&quot;, height=7, width=10) venn(list(Ep=EpLoc, CD45=CDLoc, nCD45=nCDLoc)) mtext(&quot;no locations with overlapping variants in 2+ samples&quot;) venn(list(Ep_RNA=Rlist2, Ep_WGS=WGSList)) mtext(&quot;No ep. specifc locations with overlaps in 2+ samples&quot;) # plots of mutational frequencies of the locations in A1 Ttemp=acast(MallCodingHaploFunc[which(MallCodingHaploFunc$mutPos%in%mutlist), c(&quot;L1&quot;, &quot;mutPos&quot;)], mutPos~L1) Ttemp=cbind(Ttemp, 0) colnames(Ttemp)[ncol(Ttemp)]=&quot;NMU13_LAU_Ep&quot; ax2=setdiff(unique(MallEpi$L1), colnames(Ttemp)) Wtemp=acast(MeltWGSCoding[which(MeltWGSCodingB$mutPos%in%mutlist), c(&quot;L1&quot;, &quot;mutPos&quot;, &quot;Start_Position&quot;)],mutPos~L1) Wtemp[which(is.na(Wtemp), arr.ind = T)]=0 par(oma=c(5, 5, 1, 1)) image(sign((Ttemp)), col=c(&quot;white&quot;,&quot;darkblue&quot;), xaxt=&quot;none&quot;, yaxt=&quot;none&quot;) axis(1, at=seq(0, 1, length=nrow(Ttemp)),rownames(Ttemp), las=2) axis(2, at=seq(0, 1, length=ncol(Ttemp)),colnames(Ttemp), las=2) mtext(&quot;Mutations in RNA &amp; in WGS data&quot;) par(oma=c(5, 5, 1, 1)) image(sign(Wtemp), col=c(&quot;white&quot;,&quot;darkblue&quot;), xaxt=&quot;none&quot;, yaxt=&quot;none&quot;) axis(1, at=seq(0, 1, length=nrow(Wtemp)),rownames(Wtemp), las=2) axis(2, at=seq(0, 1, length=ncol(Wtemp)),colnames(Wtemp), las=2) # mtext(&quot;Mutations in WGS data&quot;) # par(oma=c(2,2,2,5)) # heatmap.2(t(ExprVSD), trace=&quot;none&quot;, scale=&quot;none&quot;, Rowv = NA, Colv = NA, col=RdBu[11:1], # main=&quot;gene expression, vst transformed&quot;) # heatmap.2(t(ExprVSD), trace=&quot;none&quot;, scale=&quot;col&quot;, Rowv = NA, Colv = NA, col=RdBu[11:1], # main=&quot;gene expression, col scaled&quot;) # # # calculate the correlation between mutation and expression # # mvals=rep(NA, nrow(ExprVSD)) # names(mvals)=rownames(ExprVSD) # mvalsP=mvals # # x1=match(colnames(ExprVSD), colnames(Ttemp)) # for (i in 1:length(mvals)){ # ax1=glm(sign(Ttemp[i, x1])~ExprVSD[i, ], family =binomial(link=&quot;logit&quot;)) # mvals[i]=coefficients(ax1)[2] # mvalsP[i]=summary(ax1)$coefficients[2,4] # } # # barplot(mvalsP,las=2, ylab = &quot;P value of association bw mutation and expression&quot;) #dev.off() There are 6 mutations which are found in both the RNA and WGS data (2+ samples, not found in RNAseq) 21.5 Filtering WGS data based on CD45 data Use the entire list for WGS Find mutations in CD45 (either) and remove #head(MeltWGSCoding) #head(MallCodingHaploFunc) lx1=grep(&quot;CD45&quot;, MallCodingHaploFunc$L1) mutDiff=setdiff(MeltWGSCodingB$mutPos, MallCodingHaploFunc$mutPos[lx1]) NUnique=table(MeltWGSCodingB$mutPos[MeltWGSCodingB$mutPos%in%mutDiff]) NUniqueB=table(MeltWGSCodingB$Gene_Symbol[MeltWGSCodingB$mutPos%in%mutDiff]) rGeneOut=acast(MeltWGSCodingB[ MeltWGSCodingB$mutPos%in%names(NUnique),c(&quot;Gene_Symbol&quot;, &quot;L1&quot;, &quot;Variant_Classification&quot;)], L1~Gene_Symbol, value.var=&quot;Variant_Classification&quot;, fun.aggregate=function(x) paste(x, collapse = &quot;, &quot;)) mxl=unique(as.vector(rGeneOut)) rGeneOut2b=rGeneOut rGeneOut2b[grep(&quot;Nonsense&quot;,rGeneOut2b)]=3 rGeneOut2b[grep(&quot;Frame_Shift&quot;,rGeneOut2b)]=2 rGeneOut2b[grep(&quot;Missense_&quot;, rGeneOut2b)]=1 rGeneOut2b[grep(&quot;Splice_&quot;, rGeneOut2b)]=4 rGeneOut2b[which(rGeneOut2b==&quot;&quot;)]=0 rGeneOut2b=apply(rGeneOut2b, 2, as.numeric) rownames(rGeneOut2b)=rownames(rGeneOut) rmThese=c(&quot;^AABR&quot;, &quot;^Olr&quot;, &quot;^LOC&quot;, &quot;^AC[0-9]+&quot;, &quot;^RGD&quot;, &quot;^Rpl&quot;, &quot;^1700&quot;, &quot;^RT1&quot;, &quot;^ENSRNOG&quot;, &quot;^Vom2&quot;) rmList=unlist(sapply(rmThese, function(x) grep(x, colnames(rGeneOut2b)))) rGeneOut2b=rGeneOut2b[ ,-rmList] NtopA=names(NUnique)[which(NUnique&gt;6)] NtopAb=unique(sapply(strsplit(NtopA, &quot; &quot;), function(x) x[1])) tempAnew=rGeneOut2b[, na.omit(match(NtopAb, colnames(rGeneOut2b)))] tempA=heatmap.2(sign(tempAnew)) tempA=tempAnew[tempA$rowInd, tempA$colInd] HSAnew=hotspotLocExtract(tempA) ## NtopB=which(NUnique&gt;10) NtopB=names(NUniqueB)[which(NUniqueB&gt;1)] NtopB2=NtopB[NtopB%in%RatCosmic] tempBnew=rGeneOut2b[, na.omit(match(NtopB2, colnames(rGeneOut2b)))] tempB=heatmap.2(sign(tempBnew)) tempB=tempBnew[tempB$rowInd, tempB$colInd] HSBnew=hotspotLocExtract(tempB) #pdf(&quot;~/Desktop/WGS-coding-mutations-not-in-CD45-RNA.pdf&quot;, height=7, width=13) ## Commonly mutated Genes: par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempA), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempA)), colnames(tempA), las=2, cex.axis=0.5) axis(2, at=seq(0, 1, length=nrow(tempA)), rownames(tempA), las=2, cex.axis=0.5) text(na.omit(HSAnew$Y-1)/(ncol(tempA)-1), na.omit(HSAnew$X-1)/(nrow(tempA)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;top 118 mutations&quot;, side=3, line=-1, outer=T) #dev.off() #pdf(&quot;~/Desktop/WGS-COSMIC-mutations-not-in-CD45-RNA.pdf&quot;, height=7, width=13) ## Commonly mutated Genes: par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempB), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempB)), colnames(tempB), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempB)), rownames(tempB), las=2, cex.axis=0.7) text(na.omit(HSBnew$Y-1)/(ncol(tempB)-1), na.omit(HSBnew$X-1)/(nrow(tempB)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;Common COSMIC mutations&quot;, side=3, line=-1, outer=T) #dev.off() "],["mutations-in-progression-cohort.html", "Chapter 22 Mutations in progression cohort 22.1 Summary of common mutations: 22.2 Look at the common mutations (cosmic ones) 22.3 Also look at the top RNA-mutations with are Ep/DN specific", " Chapter 22 Mutations in progression cohort hfiles=dir(&quot;../data/haplotypeCaller/output_HaplotypeCaller_May/progression/&quot;, pattern=&quot;.txt&quot;, full.names = T) allHfilesP=list() allCodingHaploP=list() allCosmicHaploP=list() for (i in 1:length(hfiles)){ A1=read.delim(hfiles[i], sep=&quot;\\t&quot;, stringsAsFactors = F) A1[which(A1==(-1), arr.ind=T)]=&quot;&quot; cNames=sapply(strsplit(colnames(A1)[12:27], &quot;\\\\.\\\\.\\\\.\\\\.&quot;), function(x) x[2]) cNames[13:16]=paste(c(&quot;LOF&quot;, &quot;LOF&quot;, &quot;NMD&quot;, &quot;NMD&quot;), cNames[13:16], sep=&quot;.&quot;) colnames(A1)[12:28]=c(cNames, &quot;GEN&quot;) GEN2=sapply(strsplit(A1$GEN, &quot;:&quot;), function(x) x[2]) gRef=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[1]) gAlt=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[length(x)]) A1$n_ref=as.numeric(gRef) A1$n_alt=as.numeric(gAlt) A1$VAF=A1$n_alt/(A1$n_alt+A1$n_ref) allHfilesP[[i]]=A1[which(A1$n_ref+A1$n_alt&gt;10), ] allCodingHaploP[[i]]=A1[which(A1$HGVS_P!=&quot;&quot; &amp; A1$n_ref+A1$n_alt&gt;10), ] allCosmicHaploP[[i]]=A1[which(A1$GENE%in%RatCosmic &amp; A1$n_ref+A1$n_alt&gt;10), ] } ## names of the files fNam=unlist(strsplit(hfiles, &quot;_filt_HCR_ann_siftB.txt&quot;)) #remove HCR where not needed fNam=unlist(strsplit(fNam, &quot;.vcf.g&quot;)) fNam2=paste(fNam, &quot;.fastq.gz&quot;, sep=&quot;&quot;) fNam2=sapply(strsplit(fNam2, &quot;/&quot;), function(x) x[length(x)]) idx1=infoTableFinal$SampleID[match(fNam2, infoTableFinal$FqFile)] idx1[which(is.na(idx1))]=fNam2[which(is.na(idx1))] idx1[grep(&quot;CD45plus&quot;, idx1)]=substr(idx1[grep(&quot;CD45plus&quot;, idx1)],10, 21) # sNames=paste(tempAnnot$Rat_ID[idx1],tempAnnot$Location[idx1], tempAnnot$Fraction[idx1], sep=&quot;_&quot;) names(allHfilesP)=idx1 names(allCodingHaploP)=idx1 names(allCosmicHaploP)=idx1 # remove the samples which do not pass QC idx2rm=setdiff(grep(&quot;fastq.gz&quot;, idx1), grep(&quot;CD45plus&quot;, idx1)) ## write all these lists to file allHfilesP=allHfilesP[-idx2rm] allCodingHaploP=allCodingHaploP[-idx2rm] allCosmicHaploP=allCosmicHaploP[-idx2rm] save(allHfilesP,allCodingHaploP, allCodingHaploP, file=sprintf(&quot;outputs/HaplotypeVariants_progression_all_%s.Rdata&quot;, Sys.Date())) 22.1 Summary of common mutations: MallCodingHaploP=melt(allCodingHaploP, measure.var=&quot;POS&quot;) MallCodingHaploP$mutPos=paste(MallCodingHaploP$GENE, MallCodingHaploP$value) VarTypes=c(&quot;frameshift&quot;, &quot;missense&quot;, &quot;start_lost&quot;, &quot;stop_gained&quot;, &quot;nonsense&quot;, &quot;stop_retained&quot;) n2=unique(unlist(sapply(VarTypes, function(x) grep(x, MallCodingHaploP$ANNOTATION)))) MallCodingHaploFuncP=MallCodingHaploP[ n2, ] ## Look at epithealial samples look at topCOSMIC: xa=grep(&quot;Ep&quot;, MallCodingHaploFuncP$L1) MallEpi=MallCodingHaploFuncP[xa, ] EpVarList=table(MallCodingHaploFuncP$GENE[xa]) EpVarNames=names(EpVarList) EpVarN2=names(EpVarList[which(EpVarList&gt;1)]) EpVarListB=table(MallCodingHaploFuncP$mutPos[xa]) EpLoc=names(EpVarListB)[which(EpVarListB&gt;1)] ## Look at CD45 samples xa=grep(&quot;CD45$&quot;, MallCodingHaploFuncP$L1) CDVarList=table(MallCodingHaploFuncP$GENE[xa]) CDVarNames=names(CDVarList) CDVarN2=names(CDVarList[which(CDVarList&gt;=1)]) CDVarListB=table(MallCodingHaploFuncP$mutPos[xa]) CDLoc=names(CDVarListB)[which(CDVarListB&gt;=1)] ## Look at DN samples xa=grep(&quot;DN&quot;, MallCodingHaploFuncP$L1) DNVarList=table(MallCodingHaploFuncP$GENE[xa]) DNVarNames=names(DNVarList) DNVarN2=names(DNVarList[which(DNVarList&gt;1)]) DNVarListB=table(MallCodingHaploFuncP$mutPos[xa]) DNLoc=names(DNVarListB)[which(DNVarListB&gt;1)] #pdf(&quot;~/Desktop/Supp5-progression-RNA-specific-mutations-gene-level.pdf&quot;, height=6, width=6) venn(list(Ep=EpVarNames, CD45=CDVarNames, DN=DNVarNames)) mtext(&quot;no genes w mutations overlapping in different fractions&quot;) venn(list(Ep=EpVarN2, CD45=CDVarN2, DN=DNVarN2)) mtext(&quot;no genes with overlapping variants in 2+ samples&quot;) venn(list(Ep=EpLoc, CD45=CDLoc, DN=DNLoc)) mtext(&quot;no locations with overlapping variants in 2+ samples&quot;) #dev.off() 22.2 Look at the common mutations (cosmic ones) MallCodingHaploFuncPC=MallCodingHaploFuncP[which(MallCodingHaploFuncP$GENE%in%topCOSMIC), ] xab=unique(MallCodingHaploFuncPC$ANNOTATION) MallCodingHaploFuncPC$ANNOTATION[grep(&quot;frameshift_variant&quot;,MallCodingHaploFuncPC$ANNOTATION )]=&quot;frameshift_variant&quot; MallCodingHaploFuncPC$ANNOTATION[grep(&quot;missense_variant&quot;,MallCodingHaploFuncPC$ANNOTATION )]=&quot;missense_variant&quot; MallCodingHaploFuncPC$ANNOTATION=as.numeric(factor(MallCodingHaploFuncPC$ANNOTATION)) AcastTab=acast(MallCodingHaploFuncPC[ ,c(&quot;L1&quot;, &quot;GENE&quot;, &quot;ANNOTATION&quot;)], L1~GENE, fun.aggregate = max) AcastTab[which(AcastTab==&quot;-Inf&quot;, arr.ind = T)]=0 indx=rownames(AcastTab)[grep(&quot;Ep&quot;, rownames(AcastTab))] indx=substr(indx, 1, nchar(indx)-3) n2=unlist(sapply(indx, function(x) grep(x, rownames(AcastTab)))) AcastTab[grep(&quot;CD45&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;CD45&quot;, rownames(AcastTab)), ]) AcastTab[grep(&quot;DN&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;DN&quot;, rownames(AcastTab)), ])*2 AcastTab[grep(&quot;Ep&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;Ep&quot;, rownames(AcastTab)), ])*3 #pdf(&quot;~/Desktop/FigureS3_biphasic_mutations_again.pdf&quot;, height=12, width=15) image(AcastTab[n2, ], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, col=c(&quot;white&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;forestgreen&quot;)) axis(1, at=seq(0, 1, length=nrow(AcastTab[n2, ])), rownames(AcastTab[n2, ]), las=2) axis(2, at=seq(0, 1, length=ncol(AcastTab)), colnames(AcastTab), las=2) #dev.off() 22.3 Also look at the top RNA-mutations with are Ep/DN specific gListN=setdiff(unique(c(EpLoc, DNLoc)), CDLoc) gListNsplit=sapply(strsplit(gListN,&quot; &quot;), function(x) x[1]) # gene list new gnew=which(gListNsplit%in%RatCosmic) gListNsub=gListN[gnew] IndN=MallCodingHaploFuncP[which(MallCodingHaploFuncP$mutPos%in%gListNsub), ] "],["trichrome-staining.html", "Chapter 23 Trichrome staining 23.1 Associations with cellular fraction (wsi) 23.2 Associations with CD8 content 23.3 Associations with growth and treatment 23.4 Association with hyperinflammatory status", " Chapter 23 Trichrome staining Quantification of trichrome staining was performed in Qupath using the following steps: image is loaded as a “DAB” image using “gold standard” trichrome-stained images with good stroma and epithelial content, estimate the stain vectors Perform color deconvolution A pixel classifier was used to estimate trichrome content A pixel classifier was used to estimate tumor content A snippet of the qupath script is shown below: # insert some text here setImageType(&#39;BRIGHTFIELD_H_DAB&#39;); setColorDeconvolutionStains(&#39;{&quot;Name&quot; : &quot;trichrome&quot;, &quot;Stain 1&quot; : &quot;Hematoxylin&quot;, &quot;Values 1&quot; : &quot;0.71695 0.66336 0.21432 &quot;, &quot;Stain 2&quot; : &quot;DAB&quot;, &quot;Values 2&quot; : &quot;0.46299 0.76212 0.45257 &quot;, &quot;Background&quot; : &quot; 255 255 255 &quot;}&#39;); selectAnnotations(); addPixelClassifierMeasurements(&quot;stroma_classifier_again&quot;, &quot;stroma_classifier_again&quot;) selectAnnotations(); addPixelClassifierMeasurements(&quot;test_tumor&quot;, &quot;test_tumor&quot;) def entry = getProjectEntry() def name = entry.getImageName() + &#39;.txt&#39; def path = buildFilePath(PROJECT_BASE_DIR, &#39;annotation results&#39;) mkdirs(path) path = buildFilePath(path, name) saveAnnotationMeasurements(path) 23.1 Associations with cellular fraction (wsi) # load the data TrichromeData=read.xlsx(&quot;../data/trichrome-staining-result.xls&quot;, 1) midx=match(TrichromeData$SampleID, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) Cdata$Trichrome=NA Cdata$Trichrome[na.omit(midx)]=TrichromeData$Percentage.Stroma[which(!is.na(midx))] t2=WSIvalFracs[, match(rownames(df.Spatial), colnames(WSIvalFracs))] df.Spatial=cbind(df.Spatial, t(t2)) #head(df.Spatial) df.Spatial$Trichrome=NA midx=match(TrichromeData$SampleID, rownames(df.Spatial)) df.Spatial$Trichrome[na.omit(midx)]=TrichromeData$Percentage.Stroma[-which(is.na(midx))] # plot associations n2=c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;SMA&quot;, &quot;Unclass&quot;, &quot;EpCAM: SMA&quot;) #pdf(&quot;~/Desktop/richrome-association-WSI-data-Calc2.pdf&quot;, width=6, height=5) par(mfrow=c(2,3)) for (i in n2){ a1=cor.test(df.Spatial$Trichrome, df.Spatial[ ,match(i, colnames(df.Spatial))], use=&quot;complete&quot;) n1=paste(i, &quot;cor:&quot;, round(a1$estimate,1), &quot;p:&quot;, round(a1$p.value,2)) plot(df.Spatial$Trichrome, df.Spatial[ ,match(i, colnames(df.Spatial))], main=n1, xlab=&quot;Trichrome&quot;, ylab=i) } #dev.off() 23.2 Associations with CD8 content par(mfrow=c(1,2)) a1=wilcox.test(df.Spatial$Trichrome~df.Spatial$IF.EpCAMcut)$p.val boxplot(df.Spatial$Trichrome~df.Spatial$IF.EpCAMcut, main=sprintf(&quot;Ep int. fraction %s&quot;, round(a1,2))) a1=wilcox.test(df.Spatial$Trichrome~df.Spatial$CD8Fraccut)$p.val boxplot(df.Spatial$Trichrome~df.Spatial$CD8Fraccut, main=sprintf(&quot;CD8 fraction vs Trichrome %s&quot;, round(a1,2))) 23.3 Associations with growth and treatment #pdf(&quot;~/Desktop/testoutput.pdf&quot;, height=6, width=6) pv1=sapply(c(&quot;PDL1&quot;, &quot;LY&quot;, &quot;PDL1+LY&quot;), function(x) wilcox.test(df.Spatial$Trichrome[which(df.Spatial$Treatment%in%c(&quot;Vehicle&quot;, x))]~ df.Spatial$Treatment[which(df.Spatial$Treatment%in%c(&quot;Vehicle&quot;, x))])$p.value) names(pv1)=c(&quot;PDL1&quot;, &quot;LY&quot;, &quot;PDL1+LY&quot;) ggplot(df.Spatial[ ,c(&quot;Treatment&quot;, &quot;Trichrome&quot;)], aes(x=Treatment, y=Trichrome, col=Treatment))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=ColMerge[ ,1])+theme_bw()+ggtitle(paste(paste(names(pv1), round(pv1, 2)), collapse=&quot;;&quot;)) Figure 23.1: Trichrome staining with treatment ggplot(df.Spatial[ ,c(&quot;Trichrome&quot;, &quot;Growth&quot;)], aes(x=Growth, y=Trichrome, col=Growth))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=c(ColSize, &quot;black&quot;))+theme_bw()+ggtitle(paste(&quot;growth&quot;, round(a1a, 2))) Figure 23.2: Trichrome with growth print(p) Figure 23.3: Trichrome with growth write.csv(df.Spatial[ ,c(&quot;Trichrome&quot;, &quot;Growth&quot;, &quot;Treatment&quot;)], file=&quot;nature-tables/3g_trichrome.csv&quot;) 23.4 Association with hyperinflammatory status We can also do a boxplot for trichrome status and whether it associates with hyperinflammation in our rat samples vstEpInf$Inflammation3 ## [1] inf grow grow inf grow grow grow grow grow grow grow grow grow grow inf ## [16] grow inf grow inf grow ## Levels: grow inf ax1=colnames(vstEpInf) ax1 ## [1] &quot;10L_D_Ep&quot; &quot;10R_BL_Ep&quot; &quot;11L_B_Ep&quot; &quot;11N_D_Ep&quot; &quot;11R_D_Ep&quot; &quot;11R_C_Ep&quot; ## [7] &quot;12L_D_Ep&quot; &quot;14N_C_Ep&quot; &quot;14N_D_Ep&quot; &quot;14R_B_Ep&quot; &quot;15N_C_Ep&quot; &quot;16L_C_Ep&quot; ## [13] &quot;17N_D_Ep&quot; &quot;2N__Ep&quot; &quot;3N_B_Ep&quot; &quot;3R_C_Ep&quot; &quot;6R_B_Ep&quot; &quot;7N_A_Ep&quot; ## [19] &quot;8L_D_Ep&quot; &quot;8R_CU_Ep&quot; t2=match(gsub(&quot;_&quot;, &quot;&quot;, substr( ax1, 1, nchar(ax1)-2)), rownames(df.Spatial)) t2 ## [1] 3 6 9 10 12 11 14 17 NA NA NA 24 29 31 35 37 49 NA 56 58 newTab=data.frame(trichrome=df.Spatial[na.omit(t2), &quot;Trichrome&quot;], inf=vstEpInf$Inflammation3[-which(is.na(t2))], names=ax1[-which(is.na(t2))]) head(newTab) ## trichrome inf names ## 1 0.1766188 inf 10L_D_Ep ## 2 NA grow 10R_BL_Ep ## 3 0.1331813 grow 11L_B_Ep ## 4 0.3740436 inf 11N_D_Ep ## 5 0.1616192 grow 11R_D_Ep ## 6 0.1245987 grow 11R_C_Ep ggplot(newTab, aes(y=trichrome,x=inf))+geom_boxplot()+geom_point()+theme_bw() write.csv(newTab, file=&quot;nature-tables/Ext5z_trichrome.csv&quot;) "],["writing-files-to-file.html", "Chapter 24 Writing files to file", " Chapter 24 Writing files to file Update the metadata file: write to file: updated ext data table spatial information summary star aligned table colData information collapsed information on wsi/facs write.xlsx(Cdata, file=sprintf(&quot;../metadata/Carlos_samples_list_master_updated_%s.xlsx&quot;, Sys.Date())) x1=Cdata$NewID[match(rownames(df.Spatial), gsub(&quot;_&quot;,&quot;&quot;, Cdata$TumorID))] head(x1) ## [1] &quot;P24T1&quot; &quot;P24T2&quot; &quot;P24T3&quot; &quot;P25T1&quot; &quot;P25T2&quot; &quot;P26T1&quot; write.csv(df.Spatial, file=&quot;nature-tables/summary_spatial_information.csv&quot;) colnames(allstarFinal)=infoTableFinal$TumorIDnew[match(colnames(allstarFinal), rownames(infoTableFinal))] infoTableFinal2=infoTableFinal[ ,c(&quot;TumorIDnew&quot;,&quot;Growth&quot;, &quot;CD8Frac&quot;, &quot;TumSize&quot;, &quot;Time.NMU2Sac&quot;, &quot;Age.Injection&quot;,&quot;Treatment&quot;,&quot;Cohort&quot;, &quot;SizeCat&quot;)] write.csv(infoTableFinal2, file=&quot;nature-tables/infoTableFinal2_output.csv&quot;) write.csv(allstarFinal, file=&quot;nature-tables/allstarFinal_output.csv&quot;) colTestCD8=c(&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, &quot;T.cell.CD8._TIMER&quot;, &quot;T.cell.CD8._CIBERSORT&quot;,&quot;T.cell.CD8._CIBERSORT.ABS&quot;, &quot;T.cell.CD8._EPIC&quot;) # colTestCD8=c(&quot;CD8.EpDomTiles&quot;,&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, ) indx1=c(&quot;CD8.WSI&quot;, &quot;CD8Frac.WSI&quot;, &quot;CD8_EPorSMARatio.WSI&quot;,&quot;CD8_AnyEPRatio.WSI&quot;, &quot;CD8_EPRatio.WSI&quot;,&quot;CD8normTumSize&quot;, &quot;CD8.EpBoundingBox&quot;, &quot;log2CD8_EPorSMARatio.WSI&quot;, &quot;log2CD8_EPRatio.WSI&quot;) # df2=data.frame(CD8.WSI=t(WSIvals[ 1, ]), # #CD8Frac.WSI=t(WSIvalFracs[ ,2]), # CD8_EPorSMARatio.WSI=(WSIvals[1, ]/colSums(WSIvals[2:4, ])), # CD8_AnyEPRatio.WSI=(WSIvals[1, ]/colSums(WSIvals[2:3, ])), # CD8_EPRatio.WSI=(WSIvals[1, ]/(WSIvals[2, ])), # CD8normTumSize=(WSIvals[1, ]/df.Spatial) # ) Below is the session info sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Catalina 10.15.7 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] grid stats4 parallel stats graphics grDevices utils ## [8] datasets methods base ## ## other attached packages: ## [1] rmarkdown_2.6 org.Hs.eg.db_3.11.4 ## [3] pander_0.6.3 knitr_1.31 ## [5] forestplot_1.10.1 checkmate_2.0.0 ## [7] magrittr_1.5 writexl_1.3.1 ## [9] xlsx_0.6.4.2 vcfR_1.12.0 ## [11] tcR_2.3.2 igraph_1.2.6 ## [13] gridExtra_2.3 spatstat_1.64-1 ## [15] rpart_4.1-15 nlme_3.1-149 ## [17] spatstat.data_1.4-3 scales_1.1.1 ## [19] RColorBrewer_1.1-2 reshape2_1.4.4 ## [21] pamr_1.56.1 survival_3.2-7 ## [23] cluster_2.1.0 limma_3.44.3 ## [25] kableExtra_1.2.1 HTSanalyzeR2_0.99.19 ## [27] heatmap.plus_1.3 GSVA_1.36.3 ## [29] GSEABase_1.50.1 graph_1.66.0 ## [31] annotate_1.66.0 XML_3.99-0.5 ## [33] gplots_3.1.0 ggplot2_3.3.2 ## [35] GenVisR_1.20.0 EnsDb.Hsapiens.v86_2.99.0 ## [37] ensembldb_2.12.1 AnnotationFilter_1.12.0 ## [39] GenomicFeatures_1.40.1 AnnotationDbi_1.50.3 ## [41] DT_0.16 dplyr_1.0.2 ## [43] DESeq2_1.28.1 SummarizedExperiment_1.18.2 ## [45] DelayedArray_0.14.1 matrixStats_0.57.0 ## [47] Biobase_2.48.0 GenomicRanges_1.40.0 ## [49] GenomeInfoDb_1.24.2 colorspace_1.4-1 ## [51] Biostrings_2.56.0 XVector_0.28.0 ## [53] IRanges_2.22.2 S4Vectors_0.26.1 ## [55] biomaRt_2.44.4 beeswarm_0.2.3 ## [57] AnnotationHub_2.20.2 BiocFileCache_1.12.1 ## [59] dbplyr_1.4.4 BiocGenerics_0.34.0 ## ## loaded via a namespace (and not attached): ## [1] shinydashboard_0.7.1 tidyselect_1.1.0 ## [3] RSQLite_2.2.1 htmlwidgets_1.5.2 ## [5] BiocParallel_1.22.0 gmp_0.6-1 ## [7] munsell_0.5.0 codetools_0.2-16 ## [9] preprocessCore_1.50.0 miniUI_0.1.1.1 ## [11] withr_2.3.0 Category_2.54.0 ## [13] highr_0.8 rstudioapi_0.11 ## [15] robustbase_0.93-6 splots_1.54.0 ## [17] tensor_1.5 rJava_0.9-13 ## [19] labeling_0.4.2 GenomeInfoDbData_1.2.3 ## [21] polyclip_1.10-0 hwriter_1.3.2 ## [23] farver_2.0.3 bit64_4.0.5 ## [25] vctrs_0.3.4 generics_0.0.2 ## [27] xfun_0.21 R6_2.4.1 ## [29] locfit_1.5-9.4 msigdbr_7.2.1 ## [31] bitops_1.0-6 spatstat.utils_1.17-0 ## [33] fgsea_1.14.0 assertthat_0.2.1 ## [35] promises_1.1.1 pinfsc50_1.2.0 ## [37] gtable_0.3.0 affy_1.66.0 ## [39] goftest_1.2-2 cellHTS2_2.52.0 ## [41] rlang_0.4.8 genefilter_1.70.0 ## [43] splines_4.0.2 rtracklayer_1.48.0 ## [45] lazyeval_0.2.2 abind_1.4-5 ## [47] BiocManager_1.30.10 yaml_2.2.1 ## [49] backports_1.1.10 httpuv_1.5.4 ## [51] RBGL_1.64.0 tools_4.0.2 ## [53] bookdown_0.21 affyio_1.58.0 ## [55] ellipsis_0.3.1 Rcpp_1.0.5 ## [57] plyr_1.8.6 progress_1.2.2 ## [59] zlibbioc_1.34.0 purrr_0.3.4 ## [61] RCurl_1.98-1.2 prettyunits_1.1.1 ## [63] deldir_0.1-29 openssl_1.4.3 ## [65] viridis_0.5.1 data.table_1.13.2 ## [67] colourpicker_1.1.0 mvtnorm_1.1-1 ## [69] ProtGenerics_1.20.0 xlsxjars_0.6.1 ## [71] hms_0.5.3 mime_0.9 ## [73] evaluate_0.14 xtable_1.8-4 ## [75] compiler_4.0.2 tibble_3.0.4 ## [77] KernSmooth_2.23-17 crayon_1.3.4 ## [79] htmltools_0.5.0 mgcv_1.8-33 ## [81] pcaPP_1.9-73 later_1.1.0.1 ## [83] geneplotter_1.66.0 rrcov_1.5-5 ## [85] DBI_1.1.0 MASS_7.3-53 ## [87] rappdirs_0.3.1 Matrix_1.2-18 ## [89] permute_0.9-5 vsn_3.56.0 ## [91] RankProd_3.14.0 pkgconfig_2.0.3 ## [93] GenomicAlignments_1.24.0 xml2_1.3.2 ## [95] foreach_1.5.1 prada_1.63.0 ## [97] stringdist_0.9.6.3 webshot_0.5.2 ## [99] rvest_0.3.6 BioNet_1.47.0 ## [101] stringr_1.4.0 VariantAnnotation_1.34.0 ## [103] digest_0.6.26 vegan_2.5-6 ## [105] fastmatch_1.1-0 curl_4.3 ## [107] shiny_1.5.0 Rsamtools_2.4.0 ## [109] gtools_3.8.2 FField_0.1.0 ## [111] lifecycle_0.2.0 viridisLite_0.3.0 ## [113] askpass_1.1 BSgenome_1.56.0 ## [115] pillar_1.4.6 lattice_0.20-41 ## [117] KEGGREST_1.28.0 fastmap_1.0.1 ## [119] httr_1.4.2 DEoptimR_1.0-8 ## [121] GO.db_3.11.4 interactiveDisplayBase_1.26.3 ## [123] glue_1.4.2 png_0.1-7 ## [125] shinythemes_1.1.2 iterators_1.0.13 ## [127] BiocVersion_3.11.1 bit_4.0.4 ## [129] stringi_1.5.3 blob_1.2.1 ## [131] caTools_1.18.0 memoise_1.1.0 ## [133] Rmpfr_0.8-1 ape_5.4-1 "],["bicseqout.html", "Chapter 25 BICseqout 25.1 Move to combined data load page 25.2 Data Summary", " Chapter 25 BICseqout 25.1 Move to combined data load page 25.1.1 Annotation files Information on chromosome sizes, cytobands and centromere locations were obtained from the UCSC genome browser. Create a TxDb object from a gtf file and save information txRn6=makeTxDbFromGFF(&quot;dontUpload/rn6_refGene.gtf&quot;, organism=&quot;Rattus norvegicus&quot;) txRn6&lt;-genes(txRn6) AllCosmic=read.csv(&quot;anntotations/Census_COSMIC_Feb2020.csv&quot;) RatCosmic=unique(na.omit(SymHum2Rat$RGD.symbol[match(AllCosmic$Gene.Symbol, SymHum2Rat$HGNC.symbol)])) ImmPortGenes=read.csv(&quot;anntotations/ImmPort_Set.csv&quot;) InnateDBGenes=read.csv(&quot;anntotations/innatedb_curated_genes.csv&quot;) # convert to Rat genes AllImmGenes=unique(toupper(c(as.character(ImmPortGenes$Symbol), as.character(InnateDBGenes$Gene.Symbol)))) RatAllImm=na.omit(SymHum2Rat$RGD.symbol[match(AllImmGenes, SymHum2Rat$HGNC.symbol)]) 25.1.2 Sample data Load BICseq2 data for all tested samples: allfiles=dir(&quot;../data/CNV_calls/&quot;,&quot;2_scale$&quot;, full.names = T) CNVL2=lapply(allfiles, function(x) read.delim(x, stringsAsFactors = F)) meltCN=melt(CNVL2, measure.vars=c(&quot;log2.copyRatio&quot;)) AllDCN=data.frame(sampleID=meltCN$L1, chrom=substr(meltCN$chrom, 4, 5), start.pos=meltCN$start, end.pos=meltCN$end, n.probes=meltCN$binNum, mean=meltCN$value, call=ifelse(meltCN$value&gt;0.3, &quot;+&quot;, ifelse(meltCN$value&lt;(-0.3), &quot;-&quot;, &quot;0&quot;))) AllDCN2=data.frame(sample=meltCN$L1, chromosome=meltCN$chrom, start=meltCN$start, end=meltCN$end, n.probes=meltCN$binNum, segmean=2*2^(meltCN$value), call=ifelse(meltCN$value&gt;0.3, &quot;+&quot;, ifelse(meltCN$value&lt;(-0.3), &quot;-&quot;, &quot;0&quot;))) AllDCN2$chromosome=factor(AllDCN2$chromosome, levels=unique(AllDCN2$chromosome)) CNVGRanges=GRanges(seqnames = AllDCN$chrom, ranges=IRanges(start=AllDCN$start.pos, end=AllDCN$end.pos), copy_ratio=AllDCN$mean, call=AllDCN$call) # load all and save the temporary outputs to file to see how the parameters change # pdf(&quot;rslt/BICseq_summary_2scale.pdf&quot;, width=12, height=6) # cnFreq_mod(AllDCN2,CN_low_cutoff=1.4, CN_high_cutoff=2.8, genome=cytoInfo) # dev.off() 25.2 Data Summary 25.2.1 Frequency of gains and losses across the genome # plot the frequencies Samp1=cnFreq_mod(AllDCN2,CN_low_cutoff=1.4, CN_high_cutoff=2.8, genome=cytoInfo) Samp1$plot 25.2.2 Loci which have a hit in at least 30% of samples # Filter out gain and loss regions LocationsA=Samp1$data[which(Samp1$data$gainProportion&gt;0.3), ] LocationsA=LocationsA[order( LocationsA$chromosome, LocationsA$start), ] LocAmerge=Merge_contig(LocationsA) LocationsB=Samp1$data[which(Samp1$data$lossProportion&gt;0.3), ] LocationsB=LocationsB[order( LocationsB$chromosome, LocationsB$start), ] LocBmerge=Merge_contig(LocationsB) # turn into a GRanges object LocAGRanges=GRanges(seqnames = LocAmerge$chromosome, ranges=IRanges(start=LocAmerge$start, end=LocAmerge$end), strand=&quot;*&quot;, sampleFrequency=LocAmerge$sampleFrequency, gainFrequency=LocAmerge$gainFrequency, lossFrequency=LocAmerge$lossFrequency, gainProportion=LocAmerge$gainProportion, lossProportion=LocAmerge$lossProportion) LocBGRanges=GRanges(seqnames = LocBmerge$chromosome, ranges=IRanges(start=LocBmerge$start, end=LocBmerge$end), strand=&quot;*&quot;, sampleFrequency=LocBmerge$sampleFrequency, gainFrequency=LocBmerge$gainFrequency, lossFrequency=LocBmerge$lossFrequency, gainProportion=LocBmerge$gainProportion, lossProportion=LocBmerge$lossProportion) # find the overlaps GainOLap=findOverlaps(LocAGRanges, txRn6) UniqueGainOlapRegions=unique(queryHits(GainOLap)) GainGenes=sapply(unique(queryHits(GainOLap)), function(x) txRn6$gene_id[subjectHits(GainOLap[which(queryHits(GainOLap)==x)])]) LossOLap=findOverlaps(LocBGRanges, txRn6) UniqueLossOlapRegions=unique(queryHits(LossOLap)) LossGenes=sapply(unique(queryHits(LossOLap)), function(x) txRn6$gene_id[subjectHits(LossOLap[which(queryHits(LossOLap)==x)])]) Venn diagrams of the number of genes which intersect with the cosmic dataset OverviewG=unique(unlist(GainGenes)) OverviewL=unique(unlist(LossGenes)) par(mfrow=c(1,2)) venn(list(CNVgains=OverviewG, cosmic=RatCosmic)) venn(list(CNVloss=OverviewL, cosmic=RatCosmic)) The intersecting gene is Lrp1b, Grin2a Venn diagram of immune related genes: par(mfrow=c(1,2)) venn(list(CNVgains=OverviewG, Immune=RatAllImm)) venn(list(CNVloss=OverviewL, Immune=RatAllImm)) The gained genes are Mir295-2, Scarb1 The lost genes are Ccl28, Mff, Pdcd1, Arrb2, Mx2 25.2.3 Annotated plot of genome and locations of genes S2=Samp1$data S2=S2[order(S2$chromosome, S2$start), ] GG2=sapply(GainGenes, length) GG3=unlist(GainGenes) GG3[which(duplicated(GG3))]=&quot;&quot; GG4=split(GG3, rep(c(1:length(GG2)), times=GG2)) Ggenes=sapply(GG4, function(x) paste(x, sep=&quot;&quot;, collapse=&quot; &quot;)) Ggenes=gsub(&quot; &quot;, &quot;&quot;, Ggenes) Ggenes[which(Ggenes==&quot; &quot;)]=&quot;&quot; Datx=rep(&quot;&quot;, nrow(Samp1$data)) Datx[match(LocAmerge$start[UniqueGainOlapRegions], S2$start)]=Ggenes GG2=sapply(LossGenes, length) GG3=unlist(LossGenes) GG3[which(duplicated(GG3))]=&quot;&quot; GG4=split(GG3, rep(c(1:length(GG2)), times=GG2)) Lgenes=sapply(GG4, function(x) paste(x, sep=&quot;&quot;, collapse=&quot; &quot;)) Lgenes[which(Lgenes==&quot; &quot;)]=&quot;&quot; Daty=rep(&quot;&quot;, nrow(Samp1$data)) Daty[match(LocBmerge$start[UniqueLossOlapRegions], S2$start)]=Lgenes ## #S2=Samp1$data #S2=S2[order(S2$chromosome, S2$start), ] S2$xLoc=S2$start+chrInfo$sumdist[match(S2$chromosome, chrInfo$Chromosome)] S2$width=S2$end-S2$start S2$label=Datx S3=S2 S3$gainProportion=S3$lossProportion[1:nrow(S2)]*(-1) S3$label=Daty S4=rbind(cbind(S3, col=&quot;blue&quot;), cbind(S2, col=&quot;red&quot;)) S4=S4[-which(S3$gainProportion==0), ] ggplot(S4, aes(x=xLoc, y=gainProportion, width=width*1.2, label=label, col=col))+geom_bar(stat = &quot;identity&quot;)+geom_label_repel()+theme_bw()+xlim(0, chrInfo$sumdist2[22])+geom_vline(xintercept=chrInfo$sumdist2,col=&quot;grey&quot;)+scale_colour_manual(values=c(&quot;blue&quot;, &quot;red&quot;))+annotate(&quot;text&quot;, x=chrInfo$sumdist, y=rep(-1, 22), label=chrInfo$Chromosome, col=&quot;black&quot;) "],["list-of-figures.html", "A List of Figures Main Figures Figure 1 Figure 2: Immune system of NMU-rat Figure 3: Immunotherapy applied to NMU rats Figure 4: Somehting Figure 5 : Epithelial cells in growing vs stable rats", " A List of Figures Main Figures Figure 1 Fig 1F: Characterisation HR plot Fig 1G: Ep DEG big-small Fig 1H: Ep hairball with size Fig 1I: summary of mutation burden Fig 1J: Frequency of different mutational codons Fig 1K: summary of mutations acccording to frequency cosmic Fig 1L: summary of metacore common mutated pathways Figure 2: Immune system of NMU-rat Fig 2D: Differential CD45 genes Fig 2E: CD45 growing vs stable hairball Fig 2F: CIBERSORT shit Fig 2H: bcr clonotypes in tumor and normal mammary glands Figure 3: Immunotherapy applied to NMU rats Fig 3B: Growth rates of tumors Fig 3C: Growth rates of tumors w.r.t. treatment Fig 3D: Histogram of growth rates of tumors Fig 3E: Contingency table growth rate and treatment Fig 3G: Trichrome staining growth rate and treatment Fig 3J: Differentially expressed genes in CD45 fraction Figure 4: Somehting Fig 4B: association of frequency with treatment and growth Fig 4C: KNN distances Fig 4D: interacting fraction Fig 4E: MH index with CD8 growth Fig 4F: Progression CIBERSORT TIMER Fig 4G: volcano plot of DEG stable vs growing CD45 Fig 4H: CD45 cells enriched pathways Fig 4I: trust-progression COHORT Figure 5 : Epithelial cells in growing vs stable rats Fig 5A: GSEA summary stable growing Fig 5B: ssGSEA scores for specific pathways Fig 5D: CD74 assoc with patient data Fig 5E: forest plot CD74 Fig 5F: lum only non-inflamm growth vs stable DEG Fig 5G: lum only non-inflamm growth vs stable hairball Fig 5H luminal signature associated with clinical variables Fig 5I OS and DFS for growing signature Fig 5J TCGA DEG for LumA samples Fig 5K TCGA HAIRBALL for LumA samples "],["extended-figures.html", "Extended Figures Extended data 1 Extended data 2 Extended data 3 Extended data 4 Extended data 5", " Extended Figures Extended data 1 Ext Fig 1b : Number of tumors per rat in each cohort Ext Fig 1c: growth of NMU treated tumors over time Ext Fig 1f: PCA of growing vs stable epithelial cells Ext Fig 1G: correlation plot epithelial samples Ext Fig 1H-I: assoc of mutations with cohort Ext Fig 1J: Alexandrov mutational signatures Ext Fig 1K: most frequent mutations Ext Fig 1L: PCA of growing vs stable epithelial cells Extended data 2 Ext2D PCA of CD45 cells Ext2E clonotype assoc with size Ext2F cNo fucking idea where this came from Extended data 3 Ext Fig 3c : FACS associated with outcome Ext Fig 3d : PCA plot all cell types Ext Fig 3e : Cell type specific genes Ext Fig 3H: DN assoc treatment GSEA Ext Fig 3i : HR clustering output progression Extended data 4 Ext Fig 4B association with facs Ext Fig 4C-D WSI-normalised-all-samples here ?? Ext Fig 4E Knn with treatment Ext Fig 4F Interacting fraction with treatment Ext Fig 4H MH with treatment Extended data 5 Ext Fig5A growth profiles of inflammatory tumors Ext Fig 5B: Ext Fig 5C: Differential gene exp inflammatory vs non-inflammatory Ext Fig 5D: association signature with WSI Ext Fig 5E: Survival plots TCGA and CD74 by subtype Ext Fig 5F: DEG all inflammatory removed Ext Fig 5G non-inflammatory branch hairball Ext Fig 5I: Trichrome association with inflammation and growth rate Ext Fig 5J: Transcriptional heterogeneity "]]
