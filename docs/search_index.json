[["index.html", "NMU-induced rat tumor models for I/O Preface", " NMU-induced rat tumor models for I/O Anne Trinh 2022-02-13 Preface This is a summary of the tools and code required in the study: ‘NMU-induced sprague dawley rat model of breast cancer treated with immunotherapy to prevent tumor progression’ by Gil del Alcazar et al. The GEO accession code for RNA-data is GSE167102. WGS will one day be available at SUB6887244. Figures generated in the manuscript will be listed in the appendix and it can be cross-referenced to the relevant sections in this document "],["prerequisites.html", "Chapter 1 Prerequisites 1.1 Packages and Software 1.2 External software 1.3 Annotations", " Chapter 1 Prerequisites 1.1 Packages and Software The following packages are required to conduct the analyses described below. In house scripts are deposited in the rscript folder. library(AnnotationHub) library(beeswarm) library(biomaRt) library(Biostrings) library(colorspace) library(DESeq2) library(dplyr) library(DT) library(ensembldb) library(EnsDb.Hsapiens.v86) library(forestplot) library(GenVisR) library(GenomicFeatures) library(ggplot2) library(ggrepel) library(gplots) library(GSEABase) library(GSVA) library(heatmap.plus) library(HTSanalyzeR2) library(kableExtra) library(knitr) library(limma) library(matrixStats) library(pamr) library(reshape2) library(rmarkdown) library(RColorBrewer) library(scales) library(spatstat) library(survival) library(tcR) library(vcfR) library(xlsx) library(writexl) DiffCols=hue_pal()(8) palette(brewer.pal(9, &quot;Set1&quot;)) RdBu=brewer.pal(11, &quot;RdBu&quot;) SetCols=brewer.pal(12, &quot;Set3&quot;) source(&quot;../rscript/cnFreq_fn.R&quot;) #modified version of GenVisR source(&quot;../rscript/merge_contig.R&quot;) source(&quot;../rscript/gseaCode.R&quot;) source(&quot;../rscript/ContingencyTable.R&quot;) source(&quot;../rscript/PvalueHeatMap.R&quot;) source(&quot;../rscript/BootstrapShannonIdx.R&quot;) source(&quot;../rscript/CreateRnor87db.R&quot;) source(&quot;../rscript/FindRatAAHomolog.R&quot;) source(&quot;../rscript/FindTriNucleotideContext.R&quot;) firstup &lt;- function(x) { substr(x, 1, 1) &lt;- toupper(substr(x, 1, 1)) x } ColMerge=matrix(c(&quot;#FFC82F&quot;, &quot;#FFEDBC&quot;, &quot;#73FDFE&quot;,&quot;#D2FFFF&quot;, &quot;#FF41FF&quot;, &quot;#FECAFF&quot;, &quot;#5D5D5D&quot;, &quot;#BEBEBE&quot;), ncol=2, byrow = T) rownames(ColMerge)=c(&quot;LY&quot;,&quot;PDL1&quot;, &quot;PDL1+LY&quot;,&quot;Vehicle&quot;) ColSize=c(&quot;#008E00&quot;, &quot;#FF9300&quot;) names(ColSize)=c(&quot;small&quot;, &quot;big&quot;) ColSizeb=ColSize[2:1] ColSizec=c(ColSize[2], &quot;purple&quot;, ColSize[1]) hclust.ave &lt;- function(x) hclust(x, method=&quot;average&quot;) Hsedb&lt;-EnsDb.Hsapiens.v86 1.2 External software The following external software was utilised: Software Function bwa Alignment of WGS data to reference GATK4 Mutation calling, done by NYGC. Mutation calling from RNA (Haplotype caller) strelka Mutation calling, done by NYGC BICseq CNV calling GEM3 create mappability files for CNV calling STAR Alignment of RNAseq data RSEM Calculate RSEM, TPM, FPKM from RNAseq data TRUST4 assignment of T and B cell clonotypes from RNA-seq data Oncotator Annotation of genetic variants QuPath Tool for cell segmentation and extraction of features from IF images samtools, bcftools querying and dispalying information from bam files, extracting allelic depth at specific genomic locations CIBERSORT inferring immune composition from RNA lumpy structural variants PAM50 code from parker et al 2009 to infer PAM50 subtypes 1.3 Annotations 1.3.1 Genomic properties Information on chromosome sizes, cytobands and centromere locations were obtained from the UCSC genome browser. The following annotation data for the rn6 genome is required: Data Type Download link ref. genome http://hgdownload.soe.ucsc.edu/goldenPath/rn6/bigZips/rn6.fa.gz refSeq annot http://hgdownload.soe.ucsc.edu/goldenPath/rn6/bigZips/genes/rn6.refGene.gtf.gz gff3 file for TRUST4 (ftp://ftp.ensembl.org/pub/release-100/gff3/rattus_norvegicus/Rattus_norvegicus.Rnor_6.0.100.gff3.gz) rn6cytoBand ucsc server of all cytoband locations rn6chrInfo ucsc server of all chromosome sizes biomart conversion between gene symbol, ensbl and entrez was faciliated using biomart package Below is the summary of chromosome sizes and centromere locations: chrInfo=read.delim(&quot;../anntotations/chromInfo_rat.txt&quot;, header=T) cytoInfo=read.delim(&quot;../anntotations/cytoBand_Rat2.txt&quot;, header=F, stringsAsFactors = F) colnames(cytoInfo)=c(&quot;chrom&quot;, &quot;chromStart&quot;, &quot;chromEnd&quot;, &quot;name&quot;, &quot;gieStain&quot;) GRcytoInfo=GRanges(seqnames=cytoInfo$chrom, ranges=IRanges(start = cytoInfo$chromStart, end=cytoInfo$chromEnd), cytoband=cytoInfo$name) head(GRcytoInfo) ## GRanges object with 6 ranges and 1 metadata column: ## seqnames ranges strand | cytoband ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; ## [1] chr1 0-10704345 * | p13 ## [2] chr1 10704345-25618263 * | p12 ## [3] chr1 25618263-40652454 * | p11 ## [4] chr1 40652454-51356799 * | q11 ## [5] chr1 51356799-73607402 * | q12 ## [6] chr1 73607402-95016091 * | q21 ## ------- ## seqinfo: 22 sequences from an unspecified genome; no seqlengths Below is an example of the gene annotation files txRn6=makeTxDbFromGFF(&quot;../anntotations/rn6_refGene.gtf&quot;, format=&quot;gtf&quot;) txRn6=genes(txRn6) txRn6=sort(txRn6) txRn6$gene_width=width(txRn6) save(txRn6, file=&quot;../anntotations/txRn6_refGene.RData&quot;) load(&quot;../anntotations/txRn6_refGene.RData&quot;) head(txRn6) ## GRanges object with 6 ranges and 2 metadata columns: ## seqnames ranges strand | gene_id gene_width ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; &lt;integer&gt; ## Vom2r3 chr1 396700-409676 + | Vom2r3 12977 ## Lrp11 chr1 1702696-1731210 + | Lrp11 28515 ## Nup43 chr1 1771721-1781554 + | Nup43 9834 ## Lats1 chr1 1784078-1817310 + | Lats1 33233 ## Katna1 chr1 1826170-1867786 + | Katna1 41617 ## Ppil4 chr1 1897350-1930311 + | Ppil4 32962 ## ------- ## seqinfo: 22 sequences from an unspecified genome; no seqlengths 1.3.2 Gene name homologs between organisms Biomart was used to convert between rat, mouse and human gene symbols and ensembl ids. Below is an example of the human gene names mapped to the rat homolog ## save here: ## human to rat mapping of genes ## rat ENSEMBL vs symbol conversion library(biomaRt) #library(refGenome) TS=read.delim(&quot;~/Documents/metacore-hack/hg38_allsymbols.txt&quot;) TS=as.character(TS[ ,1]) human = useMart(&quot;ensembl&quot;, dataset = &quot;hsapiens_gene_ensembl&quot;) mouse = useMart(&quot;ensembl&quot;, dataset = &quot;mmusculus_gene_ensembl&quot;) rat = useMart(&quot;ensembl&quot;, dataset = &quot;rnorvegicus_gene_ensembl&quot;) SymHum2Rat = getLDS(attributes = c(&quot;hgnc_symbol&quot;), filters = &quot;hgnc_symbol&quot;, values = TS , mart = human, attributesL = c(&quot;rgd_symbol&quot;, &quot;ensembl_gene_id&quot;), martL = rat, uniqueRows=T) Rat2Mouse= getLDS(attributes = c(&quot;rgd_symbol&quot;), filters = &quot;rgd_symbol&quot;, values = rownames(allrsemFinal) , mart = rat, attributesL = c(&quot;mgi_symbol&quot;), martL = mouse, uniqueRows=T) Mouse2Hum = getLDS(attributes = c(&quot;mgi_symbol&quot;), filters = &quot;mgi_symbol&quot;, values = rownames(allrsemFinal) , mart = mouse, attributesL = c(&quot;hgnc_symbol&quot;), martL = human, uniqueRows=T) save(SymHum2Rat, Rat2Hum,Mouse2Hum,Rat2Mouse, file=&quot;../anntotations/Rat_biomart_gene_annotations.RData&quot;) load(&quot;../anntotations/Rat_biomart_gene_annotations.RData&quot;) head(SymHum2Rat) ## HGNC.symbol RGD.symbol ## 1 TAB1 Tab1 ## 2 PHF1 Phf1 ## 3 RNF39 Rnf39 ## 4 IGSF10 Igsf10 ## 5 TMEM130 Tmem130 ## 6 EFNB1 Efnb1 1.3.3 Gene signatures and data-bases Gene sets/signatures were obtained from the following sources: Source Description IEDB database of immune epitopes MsigDB c2, c5, hallmark set of curated pathway gene sets Metacore Process Networks and Pathway Maps data bases COSMIC database of concensus oncogenes ImmPort List of immune related genes InnateDB List of genes associated with innate immune system Rosenthal 2019 genes associated with MHC-I presentation Thorsson 2018 Immune gene signatures curated from studies by Wolf, Calabro, Teschendorff, Beck, Chang Pardoll, Wykes Immune checkpoint genes Gil del Alcazar 2017 Supplementary table 5: list of activation, dysfunction gene signatures Bailey 2018 List of 10 most comon tumor pathways Chang 2018 Common mutation locations in cancer # These gene signatures are saved in the annotations folder and loaded below: ######################### ## cell specific markers ####################### GeneList=read.csv(&quot;../anntotations/cell_type_markers.csv&quot;) cn=colnames(GeneList) GeneList=lapply(1:ncol(GeneList), function(x) setdiff(unique(GeneList[ ,x]), &quot;&quot;)) names(GeneList)=cn ## map all the names to rat names GeneListRat=lapply(GeneList, function(x) SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%x]) ###################### ## cancer genes ###################### ## cosmic cancer genes AllCosmic=read.csv(&quot;../anntotations/Census_COSMIC_Feb2020.csv&quot;) RatCosmic=SymHum2Rat$RGD.symbol[match(AllCosmic$Gene.Symbol, SymHum2Rat$HGNC.symbol)] tx=AllCosmic$Gene.Symbol[which(is.na(RatCosmic)|RatCosmic==&quot;&quot;)] tx=tolower(tx) tx=firstup(tx) RatCosmic[which(is.na(RatCosmic)|RatCosmic==&quot;&quot;)]=tx RatBreastCosmic=RatCosmic[grep(&quot;breast&quot;, AllCosmic$Tumour.Types.Somatic.)] ## Bailey List of 10 most common tumor pathways PathwayList=read.csv(&quot;../anntotations/cancer_pathways_annot_Bailey_cell2018_modified.csv&quot;) cn=colnames(PathwayList) PathwayListA=lapply(seq(1, length(cn), by=2), function(x) setdiff(unique(PathwayList[ ,x]), &quot;&quot;)) names(PathwayListA)=cn[seq(1, length(cn), by=2)] PathwaySign=lapply(seq(2, length(cn), by=2), function(x) PathwayList[ which(PathwayList[ ,x]!=&quot;&quot;),x]) names(PathwaySign)=cn[seq(1, length(cn), by=2)] PathwayListRata=lapply(PathwayListA, function(x) SymHum2Rat$RGD.symbol[match(x, SymHum2Rat$HGNC.symbol)]) PathwayListRatb=lapply(PathwayListA, function(x) Rat2Hum$RGD.symbol[match(x, Rat2Hum$HGNC.symbol)]) PathwayListRat=lapply(1:length(PathwayListRata), function(x) ifelse(is.na(PathwayListRata[[x]]), PathwayListRatb[[x]], PathwayListRata[[x]])) names(PathwayListRat)=names(PathwayListA) AllCancerPathwayGenes=na.omit(unlist(PathwayListRat)) ############################ ## List of immunesignatures ############################ ## read in all the files Exp2=read.csv(&quot;../anntotations/Supplementary Table 5.csv&quot;) Exp2List=lapply(1:ncol(Exp2), function(x) setdiff(unique(Exp2[ ,x]), &quot;&quot;)) names(Exp2List)=colnames(Exp2) List2=read.csv(&quot;../anntotations/Thorsson_signatures.csv&quot;) List2b=lapply(1:ncol(List2), function(x) setdiff(unique(List2[ ,x]), &quot;&quot;)) names(List2b)=colnames(List2) Exp2List=c(Exp2List, List2b) ImmSuppAPC=read.delim(&quot;../anntotations/immune_Suppression.csv&quot;, header=T, stringsAsFactors = F, sep=&quot;,&quot;) ImmSuppAPC=lapply(1:ncol(ImmSuppAPC), function(x) setdiff(unique(ImmSuppAPC[ ,x]), &quot;&quot;)) names(ImmSuppAPC)=c(&quot;Inh&quot;, &quot;Act&quot;, &quot;Both&quot;) Exp2List=c(Exp2List, ImmSuppAPC) MHCPres=read.delim(&quot;../anntotations/MHCloss.csv&quot;, header=F, stringsAsFactors = F, sep=&quot;,&quot;) MHCPres=as.character(MHCPres[ ,1]) MHCPres2Rat=unique(SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%MHCPres]) ## change the names to Rat-specific Exp2RatImm=lapply(Exp2List, function(x) unique(SymHum2Rat$RGD.symbol[SymHum2Rat$HGNC.symbol%in%x])) ## All immune genes AllImmGenes1=read.csv(&quot;../anntotations/ImmPort_Set.csv&quot;) AllImmGenes2=read.csv(&quot;../anntotations/innatedb_curated_genes.csv&quot;) AllImmGenes=unique(c(as.character(AllImmGenes1$Symbol), as.character(AllImmGenes2$Gene.Symbol[which(AllImmGenes2$Species==9606)]))) RatAllImm=na.omit(unique(c(SymHum2Rat$RGD.symbol[match(AllImmGenes, SymHum2Rat$HGNC.symbol)], as.character(AllImmGenes2$Gene.Symbol[which(AllImmGenes2$Species!=9606)])))) ## CIBERSORT specific rat genes #lm22rat=read.delim(&quot;../anntotations/LM22_to_rnorvegicus_1.txt&quot;, sep=&quot;\\t&quot;) # Oncoprint Oncoprint=read.csv(&quot;../anntotations/Onco_Mamma.csv&quot;) Oncoprint=lapply(1:ncol(Oncoprint), function(x) setdiff(unique(Oncoprint[ ,x]), &quot;&quot;)) names(Oncoprint)=c(&quot;Oncotype&quot;, &quot;Mammaprint&quot;) 1.3.3.1 Human gene homologs Below, lists of common mutations in cancer are loaded and the “homolog” in rat is determined using an in-house script. The steps involved are: determine the amino acid context in human (find 5 a.a. prior and after) find the region with most amino acid homology in rat (2 or less differences) check whether the amino acid of interest is present in rat An example of the output is shown ###################### ## Annotation for Mutation Locations ###################### BaileyList=read.csv(&quot;../anntotations/list_mutations_bailey.csv&quot;, stringsAsFactors = F) BList=FindRatAAHomolog(BaileyList$Gene, substr(BaileyList$Mutation, 3, 3), substr(BaileyList$Mutation, 4, nchar(as.character(BaileyList$Mutation))-1), substr(BaileyList$Mutation, nchar(as.character(BaileyList$Mutation)), nchar(as.character(BaileyList$Mutation)))) ChangList=read.delim(&quot;../anntotations/hotspots_chang_et_al_2017_cancer_discovery.txt&quot;, sep=&quot;\\t&quot;, stringsAsFactors = F) ChangList=ChangList[which(ChangList$Type==&quot;single residue&quot;), ] ChangList$AA1=substr(ChangList$Residue, 1, 1) ChangList$Loc=substr(ChangList$Residue,2, nchar(ChangList$Residue)) AA2list=sapply(ChangList$Variants, function(x) strsplit(x, &quot;:[0-9]+[\\\\|]*&quot;)) AAun=unlist(AA2list) C2List=tibble(ChangList[ ,c(&quot;Gene&quot;, &quot;AA1&quot;, &quot;Loc&quot;)]) C2List=C2List %&gt;% slice(rep(1:n(), times=sapply(AA2list, length))) C2List$AA2=AAun C2List=C2List[-which(C2List$AA2==&quot;sp&quot;| C2List$AA1==&quot;*&quot;), ] #C2ListB=C2List[-which(is.na(C2List$Loc)), ] ChangList2=FindRatAAHomolog(C2List$Gene, C2List$AA1, C2List$Loc, C2List$AA2) head(ChangList2) ## Gene AAno AA1 Variant RatGene Sequence HumProt RatProt ## 1 NRAS 61 Q R Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 2 NRAS 61 Q K Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 3 NRAS 61 Q L Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 4 NRAS 61 Q H Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 5 NRAS 61 Q P Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## 6 NRAS 61 Q * Nras LDTAGQEEYSA ENSP00000358548 ENSRNOP00000036381 ## RatAAno RatSequence ## 1 61 LDTAGQEEYSA ## 2 61 LDTAGQEEYSA ## 3 61 LDTAGQEEYSA ## 4 61 LDTAGQEEYSA ## 5 61 LDTAGQEEYSA ## 6 61 LDTAGQEEYSA 1.3.3.2 GSEA compendiums For pathway analysis, the c2 (pathway), Hallmark and c5 (Gene Ontology). In addition, metacore pathways (pathway maps and process networks) were obtained and loaded below. This gives a list of 7 different data-sets to interrogate. Below is example code to load the hallmark and c2 compendiums. PathInc2=getGmt(con=&quot;../anntotations/c2.cp.v7.0.symbols.gmt&quot;, geneIdType=SymbolIdentifier(), collectionType=BroadCollection(category=&quot;c2&quot;)) c2entrez=mapIdentifiers(PathInc2, EntrezIdentifier(&#39;org.Hs.eg.db&#39;)) c2ListHs=geneIds(c2entrez) PathInH=getGmt(con=&quot;../anntotations/h.all.v7.1.symbols.gmt&quot;, geneIdType=SymbolIdentifier(), collectionType=BroadCollection(category=&quot;h&quot;)) cHentrez=mapIdentifiers(PathInH, EntrezIdentifier(&#39;org.Hs.eg.db&#39;)) cHListHs=geneIds(cHentrez) ##################################################### # also load in the process networks and pathway maps ################# load(&quot;../anntotations/ListofGeneSets2.RData&quot;) "],["cohort-characteristics.html", "Chapter 2 Cohort characteristics 2.1 Size information 2.2 Calculating growth rates 2.3 KM curves for survival 2.4 FACS data (DN/CD45/EpCAM) 2.5 FACS data", " Chapter 2 Cohort characteristics Below we assess summary statistics on clinico-pathological features of this data set. This includes information on: treatment tumor size growth rates (mm/week) number of tumors per rat Cdata=xlsx::read.xlsx(&quot;../metadata/Extended Data Table1.xlsx&quot;, sheetIndex=1) Cdata$NewID[which(duplicated(Cdata$NewID)==T)] ## [1] NA NA NA #DT::datatable(Cdata[ ,1:20],rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) 2.1 Size information We have two cohorts, the characterisation and progression cohorts. Below is a plot of the size distribution in these two cohorts: par(mfrow=c(1,2)) X1a=median(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)], na.rm = T) hist(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort!=&quot;Characterisation&quot;)], breaks=15, main=sprintf(&quot;characterisation sizes Median %s&quot;, X1a), xlab=&quot;size at sac&quot;) X2a=median(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Progression&quot;)], na.rm=T) hist(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Progression&quot;)], breaks=15, main=sprintf(&quot;progression sizes Median %s&quot;, X2a), xlab=&quot;size at sac&quot;) Note that in the characterisation cohort, samples are selected for SAC at different time points: #pdf(&quot;~/Desktop/S1B_size_oveR_time.pdf&quot;, width=6, height=5) am1=lm(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)]~ Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)]) plot(jitter(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)]), jitter(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)]), xlab=&quot;Time from NMU to sac (days)&quot;, ylab=&quot;Tumor diameter (mm)&quot;, col=factor(Cdata$Char.Cohort.Batch[which(Cdata$Cohort==&quot;Characterisation&quot;)]), pch=19, main=&quot;characterisation: size over time&quot;) text(jitter(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)])+5, jitter(Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)])+1, Cdata$NewID[which(Cdata$Cohort==&quot;Characterisation&quot;)], cex=0.7) abline(am1) legend(&quot;topright&quot;, levels(factor(Cdata$Char.Cohort.Batch)), col=c(1:4), lwd=2) Figure 2.1: growth of tumors over time #dev.off() DT::datatable(cbind(Cdata$Time.NMU2Sac[which(Cdata$Cohort==&quot;Characterisation&quot;)], Cdata$Tumor.diameter.sac.mm[which(Cdata$Cohort==&quot;Characterisation&quot;)], Cdata$Char.Cohort.Batch[which(Cdata$Cohort==&quot;Characterisation&quot;)]), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 2.1: growth of tumors over time Plot of number of tumors per rat Nx1=table(Cdata$Rat_ID[which(Cdata$Cohort==&quot;Characterisation&quot;)]) X2=Cdata$Char.Cohort.Batch[match(names(Nx1), Cdata$Rat_ID)] t2temp=data.frame(count=as.numeric(Nx1), cohort=X2) beeswarm(jitter(as.vector(Nx1))~X2, col=c(1:4), pch=19) Figure 2.2: Number of tumors per rat in each cohort DT::datatable(t2temp, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 2.2: Number of tumors per rat in each cohort 2.2 Calculating growth rates In this section, we estimate the growth rates of the samples: Below is a plot of the tumor size per week for each recorded tumor, color-coded according to treatment. Time is measured at the first time point at which a tumor is palpated. Spontaneous large tumors are assumed to have a tumor size of 0 or 1 one week prior to palpating. GrowthRaw=read.csv(&quot;../metadata/growth_rates_0915.csv&quot;) colnames(GrowthRaw)[-1]=substr(colnames(GrowthRaw)[-1], 2, 10) colnames(GrowthRaw)=gsub(&quot;\\\\.&quot;, &quot;-&quot;, colnames(GrowthRaw)) CTreat=Cdata$Treatment[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] CTreat=ColMerge[match(CTreat, rownames(ColMerge)) ,1] Cgrowth=Cdata$Tumor.growth.status[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #pdf(sprintf(&quot;rslt/Clinicopath/summary_growth_plots_%s.pdf&quot;, Sys.Date()), width=8, height=8) par(xpd=T) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=&quot;Tumor size over time&quot;) for (i in 2:ncol(GrowthRaw)){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=CTreat[i]) } legend(&quot;bottom&quot;, inset = c(-0.2, -0.2), rownames(ColMerge), col=ColMerge[ ,1], lwd=2, horiz = T) ax1=colnames(GrowthRaw)[-1][which(CTreat[-1]==&quot;Unknown&quot;)] bx1=Cdata$TumorID[!gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)%in%colnames(GrowthRaw)] bx1=bx1[which(bx1%in%Cdata$TumorID[Cdata$Tumor.growth.status%in%c(&quot;stable&quot;, &quot;growing&quot;)])] We can also separate the above plot into separate treatments: #Plot the above into quadrants based on different treatments: par(mfrow=c(2,2)) xn=levels(factor(names(CTreat))) x2=CTreat[xn] for (j in 1:4){ indx=which(CTreat==x2[j]) indx=setdiff(indx, 1) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=xn[j]) for (i in indx){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=CTreat[i]) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], i], colnames(GrowthRaw)[i], cex=0.6) } } #dev.off() colnames(GrowthRaw)=Cdata$NewID[match(colnames(GrowthRaw), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] TreatType=Cdata$Treatment[match(colnames(GrowthRaw),Cdata$NewID)] GrowthRaw2=rbind(TreatType, GrowthRaw) colnames(GrowthRaw2)[1]=&quot;Time(weeks)&quot; DT::datatable(GrowthRaw2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Notably, there are a few samples which grow but then regress. These are plotted below UturnSamp=c(&quot;6RB&quot;,&quot;11ND&quot;, &quot;8LD&quot;, &quot;10LD&quot;, &quot;3NB&quot; ) tmp=Cdata$NewID[match(UturnSamp, gsub(&quot;_&quot;,&quot;&quot;, Cdata$TumorID))] mx=match(tmp, colnames(GrowthRaw)) #pdf(&quot;~/Desktop/S5-inflammatory-samples-growth.pdf&quot;, height=5, width = 5) plot(NA, xlim=c(0, 10), ylim=c(0, 30), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=&quot;Inflammatory samples&quot;) for (i in 1:length(mx)){ x1=which(!is.na(GrowthRaw[, mx[i]])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, mx[i]], col=CTreat[mx[i]]) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], mx[i]], colnames(GrowthRaw)[mx[i]], cex=0.6) } Figure 2.3: inflammatory growth profiles GrowthRaw3=GrowthRaw2[ ,c(1, mx)] DT::datatable(GrowthRaw3, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 2.3: inflammatory growth profiles #write.csv(GrowthRaw3, file=&quot;nature-tables/Ext5a.csv&quot;) These tumors doesn’t have growth rate data: 17N_B. We can then compute the growth rate for the above samples by considering the change in size over a given period of time using a linear regression model. Below is the histogram of growth rates, and we see a separation at approximately 2mm/week: GR=sapply(2:ncol(GrowthRaw), function(x) lm(GrowthRaw[, x]~GrowthRaw[, 1])$coefficients[2]) names(GR)=colnames(GrowthRaw)[-1] d1=data.frame(growthrate=GR, treatment=names(CTreat[-1]), growth=Cgrowth[-1], color=CTreat[-1], sample=names(GR)) d1$treatment=factor(d1$treatment, levels=c( &quot;PDL1+LY&quot;, &quot;PDL1&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) Nweeks=sapply(2:ncol(GrowthRaw), function(x) max(which(!is.na(GrowthRaw[ , x])))) names(Nweeks)=names(GR) d1$Nweeks=Nweeks[match(d1$sample, names(Nweeks))] d1$Time.Tum2Sac=Cdata$Time.Tumor2Sac[match(d1$sample, Cdata$NewID)] d1$Time.NMU2Sac=Cdata$Time.NMU2Sac[match(d1$sample, Cdata$NewID)] d1$tum.size=Cdata$Tumor.diameter.sac.mm[match(d1$sample, Cdata$NewID)] d1$growthrate_cutoff2=ifelse(d1$growthrate&gt;=2, &quot;growing&quot;, &quot;stable&quot;) #pdf(sprintf(&quot;rslt/Clinicopath/summary_growth_rates_%s.pdf&quot;, Sys.Date()), width=8, height=6) ggplot(d1, aes(x=growthrate, fill=treatment))+geom_histogram(colour=&quot;black&quot;)+theme_bw()+geom_vline(aes(xintercept=2), colour=&quot;grey45&quot;, linetype=&quot;dashed&quot;)+scale_fill_manual(values=ColMerge[ ,1]) Figure 2.4: Histogram of growth rates Based on the above distribution, a cut-off of 2mm/week may be an optimal cut-off to separate growing and stable tumors. Below are growth rates of tumors under different treatments: pv1=sapply(levels(d1$treatment)[1:3], function(x) wilcox.test(d1$growthrate[which(d1$treatment==x)], d1$growthrate[which(d1$treatment==&quot;Vehicle&quot;)])$p.value) d1$treatment=factor(d1$treatment, levels=c(&quot;Vehicle&quot;, &quot;PDL1&quot;, &quot;LY&quot;,&quot;PDL1+LY&quot;)) ggplot(d1, aes(x=treatment, y=growthrate, col=treatment))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=ColMerge[ ,1])+theme_bw()+ggtitle(paste(paste(names(pv1), round(pv1, 2)), collapse=&quot;;&quot;)) Figure 2.5: Growth rate with respect to treatment DT::datatable(d1, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 2.5: Growth rate with respect to treatment #write.csv(d1, file=&quot;nature-tables/Fig3c-d.csv&quot;) We can calculate the p.values below, using a wilcox test. The growth rates comparing the treatment to the controls are: print(&#39;LY samples&#39;) ## [1] &quot;LY samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;LY&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;LY&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 150.5, p-value = 0.06847 ## alternative hypothesis: true location shift is not equal to 0 print(&#39;PDL1 samples&#39;) ## [1] &quot;PDL1 samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;PDL1&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;PDL1&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 90, p-value = 0.02673 ## alternative hypothesis: true location shift is not equal to 0 print(&#39;PDL1+LY samples&#39;) ## [1] &quot;PDL1+LY samples&quot; wilcox.test(d1$growthrate[d1$treatment==&quot;PDL1+LY&quot;], d1$growthrate[d1$treatment==&quot;Vehicle&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: d1$growthrate[d1$treatment == &quot;PDL1+LY&quot;] and d1$growthrate[d1$treatment == &quot;Vehicle&quot;] ## W = 133.5, p-value = 0.002644 ## alternative hypothesis: true location shift is not equal to 0 This shows a smaller growth-rate in PDL1 single and double treated cases compared to the vehicles. Overall the distribution of growing vs stable tumors is shown below: table(ifelse(d1$growthrate&gt;=2, &quot;grow&quot;, &quot;stable&quot;)) ## ## grow stable ## 47 31 head(d1) ## growthrate treatment growth color sample Nweeks Time.Tum2Sac ## P5T1 3.54285714 Vehicle growing #5D5D5D P5T1 6 41 ## P5T2 15.00000000 Vehicle growing #5D5D5D P5T2 2 41 ## P5T3 20.00000000 Vehicle growing #5D5D5D P5T3 2 41 ## P4T1 11.70000000 Vehicle growing #5D5D5D P4T1 5 30 ## P7T1 0.02459016 Vehicle stable #5D5D5D P7T1 8 49 ## P7T2 -0.15163934 Vehicle stable #5D5D5D P7T2 8 49 ## Time.NMU2Sac tum.size growthrate_cutoff2 ## P5T1 84 20 growing ## P5T2 84 15 growing ## P5T3 84 20 growing ## P4T1 77 47 growing ## P7T1 127 6 stable ## P7T2 127 3 stable We can replot the previous graphs according to growth, and color code according to whether it is a fast or slow growing tumor par(xpd=T) #Plot the above into quadrants based on different treatments: par(mfrow=c(2,2)) for (j in 1:length(xn)){ indx=which(names(CTreat)==xn[j]) indx=setdiff(indx, 1) plot(NA, xlim=c(0, 27), ylim=c(0, 50), ylab=&quot;Tumor Size (mm)&quot;, xlab=&quot;Time (weeks)&quot;, main=paste(&quot;Redone&quot;, xn[j])) for (i in indx){ x1=which(!is.na(GrowthRaw[, i])) lines(GrowthRaw[x1, 1], GrowthRaw[x1, i], col=ifelse(d1$growthrate_cutoff2[i-1]==&quot;growing&quot;, ColMerge[j, 1], ifelse(d1$growthrate_cutoff2[i-1]==&quot;stable&quot;, ColMerge[j, 2], &quot;black&quot;)), type=&quot;o&quot;, pch=19) text(GrowthRaw[x1[length(x1)], 1], GrowthRaw[x1[length(x1)], i], colnames(GrowthRaw)[i], cex=0.6) } } Figure 2.6: Overview of growth rates of immunotherapy treated tumors with fast and slow growing indicated As a sanity check, compare these growth rates with differences in tumour size at different time points: comparing the growth rate according to classifications (growing, stable) tumor size at time of sacrifice rate of tumor development from the time of NMU injection For all comparisons, wilcox rank sum test to assess differences was used par(mfrow=c(1,3)) boxplot(d1$growthrate~d1$growthrate_cutoff2, main=&quot;growth rate, new growth&quot;, las=2, ylab=&quot;tumor growth rate (mm/week)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$growthrate~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(3.54285714285714, 15, 20, 11.7, 5.8, : ## cannot compute exact p-value with ties text(1.5, 20, paste(&quot;wilcox p =&quot;, round(x1, 3))) boxplot(d1$tum.size~d1$growthrate_cutoff2, main=&quot;tum size at sac, new growth&quot;, las=2, ylab=&quot;Tumor diameter (mm)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$tum.size~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(20, 15, 20, 47, 30, 12, 32, 35, 4, : cannot ## compute exact p-value with ties text(1.5, 40, paste(&quot;wilcox p =&quot;, round(x1, 3))) boxplot(d1$tum.size/d1$Time.NMU2Sac~d1$growthrate_cutoff2, main=&quot;rate NMU2SAC&quot;, las=2, ylab=&quot;growth rate from NMU injection (mm/wk)&quot;, xlab=&quot;&quot;) x1=wilcox.test(d1$tum.size/d1$Time.NMU2Sac~d1$growthrate_cutoff2)$p.value ## Warning in wilcox.test.default(x = c(0.238095238095238, 0.178571428571429, : ## cannot compute exact p-value with ties text(1.5, 0.6, paste(&quot;wilcox p =&quot;, round(x1, 3))) Is there an association with treatment? Calculate below using chi-squared test: # print(&#39;new data outcome&#39;) a3=chisq.test(table(factor(d1$treatment), d1$growthrate_cutoff2)) a3 ## ## Pearson&#39;s Chi-squared test ## ## data: table(factor(d1$treatment), d1$growthrate_cutoff2) ## X-squared = 7.7366, df = 3, p-value = 0.05178 ContTable(table((d1$treatment), d1$growthrate_cutoff2), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) Figure 2.7: Contingency tables We can also compare these values by assessing any I/O vs the control, as well as specific treatment arms par(mfrow=c(2,2)) ContTable(table((d1$treatment!=&quot;Vehicle&quot;), d1$growthrate_cutoff2), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) for (i in levels(d1$treatment)[2:4]){ ContTable(table(factor(d1$treatment[d1$treatment%in%c(&quot;Vehicle&quot;, i)]), d1$growthrate_cutoff2[d1$treatment%in%c(&quot;Vehicle&quot;, i)]), &quot;new rates&quot;, T, &quot;growth&quot;, &quot;treatment&quot;) } Overall, it appears that there is an association between growth rate and treatment # Replace the Cdata information with new growth information Cdata$Growth2=d1$growthrate_cutoff2[match(Cdata$NewID, d1$sample)] Cdata$GrowthRate=d1$growthrate[match(Cdata$NewID, d1$sample)] 2.3 KM curves for survival Rats were given a treatment once tumors were first palpated. Below, we report a cox proportional model for time from which tumors were first detectd to date of sacrifice. Since subtype information is not available for all samples (only the ones that we have managed to profile, exclude this data) Pdat=Cdata[which(Cdata$Cohort==&quot;Progression&quot;), ] ev=rep(1,nrow(Pdat) ) ev[which(Pdat$Time.Tumor2Sac.days&gt;110)]=0 days2=ifelse(Pdat$Time.Tumor2Sac.days&gt;100, 110, Pdat$Time.Tumor2Sac.days) ssurv=Surv(days2, ev) Pdat$Treatment=factor(Pdat$Treatment, levels=c(&quot;Vehicle&quot;, &quot;LY&quot;, &quot;PDL1&quot;,&quot;PDL1+LY&quot;)) ax=coxph(ssurv~Pdat$Treatment) summary(ax) ## Call: ## coxph(formula = ssurv ~ Pdat$Treatment) ## ## n= 84, number of events= 77 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## Pdat$TreatmentLY -0.7103 0.4915 0.3364 -2.112 0.0347 * ## Pdat$TreatmentPDL1 -0.4506 0.6373 0.3237 -1.392 0.1639 ## Pdat$TreatmentPDL1+LY -0.4650 0.6281 0.3045 -1.527 0.1267 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## Pdat$TreatmentLY 0.4915 2.035 0.2542 0.9503 ## Pdat$TreatmentPDL1 0.6373 1.569 0.3379 1.2017 ## Pdat$TreatmentPDL1+LY 0.6281 1.592 0.3458 1.1409 ## ## Concordance= 0.55 (se = 0.037 ) ## Likelihood ratio test= 4.93 on 3 df, p=0.2 ## Wald test = 5.07 on 3 df, p=0.2 ## Score (logrank) test = 5.19 on 3 df, p=0.2 plot(survfit(ssurv~Pdat$Treatment), col=ColMerge[c(4, 1:3) ,1], ylab=&quot;overall survival&quot;, xlab=&quot;time (days)&quot;, mark.time=T) legend(&quot;topright&quot;, c(&quot;0.49(0.25-0.95)&quot;, &quot;0.64(0.33-1.21)&quot;, &quot;0.63(0.35-1.14)&quot;), lwd=1 , col=ColMerge[ 1:3, 1]) Can also use the growth rate data to evaluate the time point at which a tumor increases by 30% in size or more cutoff=GrowthRaw[1, ]*1.3 Stime=sapply(1:length(cutoff), function(x) which(as.numeric(GrowthRaw[ ,x])&gt;as.numeric(cutoff[x]))[1]) Sevent=ifelse(Stime&lt;15, 1, 0) Sevent[which(is.na(Stime))]=0 Stime[which(is.na(Stime))]=15 Stime[which(Stime&gt;15)]=15 midx=match(colnames(GrowthRaw), Pdat$NewID) ss=Surv(Stime[-1]*7, Sevent[-1]) summary(ax) ## Call: ## coxph(formula = ssurv ~ Pdat$Treatment) ## ## n= 84, number of events= 77 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## Pdat$TreatmentLY -0.7103 0.4915 0.3364 -2.112 0.0347 * ## Pdat$TreatmentPDL1 -0.4506 0.6373 0.3237 -1.392 0.1639 ## Pdat$TreatmentPDL1+LY -0.4650 0.6281 0.3045 -1.527 0.1267 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## Pdat$TreatmentLY 0.4915 2.035 0.2542 0.9503 ## Pdat$TreatmentPDL1 0.6373 1.569 0.3379 1.2017 ## Pdat$TreatmentPDL1+LY 0.6281 1.592 0.3458 1.1409 ## ## Concordance= 0.55 (se = 0.037 ) ## Likelihood ratio test= 4.93 on 3 df, p=0.2 ## Wald test = 5.07 on 3 df, p=0.2 ## Score (logrank) test = 5.19 on 3 df, p=0.2 ax=coxph(ss~Pdat$Treatment[na.omit(midx)]) plot(survfit(ss~Pdat$Treatment[na.omit(midx)]), col=ColMerge[c(4, 1:3) ,1], ylab=&quot;DFS&quot;, xlab=&quot;time (days)&quot;, mark.time = T) legend(&quot;topright&quot;, c(&quot;0.51(0.27-0.95)&quot;, &quot;0.45(0.22-0.93)&quot;, &quot;0.53(0.29-0.97)&quot;), lwd=1 , col=ColMerge[ 1:3, 1]) 2.4 FACS data (DN/CD45/EpCAM) Ltab1=Cdata[ ,c(&quot;Tumor.Growth&quot;, &quot;DN.Frac.FACS&quot;, &quot;CD45.Frac.FACS&quot;, &quot;EpCAM.Frac.FACS&quot;, &quot;Treatment&quot;, &quot;GrowthRate&quot;)] Ltab2=melt(Ltab1, measure.vars = c(&quot;DN.Frac.FACS&quot;, &quot;CD45.Frac.FACS&quot;, &quot;EpCAM.Frac.FACS&quot;)) Ltab2=Ltab2[-which(is.na(Ltab2$value)|is.na(Ltab2$Tumor.Growth)), ] Ltab2$Tumor.Growth=factor(Ltab2$Tumor.Growth) Ltab2$Treatment=factor(Ltab2$Treatment) Ltab2$value=as.numeric(Ltab2$value) ggplot(Ltab2, aes(x=Tumor.Growth, y=value, col=Tumor.Growth))+geom_boxplot()+geom_point()+facet_grid(~variable)+ scale_color_manual(values=c(ColSizeb, &quot;black&quot;))+theme_bw() Figure 2.8: Ext3c: FACS data Assess any significance below: wilcox.test(as.numeric(Ltab1$CD45.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum exact test ## ## data: as.numeric(Ltab1$CD45.Frac.FACS) by Ltab1$Tumor.Growth ## W = 144, p-value = 0.04588 ## alternative hypothesis: true location shift is not equal to 0 wilcox.test(as.numeric(Ltab1$DN.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum exact test ## ## data: as.numeric(Ltab1$DN.Frac.FACS) by Ltab1$Tumor.Growth ## W = 242, p-value = 0.8695 ## alternative hypothesis: true location shift is not equal to 0 wilcox.test(as.numeric(Ltab1$EpCAM.Frac.FACS)~Ltab1$Tumor.Growth) ## ## Wilcoxon rank sum test with continuity correction ## ## data: as.numeric(Ltab1$EpCAM.Frac.FACS) by Ltab1$Tumor.Growth ## W = 307, p-value = 0.1074 ## alternative hypothesis: true location shift is not equal to 0 Also check if it correlates with raw growth rates: corVals=sapply(2:4, function(x) cor.test(Ltab1$GrowthRate, as.numeric(Ltab1[ ,x]), method = &quot;spearman&quot;)) ggplot(Ltab2, aes(x=value, y=GrowthRate))+geom_point()+facet_grid(~variable)+theme_bw()+geom_smooth(method=lm) corVals[3:4, ] ## [,1] [,2] [,3] ## p.value 0.7841102 0.1692151 0.2583497 ## estimate -0.03932305 -0.195484 0.1612327 We can also plot by treatment: ggplot(Ltab2, aes(x=Treatment, y=value, col=Treatment))+geom_boxplot()+geom_point()+facet_grid(~variable)+ scale_color_manual(values=c(ColMerge[ ,1]))+theme_bw() DT::datatable(Ltab2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(Ltab2, file=&quot;nature-tables/Ext3c.csv&quot;) 2.5 FACS data The immune (CD45) fractions from a number of samples were collected, and assessed using FACs. The major cell types detected are: Leukocytes: Tregs CD8 T cells Thelper cells B cells NK T cells gamma delta T cells Myeloid cells: Macrophages M1 Macrophages M2 Dendritic cells Monocytes Neutrophils We can look at the: types of cells distributions Note that in a number of samples the leukocyte population could not be inferred with confidence, and proportions are normalised to the myeloid population Fdata=read.csv(&quot;../data/carlos_facs_tumors.csv&quot;, stringsAsFactors = F) Fdata[ ,2:ncol(Fdata)]=Fdata[ ,2:ncol(Fdata)]/100 m1=substr(colnames(Fdata), 2, 5) colnames(Fdata)=m1 colnames(Fdata)[1]=&quot;type&quot; scroll_box(kable(Fdata, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) type 11ND 8LD 8RCU 12LD 6RB 11RD 14ND 14NC 3NB 3RC 10LC 10RB 11LB 11RC 15LB 15NC 15RD 16LD 2RA 2RC 5NA 6RD 8RCL Leukocytes 913.8400000 379.5600000 829.5700000 298.8300000 NA NA 291.4300000 576.7400000 1118.8200000 616.3800000 414.7500000 899.6000000 1243.7900000 204.8900000 NA NA NA NA NA NA NA NA NA leukocytes NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Th 0.1823733 0.1223259 0.1239799 0.0542784 NA NA 0.1503277 0.1370462 0.0964141 0.0980077 0.0832309 0.1489996 0.0910604 0.0454390 NA NA NA NA NA NA NA NA NA Tregs 0.1020748 0.3822584 0.0570175 0.0703075 NA NA 0.0703085 0.0438673 0.1722261 0.1392972 0.1607233 0.1387394 0.0263389 0.0292352 NA NA NA NA NA NA NA NA NA CD8 T cells 0.0558632 0.0329329 0.0248804 0.0239936 NA NA 0.0681124 0.0403648 0.0628966 0.0438204 0.0201326 0.0435749 0.0088681 0.0188394 NA NA NA NA NA NA NA NA NA gd T cells 0.0057231 0.0029508 0.0048338 0.0051869 NA NA 0.0052843 0.0034851 0.0054343 0.0099614 0.0108981 0.0039573 0.0023155 0.0078091 NA NA NA NA NA NA NA NA NA NK cells 0.0081852 0.0023975 0.0086430 0.0082321 NA NA 0.0024706 0.0033984 0.0057471 0.0130277 0.0073056 0.0078924 0.0047355 0.0009273 NA NA NA NA NA NA NA NA NA B cells 0.0320297 0.0259774 0.1150958 0.3691731 NA NA 0.0552105 0.1627076 0.1690978 0.1648821 0.0852803 0.1415963 0.1131783 0.5891942 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA DC 0.0847253 0.0099781 0.0240649 0.0937623 0.0796767 0.0904331 0.0210829 0.0866281 0.1246231 0.2439219 0.0338069 0.0087373 0.0787654 0.0441001 0.0782997 0.1614173 0.0582119 0.0529557 0.0371143 0.0034515 0.0605741 0.0224583 0.0656124 Monocytes 0.0869640 0.0992694 0.1052141 0.1075509 0.0750577 0.0896695 0.1671775 0.0227902 0.0658291 0.0406536 0.0388811 0.0573525 0.0550409 0.0607867 0.0630813 0.0921618 0.1345743 0.2219148 0.0818758 0.0326953 0.1337320 0.0871336 0.0882122 Neutrophils 0.1195109 0.0713534 0.0989646 0.0961261 0.1039261 0.0484346 0.0821956 0.0795769 0.1165829 0.0390594 0.2022707 0.0442465 0.1378131 0.0369487 0.0839361 0.0629921 0.1058862 0.0959791 0.1177103 0.0213367 0.1875633 0.0681735 0.0702109 MHCII-hi Macro 0.0079215 0.0188760 0.0327395 0.0978332 0.0254042 0.1052689 0.1015139 0.0328633 0.0341709 0.0462336 0.0260688 0.0224593 0.0856493 0.0309893 0.0660404 0.0758769 0.0283632 0.1103736 0.0456621 0.0460621 0.0757107 0.1725741 0.0463399 MHCII-lo Macro 0.0451180 0.2975240 0.2654603 0.1099146 0.0542725 0.0976328 0.1608619 0.0690003 0.0894472 0.0278996 0.0253711 0.2559019 0.0511094 0.0536353 0.0862846 0.0606657 0.0647108 0.1009692 0.2576354 0.2502040 0.0721728 0.1834358 0.0866607 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Total 0.7304889 1.0658438 0.8608938 1.0363587 0.3383372 0.4314389 0.8845458 0.6817281 0.9424693 0.8667644 0.6939694 0.8734574 0.6548747 0.9179043 0.3776421 0.4531138 0.3917464 0.5821924 0.5399978 0.3537496 0.5297529 0.5337753 0.3570360 Lin- 0.2695111 -0.0658438 0.1391062 -0.0363587 0.6616628 0.5685611 0.1154542 0.3182719 0.0575307 0.1332356 0.3060306 0.1265426 0.3451253 0.0820957 0.6223579 0.5468862 0.6082536 0.4178076 0.4600022 0.6462504 0.4702471 0.4662247 0.6429640 t2=Fdata[-which(Fdata[ ,1]==&quot;&quot;),] #rownames(t2)=Fdata[-which(Fdata[ ,1]==&quot;&quot;) ,1] t2=t2[-c(1:2, 14), ] t2melt=melt(t2) ggplot(t2melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;all samples&#39;)+theme(axis.text.x = element_text(angle = 90)) We can look solely at the myeloid population (and normalise to this total), and color according to growth t3=t2[7:11, ] t3[, 2:ncol(t3)]=t(t(t3[, 2:ncol(t3)])/colSums(t3[, 2:ncol(t3)])) t3melt=melt(t3) t3melt$growth=d1$growthrate_cutoff2[match(t3melt$variable, d1$sample)] ggplot(t3melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;myeloid specific&#39;)+theme(axis.text.x = element_text(angle = 90)) Similarly, we can look at the leukocyte population. Note that the Treg population in some of these samples is very high. t3=t2[1:6, ] t3[, 2:ncol(t3)]=t(t(t3[, 2:ncol(t3)])/colSums(t3[, 2:ncol(t3)])) t3melt=melt(t3) t3melt$growth=d1$growthrate_cutoff2[match(t3melt$variable, d1$sample)] ggplot(t3melt, aes(x=variable, y=value, fill=type))+geom_bar(stat=&quot;identity&quot;)+xlab(&quot;sample&quot;)+ylab(&quot;proportion&quot;)+ggtitle(&#39;leukocyte specific&#39;)+theme(axis.text.x = element_text(angle = 90)) "],["cohort-summary-table.html", "Chapter 3 Cohort Summary Table 3.1 Total number of samples 3.2 Compare the characterisation vs progression cohort 3.3 Summary of the RNA data", " Chapter 3 Cohort Summary Table 3.1 Total number of samples Firstly, look at the total number of samples: #recur variables here avtum=table(Cdata$Rat_ID) Cchar=Cdata[Cdata$Cohort!=&quot;Progression&quot;, ] Cprog=Cdata[Cdata$Cohort==&quot;Progression&quot;, ] Feature Levels N Total No Tumors All 154 - Characterisation 66 - Progression 84 Total No Rats All 84 - Characterisation 38 - Progression 42 No tumours per rat 1.83 ( 1, 3) 3.2 Compare the characterisation vs progression cohort Feature Levels Characterisation Progression Total No tumours 70 88 Treatments Vehicle 62 26 - LY 18 - PDL1 17 - PDL1+LY 23 - NA 34 4 Histology diff. adenocarcinomas 47 76 - mucinous carcinoma 2 3 - Fibroadenoma 2 4 - NA 19 5 Age Injection 32-36 22 84 - 35 25 0 - 49 4 0 - NA 19 4 Time (days) NMU 2 Sac 92.09 (55, 160) 149.37 (79, 248.7) - Cases with NA 4 4 - NMU 2 Tumor 100.62 (44.2, 182.7) - Cases with NA 70 4 - Tum Spec Surv 48.75 (9.5, 92) - Cases with NA 70 4 Growth Rate/Size (mm) overall size @ sac 9.83 (2, 20) 19.52 (3, 40) - Growing No. 47 - Growing size @ sac 27.7 15, 28, 40 - Stable 31 - Stable size @ sac 9.58 (1, 6, 24) - NA 70 10 Spatial Pattern - Infiltrating 0 26 - Restricted 0 33 - NA 70 29 RNA samples any fraction 36 83 - Ep 22 21 - DN 0 33 - CD45 18 36 Imaging Data No tumors 64 - No tumors with RNA 0 Trichrome Data No tumors 47 - No tumors with RNA 0 FACS data Comprehensive 22 - EpCAM/CD45 0 52 3.3 Summary of the RNA data Below is a table of the samples with RNA information CRchar=Cchar[which(Cchar$AnyRdata==&quot;yes&quot;), ] CRprog=Cprog[which(Cprog$AnyRdata==&quot;yes&quot;), ] Feature Levels Characterisation Progression RNA samples any fraction 0 0 - Ep 13 21 - DN 0 33 - CD45 10 36 Treatments Char/Prev Vehicle 13 15 - Untreat (char) 0 - LY 9 - PDL1 11 - PDL1+LY 11 - NA 0 0 Time NMU 2 Sac 102.31 (56.2, 160) 113.85 (79, 166) Growth Rate/Size (mm) overall size @ sac 9.23 (4, 18) 21.96 (6, 37.5) - Growing No. 33 - Growing size @ sac 27.64 15, 28, 40 - Stable 12 - Stable size @ sac 7.17 (3.1, 6, 9.7) - NA 13 1 Growth and Treatment: comparing small/stable vs large/growing Vehicle N s/l 2, 13 LY N s/l 2, 7 PDL1 and Treatment N s/l 4, 6 PDL1+LY N s/l 4, 7 "],["whole-slide-imaging.html", "Chapter 4 Whole-slide imaging 4.1 Associate the frequencies with other data types 4.2 Cellular composition 4.3 Associate composition with other covariates 4.4 Estimate tumor size 4.5 Correlations between different subpopulations 4.6 Associations between CD8 counts with other clinical variables", " Chapter 4 Whole-slide imaging In this section, we will be looking at the composition and spatial distribution of cells in whole slide images. These sections have previously been assessed using an external script: SpatialStatisticsWSI.R The following markers have been used: EpCAM (tumor cells) SMA (fibroblasts or myeopithelial cells) CD8 (T cells) Note that in some images a double positive EpCAM+/SMA+ population exists. Some CD8 cells have Epcam+ or SMA+ staining, however, we consider all of these to be simply CD8+ WSIpath=&quot;../data/WSI-data/locationData/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIsummary=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIsummary)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) ## knn data WSIpath=&quot;../data/WSI-data/knn-values/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIknn=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIknn)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) ## knn data WSIpath=&quot;../data/WSI-data/interactingFraction/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIIF=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) WSIIF=lapply(WSIIF, function(x) {colnames(x)&lt;-c(&quot;RN&quot;,&quot;Grid&quot;, &quot;NearestNeighbor&quot;, &quot;IF&quot;, &quot;Reference&quot;); x}) names(WSIIF)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) # MH data WSIpath=&quot;../data/WSI-data/mh-values/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIMH=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIMH)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) # MH set-up summary WSIpath=&quot;../data/WSI-data/MHset-upSummary/&quot; WSIfiles=dir(WSIpath, &quot;*.csv&quot;) WSIMHsetup=lapply(WSIfiles, function(x) read.csv(paste(WSIpath, x, sep=&quot;&quot;))) names(WSIMHsetup)=sapply(strsplit(WSIfiles, &quot;_&quot;), function(x) x[1]) save(WSIsummary, WSIknn, WSIIF, WSIMH, WSIMHsetup, file=sprintf(&quot;outputs/WSI_raw_data%s.RData&quot;, Sys.Date())) 4.1 Associate the frequencies with other data types UPDATE THE CIBERSORT INFORMATION. Note there are 47 samples with imaging data. 33 of these samples have FACS data, manual counts and TIMER scores Correlate the following information: “CD8.WSI”: CD8 total counts “CD8Frac.WSI”: CD8 fraction (normalised by cell count) “CD8_EPorSMARatio.WSI”: CD8/EP+SMA ratio (any EpCAM or SMA + cell) “CD8_AnySMARatio.WSI”: CD8/Any EPcam+ cell “CD8_EPRatio.WSI”: CD8 to EpCAM+SMA- ratio “CD8normTumSize”: normalised CD8 counts per mm of tumor size at sac “CD8.EpBoundingBox”: approx area per CD8 cell (density) UPDATE THE CIBERSORT INFORMATION. Below are heatmaps which show the correlation between two variables (red is correlated and blue is anti-correlated), and the p.value is indicated in the middle of the square. It appears that CD8 whole-slide imaging associates well with: FACS data (both CD8 and CD45) Manual scoring (Fig 4) of CD8 cells Some CD8 gene signature scores (mainly in EPC, TIMER) SummaryData=read.csv(&quot;../metadata/summary_final_210330.csv&quot;, row.names = 1) ## CD summary NAidx=sapply(1:ncol(SummaryData), function(x) length(which(!is.na(SummaryData[, x])))) names(NAidx)=colnames(SummaryData) colTestCD8=c(&quot;CD8.EpBoundingBox&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, &quot;T.cell.CD8._TIMER&quot;, &quot;T.cell.CD8._CIBERSORT&quot;,&quot;T.cell.CD8._CIBERSORT.ABS&quot;, &quot;T.cell.CD8._EPIC&quot;) # colTestCD8=c(&quot;CD8.EpDomTiles&quot;,&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, ) indx1=c(&quot;CD8.WSI&quot;, &quot;CD8Frac.WSI&quot;, &quot;CD8_EPorSMARatio.WSI&quot;,&quot;CD8_AnySMARatio.WSI&quot;, &quot;CD8_EPRatio.WSI&quot;,&quot;CD8normTumSize&quot;, &quot;CD8.EpBoundingBox&quot;) #, &quot;log2CD8_EPorSMARatio.WSI&quot;, &quot;log2CD8_EPRatio.WSI&quot;) CDsummary=matrix(NA, nrow=length(indx1), ncol=length(colTestCD8)) rownames(CDsummary)=paste(indx1, &quot; N=&quot;, NAidx[match(indx1, names(NAidx))], sep=&quot;&quot;) colnames(CDsummary)=paste(colTestCD8, &quot; N=&quot;, NAidx[match(colTestCD8, names(NAidx))], sep=&quot;&quot;) CDsummaryP=CDsummary for (i in 1:length(indx1)){ CDsummary[i, ]=sapply(colTestCD8, function(x) cor(SummaryData[, indx1[i]], SummaryData[,x], use=&quot;complete&quot;)) CDsummaryP[i, ]=sapply(colTestCD8, function(x) cor.test(SummaryData[, indx1[i]], SummaryData[,x], use=&quot;complete&quot;)$p.value) } ## Do the same with EPCAM/FACS data colTestFACS=grep(&quot;FACS&quot;, colnames(SummaryData), value = T) colTestWSI=grep(&quot;WSI&quot;, colnames(SummaryData), value = T) FACSsummary=matrix(NA, nrow=length(colTestFACS), ncol=length(colTestWSI)) rownames(FACSsummary)=paste(colTestFACS, &quot; N=&quot;, NAidx[match(colTestFACS, names(NAidx))], sep=&quot;&quot;) colnames(FACSsummary)=paste(colTestWSI, &quot; N=&quot;, NAidx[match(colTestWSI, names(NAidx))], sep=&quot;&quot;) FACSsummaryP=FACSsummary for (i in 1:length(colTestFACS)){ FACSsummary[i, ]=sapply(colTestWSI, function(x) cor(SummaryData[, colTestFACS[i]], SummaryData[,x], use=&quot;complete&quot;)) FACSsummaryP[i, ]=sapply(colTestWSI, function(x) cor.test(SummaryData[, colTestFACS[i]], SummaryData[,x], use=&quot;complete&quot;)$p.value) } PvalHM(CDsummary, round(CDsummaryP,2), &quot;CD8 WSI correlation with Pvalues&quot;) Figure 4.1: association with facs PvalHM(FACSsummary, round(FACSsummaryP, 2), &quot;WSI vs FACS w Pvalues&quot;) 4.2 Cellular composition WSIvals=sapply(WSIsummary, function(x) table(factor(x$Class2, levels=c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;EpCAM: SMA&quot;, &quot;SMA&quot;, &quot;Unclass&quot;)))) WSIvalFracs=t(t(WSIvals)/colSums(WSIvals)) lxmatch=match(colnames(WSIvalFracs), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) Cdata$CD8Fraction=NA Cdata$CD8Fraction[na.omit(lxmatch)]=WSIvalFracs[1, ] Cdata$EpCAMFraction=NA Cdata$EpCAMFraction[na.omit(lxmatch)]=WSIvalFracs[2, ] Cdata$DPFraction=NA Cdata$DPFraction[na.omit(lxmatch)]=WSIvalFracs[3, ] Cdata$SMAFraction=NA Cdata$SMAFraction[na.omit(lxmatch)]=WSIvalFracs[4, ] Cdata$UnclassFraction=NA Cdata$UnclassFraction[na.omit(lxmatch)]=WSIvalFracs[5, ] #write.csv(WSIvals, file=&quot;nature-tables/raw_WSI_values.csv&quot;) #write.csv(WSIvalFracs, file=&quot;nature-tables/raw_WSI_values_fractions.csv&quot;) df.Spatial=cbind(t(WSIvals), t(WSIvalFracs)) colnames(df.Spatial)=c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;EpCAM:SMA&quot;, &quot;SMA&quot;, &quot;Unclass&quot;, paste(c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;EpCAM:SMA&quot;, &quot;SMA&quot;, &quot;Unclass&quot;), &quot;frac&quot;, sep=&quot;&quot;)) DT::datatable(df.Spatial, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Here, we look at the raw distributions of the different cell types and see if there are associations with: tumor size growth rate growth rate (categorical) treatment stromal restricted or infiltrating Below are the total cell counts: WSIvals=WSIvals[ , order(WSIvals[1, ])] ordV=colnames(WSIvals) WSIvalFracs=WSIvalFracs[ , order(WSIvalFracs[1, ])] ordV2=colnames(WSIvalFracs) ## match with meta data# get the sample Names CdataTID=gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID) l1=match(colnames(WSIvals), CdataTID) namesA=Cdata$NewID[l1] ### Treat=Cdata$Treatment[l1] Growth=Cdata$Growth2[l1] WSImelt=melt(WSIvals) #WSImelt$Var2=factor(WSImelt$Var2, levels=ordV) WSImelt$treatment=Treat[match(WSImelt$Var2, colnames(WSIvals))] WSImelt$growth=Growth[match(WSImelt$Var2, colnames(WSIvals))] WSImelt$Name=namesA[match(WSImelt$Var2, colnames(WSIvals))] WSImelt$Name=factor(WSImelt$Name, levels=namesA) l2=match(colnames(WSIvalFracs), CdataTID) namesA=Cdata$NewID[l2] Treat=factor(Cdata$Treatment[l2]) Growth=Cdata$Growth2[l2] WSIfracMelt=melt(WSIvalFracs) #WSIfracMelt$Var2=factor(WSIfracMelt$Var2, levels=ordV2) WSIfracMelt$treatment=Treat[match(WSIfracMelt$Var2, colnames(WSIvalFracs))] WSIfracMelt$growth=Growth[match(WSIfracMelt$Var2, colnames(WSIvalFracs))] WSIfracMelt$Name=namesA[match(WSIfracMelt$Var2, colnames(WSIvalFracs))] WSIfracMelt$Name=factor(WSIfracMelt$Name, levels = namesA) #pdf(sprintf(&quot;rslt/WSI-analysis/summary_distributions_norm_cell_count_%s.pdf&quot;, Sys.Date()), width=9, height=5) ggplot(WSImelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;) ggplot(WSImelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by treatment&quot;) ggplot(WSImelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by growth&quot;) Here, the same data is shown and normalised according to total cell count: pdf(&quot;figure-outputs/Fig4_WSI-normalised-all-samples.pdf&quot;, width=8, height=5) ggplot(WSIfracMelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;) dev.off() ## quartz_off_screen ## 2 pdf(&quot;figure-outputs/Fig4_WSI-normalised-all-samples-treatment.pdf&quot;, width=8, height=5) ggplot(WSIfracMelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by treatment&quot;) dev.off() ## quartz_off_screen ## 2 pdf(&quot;figure-outputs/Fig4_WSI-normalised-all-samples-growth2.pdf&quot;, width=8, height=5) ggplot(WSIfracMelt, aes(x=Name, y=value, fill=Var1))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free_x&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by growth&quot;) dev.off() ## quartz_off_screen ## 2 DT::datatable(WSIfracMelt, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) (#fig:Ext4c_pt2)association with growth #write.csv(WSIfracMelt, file=&quot;nature-tables/Ext4c-d.csv&quot;) 4.3 Associate composition with other covariates Make Boxplots of the above data, and index samples according to growth or with treatment #pdf(&quot;~/Desktop/Fig4B-summary-WSI-growth-treatment.pdf&quot;, height=7, width=7) nx1=levels(WSIfracMelt$Var1) nOut=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$growth==&quot;growing&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$growth==&quot;stable&quot; &amp; WSIfracMelt$Var1==x])$p.value) ggplot(WSIfracMelt[-which(is.na(WSIfracMelt$growth)), ], aes(x=Var1, y=value, col=factor(growth)))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ scale_color_manual(values=c(ColSize, &quot;black&quot;))+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;)+theme_bw()+ggtitle(paste(names(nOut), round(nOut,2), collapse=&quot; ;&quot;)) Figure 4.2: association of frequency with treatment and growth nOutA=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;LY&quot; &amp; WSIfracMelt$Var1==x])$p.value) nOutB=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;PDL1&quot; &amp; WSIfracMelt$Var1==x])$p.value) nOutC=sapply(nx1, function(x) wilcox.test(WSIfracMelt$value[WSIfracMelt$treatment==&quot;Vehicle&quot; &amp; WSIfracMelt$Var1==x],WSIfracMelt$value[WSIfracMelt$treatment==&quot;PDL1+LY&quot; &amp; WSIfracMelt$Var1==x])$p.value) ggplot(WSIfracMelt, aes(x=Var1, y=value, col=(treatment)))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ scale_color_manual(values=ColMerge[ ,1])+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;ordered by CD8&quot;)+theme_bw()+ ggtitle(paste(paste(names(nOutA), round(nOutA,2), collapse=&quot; ;&quot;),paste(names(nOutB), round(nOutB,2), collapse=&quot; ;&quot;),paste(names(nOutC), round(nOutC,2), collapse=&quot; ;&quot;) ) ) Figure 4.3: association with treatment #dev.off() DT::datatable(WSIfracMelt[-which(is.na(WSIfracMelt$growth)), ], rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 4.3: association with treatment #write.csv(WSIfracMelt[-which(is.na(WSIfracMelt$growth)), ], file=&quot;nature-tables/4b.csv&quot;) P values when comparing to the vehicle for each comparison: Treatment values LY 0.8630663, 0.0323942, 0.9495167, 0.0437861, 0.04824 PDL1 0.9624018, 0.6258328, 0.0255031, 0.9373764, 0.3049106 PDL1+LY 0.2307253, 1, 1, 0.9298782, 0.4479729 4.4 Estimate tumor size Using WSI data, we can estimate a tumor size for each tissue sample and compare to the final tumor sizes. This will be based on the distribution of EpCAM+ cells. This estimate is can be used to normalise CD8 counts. #estimate the tumor areas Tarea=lapply(WSIsummary, function(x) ripras(x$Centroid.X.µm[x$Class2==&quot;EpCAM&quot;], x$Centroid.Y.µm[x$Class2==&quot;EpCAM&quot;], &quot;convex&quot;)) TareaSum=sapply(Tarea, area) # Tumor diameter Tdiameter=Cdata$Tumor.diameter.sac.mm[match(colnames(WSIvals), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] plot(TareaSum, Tdiameter, ylab=&quot;Tumor Diameter&quot;, xlab=&quot;Epcam cells bounding area&quot;) cor.test(TareaSum, Tdiameter, use=&quot;complete&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: TareaSum and Tdiameter ## t = 1.8547, df = 56, p-value = 0.06891 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.01890939 0.46967349 ## sample estimates: ## cor ## 0.2405613 ## append to Cdata Cdata$TumorAreaWSI=NA lxmatch=match(colnames(WSIvalFracs), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) # probably don&#39;t need this Cdata$TumorAreaWSI[(lxmatch)]=TareaSum #[-which(is.na(lxmatch))] 4.5 Correlations between different subpopulations Look for correlates between different subpopulations: Naturally, we would expect a negative correlation since this should sum to 1. Below are heatmaps showing correlations between different cell types, and significant associations are linearly shown. Note the following negative correlations: epcam and SMA SMA+ and Unclass Ax1=cor(t(WSIvalFracs)) #pdf(sprintf(&quot;rslt/WSI-analysis/summary-associations-between-subgroups_%s.pdf&quot;, Sys.Date()), height=8, width=8) par(oma=c(4, 0,0, 4)) heatmap.2(Ax1, col=brewer.pal(9, &quot;RdBu&quot;), trace=&quot;none&quot;,scale=&quot;none&quot;) par(mfrow=c(2,2)) a1=cor.test(WSIvalFracs[2, ], WSIvalFracs[4, ]) plot(WSIvalFracs[2, ], WSIvalFracs[4, ], xlab=&quot;Epcam+&quot;, ylab=&quot;SMA+&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[4, ], WSIvalFracs[5, ]) plot(WSIvalFracs[4, ], WSIvalFracs[5, ], xlab=&quot;SMA+&quot;, ylab=&quot;Unclass&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[3, ], WSIvalFracs[4, ]) plot(WSIvalFracs[3, ], WSIvalFracs[4, ], xlab=&quot;Epcam+SMA+&quot;, ylab=&quot;SMA&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) a1=cor.test(WSIvalFracs[2, ], WSIvalFracs[5, ]) plot(WSIvalFracs[2, ], WSIvalFracs[5, ], xlab=&quot;Epcam+&quot;, ylab=&quot;nclass&quot;, main=sprintf(&quot;rho=%s,p=%s&quot;, round(a1$estimate, 2), round(a1$p.value, 2))) #devoff() # correlations ctest=matrix(NA, nrow=5, ncol=5) for (i in 1:5){ ctest[i, ]=sapply(1:5, function(x) cor.test(WSIvalFracs[i, ], WSIvalFracs[x, ])$p.value) } All associations determined using a correlation test 4.6 Associations between CD8 counts with other clinical variables Below we assess whether any of the CD8-variables described in section 3.1 is associated with treatment growth spatial pattern indx1=c(indx1, &quot;log2CD8_EPorSMARatio.WSI&quot;, &quot;log2CD8_EPRatio.WSI&quot;) a1=matrix(NA, ncol=length(indx1), nrow=5) for (i in 1:length(indx1)){ a1[1, i]=wilcox.test(SummaryData[SummaryData$Growth%in%c(&quot;stable&quot;, &quot;growing&quot;) ,indx1[i] ]~ SummaryData$Growth[SummaryData$Growth%in%c(&quot;stable&quot;, &quot;growing&quot;)])$p.value a1[2, i]=wilcox.test(SummaryData[SummaryData$SpatialManual%in%c(&quot;Infiltrating&quot;, &quot;restricted&quot;) ,indx1[i] ]~ SummaryData$SpatialManual[SummaryData$SpatialManual%in%c(&quot;Infiltrating&quot;, &quot;restricted&quot;)])$p.value a1[3, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;PDL1&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;PDL1&quot;, &quot;Vehicle&quot;)])$p.value a1[4, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;PDL1+LY&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;PDL1+LY&quot;, &quot;Vehicle&quot;)])$p.value a1[5, i]=wilcox.test(SummaryData[SummaryData$Treatment%in%c(&quot;LY&quot;, &quot;Vehicle&quot;) ,indx1[i] ]~ SummaryData$Treatment[SummaryData$Treatment%in%c(&quot;LY&quot;, &quot;Vehicle&quot;)])$p.value } colnames(a1)=indx1 rownames(a1)=c(&quot;growth&quot;, &quot;spatial&quot;, &quot;pdl1&quot;, &quot;pdl1+ly&quot;, &quot;ly&quot;) par(oma=c(5, 0,0,4)) heatmap.2(-log10(a1), col=brewer.pal(9, &quot;Blues&quot;), trace=&quot;none&quot;, scale=&quot;none&quot;) Note that CD8 normalised by tumor size is associated with growth (but this could a reflection of the size of the tumor), and there is a borderline difference once normalised by epithelial content. In addition the CD8 total count is associated with pdl1+ly treatment. Note that p=0.05 is designated by a value of 1.3 "],["spatial-statistics.html", "Chapter 5 Spatial statistics 5.1 knn-Distances: 5.2 The interacting fraction 5.3 M-H distances 5.4 Comparison between metrics 5.5 Distances to “unclassified cells”", " Chapter 5 Spatial statistics Below, we use three different metrics to compare spatial distributions: k-nearest neighbour distances the interacting fraction morisita-horn distances These are compared to manual inspection of the result 5.1 knn-Distances: The k-nearest neighbour distances looks at the average distance from a given cell type of class A to a cell type of class B. In this section, the reference class A is the CD8 T cell, and we will look at the mean distance to SMA, Epcam, double positive and unclassified cells in each image. To account for potential fluctuations due to misclassified cells, or isolated single cells, k values of 1, 3, 5 will be used. I.e. for each cell, we will compute the mean distance from each Cd8Tcell to its 1, 3, and 5 nearest neighbours. 5.1.1 Comparison to manual classification Overall, we see that the differences in infiltrating vs restricted are similar. We see statistical differences (using anova followed by Tukey’s test) between: epcam and SMA-epcam in both cases (higher distances to EpCAM on average) SMA-Epcam to SMA (CD8s are closer to SMA+) Unclass to Epcam-SMA (CD8s closer to unclass) In the infiltrating case: Unclass to Epcam (CD8s closer to unclass, borderline significant) In the restricted cases, we see: Unclass to SMA (higher distance to unclass in the restricted case) SMA to epcam (CD8s are closer to the SMA) This last result is consistent with what we expect for a CD8+ cell which is stroma-restricted. knnMelt=melt(WSIknn, measure.vars=c(&quot;KS.pval&quot;)) knnTemp1=knnMelt[knnMelt$CellType==&quot;CD8&quot; &amp; knnMelt$NearestCellType%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;, &quot;EpCAM: SMA&quot;, &quot;Unclass&quot;), ] knnTemp1$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] # compute p values? ptest=sapply(levels(knnTemp1$knn), function(x) wilcox.test(knnTemp1$MeanDistance[which(knnTemp1$knn==x &amp; knnTemp1$NearestCellType==&quot;EpCAM&quot; &amp; knnTemp1$SpatialManual==&quot;Infiltrating&quot;)], knnTemp1$MeanDistance[which(knnTemp1$knn==x &amp; knnTemp1$NearestCellType==&quot;SMA&quot; &amp; knnTemp1$SpatialManual==&quot;Infiltrating&quot;)])$p.value) fit1=aov(MeanDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;Infiltrating&quot;, ]) fit2=aov(MeanDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;restricted&quot;, ]) fit1b=aov(MedianDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;Infiltrating&quot;, ]) fit2b=aov(MedianDistance~NearestCellType+knn, data=knnTemp1[knnTemp1$SpatialManual==&quot;restricted&quot;, ]) #pdf(sprintf(&quot;rslt/WSI-analysis/knn_distances_vs_manualspatial_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(knnTemp1, aes(x=NearestCellType, y=MeanDistance, fill=SpatialManual))+geom_boxplot(outlier.shape=NA)+facet_grid(~knn+SpatialManual)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = c(&quot;#e41a1c&quot;, &quot;#377eb8&quot;),na.value=&quot;black&quot;)+ggtitle(&quot;CD8-CelltypeX spatial distributions: mean values&quot;) print(p) par(mfrow=c(1,2), oma=c(0, 0, 2, 0)) plot(TukeyHSD(fit1, &quot;NearestCellType&quot;), las=2) title(&quot;Infiltrating Mean Distance from CD8&quot;, line=3.3) plot(TukeyHSD(fit2, &quot;NearestCellType&quot;), las=2) title(&quot;Restricted Mean Distance from CD8&quot;, line=3.3) Note above the infiltrating samples have shorter distances to EpCAM cells relative to SMA cells compared to restricted samples. (Tukey’s test shows that SMA-EPCAM distances for inf. are large but small in resis.) 5.1.2 Associations with outcome to treatment We can also see if there is an association between these distances with growth and treatment Treatment: CD8 cells in PDL1 sample are further away to SMA+ cells and EpCAM+ (compared to vehicle or double agent) CD8 cells in LY treated samples are further away from unclassified cells (compared to any of the other treatments) #pdf(&quot;~/Desktop/4C-knn-summary-treatment.pdf&quot;, height=5, width=7) knnTemp1$Treatment=Cdata$Treatment[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] fit1=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM&quot; &amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit2=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit3=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM: SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit4=aov(MedianDistance~Treatment, data=knnTemp1[knnTemp1$NearestCellType==&quot;Unclass&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) knnTemp1$Growth=Cdata$Tumor.Growth[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] fit1b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit2b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit3b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;EpCAM: SMA&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) fit4b=aov(MeanDistance~Growth, data=knnTemp1[knnTemp1$NearestCellType==&quot;Unclass&quot;&amp; knnTemp1$knn==&quot;knn3&quot;, ]) #pdf(sprintf(&quot;rslt/WSI-analysis/knn_distances_vs_treatment_growth_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(knnTemp1, aes(col=Treatment, y=MedianDistance, x=Treatment))+geom_boxplot(outlier.shape=NA)+geom_point(position=position_jitterdodge(),alpha=0.3)+facet_grid(~knn+NearestCellType)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = ColMerge[ ,1],na.value=&quot;black&quot;)+theme_bw() print(p) Figure 5.1: knn Distances Below, check whether any of the above are significant using Tukey’s ad-hoc test. Note that not many values cross 0 here, except for the LY samples for stromal cells par(mfrow=c(2,2), oma=c(0, 0, 2, 0)) tukey.test &lt;- TukeyHSD(fit1) plot(TukeyHSD(fit1, &quot;Treatment&quot;), las=2) title(&quot;EpCAM Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit2, &quot;Treatment&quot;), las=2) title(&quot;SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit3, &quot;Treatment&quot;), las=2) title(&quot;EpCAM:SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit4, &quot;Treatment&quot;), las=2) title(&quot;Unclass Distance&quot;, line=3.3) #dev.off() summary(fit1) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 365 121.7 0.307 0.82 ## Residuals 54 21435 396.9 summary(fit2) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 2147233 715744 0.907 0.444 ## Residuals 52 41037326 789179 summary(fit3) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 1969380 656460 0.467 0.707 ## Residuals 29 40735615 1404676 summary(fit4) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Treatment 3 5763 1920.9 2.68 0.0559 . ## Residuals 54 38700 716.7 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] # save data to file knnTemp1$sample=Cdata$NewID[match(knnTemp1$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] DT::datatable(knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), c(2:5, 10:13)], rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) #write.csv(knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), c(2:5, 10:13)], file=&quot;nature-tables/Fig4c_Ext4e.csv&quot;) We can refine this comaprison to just knn3. We compare to the vehicle using a wilcox.test below: knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] ctypes=unique(knnTemp1b$NearestCellType) t2=knnTemp1b[which(knnTemp1b$CellType==&quot;CD8&quot; &amp; knnTemp1b$knn==&quot;knn3&quot;) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;LY&quot;])$p.value) pval3=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;PDL1&quot;])$p.value) pval4=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;Vehicle&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Treatment==&quot;PDL1+LY&quot;])$p.value) pmelt=melt(cbind(LY=pval2, PDL1=pval3, &#39;PDL1+LY&#39;=pval4)) colnames(pmelt)=c(&quot;NearestCellType&quot;,&quot;Treatment&quot;,&quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 pmelt$Treatment[which(pmelt$Treatment==&quot;pval4&quot;)]=&quot;PDL1+LY&quot; p=ggplot(knnTemp1b[knnTemp1b$CellType==&quot;CD8&quot; , ], aes(x=Treatment, y=MeanDistance, col=Treatment))+facet_grid(~NearestCellType)+geom_boxplot()+ylab(&quot;knn3&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;knn3 mean distance to cd8 cell &quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColMerge[ ,1], &quot;black&quot;))+scale_y_continuous(trans=&#39;log10&#39;) p+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label)) 5.1.3 Growth All 95% confidence lines cross 0, but it appears that stable cases have a closer unclass-CD8 interaction distance compared to growing. p&lt;-ggplot(knnTemp1, aes(col=Growth, y=MeanDistance, x=Growth))+geom_boxplot(outlier.shape=NA)+geom_point(position=position_jitterdodge(),alpha=0.3)+facet_grid(~knn+NearestCellType)+scale_y_continuous(trans=&#39;log10&#39;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_color_manual(values = c(ColSizeb, &quot;black&quot;),na.value=&quot;black&quot;)+theme_bw() print(p) par(mfrow=c(2,2), oma=c(0, 0, 2, 0)) plot(TukeyHSD(fit1b, &quot;Growth&quot;), las=2) title(&quot;EpCAM Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit2b, &quot;Growth&quot;), las=2) title(&quot;SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit3b, &quot;Growth&quot;), las=2) title(&quot;EpCAM:SMA Mean Distance&quot;, line=3.3) plot(TukeyHSD(fit4b, &quot;Growth&quot;), las=2) title(&quot;Unclass Distance&quot;, line=3.3) #dev.off() summary(fit1b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 3209 3209 4.568 0.0374 * ## Residuals 51 35824 702 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## 5 observations deleted due to missingness summary(fit2b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 342252 342252 0.358 0.552 ## Residuals 49 46806661 955238 ## 5 observations deleted due to missingness summary(fit3b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 999209 999209 0.48 0.494 ## Residuals 28 58307461 2082409 ## 3 observations deleted due to missingness summary(fit4b) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Growth 1 3469 3469 1.053 0.31 ## Residuals 51 168073 3296 ## 5 observations deleted due to missingness Can also plot the single result for knn=3 knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] ctypes=unique(knnTemp1b$NearestCellType) t2=knnTemp1b[which(knnTemp1b$CellType==&quot;CD8&quot; &amp; knnTemp1b$knn==&quot;knn3&quot;) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$MeanDistance[t2$NearestCellType==x &amp; t2$Growth==&quot;growing&quot; ], t2$MeanDistance[t2$NearestCellType==x &amp; t2$Growth==&quot;stable&quot; ])$p.value) ann_text=data.frame(Glabel=round(pval2,2), NearestCellType=(ctypes ), Growth=&quot;stable&quot;, value=0.7) p=ggplot(knnTemp1b[knnTemp1b$CellType==&quot;CD8&quot; , ], aes(x=Growth, y=MeanDistance, col=Growth))+facet_grid(~NearestCellType)+geom_boxplot()+ylab(&quot;knn3&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;kkn3 nearest neighbor distance to cd8 cell&quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColSizeb, &quot;black&quot;))+scale_y_continuous(trans=&#39;log10&#39;) p+geom_text(data=ann_text, mapping=aes(x=2, y=0.75, label=Glabel)) Is there a plot showing the different knn values? If there is, delete this section Combine the Epithelial samples, and SMA/unclassified samples together: Is there a difference here? knnTemp1b=knnTemp1[which(knnTemp1$knn==&quot;knn1&quot;), ] knnTemp1b$CD8=WSIvalFracs[1, match(knnTemp1b$L1, colnames(WSIvalFracs))] knnTemp1b$CD8frac=ifelse(knnTemp1b$CD8&gt;0.1, &quot;high&quot;, &quot;low&quot;) knnTemp1b$Ep=WSIvalFracs[2, match(knnTemp1b$L1, colnames(WSIvalFracs))] knnTemp1b$Epfrac=ifelse(knnTemp1b$CD8&gt;0.1, &quot;high&quot;, &quot;low&quot;) knnTemp1c=knnTemp1b[knnTemp1b$NearestCellType%in%c(&quot;EpCAM&quot;), ] knnTemp1d=knnTemp1b[knnTemp1b$NearestCellType%in%c(&quot;EpCAM: SMA&quot;), ] knnEpMerge=merge(knnTemp1c, knnTemp1d[ ,c(&quot;MeanDistance&quot;, &quot;MedianDistance&quot;, &quot;variable&quot;, &quot;value&quot;,&quot;L1&quot;)], by.x=&quot;L1&quot;, by.y=&quot;L1&quot;, all=T) knnEpMerge$EpDist2=ifelse(knnEpMerge$MedianDistance.x&lt;knnEpMerge$MedianDistance.y, knnEpMerge$MedianDistance.x, knnEpMerge$MedianDistance.y) knnEpMerge$EpDist2[which(is.na(knnEpMerge$EpDist2))]=knnEpMerge$MedianDistance.x[which(is.na(knnEpMerge$EpDist2))] ggplot(knnEpMerge, aes(x=Growth , y=EpDist2, col=Growth))+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ylim(c(0, 200))+facet_grid(~CD8frac) ggplot(knnEpMerge, aes(x=Treatment, y=EpDist2, col=Treatment))+facet_grid(~CD8frac)+geom_boxplot()+geom_point(position=position_jitterdodge(),alpha=0.3)+ylim(c(0, 200)) plot(knnEpMerge$CD8, knnEpMerge$EpDist2, col=factor(knnEpMerge$Growth)) text(knnEpMerge$CD8, knnEpMerge$EpDist2, knnEpMerge$L1) plot(knnEpMerge$Ep, knnEpMerge$EpDist2, col=factor(knnEpMerge$Growth)) text(knnEpMerge$Ep, knnEpMerge$EpDist2, knnEpMerge$L1) ## what is this used for? knnTempSumm=knnTemp1[which(knnTemp1$knn==&quot;knn3&quot;), ] knnreshape=acast(knnTempSumm[ ,c(&quot;NearestCellType&quot;, &quot;MeanDistance&quot;, &quot;L1&quot;)], L1~NearestCellType, value.var=&quot;MeanDistance&quot; ) knnreshape=data.frame(knnreshape) knnreshape$EpMIN=ifelse(knnreshape$EpCAM..SMA&lt;knnreshape$EpCAM, knnreshape$EpCAM..SMA, knnreshape$EpCAM) knnreshape$EpMIN[which(is.na(knnreshape$EpMIN))]=knnreshape$EpCAM[which(is.na(knnreshape$EpMIN))] knnreshape$EpStrRatio1=knnreshape$EpCAM/rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) knnreshape$EpStrRatio2=knnreshape$EpCAM/(knnreshape$SMA) knnreshape$EpStrRatio3=rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) knnreshape$EpStrRatio4=rowSums(knnreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(knnreshape$SMA) 5.2 The interacting fraction The interacting fraction uses the knn-distances and determines the proportion of CD8 cells which are within a proximity of r um from celltype B. 5.2.1 Comparison to manual &amp; select optimal r Below are plots of the proportion of CD8 cells within an “interacting distance” as we increase r. This looks at both the interacting fraction of CD8 cells with Epcam+ and SMA+ cells. Lines are color coded according to the manual spatial-infiltration annotation. We notice from the line plots for each single sample that the restricted samples generally have low interacting fractins with EpCAM and SMA compared to the infiltrating samples. In addition, there is a statistical difference in EpCAM measurements compared to SMA. IFmelt=melt(WSIIF, measure.vars=c(&quot;IF&quot;)) IFmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFmelt$Treatment=Cdata$Treatment[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFmelt$Growth=Cdata$Tumor.Growth[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #IFmelt$Growth=IFmelt$Growth #IFmelt$Growth[grep(&quot;no data&quot;, IFmelt$Growth)]=&quot;no data&quot; IFmelt$Dist=(substr(IFmelt$Grid, 6, 7)) IFmelt$knn=substr(IFmelt$Grid, 1, 4) IFmelt$sample=Cdata$NewID[match(IFmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] IFTempSumm=IFmelt[IFmelt$Grid==&quot;knn3-15&quot; &amp; IFmelt$Reference==&quot;CD8&quot;, ] IFreshape=acast(IFTempSumm[ ,c(&quot;NearestNeighbor&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~NearestNeighbor, value.var=&quot;value&quot; ) IFreshape=data.frame(IFreshape) IFreshape$EpMIN=ifelse(IFreshape$EpCAM..SMA&lt;IFreshape$EpCAM, IFreshape$EpCAM..SMA, IFreshape$EpCAM) IFreshape$EpMIN[which(is.na(IFreshape$EpMIN))]=IFreshape$EpCAM[which(is.na(IFreshape$EpMIN))] IFreshape$EpStrRatio1=IFreshape$EpCAM/rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) IFreshape$EpStrRatio2=IFreshape$EpCAM/(IFreshape$SMA) IFreshape$EpStrRatio3=rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) IFreshape$EpStrRatio4=rowSums(IFreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(IFreshape$SMA) IFreshape$Treatment=factor(IFTempSumm$Treatment[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$Growth=factor(IFTempSumm$Growth[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$Infil=factor(IFTempSumm$SpatialManual[match(rownames(IFreshape), IFTempSumm$L1)]) IFreshape$CD8frac=SummaryData$CD8Frac.WSI[match(rownames(IFreshape), rownames(SummaryData))] IFreshape$TumSize=SummaryData$TumSize[match(rownames(IFreshape), rownames(SummaryData))] #### # line plots to see the best separation between infiltrating and restricted ### #pdf(sprintf(&quot;rslt/WSI-analysis/interacting_fraction_compared_manual_%s.pdf&quot;, Sys.Date()), height=8, width=14) IFmelt2=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM&quot; &amp; IFmelt$Reference==&quot;CD8&quot; , ] IFmelt2$label=IFmelt2$L1 IFmelt2$label[which(IFmelt2$Dist!=30)]=NA p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, group=L1, label=label))+facet_grid(~knn)+geom_line(aes(group=L1))+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;CD8-EpCAM interacting fraction: spatial manual&quot;)+geom_label() print(p) #IFmelt2$Dist=as.numeric(IFmelt2$Dist) p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-EpCAM knn3&quot;)+stat_smooth() print(p) IFmelt2=IFmelt[IFmelt$NearestNeighbor==&quot;SMA&quot; &amp; IFmelt$Reference==&quot;CD8&quot; , ] IFmelt2$label=IFmelt2$L1 IFmelt2$label[which(IFmelt2$Dist!=30)]=NA p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, group=L1, label=label))+facet_grid(~knn)+geom_line(aes(group=L1))+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;CD8-SMA interacting fraction: spatial manual&quot;)+geom_label() print(p) p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-SMA knn3 &quot;) print(p) # ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, linetype=SpatialManual))+geom_point()+stat_smooth()+ggtitle(&quot;CD8-EpCAM interacting fraction: spatial manual&quot;)+ylab(&quot;Interacting Fraction&quot;) # ## Do a dot plot # p&lt;-ggplot(IFmelt2, aes(x=Dist, y=value, col=SpatialManual, label=label))+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+facet_grid(~knn)+ggtitle(&quot;CD8-SMA knn3 &quot;) # print(p) Using the boxplots as a guide, we can determine optimal “interacting distances” at which to perform downstream analysis. The best separation between restricted and infiltrating for EpCAM appears at: 1-nn: 10-15 um 3-nn: 15 um 5-nn: 20 um The interacting fraction does not distinguish SMA fractions (all restricted boxplots overlap with the infiltrating boxplots) #The following plots use 3NN analysis with an interacting distance of 15um. We can firstly check if there is an association between different &quot;interacting fraction&quot; types and manual scoring, similar to what was performed for knn-analysis. Only CD8-EpCAM interacting distances is associated with manual scoring. All other metrics are not significant. ## reshape and do a correlation plot like for the knn analysis par(mfrow=c(3,3)) for (i in 1:9){ a1=wilcox.test(IFreshape[ ,i]~IFreshape$Infil) boxplot(IFreshape[ ,i]~IFreshape$Infil, main=paste(colnames(IFreshape)[i],&quot; p=&quot;, round(a1$p.value,2), sep=&quot;&quot; ), xlab=&quot;IF: knn3, 15um&quot;) } # Again, association between CD8 content and interacting fraction was observed ONLY in the growing samples or restricted cases. par(mfrow=c(1,2)) a1x=cor.test(IFreshape$CD8frac[IFreshape$Infil==&quot;Infiltrating&quot;], IFreshape$EpCAM[IFreshape$Infil==&quot;Infiltrating&quot;]) a1y=cor.test(IFreshape$CD8frac[IFreshape$Infil==&quot;restricted&quot;], IFreshape$EpCAM[IFreshape$Infil==&quot;restricted&quot;]) plot(IFreshape$CD8frac, IFreshape$EpCAM, col=IFreshape$Infil, pch=19, xlab=&quot;CD8 fraction&quot;, ylab=&quot;CD8-EpCAM IF (knn3-15um)&quot;, main=&quot;spatial scoring&quot;) legend(&quot;topright&quot;, c(paste(&quot;infil p=&quot;, round(a1x$p.value,2)), paste(&quot;restrict p=&quot;, round(a1y$p.value,2))), lwd=2, col=c(1,2)) a1x=cor.test(IFreshape$CD8frac[IFreshape$Growth==&quot;growing&quot;], IFreshape$EpCAM[IFreshape$Growth==&quot;growing&quot;]) a1y=cor.test(IFreshape$CD8frac[IFreshape$Growth==&quot;stable&quot;], IFreshape$EpCAM[IFreshape$Growth==&quot;stable&quot;]) plot(IFreshape$CD8frac, IFreshape$EpCAM, col=IFreshape$Growth, pch=19, xlab=&quot;CD8 fraction&quot;, ylab=&quot;CD8-EpCAM IF (knn3-15um)&quot;, main=&quot;tumor growth&quot;) legend(&quot;topright&quot;, c(paste(&quot;growing p=&quot;, round(a1x$p.value,2)), paste(&quot;stable p=&quot;, round(a1y$p.value,2))), lwd=2, col=c(1,2)) 5.2.2 Growth Here, we check if there is an association between the spatial pattern and tumor growth. P value by wilcox test shown ###### # compare these metrics with growth #### #pdf(&quot;~/Desktop/4D-IF-summary-growth.pdf&quot;, height=5, width=7) #pdf(sprintf(&quot;rslt/WSI-analysis/interacting_fraction_vs_treatment_growth_%s.pdf&quot;, Sys.Date()), height=7, width=12) ctypes=unique(IFmelt$NearestNeighbor) t2=IFmelt[which(IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15) , ] pval2=sapply(ctypes, function(x) wilcox.test(t2$value[t2$NearestNeighbor==x &amp; t2$Growth==&quot;growing&quot; ], t2$value[t2$NearestNeighbor==x &amp; t2$Growth==&quot;stable&quot; ])$p.value) ann_text=data.frame(Glabel=round(pval2,3), NearestNeighbor=(ctypes ), Growth=&quot;stable&quot;, value=0.7) p=ggplot(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , ], aes(x=Growth, y=value, col=Growth))+facet_grid(~NearestNeighbor)+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;Interacting fraction, knn3, dist=15&quot;)+theme_bw()+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColSizeb, &quot;black&quot;)) p+geom_text(data=ann_text, mapping=aes(x=2, y=0.75, label=Glabel)) Figure 5.2: interacting fraction DT::datatable(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , c(2:4, 6, 8:9, 12)], rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) Figure 5.2: interacting fraction pval2 ## CD8 EpCAM EpCAM: SMA SMA Unclass ## 0.716774420 0.001914251 0.395488483 0.154356972 0.428393111 5.2.3 Treatment Similarly, compare the distances with treatment: #pdf(&quot;~/Desktop/4D-IF-summary-treatment.pdf&quot;, height=5, width=7) ctypes=unique(IFmelt$NearestNeighbor) t2=IFmelt[which(IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15) , ] TreatV=sort(unique(IFmelt$Treatment)) pval2=matrix(NA, nrow=3, ncol=5) colnames(pval2)=ctypes rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(ctypes, function(x) wilcox.test(t2$value[t2$NearestNeighbor==x &amp; t2$Treatment==TreatV[i]], t2$value[t2$NearestNeighbor==x &amp; t2$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;NearestNeighbor&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(IFmelt[IFmelt$Reference==&quot;CD8&quot; &amp; IFmelt$knn==&quot;knn3&quot; &amp; IFmelt$Dist==15 , ], aes(x=Treatment, y=value, col=Treatment))+facet_grid(~NearestNeighbor)+geom_boxplot()+ylab(&quot;Interacting Fraction&quot;)+xlab(&quot;Distance in microns&quot;)+ggtitle(&quot;Interacting fraction, knn3, dist=15&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3)+scale_color_manual(values=c(ColMerge[,1])) p+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.75, label=label, col=Treatment)) fit1=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM&quot; &amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit2=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;SMA&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit3=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;EpCAM: SMA&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) fit4=aov(value~Treatment, data=IFmelt[IFmelt$NearestNeighbor==&quot;Unclass&quot;&amp; IFmelt$Reference==&quot;CD8&quot;, ]) There appears to be a difference in CD8-unclass interactions in LY treated samples (LY, PDL1+LY), but not in the other cases 5.3 M-H distances The M-H distance (or Morisita Horn index) can be considered as a correlation coefficient in spatial distribution between cell type A and cell type B. To calculate this metric, the whole slide image is divided into grids of size 50 to 500um. Within each grid, the total number of cells A and B are determined. The M-H index is thus determined as: \\[ \\frac{2\\sum_{i=1}^n a_ib_i}{(D_a+D_b)AB} \\] where \\(a_i\\) and \\(b_i\\) are the number of cells in grid \\(i\\), \\(A\\) and \\(B\\) the total number of cells, and \\(D_x\\) is the Simpson’s index. 5.3.1 Comparison to Manual Scoring Similar to the interacting fraction, we plot the MH index for increasing values of gridsize to determine an optimal metric to compare spatial patterns. Ideally, we would pick a metric has the following properties: good separation of the different values a reasonable number of cells within each grid (avoid too small grids which give counts of 0) avoid plateauing of MH values because the grid size is too large MHgridsize=150 MHmeltsumm=melt(WSIMHsetup, id.vars=c(&quot;gridsize&quot;, &quot;Ntiles&quot;)) MHmelt=melt(WSIMH, measure.vars=&quot;MH.mean&quot;) MHmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmeltsumm$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmeltsumm$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Treatment=factor(Cdata$Treatment[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))]) MHmelt$Growth=factor(Cdata$Tumor.Growth[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))]) MHmelt$Growth=MHmelt$Growth #MHmelt$Growth[grep(&quot;no data&quot;, MHmelt$Growth)]=&quot;no data&quot; A1=MHmelt[MHmelt$Var2==&quot;CD8&quot;, ] A1$label=A1$L1 A1$label[which(A1$gridsize!=500)]=NA A2=MHmelt[MHmelt$Var2==&quot;CD8&quot; &amp; MHmelt$gridsize==MHgridsize &amp; MHmelt$Var1%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;), ] A3=MHmelt[MHmelt$Var2==&quot;CD8&quot; &amp; MHmelt$gridsize==MHgridsize, ] A3$CD8frac=WSIvalFracs[ 1, match(A3$L1, colnames(WSIvals))] MHTempSumm=A3 #MHmelt[which(MHmelt$gridsize==300 &amp; MHmelt$Var2==&quot;CD8&quot;), ] MHreshape=acast(A3[ ,c(&quot;Var1&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~Var1, value.var=&quot;value&quot; ) MHreshape=data.frame(MHreshape) MHreshape$EpMIN=ifelse(MHreshape$EpCAM..SMA&lt;MHreshape$EpCAM, MHreshape$EpCAM..SMA, MHreshape$EpCAM) MHreshape$EpMIN[which(is.na(MHreshape$EpMIN))]=MHreshape$EpCAM[which(is.na(MHreshape$EpMIN))] MHreshape$EpStrRatio1=MHreshape$EpCAM/rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) MHreshape$EpStrRatio2=MHreshape$EpCAM/(MHreshape$SMA) MHreshape$EpStrRatio3=rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;SMA&quot;)], na.rm=T) MHreshape$EpStrRatio4=rowSums(MHreshape[ ,c(&quot;EpCAM..SMA&quot;, &quot;EpCAM&quot;)], na.rm=T)/(MHreshape$SMA) MHreshape$Treatment=factor(A3$Treatment[match(rownames(MHreshape), A3$L1)]) MHreshape$Growth=factor(A3$Growth[match(rownames(MHreshape), A3$L1)]) MHreshape$Infil=factor(A3$SpatialManual[match(rownames(MHreshape), A3$L1)]) #pdf(sprintf(&quot;rslt/WSI-analysis/MHplots_compare_spatial_manual_%s.pdf&quot;, Sys.Date()), height=7, width=12) p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=SpatialManual, label=label))+facet_grid(~Var1)+geom_line(aes(group=L1))+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: spatial manual&quot;)+geom_label() print(p) ggplot(A1, aes(x=factor(gridsize), y=value, col=SpatialManual, label=label))+facet_grid(~Var1)+geom_boxplot()+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: spatial manual&quot;) ggplot(MHmeltsumm, aes(x=factor(gridsize), y=value, col=SpatialManual))+facet_wrap(~variable, scale=&quot;free_y&quot;)+geom_boxplot()+xlab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;expected number of cells in each grid size&quot;)+scale_y_log10() With increasing grid size, optimal differences between infiltrating and restricted appear at the following sizes: epCAML 100um+ epcam:SMA most significant at 350+ SMA: 150+ Unclass:200+ We probably want to use a metric/gridsize of 250 um as the expected/mean number of cells in each grid is 10 here. Other notes: double positive cells (EpCAM+SMA+) appear in predominantly the restricted cases? higher SMA- stromal cells in restricted 5.3.2 Growth Below are the MH indices with increasing grid-size for individual samples. In general, there is a subset of stable samples which have very high intermixing p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Growth))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: growth&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3) print(p) Figure 5.3: Fig4e MH index with CD8 growth We can condense these values based on growing vs stable cases: #pdf(&quot;figure-outputs/4E-MH-summary-growth.pdf&quot;, height=5, width=7) pvals=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Growth==&quot;growing&quot;], A3$value[A3$Var1==x &amp; A3$Growth==&quot;stable&quot;])$p.value) ann_text=data.frame(label=round(pvals,2), Var1=unique(A3$Var1), Growth=&quot;growing&quot;) ggplot(A3, aes(x=Growth, y=value, col=Growth))+facet_grid(~Var1)+geom_boxplot()+geom_point()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: growth&quot;)+geom_text(data=ann_text, mapping = aes(x=2, y=0.75, label=label))+scale_color_manual(values=c(ColSizeb, &quot;black&quot;)) #dev.off() DT::datatable(A3, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) #write.csv(A3, file=&quot;nature-tables/Fig4e-Ext4h.csv&quot;) Although the MH values for growing vs stable are not different, we can compare the mixing in epcam vs stroma in matched samples: #pdf(&quot;~/Desktop/4E-MH-summary-matched-samples-growing-stable.pdf&quot;, height=5, width=7) A2t=A2[-which(A2$L1%in%c(&quot;15RD&quot;, &quot;5LB&quot;)), ] a1=t.test(A2t$value[A2t$Growth==&quot;stable&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Growth==&quot;stable&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a2=t.test(A2t$value[A2t$Growth==&quot;growing&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Growth==&quot;growing&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) # ggplot(A2, aes(x=Var1, y=value, col=Growth))+facet_grid(~Growth)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(sprintf(&quot;Morisita Horn index @ %s&quot;, MHgridsize))+ggtitle(sprintf(&quot;MH index with CD8: stable p=%s, growing p=%s&quot;, round(a1$p.value, 2), round(a2$p.value, 2)))+geom_errorbar(aes(ymin=MH.lower, ymax=MH.upper), width=.2)+geom_point() In the growing cases, there is a difference in the MH index in epacam and stroma, but the stable cases do not support this. 5.3.3 Treatment #pdf(&quot;~/Desktop/4E-MH-summary-treatment.pdf&quot;, height=5, width=7) pval2=matrix(NA, nrow=3, ncol=4) colnames(pval2)=unique(A3$Var1) rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Treatment==TreatV[i]], A3$value[A3$Var1==x &amp; A3$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;Var1&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Treatment))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: Treatment&quot;)+geom_point(position=position_jitterdodge(),alpha=0.3) print(p) ggplot(A3, aes(x=Treatment, y=value, col=Treatment))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(&quot;MH index with CD8: Treatment&quot;)+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label))+geom_point(position=position_jitterdodge(),alpha=0.3)+theme_bw()+scale_color_manual(values=ColMerge[ ,1]) Figure 5.4: MH values with Treatment #dev.off() There is no difference between the different spatial metrics compared to the vehicle, however, we can compare for a given treatment if there is a difference between the epcam and the stromal interaction scores. It appears that there is a difference only in the control, where SMA mixing is higher than EPcam mixing: ## pairwise comparison: Epcam vs stroma ## calculate the pairwise p values here A2t=A2[-which(A2$L1%in%c(&quot;15RD&quot;, &quot;5LB&quot;)), ] a1=t.test(A2t$value[A2t$Treatment==&quot;Vehicle&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;Vehicle&quot;&amp; A2t$Var1==&quot;SMA&quot;], paired=T) a2=t.test(A2t$value[A2t$Treatment==&quot;PDL1&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;PDL1&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a3=t.test(A2t$value[A2t$Treatment==&quot;PDL1+LY&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;PDL1+LY&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) a4=t.test(A2t$value[A2t$Treatment==&quot;LY&quot; &amp; A2t$Var1==&quot;EpCAM&quot;], A2t$value[A2t$Treatment==&quot;LY&quot; &amp; A2t$Var1==&quot;SMA&quot;], paired=T) p&lt;-ggplot(A2, aes(x=Var1, y=value, col=Treatment))+facet_grid(~Treatment)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(sprintf(&quot;Morisita Horn index @ %s&quot;, MHgridsize))+ggtitle(sprintf(&quot;MH index with CD8: Cntl p=%s, PDL1 p=%s LY p=%s P+L p=%s&quot;, round(a1$p.value, 2), round(a2$p.value, 2), round(a3$p.value,2), round(a4$p.value, 2)))+geom_errorbar(aes(ymin=MH.lower, ymax=MH.upper), width=.2)+geom_point() print(p) 5.4 Comparison between metrics After assessing optimal parameters for each metric, in this section we assess which metric could be the best for spatial analysis. Below is a table of the different metrics and their values for each sample #write.table(SummaryData, file=&quot;../metadata/WSI_compared_other_metrics.csv&quot;) ## # Combine the data from above into one file # df.temp=cbind(knnreshape[ , 1:9], IFreshape[ ,1:10], MHreshape[ , 1:9] ) colnames(df.temp)=paste(rep(c(&quot;knn&quot;, &quot;IF&quot;, &quot;MH&quot;), times=c(9, 10, 9)), colnames(df.temp),sep=&quot;.&quot;) #colnames(df.Spatial)=paste() df.Spatial=cbind(df.Spatial, df.temp) #df.Spatial=cbind(df.Spatial,IFreshape[ ,11:14]) df.Spatial$GrowthRate=Cdata$GrowthRate[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$TumSize=Cdata$Tumor.diameter.sac.mm[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$knn.EpCAMcut=cut(df.Spatial$knn.EpCAM, c(-1, median(df.Spatial$knn.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$MH.EpCAMcut=cut(df.Spatial$MH.EpCAM, c(-1, median(df.Spatial$MH.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$IF.EpCAMcut=cut(df.Spatial$IF.EpCAM, c(-1, median(df.Spatial$IF.EpCAM, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) df.Spatial$CD8Fraccut=cut(df.Spatial$CD8frac, c(-1, median(df.Spatial$CD8frac, na.rm = T), 1.2), c(&quot;low&quot;, &quot;high&quot;)) #t2=WSIvalFracs[, match(rownames(df.Spatial), colnames(WSIvalFracs))] #rownames(t2)=paste(rownames(t2), &quot;Frac.WSI&quot;, sep=&quot;&quot;) #t3=WSIvals[, match(rownames(df.Spatial), colnames(WSIvalFracs))] #rownames(t2)=paste(rownames(t2), &quot;.WSI&quot;, sep=&quot;&quot;) #df.Spatial=cbind(df.Spatial, t(t2), t(t3)) scroll_box(kable(df.Spatial, format=&quot;html&quot;), height=&quot;300px&quot;, width=&quot;100%&quot;) CD8 EpCAM EpCAM:SMA SMA Unclass CD8frac EpCAMfrac EpCAM:SMAfrac SMAfrac Unclassfrac knn.EpCAM knn.EpCAM..SMA knn.SMA knn.Unclass knn.EpMIN knn.EpStrRatio1 knn.EpStrRatio2 knn.EpStrRatio3 knn.EpStrRatio4 IF.CD8 IF.EpCAM IF.EpCAM..SMA IF.SMA IF.Unclass IF.EpMIN IF.EpStrRatio1 IF.EpStrRatio2 IF.EpStrRatio3 IF.EpStrRatio4 MH.EpCAM MH.EpCAM..SMA MH.SMA MH.Unclass MH.EpMIN MH.EpStrRatio1 MH.EpStrRatio2 MH.EpStrRatio3 MH.EpStrRatio4 GrowthRate TumSize knn.EpCAMcut MH.EpCAMcut IF.EpCAMcut CD8Fraccut 10LB 65507 761887 343389 1126173 563894 0.0228977 0.2663149 0.1200304 0.3936498 0.1971072 39.96193 52.72253 16.94935 28.07623 39.96193 0.5735732 2.3577258 1.3302993 5.4683183 0.2053826 0.2236555 0.0803884 0.5905018 0.3010823 0.0803884 3.333713e-01 3.787550e-01 4.531947e-01 5.148906e-01 0.3580143 0.3510808 0.4990200 0.4513703 0.3510808 0.4211433 0.7174347 0.8341306 1.4209752 6.2285714 35 NA high low low 10LC 3481 102702 58017 106919 75799 0.0100341 0.2960411 0.1672355 0.3081967 0.2184926 32.12258 34.57734 17.87345 24.28626 32.12258 0.6124326 1.7972227 1.2716665 3.7317865 0.0784257 0.3168630 0.2375754 0.4768745 0.3714450 0.2375754 4.435062e-01 6.644578e-01 7.760354e-01 1.162651e+00 0.3338239 0.3690715 0.3937566 0.4370583 0.3338239 0.4376135 0.8477925 0.9214336 1.7851014 5.3571429 25 high low high low 10LD 67342 192699 204061 402092 122548 0.0681088 0.1948931 0.2063845 0.4066703 0.1239434 34.33110 30.18133 15.97086 35.99495 30.18133 0.7438671 2.1496080 1.3978193 4.0393825 0.2816222 0.2944373 0.2563779 0.5786730 0.1450209 0.2563779 3.525981e-01 5.088147e-01 6.596187e-01 9.518592e-01 0.6191886 0.5596224 0.6542665 0.5383814 0.5596224 0.5100867 0.9463859 0.9711029 1.8017290 1.9729730 10 high high high high 10NA 27239 324933 0 167028 65796 0.0465627 0.5554448 0.0000000 0.2855199 0.1124726 23.80977 NA 27.49276 48.19205 23.80977 0.8660376 0.8660376 0.8660376 0.8660376 0.3591542 0.4808547 NA 0.3207166 0.1112743 0.4808547 1.499313e+00 1.499313e+00 1.499313e+00 1.499313e+00 0.3849200 NA 0.4254207 0.3382134 0.3849200 0.9047983 0.9047983 0.9047983 0.9047983 NA 12 high high high high 10ND 22618 463070 0 282453 227392 0.0227195 0.4651478 0.0000000 0.2837204 0.2284123 26.20801 NA 30.06210 40.01762 26.20801 0.8717958 0.8717958 0.8717958 0.8717958 0.3008666 0.4408878 NA 0.1738438 0.1426298 0.4408878 2.536114e+00 2.536114e+00 2.536114e+00 2.536114e+00 0.3107974 NA 0.2528283 0.2367529 0.3107974 1.2292825 1.2292825 1.2292825 1.2292825 0.3930533 15 high low high low 10RBL 3393 58223 25198 42642 37922 0.0202715 0.3478534 0.1505455 0.2547647 0.2265650 44.92703 67.36295 18.22774 26.07893 44.92703 0.5249056 2.4647619 1.3119416 6.1603904 0.1279104 0.2213380 0.2039493 0.5758915 0.4544651 0.2039493 2.838246e-01 3.843398e-01 5.453515e-01 7.384852e-01 0.4376521 0.4278403 0.5676946 0.5101371 0.4278403 0.4396151 0.7709288 0.8693742 1.5245739 4.9761905 40 NA high low low 10RBU 178767 437050 895393 763776 390628 0.0670641 0.1639585 0.3359050 0.2865291 0.1465433 87.12901 76.12121 20.78384 35.23226 76.12121 0.8991173 4.1921519 1.6846410 7.8546713 0.4317687 0.0816202 0.3119480 0.4723411 0.2877489 0.0816202 1.040690e-01 1.727993e-01 5.018152e-01 8.332287e-01 0.3034275 0.3661208 0.5282356 0.5051726 0.3034275 0.3392691 0.5744170 0.7486370 1.2675183 NA 12 NA low low high 10RC 1823 15806 1209 5729 19118 0.0417306 0.3618176 0.0276754 0.1311434 0.4376331 25.68401 94.64722 31.71923 16.94124 25.68401 0.2032503 0.8097300 0.9522403 3.7936364 0.1695008 0.4119583 0.0142622 0.1579813 0.5798135 0.0142622 2.391720e+00 2.607639e+00 2.474522e+00 2.697917e+00 0.5653879 0.3556849 0.5385849 0.6096737 0.3556849 0.6322341 1.0497655 1.0299719 1.7101719 NA 4 high high high high 11LB 196293 587504 13 47 506036 0.1521777 0.4554672 0.0000101 0.0000364 0.3923085 69.10296 7919.73815 6967.17455 17.47761 69.10296 0.0046419 0.0099184 0.5366352 1.1466400 0.6929437 0.2080105 0.0000000 0.0000102 0.5774735 0.0000000 2.041550e+04 2.041550e+04 2.041550e+04 2.041550e+04 0.2377147 0.0002624 0.0002198 0.5655570 0.0002624 493.0221183 1081.6128754 493.5662971 1082.8067179 3.7857143 25 NA low low high 11ND 42097 46872 2054 1551 18188 0.3800672 0.4231776 0.0185443 0.0140030 0.1642079 26.89773 115.53783 92.98237 27.03077 26.89773 0.1289934 0.2892778 0.6830780 1.5318557 0.8951232 0.4326199 0.0146566 0.0079816 0.2765993 0.0146566 1.911018e+01 5.420238e+01 1.975761e+01 5.603869e+01 0.6777854 0.3947415 0.4434028 0.6868704 0.3947415 0.8086739 1.5285999 1.2796448 2.4188549 0.1065574 3 high high high high 11RC 40084 247458 137553 165687 204242 0.0504186 0.3112585 0.1730174 0.2084050 0.2569004 153.33513 178.57028 70.26468 25.53931 153.33513 0.6162122 2.1822504 1.3338375 4.7236450 0.7894172 0.0386688 0.0222283 0.0532631 0.4286498 0.0222283 5.122274e-01 7.259953e-01 8.066755e-01 1.143325e+00 0.0261783 0.0269403 0.0417948 0.1950371 0.0261783 0.3808571 0.6263514 0.7728005 1.2709349 2.6785714 19 NA low low high 11RD 29817 352081 198409 375106 373020 0.0224452 0.2650348 0.1493557 0.2823673 0.2807970 73.82461 68.89859 24.26948 26.26985 68.89859 0.7923810 3.0418697 1.5318895 5.8807677 0.2660563 0.2323507 0.1251300 0.3447698 0.4433712 0.1251300 4.944686e-01 6.739300e-01 7.607594e-01 1.036868e+00 0.2646073 0.2511598 0.3031015 0.4116961 0.2511598 0.4774054 0.8729991 0.9305487 1.7016318 3.6428571 25 NA low low low 12LC 2692 14614 289 125 7425 0.1070591 0.5811891 0.0114933 0.0049712 0.2952873 23.96795 185.03912 202.99400 19.41965 23.96795 0.0617678 0.1180722 0.5386320 1.0296219 0.5118871 0.4342496 0.0115156 0.0018574 0.5401189 0.0115156 3.247222e+01 2.338000e+02 3.333333e+01 2.400000e+02 0.4673802 0.3063251 0.2124277 0.6696129 0.3063251 0.9009690 2.2001850 1.4914721 3.6422059 NA 4 high high high high 12LD 3560 117731 1764 316 35776 0.0223693 0.7397626 0.0110841 0.0019856 0.2247985 12.74758 285.85343 355.94915 26.97636 12.74758 0.0198622 0.0358129 0.4652537 0.8388867 0.1078652 0.8362360 0.0230337 0.0002809 0.3896067 0.0230337 3.586747e+01 2.977000e+03 3.685542e+01 3.059000e+03 0.6771043 0.1575680 0.0985770 0.6385153 0.1575680 2.6434411 6.8687850 3.2585927 8.4672106 0.7702703 6 high high high low 13NA 121602 1156717 0 1221416 917869 0.0355811 0.3384585 0.0000000 0.3573896 0.2685709 70.80101 NA 22.21206 41.36664 70.80101 3.1875036 3.1875036 3.1875036 3.1875036 0.4678459 0.1279338 NA 0.4849838 0.2605385 0.1279338 2.637897e-01 2.637897e-01 2.637897e-01 2.637897e-01 0.2171042 NA 0.3290129 0.2449840 0.2171042 0.6598653 0.6598653 0.6598653 0.6598653 6.2000000 35 NA low low high 14NB 97911 340247 59025 167505 257678 0.1061520 0.3688850 0.0639930 0.1816036 0.2793663 49.22243 100.58773 30.48163 18.51350 49.22243 0.3755449 1.6148228 1.1429838 4.9147687 0.5053671 0.2540062 0.0380039 0.2488995 0.5430442 0.0380039 8.853369e-01 1.020517e+00 1.017799e+00 1.173205e+00 0.3688258 0.2567365 0.4412187 0.6186197 0.2567365 0.5284376 0.8359251 0.8962785 1.4178054 3.3150685 23 NA high low high 14NC 11415 115152 26633 17181 40501 0.0541298 0.5460494 0.1262934 0.0814721 0.1920553 45.49485 76.76388 44.46686 19.26432 45.49485 0.3752749 1.0231182 1.0084796 2.7494347 0.4206746 0.3935173 0.1186159 0.1239597 0.4955760 0.1186159 1.622246e+00 3.174558e+00 2.111232e+00 4.131449e+00 0.2641293 0.2184936 0.3293816 0.5586074 0.2184936 0.4820975 0.8018944 0.8808992 1.4652392 0.5595238 6 NA low high high 14RD 2194 107760 28128 18909 55255 0.0103371 0.5077127 0.1325255 0.0890900 0.2603347 22.18326 43.27617 31.50346 22.40920 22.18326 0.2966485 0.7041532 0.8753645 2.0778489 0.1216955 0.5000000 0.1927985 0.1681860 0.4799453 0.1927985 1.385101e+00 2.972900e+00 1.919192e+00 4.119241e+00 0.4488902 0.4014737 0.4661559 0.4728975 0.4014737 0.5173754 0.9629616 0.9801002 1.8242052 -0.1666667 1 high high high low 15LB 6350 105525 20305 130687 227056 0.0129612 0.2153910 0.0414453 0.2667501 0.4634524 32.69579 70.46882 20.89178 15.83206 32.69579 0.3578762 1.5650073 1.1292024 4.9380478 0.1064567 0.2226772 0.0332283 0.4615748 0.6502362 0.0332283 4.500318e-01 4.824292e-01 5.171865e-01 5.544183e-01 0.2963970 0.2630816 0.3507861 0.3456658 0.2630816 0.4828352 0.8449507 0.9113993 1.5949281 3.5000000 10 high low low low 15NC-D 3993 83111 0 99191 183857 0.0107875 0.2245321 0.0000000 0.2679737 0.4967068 39.22818 NA 23.06369 22.18943 39.22818 1.7008635 1.7008635 1.7008635 1.7008635 0.1344853 0.1299775 NA 0.3683947 0.3005259 0.1299775 3.528212e-01 3.528212e-01 3.528212e-01 3.528212e-01 0.3209594 NA 0.4006575 0.3074837 0.3209594 0.8010817 0.8010817 0.8010817 0.8010817 2.6857143 22 high low low low 15ND 1678 64379 8785 16699 68695 0.0104721 0.4017761 0.0548254 0.1042150 0.4287114 15.54429 53.43276 37.28968 17.33598 15.54429 0.1713390 0.4168524 0.7603086 1.8497622 0.0286055 0.6025030 0.0643623 0.1877235 0.4928486 0.0643623 2.390071e+00 3.209524e+00 2.645390e+00 3.552381e+00 0.4673145 0.5587742 0.5287410 0.4233763 0.4673145 0.4297085 0.8838250 0.9435167 1.9406265 -0.2285714 3 high high high low 15RD 24041 109825 0 0 598394 0.0328312 0.1499809 0.0000000 0.0000000 0.8171879 91.07517 NA NA 11.52589 91.07517 Inf NA Inf NA 0.2216630 0.1578969 NA NA 0.8819101 0.1578969 Inf NA Inf NA 0.3102088 NA NA 0.4379530 0.3102088 Inf NA Inf NA 3.5000000 17 NA low low low 16LA 12242 303229 0 267100 131130 0.0171528 0.4248684 0.0000000 0.3742464 0.1837324 31.26867 NA 19.19006 27.79750 31.26867 1.6294199 1.6294199 1.6294199 1.6294199 0.3536187 0.2750368 NA 0.4480477 0.3018298 0.2750368 6.138560e-01 6.138560e-01 6.138560e-01 6.138560e-01 0.1931754 NA 0.2149619 0.3460849 0.1931754 0.8986496 0.8986496 0.8986496 0.8986496 NA 5 high low high low 16LC 22907 229322 0 115205 112871 0.0476926 0.4774508 0.0000000 0.2398580 0.2349986 71.64542 NA 65.51353 21.56242 71.64542 1.0935973 1.0935973 1.0935973 1.0935973 0.6542978 0.2411490 NA 0.1293491 0.3635133 0.2411490 1.864327e+00 1.864327e+00 1.864327e+00 1.864327e+00 0.0574200 NA 0.0523851 0.1592857 0.0574200 1.0961129 1.0961129 1.0961129 1.0961129 0.6475410 7 NA low low high 16LD 69599 779658 0 905754 446321 0.0316168 0.3541756 0.0000000 0.4114572 0.2027504 38.85862 NA 19.42446 22.61613 38.85862 2.0004993 2.0004993 2.0004993 2.0004993 0.2420006 0.3001624 NA 0.4920473 0.3806520 0.3001624 6.100274e-01 6.100274e-01 6.100274e-01 6.100274e-01 0.4547154 NA 0.4828520 0.6091481 0.4547154 0.9417283 0.9417283 0.9417283 0.9417283 1.9151786 24 high high high low 16ND 137787 687621 242704 572319 188661 0.0753308 0.3759357 0.1326910 0.3128979 0.1031446 29.84045 40.34701 26.33421 47.06903 29.84045 0.4475090 1.1331438 1.0525821 2.6652576 0.4492659 0.2842939 0.0509409 0.3098188 0.0600419 0.0509409 7.880422e-01 9.176134e-01 9.292468e-01 1.082035e+00 0.4245758 0.4176264 0.4836524 0.3800594 0.4176264 0.4710815 0.8778531 0.9344524 1.7413377 1.0745763 25 high high high high 16RD 22697 179849 0 372829 165181 0.0306486 0.2428567 0.0000000 0.5034447 0.2230500 56.31604 NA 16.51236 34.65626 56.31604 3.4105390 3.4105390 3.4105390 3.4105390 0.2959863 0.2354937 NA 0.6114905 0.2825043 0.2354937 3.851142e-01 3.851142e-01 3.851142e-01 3.851142e-01 0.3006802 NA 0.4041937 0.3873276 0.3006802 0.7439011 0.7439011 0.7439011 0.7439011 -0.1027397 3 NA low low low 17NA 114939 444216 0 1252644 619810 0.0472687 0.1826840 0.0000000 0.5151503 0.2548971 61.86642 NA 22.48160 21.57101 61.86642 2.7518686 2.7518686 2.7518686 2.7518686 0.3757123 0.0907525 NA 0.3861962 0.5524496 0.0907525 2.349907e-01 2.349907e-01 2.349907e-01 2.349907e-01 0.2549486 NA 0.2843224 0.5770821 0.2549486 0.8966884 0.8966884 0.8966884 0.8966884 6.8000000 28 NA low low high 17ND 13298 62937 203 1332 41466 0.1115267 0.5278356 0.0017025 0.0111711 0.3477641 15.06388 232.02438 111.85371 18.01790 15.06388 0.0438059 0.1346748 0.7185345 2.2090306 0.3246353 0.6664160 0.0003008 0.0029328 0.4851857 0.0003008 2.060930e+02 2.272308e+02 2.061860e+02 2.273333e+02 0.7675142 0.1896339 0.4520953 0.7379279 0.1896339 1.1960095 1.6976822 1.4915140 2.1171378 -0.3846154 4 high high high high 17RB 85774 1378423 250877 112621 258890 0.0411074 0.6606120 0.1202333 0.0539738 0.1240735 16.70828 88.48121 95.13230 35.71473 16.70828 0.0909970 0.1756320 0.5728853 1.1057178 0.3890573 0.6275561 0.0788001 0.0414694 0.2133747 0.0788001 5.217914e+00 1.513298e+01 5.873110e+00 1.703317e+01 0.3863508 0.2759967 0.2356124 0.4572544 0.2759967 0.7551678 1.6397723 1.2946357 2.8111736 8.2142857 35 high high high high 2N 109694 1143016 335772 714690 1340651 0.0301041 0.3136859 0.0921483 0.1961374 0.3679243 47.77260 87.60001 35.15413 19.20262 47.77260 0.3891730 1.3589470 1.1027947 3.8508309 0.3846518 0.2826408 0.0808522 0.2448721 0.5902966 0.0808522 8.677302e-01 1.154238e+00 1.115953e+00 1.484420e+00 0.3491878 0.2388853 0.3133452 0.4562766 0.2388853 0.6323226 1.1143872 1.0649053 1.8767583 11.7000000 47 NA low high low 2RA 24008 120410 473 10966 123894 0.0858192 0.4304185 0.0016908 0.0391991 0.4428724 44.80857 534.05443 132.80795 15.31048 44.80857 0.0671931 0.3373938 0.8680397 4.3586471 0.3464678 0.4371043 0.0009580 0.0452766 0.6856881 0.0009580 9.454054e+00 9.654094e+00 9.474775e+00 9.675253e+00 0.5644597 0.0274858 0.2713765 0.7331093 0.0274858 1.8886952 2.0799877 1.9806633 2.1812706 3.5428571 20 NA high high high 2RD 31061 111306 51141 76195 148799 0.0742195 0.2659629 0.1222001 0.1820660 0.3555515 38.61221 73.15221 27.66634 21.62384 38.61221 0.3829872 1.3956389 1.1085701 4.0397263 0.3219793 0.1979009 0.1740124 0.2492193 0.5216188 0.1740124 4.675947e-01 7.940835e-01 8.787464e-01 1.492314e+00 0.5678202 0.4565483 0.5544826 0.5877279 0.4565483 0.5616249 1.0240540 1.0131920 1.8474310 20.0000000 20 high high low high 3LA 83808 623759 232788 157121 480097 0.0531246 0.3953915 0.1475608 0.0995967 0.3043263 46.09601 104.05573 65.98973 41.88896 46.09601 0.2710805 0.6985331 0.8830094 2.2753805 0.4243628 0.2865240 0.0929863 0.0477520 0.2387958 0.0929863 2.035863e+00 6.000250e+00 2.696566e+00 7.947526e+00 0.3332982 0.3041986 0.2997380 0.3192354 0.3041986 0.5518761 1.1119649 1.0555690 2.1268463 3.0000000 12 NA low high high 3NB 98748 168767 0 15223 73972 0.2768299 0.4731210 0.0000000 0.0426761 0.2073729 32.31159 NA 62.64161 29.70786 32.31159 0.5158168 0.5158168 0.5158168 0.5158168 0.7233868 0.4377911 NA 0.0275246 0.2218779 0.4377911 1.590545e+01 1.590545e+01 1.590545e+01 1.590545e+01 0.6371794 NA 0.4947252 0.6142263 0.6371794 1.2879462 1.2879462 1.2879462 1.2879462 0.0245902 6 high high high high 3RB 43810 717597 0 625176 256989 0.0266554 0.4366082 0.0000000 0.3803764 0.1563600 42.63162 NA 29.99254 46.16097 42.63162 1.4214077 1.4214077 1.4214077 1.4214077 0.1779959 0.2910751 NA 0.3592331 0.2055695 0.2910751 8.102681e-01 8.102681e-01 8.102681e-01 8.102681e-01 0.3543015 NA 0.4120032 0.4057485 0.3543015 0.8599486 0.8599486 0.8599486 0.8599486 7.6857143 35 NA high high low 3RC 11691 195683 58422 76220 161604 0.0232139 0.3885529 0.1160041 0.1513443 0.3208848 32.11938 55.92834 37.32758 27.31100 32.11938 0.3444219 0.8604733 0.9441516 2.3587846 0.2039175 0.2962108 0.0879309 0.2004961 0.3165683 0.0879309 1.026987e+00 1.477389e+00 1.331851e+00 1.915956e+00 0.3811222 0.3788413 0.4385962 0.3814209 0.3788413 0.4662403 0.8689593 0.9296901 1.7327180 5.5428571 32 high high high low 4LB 37888 542224 163326 231943 574396 0.0244474 0.3498723 0.1053868 0.1496622 0.3706314 30.99117 57.04930 28.06937 16.66993 30.99117 0.3640937 1.1040920 1.0343262 3.1365315 0.2172720 0.2903294 0.1223870 0.2381757 0.5714738 0.1223870 8.052119e-01 1.218972e+00 1.144645e+00 1.732824e+00 0.4265239 0.4040558 0.5049626 0.5312531 0.4040558 0.4692137 0.8446643 0.9137105 1.6448340 6.8783784 35 high high high low 4NC 4456 396164 0 96651 50231 0.0081388 0.7235846 0.0000000 0.1765309 0.0917458 15.33106 NA 30.68159 155.44956 15.33106 0.4996826 0.4996826 0.4996826 0.4996826 0.2675045 0.6851436 NA 0.2188061 0.0832585 0.6851436 3.131282e+00 3.131282e+00 3.131282e+00 3.131282e+00 0.0848612 NA 0.0807651 0.0586587 0.0848612 1.0507163 1.0507163 1.0507163 1.0507163 3.0000000 15 high low high low 4ND 4010 198640 0 265301 57984 0.0076245 0.3776893 0.0000000 0.5044369 0.1102494 20.75556 NA 14.30657 39.67271 20.75556 1.4507707 1.4507707 1.4507707 1.4507707 0.0356608 0.4768080 NA 0.7169576 0.1271820 0.4768080 6.650435e-01 6.650435e-01 6.650435e-01 6.650435e-01 0.4041773 NA 0.4329954 0.3409348 0.4041773 0.9334448 0.9334448 0.9334448 0.9334448 4.3000000 20 high high high low 4RB 69477 752029 407898 556391 694672 0.0280096 0.3031804 0.1644440 0.2243090 0.2800569 53.31478 62.79761 25.09420 28.66758 53.31478 0.6065954 2.1245853 1.3210831 4.6270602 0.3672294 0.1765476 0.1182837 0.3346431 0.3210703 0.1182837 3.897928e-01 5.275699e-01 6.509470e-01 8.810323e-01 0.2509451 0.2272416 0.3686740 0.3511422 0.2272416 0.4211084 0.6806694 0.8024403 1.2970449 7.8108108 40 NA low low low 5LA 30482 234195 0 320467 86337 0.0453952 0.3487738 0.0000000 0.4772540 0.1285770 41.12871 NA 15.84267 35.17202 41.12871 2.5960728 2.5960728 2.5960728 2.5960728 0.3901975 0.2471295 NA 0.5824421 0.1998228 0.2471295 4.242987e-01 4.242987e-01 4.242987e-01 4.242987e-01 0.2946212 NA 0.4144137 0.4699263 0.2946212 0.7109351 0.7109351 0.7109351 0.7109351 0.5000000 6 NA low low high 5LB 7634 139335 0 0 149118 0.0257830 0.4705880 0.0000000 0.0000000 0.5036290 41.91177 NA NA 15.05867 41.91177 Inf NA Inf NA 0.3379618 0.2807178 NA NA 0.6502489 0.2807178 Inf NA Inf NA 0.3399551 NA NA 0.4551737 0.3399551 Inf NA Inf NA 4.0000000 4 NA low high low 5LC 93441 516380 0 833223 371152 0.0515055 0.2846330 0.0000000 0.4592795 0.2045821 82.68448 NA 23.56636 61.02936 82.68448 3.5085804 3.5085804 3.5085804 3.5085804 0.5297032 0.1168545 NA 0.4516540 0.1066662 0.1168545 2.587257e-01 2.587257e-01 2.587257e-01 2.587257e-01 0.1430094 NA 0.2947895 0.1798944 0.1430094 0.4851237 0.4851237 0.4851237 0.4851237 3.5000000 22 NA low low high 5LD 25942 176986 7127 54197 480977 0.0348108 0.2374921 0.0095635 0.0727253 0.6454083 91.41539 174.12079 36.47074 28.68030 91.41539 0.4340886 2.5065407 1.2609063 7.2808006 0.4943721 0.0735101 0.0027369 0.1400046 0.2530645 0.0027369 5.149878e-01 5.250551e-01 5.341615e-01 5.446035e-01 0.1329943 0.1850916 0.3850802 0.1780933 0.1329943 0.2332531 0.3453679 0.5578774 0.8260252 0.9299769 15 NA low low low 5RB 187348 1078667 0 1452387 421479 0.0596672 0.3435375 0.0000000 0.4625612 0.1342341 39.00602 NA 20.88804 28.66510 39.00602 1.8673849 1.8673849 1.8673849 1.8673849 0.4820815 0.1934315 NA 0.5213079 0.2945054 0.1934315 3.710503e-01 3.710503e-01 3.710503e-01 3.710503e-01 0.3599100 NA 0.4620250 0.6079956 0.3599100 0.7789838 0.7789838 0.7789838 0.7789838 10.3571429 35 high high low high 6LDU 78416 377308 0 912277 41718 0.0556253 0.2676477 0.0000000 0.6471339 0.0295931 111.44785 NA 21.09500 421.71225 111.44785 5.2831411 5.2831411 5.2831411 5.2831411 0.4110641 0.1092889 NA 0.6222455 0.0145634 0.1092889 1.756363e-01 1.756363e-01 1.756363e-01 1.756363e-01 0.2047156 NA 0.4431975 0.1223735 0.2047156 0.4619061 0.4619061 0.4619061 0.4619061 2.1974522 32 NA low low high 6ND 170266 980499 223461 528928 183692 0.0815901 0.4698473 0.1070807 0.2534581 0.0880237 28.41556 47.86891 30.70313 51.92693 28.41556 0.3616497 0.9254938 0.9708856 2.4845825 0.5991449 0.2756628 0.0305404 0.2129080 0.0798398 0.0305404 1.132325e+00 1.294750e+00 1.257774e+00 1.438195e+00 0.3247328 0.3222135 0.3681602 0.2951982 0.3222135 0.4703725 0.8820423 0.9370959 1.7572416 30.0000000 40 high low high high 6RB 79608 90700 0 247319 94386 0.1554804 0.1771439 0.0000000 0.4830327 0.1843430 76.37955 NA 15.75336 43.30215 76.37955 4.8484602 4.8484602 4.8484602 4.8484602 0.5258014 0.1446840 NA 0.6712516 0.2653502 0.1446840 2.155435e-01 2.155435e-01 2.155435e-01 2.155435e-01 0.5029649 NA 0.7162637 0.5539084 0.5029649 0.7022064 0.7022064 0.7022064 0.7022064 2.8000000 18 NA high low high 6RC 157455 495313 238235 782142 324989 0.0788010 0.2478878 0.1192287 0.3914362 0.1626462 50.21453 66.49674 18.16188 34.81308 50.21453 0.5931413 2.7648305 1.3786105 6.4261656 0.3830618 0.1966022 0.0674351 0.5424852 0.2411991 0.0674351 3.223408e-01 3.624103e-01 4.329047e-01 4.867181e-01 0.4713741 0.4862458 0.6401989 0.5327762 0.4713741 0.4184618 0.7362931 0.8501259 1.4958161 8.2142857 40 NA high low high 7NB 32396 417604 0 543360 573677 0.0206734 0.2664928 0.0000000 0.3467436 0.3660903 80.17580 NA 23.02340 30.71527 80.17580 3.4823613 3.4823613 3.4823613 3.4823613 0.3887826 0.0728176 NA 0.3846771 0.3060872 0.0728176 1.892955e-01 1.892955e-01 1.892955e-01 1.892955e-01 0.1206553 NA 0.2350231 0.2158776 0.1206553 0.5133764 0.5133764 0.5133764 0.5133764 2.8878505 31 NA low low low 7NC 106074 310952 0 1628191 167163 0.0479457 0.1405509 0.0000000 0.7359455 0.0755580 89.34399 NA 18.52427 73.48726 89.34399 4.8230787 4.8230787 4.8230787 4.8230787 0.5526142 0.0531233 NA 0.5233799 0.0517752 0.0531233 1.015004e-01 1.015004e-01 1.015004e-01 1.015004e-01 0.1534592 NA 0.2455539 0.2388339 0.1534592 0.6249511 0.6249511 0.6249511 0.6249511 3.4444444 40 NA low low high 7RA 72918 530505 441179 772709 466302 0.0319310 0.2323095 0.1931934 0.3383713 0.2041948 33.35958 39.17649 17.01392 25.12197 33.35958 0.5936880 1.9607221 1.2908975 4.2633357 0.2951535 0.2251296 0.1866754 0.4992183 0.1908445 0.1866754 3.282281e-01 4.509642e-01 6.003919e-01 8.248997e-01 0.3395623 0.3529855 0.3949139 0.3654755 0.3395623 0.4540214 0.8598389 0.9259906 1.7536680 1.1153846 8 high low low low 7RB 23710 284804 735372 167172 188017 0.0169469 0.2035659 0.5256130 0.1194875 0.1343866 34.39737 14.99604 27.35225 37.09141 14.99604 0.8122495 1.2575703 1.1663616 1.8058266 0.0670603 0.1917334 0.6787431 0.1155631 0.1097005 0.1917334 2.413848e-01 1.659124e+00 1.095895e+00 7.532482e+00 0.5446202 0.5816950 0.5614016 0.5250031 0.5446202 0.4764429 0.9701081 0.9853194 2.0062559 3.9615385 20 high high low low 7RD 50862 403704 0 886443 240078 0.0321690 0.2553332 0.0000000 0.5606542 0.1518436 44.13770 NA 14.33429 38.10895 44.13770 3.0791694 3.0791694 3.0791694 3.0791694 0.3013841 0.2386457 NA 0.6842436 0.1745901 0.2386457 3.487731e-01 3.487731e-01 3.487731e-01 3.487731e-01 0.3192517 NA 0.4240363 0.3851937 0.3192517 0.7528877 0.7528877 0.7528877 0.7528877 0.9966997 20 NA low low low 8LD 7860 82972 259 508 48175 0.0562336 0.5936154 0.0018530 0.0036344 0.3446635 16.36623 350.73208 292.95079 22.72937 16.36623 0.0254259 0.0558668 0.5703093 1.2531057 0.3456743 0.6508906 0.0008906 0.0035623 0.3871501 0.0008906 1.461714e+02 1.827143e+02 1.463714e+02 1.829643e+02 0.6488849 0.1488781 0.1657167 0.5950220 0.1488781 2.0626057 3.9156287 2.5358434 4.8140179 0.2418033 6 high high high high 8RCL 4518 141557 0 63579 46047 0.0176691 0.5536036 0.0000000 0.2486459 0.1800814 15.12966 NA 36.87314 33.12931 15.12966 0.4103167 0.4103167 0.4103167 0.4103167 0.1051350 0.6186366 NA 0.3669765 0.2673749 0.6186366 1.685766e+00 1.685766e+00 1.685766e+00 1.685766e+00 0.5765175 NA 0.5382005 0.4295692 0.5765175 1.0711947 1.0711947 1.0711947 1.0711947 12.0000000 12 high high high low 8RCU 83679 750075 0 1475968 599152 0.0287668 0.2578575 0.0000000 0.5074018 0.2059739 50.00101 NA 24.56317 37.07321 50.00101 2.0356094 2.0356094 2.0356094 2.0356094 0.2746806 0.2347423 NA 0.4697355 0.2889853 0.2347423 4.997329e-01 4.997329e-01 4.997329e-01 4.997329e-01 0.3676127 NA 0.3679267 0.4564061 0.3676127 0.9991463 0.9991463 0.9991463 0.9991463 5.5142857 27 NA high low low Firstly, we can compare the different metrics to determine how similar or different they are: They generally associate very well, with knn and IF being the best (they are directly related metrics) par(mfrow=c(2,2)) a1=cor.test(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM) plot(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM, xlab=&quot;knn&quot;, ylab=&quot;MH&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) a1=cor.test(df.Spatial$IF.EpCAM, df.Spatial$MH.EpCAM) plot(df.Spatial$MH.EpCAM, df.Spatial$IF.EpCAM, xlab=&quot;MH&quot;, ylab=&quot;IF&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) a1=cor.test(df.Spatial$knn.EpCAM, df.Spatial$MH.EpCAM) plot( df.Spatial$IF.EpCAM,df.Spatial$knn.EpCAM, xlab=&quot;IF&quot;, ylab=&quot;knn&quot;, main=sprintf(&quot;cor:%s, p:%s&quot;, round(a1$estimate,2), round(a1$p.value, 2))) We can also make comparisons directly against growth rate and tumor size par(mfrow=c(2,3)) cNames=c(&quot;knn.EpCAM&quot;, &quot;IF.EpCAM&quot;, &quot;MH.EpCAM&quot;) for (i in cNames){ t1=cor.test(df.Spatial[, i],df.Spatial$GrowthRate, use=&quot;complete&quot;) plot(df.Spatial[, i]~df.Spatial$GrowthRate, ylab=i, xlab=&quot;Growth Rate&quot;, main=sprintf(&quot;cor:%s p:%s&quot;, round(t1$estimate, 2), round(t1$p.value,2))) t1=cor.test(df.Spatial[ ,i],df.Spatial$TumSize, use=&quot;complete&quot;) plot(df.Spatial[, i]~as.numeric(as.character(df.Spatial$TumSize)), ylab=i, xlab=&quot;Tumor size&quot;, main=sprintf(&quot;cor:%s p:%s&quot;, round(t1$estimate, 2), round(t1$p.value, 2))) } 5.5 Distances to “unclassified cells” We noted that the proportion of Unclassified cells seemed to be different between the treatments. Assess here whether the MH index for this cell type is associated with growth or treatment here: varsearch=&quot;Unclass&quot; #MHmeltsumm=melt(WSIMHsetup, id.vars=c(&quot;gridsize&quot;, &quot;Ntiles&quot;)) MHmelt=melt(WSIMH, measure.vars=&quot;MH.mean&quot;) MHmelt$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmeltsumm$SpatialManual=Cdata$Pathologist.CD8.Spatial[match(MHmeltsumm$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Treatment=Cdata$Treatment[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] MHmelt$Growth=Cdata$Tumor.Growth[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmelt$Growth=Cdata$Tumor.growth.status[match(MHmelt$L1, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] #MHmelt$Growth[grep(&quot;no data&quot;, MHmelt$Growth)]=&quot;no data&quot; A1=MHmelt[MHmelt$Var2==varsearch| MHmelt$Var1==varsearch, ] A1$label=A1$L1 A1$label[which(A1$gridsize!=500)]=NA A1$Var1=ifelse(A1$Var1==varsearch, as.character(A1$Var2), as.character(A1$Var1)) A2=MHmelt[(MHmelt$Var2==varsearch|MHmelt$Var1==varsearch) &amp; MHmelt$gridsize==250 &amp; MHmelt$Var1%in%c(&quot;EpCAM&quot;, &quot;SMA&quot;), ] A3=MHmelt[(MHmelt$Var2==varsearch|MHmelt$Var1==varsearch) &amp; MHmelt$gridsize==250, ] A3$CD8frac=WSIvalFracs[ 1, match(A3$L1, colnames(WSIvals))] A3$Var1=ifelse(A3$Var1==varsearch, as.character(A3$Var2), as.character(A3$Var1)) MHTempSumm=A3 #MHmelt[which(MHmelt$gridsize==300 &amp; MHmelt$Var2==varsearch), ] MHreshape=acast(A3[ ,c(&quot;Var1&quot;, &quot;value&quot;, &quot;L1&quot;)], L1~Var1, value.var=&quot;value&quot; ) MHreshape=data.frame(MHreshape) MHreshape$Treatment=A3$Treatment[match(rownames(MHreshape), A3$L1)] MHreshape$Growth=A3$Growth[match(rownames(MHreshape), A3$L1)] MHreshape$Infil=A3$SpatialManual[match(rownames(MHreshape), A3$L1)] colnames(MHreshape)=paste(varsearch, colnames(MHreshape), sep=&quot;.&quot;) DT::datatable(MHreshape, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) #write.csv(MHreshape, file=sprintf(&quot;outputs/%s_MH_comparisons_gridsize250.csv&quot;, varsearch)) # pdf(sprintf(&quot;rslt/WSI-analysis/MHplots_spatial_growth_treatment_%s_celltype_%s.pdf&quot;, varsearch, Sys.Date()), height=7, width=12) # p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Growth))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch)) print(p) pvals=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Growth==&quot;growing&quot;],A3$value[A3$Var1==x &amp; A3$Growth==&quot;stable&quot;])$p.value) ann_text=data.frame(Growth=&quot;stable&quot;, y=0.8, label=round(pvals,2), Var1=unique(A3$Var1)) ggplot(A3, aes(x=Growth, y=value, col=Growth))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch))+ geom_text(data=ann_text, mapping = aes(x=Growth , y=0.75, label=label)) pval2=matrix(NA, nrow=3, ncol=4) colnames(pval2)=unique(A3$Var1) rownames(pval2)=TreatV[1:3] for (i in 1:3){ pval2[i, ]=sapply(unique(A3$Var1), function(x) wilcox.test(A3$value[A3$Var1==x &amp; A3$Treatment==TreatV[i]], A3$value[A3$Var1==x &amp; A3$Treatment==&quot;Vehicle&quot;])$p.value) } pmelt=melt(pval2) colnames(pmelt)=c(&quot;Treatment&quot;, &quot;Var1&quot;, &quot;label&quot;) pmelt$label=round(pmelt$label, 2) pmelt$value=0.8 p&lt;-ggplot(A1, aes(x=gridsize, y=value, col=Treatment))+facet_grid(~Var1)+geom_line(aes(group=L1))+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch)) print(p) ggplot(A3, aes(x=Treatment, y=value, col=Treatment))+facet_grid(~Var1)+geom_boxplot()+ylab(&quot;grid size&quot;)+ylab(&quot;Morisita Horn index&quot;)+ggtitle(sprintf(&quot;MH index with %s: growth&quot;, varsearch))+geom_text(data=pmelt, mapping=aes(x=Treatment, y=0.8, label=label)) We see here that epcam-unclass mixing could also be associated with tumor growth - this could be attributed to a hight number of other immune related cells in this fraction. Note that we can change the entry cell type to obtain the same plots for other reference cells of interest. "],["expression-data.html", "Chapter 6 Expression data 6.1 Running alignment 6.2 RNA Initial QC 6.3 Normalisation 6.4 Processing files for external software", " Chapter 6 Expression data This file looks at loading and pre-processing data for: differential gene expression analysis uploading into CIBERSORT/TIMER 6.1 Running alignment Samples were mapped in star using the following parameters. Note that the first two batches of samples run had shorter read lengths (~75 bp) whereas batch 3 had lengths of ~150bp ## Not run here STAR \\ --readFilesCommand zcat \\ --genomeDir /n/scratch2/at268/rn6_v2 \\ --sjdbGTFfile /n/scratch2/at268/rn6_v2/rn6.refGene.gtf \\ --runThreadN 10 \\ --runMode alignReads \\ --genomeLoad NoSharedMemory\\ --outSAMattributes NH HI AS nM NM\\ --outSAMstrandField intronMotif\\ --outFilterMultimapNmax 20\\ --alignSJoverhangMin 8\\ --readFilesIn $1 $2 \\ --alignSJDBoverhangMin 1\\ --outFilterMismatchNmax 999\\ --outFilterMismatchNoverLmax 0.1\\ --alignIntronMin 20\\ --alignIntronMax 1000000\\ --alignMatesGapMax 1000000\\ --outFilterType BySJout\\ --outFilterScoreMinOverLread 0.33 \\ --outFilterMatchNminOverLread 0.33 \\ --limitSjdbInsertNsj 1200000 \\ --outFilterIntronMotifs None \\ --alignSoftClipAtReferenceEnds Yes\\ --outSAMattrRGline ID:$4 SM:$4 \\ --chimSegmentMin 15 \\ --chimJunctionOverhangMin 15\\ --limitBAMsortRAM 0\\ --outSAMtype BAM SortedByCoordinate\\ --outSAMunmapped Within \\ --quantMode GeneCounts transcriptomeSAM \\ --quantTranscriptomeBan IndelSoftclipSingleend \\ --outFileNamePrefix $3 \\ --twopassMode Basic # Upload infoTable infoTable=read.csv(&quot;../metadata/AllRNA_samples_jan.csv&quot;) 6.2 RNA Initial QC BatchNo=&quot;april&quot; rsemFiles=dir(&quot;../data/RNA_expression/rsem/&quot;, &quot;.results&quot;) allrsem=matrix(NA, nrow=17455, ncol=length(rsemFiles)) #31038 allTPM=matrix(NA, nrow=17455, ncol=length(rsemFiles)) allFPKM=matrix(NA, nrow=17455, ncol=length(rsemFiles)) for (i in 1:length(rsemFiles)){ a1=read.delim(file.path(&quot;../data/RNA_expression/rsem/&quot;, rsemFiles[i])) allrsem[ ,i]=a1$expected_count allTPM[ ,i]=a1$TPM allFPKM[ ,i]=a1$FPKM } cNames=unlist(strsplit(rsemFiles, &quot;.genes.results&quot;)) cNames=unlist(strsplit(cNames, &quot;_0.33_v2&quot;)) sAnnot=match(cNames, infoTable$starSampleName) colnames(allrsem)=paste(infoTable$Rat_ID[sAnnot],infoTable$Location[sAnnot], infoTable$Fraction[sAnnot], sep=&quot;_&quot;) rownames(allrsem)=a1$gene_id colnames(allTPM)=colnames(allrsem) rownames(allTPM)=rownames(allrsem) colnames(allFPKM)=colnames(allrsem) rownames(allFPKM)=rownames(allrsem) starFiles=dir(&quot;../data/RNA_expression/star_april/&quot;, &quot;.tab&quot;) allstar=matrix(NA, nrow=17455, ncol=length(starFiles)) allmapp=matrix(NA, nrow=4, ncol=length(starFiles)) for (i in 1:length(starFiles)){ a1=read.delim(file.path(&quot;../data/RNA_expression/star_april/&quot;, starFiles[i]), header=F) allstar[ ,i]=a1[ -c(1:4),2] allmapp[ ,i]=a1[ c(1:4),2] } cNames=unlist(strsplit(starFiles, &quot;ReadsPerGene.out.tab&quot;)) cNames=unlist(strsplit(cNames, &quot;_0.33_v2&quot;)) sAnnot=match(cNames, infoTable$starSampleName) colnames(allstar)=paste(infoTable$Rat_ID[sAnnot], infoTable$Location[sAnnot],infoTable$Fraction[sAnnot], sep=&quot;_&quot;) rownames(allstar)=a1[-c(1:4) ,1] colnames(allmapp)=colnames(allstar) allmapp=rbind(allmapp, colSums(allstar)) rownames(allmapp)=c(as.character(a1[c(1:4), 1]), &quot;UniqueReads&quot;) ## in all cases, remove the files id=match(cNames, infoTable$starSampleName) infoTable=infoTable[ na.omit(id), ] id2=which(is.na(id)) if (length(id2)&gt;0){ allmapp=allmapp[ , -grep(&quot;NA_NA&quot;, colnames(allmapp))] allTPM=allTPM[ , -id2] allFPKM=allFPKM[ , -id2] allrsem=allrsem[ , -id2] allstar=allstar[, -id2] } Default output from R showing the number of unique reads compared to multimapped, unmapped etc. This is shown for each batch. Note that batch 3 has differences (high percentage of unmapped) compared to the other batches, possibly due to DNA contamination. Below we check for three measures: mapped million reads (ideally, 10M+ reads) Gene Sparsity: This is a measurement of the number of genes which have non-zero values. Ideally, would be greater than 10K, but values which are too high may also suggest contamination from DNA (unexpressed genes are also counted) Varability: standard deviation of the transcriptomic counts. If this value is too low, would suggest that high DNA contamination, non-representative transcriptome. # number of mapped reads UnMappedNorm=t(allmapp)/colSums(allmapp) mUnMap=melt(UnMappedNorm) mUnMap$Batch=infoTable$Batch[match(mUnMap$Var1, infoTable$SampleID)] # how many genes represented Sparsity=colSums(sign(allstar)) # check how skewed the data is cSDs=colSds(allstar) TVals=data.frame(MappedReadsM=allmapp[5, ]/1E6, GeneSparsityK=Sparsity/1E3,Batch=infoTable$Batch, GeneVariabilityCounts=cSDs, Type=as.character(infoTable$Fraction), names=colnames(allstar)) mTV=melt(TVals, measure.vars = c(&quot;MappedReadsM&quot;, &quot;GeneSparsityK&quot;, &quot;GeneVariabilityCounts&quot;)) #pdf(sprintf(&quot;../rslt/DESeq/GE_preprocessing_%s_%s.pdf&quot;, BatchNo,Sys.Date()), height=5, width=8) ggplot(mUnMap, aes(x=Var1, y=value, fill=Var2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, space=&quot;free&quot;, scale=&quot;free&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ylab(&quot;proportion of reads&quot;)+ggtitle(&quot;mapping summary&quot;) ggplot(mTV, aes(x=names, y=value,fill=Type))+geom_bar(stat=&quot;identity&quot;)+ facet_grid(variable~Batch, space=&quot;free_x&quot;, scale=&quot;free&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;#Mapped Reads, #Unique Gebes, #Variability&quot;) par(mfrow=c(2,2)) plot(density(TVals$MappedReadsM), main=&quot;mapped reads&quot;) x1=mean(TVals$MappedReadsM) sdv=sd(TVals$MappedReadsM) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.07, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) plot(density(TVals$GeneSparsityK), main=&quot;gene sparsity&quot;) x1=mean(TVals$GeneSparsityK) sdv=sd(TVals$GeneSparsityK) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.07, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) plot(density(TVals$GeneVariabilityCounts), main=&quot;Gene Variability&quot;) x1=mean(TVals$GeneVariabilityCounts) sdv=sd(TVals$GeneVariabilityCounts) abline(v=c(x1, x1-1.5*sdv, x1+1.5*sdv), col=&quot;grey&quot;, lty=2) text( c(x1, x1-1.5*sdv, x1+1.5*sdv), 0.00015, c(x1, x1-2*sdv, x1+2*sdv), las=2, cex = 0.75, srt=90) #dev.off() Samples to remove from analysis: The thresholds indicated below are based on the above density plots, and removes cases which are &lt;1.5 SD of the mean low total number of mapped reads (under 1.5M) sparsity: less than 8K genes variability : threshold under 500 rmSamples=which(TVals$MappedReadsM&lt;1.5 | TVals$GeneSparsityK&lt;8 | TVals$GeneVariabilityCounts&lt;500) allstarFinal=allstar[ ,-rmSamples] allrsemFinal=allrsem[ ,-rmSamples] allTPMFinal=allTPM[ ,-rmSamples] allFPKMFinal=allFPKM[ ,-rmSamples] infoTableFinal=infoTable[-rmSamples, ] The omitted samples are: kable(TVals[rmSamples, ]) MappedReadsM GeneSparsityK Batch GeneVariabilityCounts Type names 6R_C_CD45 2.287110 5.585 2 1063.38925 CD45 6R_C_CD45 10L_B_DN 0.864838 3.308 2 559.30659 DN 10L_B_DN NMU1_LL_Ep 1.032440 16.708 3 69.82645 Ep NMU1_LL_Ep NMU5_LA_Ep 0.500429 15.707 3 35.56084 Ep NMU5_LA_Ep Control1__Ep 8.224593 5.800 1 3164.00515 Ep Control1__Ep NMU13_RAU_Ep 3.049733 7.242 1 1069.99912 Ep NMU13_RAU_Ep We are left with 110 samples. There are 47, 32, 31 samples in the CD45, Ep, DN fractions. There are 20, 49, 41 samples from batches 1, 2 and 3 respectively. 6.3 Normalisation Run through DESEq and normalise the library. Using all samples, we run the model: expression ~ Celltype + factor (Batch) and keep the genes which have a total count of at least half the number of samples. ie. \\[ sum(gene_i) &gt; N_{samples}/2 \\] # remove rows where counts are low rownames(infoTableFinal)=infoTableFinal$SampleID infoTableFinal$Batch=factor(infoTableFinal$Batch) dds=DESeqDataSetFromMatrix(allstarFinal, infoTableFinal, design=~Fraction+factor(Batch)) ## change class keep=rowSums(counts(dds))&gt;(ncol(dds)/2) dds=dds[keep, ] dds=DESeq(dds) vsd &lt;- varianceStabilizingTransformation(dds) normalizedTableVSD &lt;- assay(vsd) infoTableFinal$TumorIDnew=Cdata$NewID[match(infoTableFinal$TumorID, Cdata$TumorID)] save(dds, vsd,allstarFinal, allrsemFinal,allTPMFinal, normalizedTableVSD,infoTableFinal, file=sprintf(&quot;../dds_normalised_data_newstar_RNAseq%s_%s.RData&quot;, BatchNo, Sys.Date())) 6.3.1 preliminary visualisation (to remove outliers) Below are PCA plots based on: Batch CellType vsd2 &lt;- vst(dds) #pdf(sprintf(&quot;../rslt/DESeq/PCA_preliminary_%s_%s.pdf&quot;,BatchNo, Sys.Date() ), width=8, height=6) plotPCA(vsd2, &quot;Batch&quot;)+ggtitle(&quot;Batch&quot;) plotPCA(vsd2, &quot;Fraction&quot;)+ggtitle(&quot;Fraction&quot;) plotPCA(vsd2, c(&quot;Fraction&quot;))+geom_label(aes(label = name)) Batches in general separate out well, however, some samples appear to be outliers in comparison to the main group. We look in closer detail the CD45, DN and EpCAM populations. In the CD45 population, narrow down to only immune related genes to see if there is a difference. plotPCA(vsd2[rownames(assay(vsd2))%in%RatAllImm , grep(&quot;CD45&quot;, colnames(vsd2))], c(&quot;Growth&quot;))+ggtitle(&quot;CD45 only Growth&quot;) plotPCA(vsd2[ , grep(&quot;Ep&quot;, colnames(vsd2))], &quot;Growth&quot;)+geom_label(aes(label = name))+ggtitle(&quot;Ep only Growth&quot;) plotPCA(vsd2[ , grep(&quot;DN&quot;, colnames(vsd2))], &quot;Growth&quot;)+geom_label(aes(label = name))+ggtitle(&quot;DN only Growth&quot;) Based on the above plots, we remove the following outliers and re-run the normalisation: 2R_D_DN 4L_B_CD45 rmThese=c(&quot;2R_D_DN&quot;, &quot;4L_B_CD45&quot;) ## Note based on the above plots, sample &quot;2R_D_DN&quot; is misclassified as a cd45 sample. Need to remove this sample and re-run the preprocessing: allstarFinal=allstarFinal[ ,-match(rmThese, colnames(allstarFinal))] infoTableFinal=infoTableFinal[-match(rmThese, rownames(infoTableFinal)), ] allrsemFinal=allrsemFinal[ ,-match(rmThese, colnames(allrsemFinal))] allTPMFinal=allTPMFinal[ ,-match(rmThese, colnames(allTPMFinal))] dds=DESeqDataSetFromMatrix(allstarFinal, infoTableFinal, design=~Fraction+factor(Batch)) ## change class keep=rowSums(counts(dds))&gt;(ncol(dds)/2) dds=dds[keep, ] dds=DESeq(dds) vsd &lt;- varianceStabilizingTransformation(dds) normalizedTableVSD &lt;- assay(vsd) infoTableFinal$MHEpCAM=df.Spatial$MH.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$IFEpCAM=df.Spatial$IF.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$knnEpCAM=df.Spatial$knn.EpCAM[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID), rownames(df.Spatial))] infoTableFinal$CD8Frac=df.Spatial$CD8frac[match(gsub(&quot;_&quot;, &quot;&quot;, infoTableFinal$TumorID),rownames(df.Spatial))] # infoTableFinal$Treatment=RNADNAsamples$Treatment[match(infoTableFinal$FqFile, RNADNAsamples$FqFile.CD45)] # idx=match(infoTableFinal$FqFile, RNADNAsamples$FqFile.Ep) # infoTableFinal$Treatment[-which(is.na(idx))]=RNADNAsamples$Treatment[na.omit(idx)] # idx=match(infoTableFinal$FqFile, RNADNAsamples$FqFile.DN) # infoTableFinal$Treatment[-which(is.na(idx))]=RNADNAsamples$Treatment[na.omit(idx)] save(dds, vsd,allstarFinal, allrsemFinal,allTPMFinal, normalizedTableVSD,infoTableFinal, file=sprintf(&quot;outputs/dds_normalised_data_newstar_RNAseq_%s_rm_outliers.RData&quot;, Sys.Date())) 6.4 Processing files for external software We also process these files for external software (TIMER) - which can also run cibersort Rnames=rownames(allrsemFinal) mNames1=SymHum2Rat$HGNC.symbol[match(Rnames, SymHum2Rat$RGD.symbol)] mNames2=Rat2Hum$HGNC.symbol[match(Rnames, Rat2Hum$RGD.symbol)] HumNameFinal=ifelse(is.na(mNames1), mNames2, mNames1) x1=which(is.na(HumNameFinal)==T) ## save rsem for xcell allrsemSave=allrsemFinal[-x1, ] rownames(allrsemSave)=na.omit(HumNameFinal) write.table(allrsemSave, sep=&quot;\\t&quot;, file=sprintf(&quot;../output4external/RSEM_for_xcell%s__%s.txt&quot;,BatchNo, Sys.Date()), col.names = NA) ## save row names for cibersort alltpmSave=allTPMFinal[-x1, ] rownames(alltpmSave)=na.omit(HumNameFinal) write.table(alltpmSave, sep=&quot;\\t&quot;, file=sprintf(&quot;../output4external/TPM_for_cibersort%s_%s.txt&quot;,BatchNo, Sys.Date()), col.names = NA) Also split up the immunotherapy and the characterisation cohorts. Save the mouse names for TIMER cistrome: check that this is actually required for TIMER # Write files for CIBERSORT using rgd. Use cohort specific values allTPMCD45=allTPMFinal[ , which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] write.csv(allTPMCD45, file=sprintf(&quot;../output4external/CD45_TPM_rgd_names_prog_%s.csv&quot;, Sys.Date())) allTPMCD45=allTPMFinal[ , which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] write.csv(allTPMCD45, file=sprintf(&quot;../output4external/CD45_TPM_rgd_names_char_%s.csv&quot;, Sys.Date())) "],["rna-data-preliminary-plots.html", "Chapter 7 RNA data: preliminary plots 7.1 PCA plots 7.2 Expression patterns by cell type", " Chapter 7 RNA data: preliminary plots Prior to doing any comparative analysis, we will look at the following plots to get an overview of the data. 7.1 PCA plots We can check the new PCA plots, and overlay parameters of interest including treatment, growth, tumor size, CD8 fraction, spatial distribution. vsd2 &lt;- vst(dds) vsd2$MHEpCAMcut=cut(infoTableFinal$MHEpCAM, c(-1, median(infoTableFinal$MHEpCAM, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) vsd2$knnEpCAMcut=cut(infoTableFinal$knnEpCAM, c(-1, median(infoTableFinal$knnEpCAM, na.rm = T), 1E7), c(&quot;low&quot;, &quot;high&quot;)) vsd2$IFEpCAMcut=cut(infoTableFinal$IFEpCAM, c(-1, median(infoTableFinal$IFEpCAM, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) vsd2$CD8FracCut=cut(infoTableFinal$CD8Frac, c(-1, median(infoTableFinal$CD8Frac, na.rm = T), 1.1), c(&quot;low&quot;, &quot;high&quot;)) plotPCA(vsd2, c(&quot;Treatment&quot;))+ggtitle(&quot;Treatment&quot;) plotPCA(vsd2, c(&quot;Growth&quot;))+ggtitle(&quot;Growth&quot;) plotPCA(vsd2, &quot;Batch&quot;)+ggtitle(&quot;Batch&quot;) vsdLimmaCor=(vsd2) assay(vsdLimmaCor)=limma::removeBatchEffect(assay(vsdLimmaCor),vsdLimmaCor$Batch) In addition, we can look at the CD45 population and the distributions based on CD8 content and spatial infiltration par(mfrow=c(2,2)) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;CD8FracCut&quot;)+ggtitle(&quot;CD8 content&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;IFEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM Infiltrating Fraction&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;knnEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM nearest neighbor distances&quot;) plotPCA(vsdLimmaCor[ , grep(&quot;CD45&quot;, colnames(vsdLimmaCor))], &quot;MHEpCAMcut&quot;)+ggtitle(&quot;CD8-EpCAM MH index&quot;) Note that the vsd values will need to be normalised by batch for visualisation. 7.2 Expression patterns by cell type Below, we check whether the different fractions are expressing expected markers The cell types are: Red: Cd45 Epcam: green DN:blue Xa=c(brewer.pal(3, &quot;Reds&quot;), brewer.pal(3, &quot;Blues&quot;), brewer.pal(3, &quot;Greens&quot;)) a2=plotPCA(vsd[, which(vsd$Cohort%in%&quot;Progression&quot;)], c(&quot;Growth&quot;, &quot;Fraction&quot;))+scale_color_manual(values=Xa[c( 3,9, 6,1, 7, 4, 2,8, 5)])+theme_bw() a2 Figure 7.1: Ext3d PCA plot SaveOutput=a2$data SaveOutput$sample=infoTableFinal$TumorIDnew[match(SaveOutput$name, rownames(infoTableFinal))] DT::datatable(SaveOutput, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 7.1: Ext3d PCA plot #write.csv(SaveOutput, file=&quot;nature-tables/Ext3d.csv&quot;) We can also visualise PCA plots specifically for CD45, DN or Ep samples plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;CD45&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;CD45 frac by growth&quot;) plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;DN&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;DN frac by growth&quot;) plotPCA(vsdLimmaCor[, which(vsdLimmaCor$Cohort%in%&quot;Progression&quot; &amp; vsdLimmaCor$Fraction==&quot;Ep&quot;)], c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Ep frac by growth&quot;) Reference Genes: purple: immune blue: epithelial green: stroma orange: myoepithelial red: endothelial Below, we see that the CD45 cells separate from the Ep/DN populations have high expression of immune related genes including CD3, CD4, IFNG. However, the DN/Ep fractions are more intermixed. The DN fraction has expression of keratins, as well as fibroblast markers (Acta1), and myeoepithelial markers (Tp63) ## why doesnt this work??? Agenes=unlist(GeneListRat) # Use the original desseq data,a nd then the limma data x1=match(Agenes, rownames(assay(vsd))) RatExpr2=assay(vsd)[na.omit(x1), which(vsd$Cohort==&quot;Progression&quot;)] RowSideCol=names(Agenes)[which(!is.na(x1))] RowSideCol=substr(RowSideCol, 1, 3) ColSideCol=sapply(strsplit(colnames(RatExpr2), &quot;_&quot;), function(x) x[length(x)]) colnames(RatExpr2)=paste(infoTableFinal$TumorIDnew[match(colnames(RatExpr2), rownames(infoTableFinal))], infoTableFinal$Fraction[match(colnames(RatExpr2), rownames(infoTableFinal))]) #pdf(&quot;~/Desktop/FiguS3_celltype_markers_RNA.pdf&quot;, height = 10, width=14) a1=heatmap.2(RatExpr2, col=RdBu[11:1], trace=&quot;none&quot;, RowSideColors = brewer.pal(6, &quot;Set1&quot;)[factor(RowSideCol)], scale=&quot;row&quot;, ColSideColors =brewer.pal(3, &quot;Set1&quot;)[factor(ColSideCol)] ) Figure 7.2: Ext3e We can also remove the CD45 fraction to see if there is a good separation between the CD45 and EPcam samples a1=heatmap.2(RatExpr2[, -grep(&quot;CD45&quot;, colnames(RatExpr2))], col=RdBu[11:1], trace=&quot;none&quot;, RowSideColors = brewer.pal(6, &quot;Set1&quot;)[factor(RowSideCol)], scale=&quot;row&quot;, ColSideColors =brewer.pal(3, &quot;Set1&quot;)[factor(ColSideCol[-grep(&quot;CD45&quot;, colnames(RatExpr2))])] ) DT::datatable(RatExpr2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(RatExpr2, file=&quot;nature-tables/Ext3e.csv&quot;) #dev.off() "],["deseq-analysis-progressionimmunotherapy-cohort.html", "Chapter 8 DESeq analysis: Progression/Immunotherapy cohort 8.1 DN vs Ep 8.2 No. samples in comparisons 8.3 Set-up cell-type specific the comparisons 8.4 PCA plots 8.5 Pearson correlation plots of samples", " Chapter 8 DESeq analysis: Progression/Immunotherapy cohort This document sets up DESeq runs to compare: DN vs Ep samples growing vs stable samples (all 3 fractions) treatments (all 3 fractions) spatial patterns (cd8 or epithelial fractions) The outputs of these analyses will be used for Gene Set Enrichment Analysis, using MSigDB databases (c2, c5, hallmark), alongside pathways from Metacore (Process Networks, Pathway Maps) 8.1 DN vs Ep In section 6.2, we have noticed that some DN samples had expression of epithelial markers. Here, we perform a differential gene expression analysis to find genes which are different between these two fractions. Below is a summary of the number of differential genes, using p value cut off of 0.05 and log2 fold change of 1.5 and base expression of 100+. epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction!=&quot;CD45&quot;)]) DNEpdds=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~Fraction) ## DNEpdds=DESeq(DNEpdds) resDNep=results(DNEpdds, contrast=c(&quot;Fraction&quot;, &quot;DN&quot;, &quot;Ep&quot;)) summary(resDNep) ## ## out of 16929 with nonzero total read count ## adjusted p-value &lt; 0.1 ## LFC &gt; 0 (up) : 3331, 20% ## LFC &lt; 0 (down) : 1972, 12% ## outliers [1] : 0, 0% ## low counts [2] : 1970, 12% ## (mean count &lt; 1) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results vsdDNep=vst(DNEpdds) print(&#39;significant differential genes&#39;) ## [1] &quot;significant differential genes&quot; resDNeprslt2=resDNep[which(resDNep$padj&lt;0.05 &amp; abs(resDNep$log2FoldChange)&gt;1.5 &amp; resDNep$baseMean&gt;100), ] resDNeprslt2$CellMarker=ifelse(rownames(resDNeprslt2)%in%unlist(GeneListRat), 1, 0) resDNeprslt2=resDNeprslt2[order(resDNeprslt2$CellMarker, abs(resDNeprslt2$log2FoldChange), decreasing = T), ] DT::datatable(as.data.frame(resDNeprslt2), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) HighExprGenes=rownames(resDNeprslt2)[which(resDNeprslt2$baseMean&gt;100 &amp; resDNeprslt2$log2FoldChange&lt;0) ] colSide=factor(infoTableFinal$Fraction[ which(infoTableFinal$Fraction!=&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide2=factor(infoTableFinal$Growth[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide3=factor(infoTableFinal$Treatment[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)]) colSide4=cut(infoTableFinal$CD8Frac[ which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], c(-1, 0.025, 0.05, 0.1, 1), brewer.pal(4, &quot;Greens&quot;)) colSide5=cut(infoTableFinal$IFEpCAM[which(infoTableFinal$Fraction!=&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], c(-1, 0.05, 0.1, 0.15, 1), brewer.pal(4, &quot;Greens&quot;)) TableCols=rbind(palette()[colSide], palette()[colSide2], palette()[colSide3], as.character(colSide4), as.character(colSide5)) rownames(TableCols)=c(&quot;Fraction&quot;, &quot;growth&quot;, &quot;treatment&quot;, &quot;cd8 fraction&quot;, &quot;cd8 int. fraction&quot;) colnames(TableCols)=colnames(assay(vsdDNep)) #pdf(sprintf(&quot;rslt/DESeq/difference_between_DN_ep_samples_%s.pdf&quot;, Sys.Date()), height=7, width=8) t1=assay(vsdDNep)[rownames(vsdDNep)%in%unlist(GeneListRat), ] heatmap.2(t1, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;cell type specific markers&quot;) t2=assay(vsdDNep)[which(rownames(vsdDNep)%in%RatCosmic &amp; rownames(vsdDNep)%in%rownames(resDNeprslt2)), ] heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;DEG cosmic genes&quot;) t2=assay(vsdDNep)[which( rownames(vsdDNep)%in%HighExprGenes), ] a1=heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;Enriched in Ep genes&quot;) #heatmap.2(t2[ ,-grep(&quot;CD45&quot;, colnames(t2))], trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide2], scale=&quot;row&quot;, main=&quot;Enriched in Ep genes&quot;) TableCols2=TableCols[ ,a1$colInd] colOutput=melt(TableCols2) colOutput$Var2=factor(colOutput$Var2, levels=unique(colOutput$Var2)) #write.csv(resDNeprslt2, file=sprintf(&quot;outputs/DESeq/difference_between_DN_Ep(ref)_samples_%s.csv&quot;, Sys.Date())) 8.2 No. samples in comparisons Separate out the tables into CD45, DN and Ep fractions. Below, we check the number of samples in each subgroup, based on Treatment growth rate fraction infoTableFinal$Treatment=factor(infoTableFinal$Treatment)#[which(is.na(infoTableFinal$Treatment))]=&quot;PDL1&quot; infoTableFinal$SpatialManual=factor(infoTableFinal$SpatialManual) infoTableFinal$treatA=factor(ifelse(infoTableFinal$Treatment==&quot;Vehicle&quot;, &quot;control&quot;, &quot;imm&quot;)) infoTableFinal$MHcut=factor(ifelse(infoTableFinal$MHEpCAM&gt;=median(df.Spatial$MH.EpCAM, na.rm = T), &quot;inf&quot;, &quot;res&quot;)) infoTableFinal$CD8FracCut=factor(ifelse(infoTableFinal$CD8Frac&gt;=median(df.Spatial$CD8frac, na.rm = T), &quot;high&quot;, &quot;low&quot;)) infoTableFinal$Growth=factor(infoTableFinal$Growth) # print(&#39;number of samples for each treatment and growth rate&#39;) # table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$Growth) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$Growth) par(mfrow=c(3,2)) ContTable(t(a1[ , , 1]), &quot;growing&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;stable&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$MHcut) ContTable(t(a1[ , , 1]), &quot;infiltrating (MH)&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;restricted (MH)&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) a1=table(infoTableFinal$Fraction, infoTableFinal$Treatment, infoTableFinal$CD8FracCut) ContTable(t(a1[ , , 1]), &quot;CD8 low&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) ContTable(t(a1[ , , 2]), &quot;CD8 high&quot;, F, ylabL=&quot;fraction&quot;, xlabL=&quot;treatment&quot;) Note that based on the above tables, there some comparisons which are slightly imbalanced: Note that PDL1/LY treatment with high cd8 content results in very few epithelial cells for analysis There are few “stable” samples for comparisons LY samples are overwhelmingly “infiltrating” 8.3 Set-up cell-type specific the comparisons Setup the following comparisons for each cell type (Separate out the tables into CD45, DN and Ep fractions) \\[ expression ~ growing + treatment + batch (exclude 1) \\] Compare: Treatment (EpddsTreat) Any immunotherapy treatment (Epdds) Growth alone: (EpddsGrowth) - change this to numeric MH index: (EpddsStrMH) CD8 content (EpddsCD8) We remove genes which have 0 counts in more than half the samples, and genes which have a row sum less than \\(10^{(log10(mean(rowsums))-log10(sd(rowsums)))}\\) # find epithelial samples epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;Ep&quot; &amp; !is.na(infoTableFinal$Growth))]) # 2: ep Epdds=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~treatA+factor(Batch)) a1x=rowSums(counts(Epdds)) a1b=apply(counts(Epdds), 1, function(c) sum(c!=0)) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(Epdds))&gt;10^sd1vals) keep2=which(apply(counts(Epdds), 1, function(c) sum(c!=0))&gt; (ncol(Epdds)/2)) Epdds=Epdds[intersect(keep, keep2), ] Epdds=DESeq(Epdds) # 1: ep EpddsTreat=Epdds design(EpddsTreat)=~Treatment+factor(Batch) EpddsTreat=DESeq(EpddsTreat) # 3. ep EpddsGrowth=Epdds design(EpddsGrowth)=~Growth+factor(Batch) ## error is here! EpddsGrowth=DESeq(EpddsGrowth) # 4. ep EpddsStrMH=Epdds[ ,which(!is.na(Epdds$MHcut))] design(EpddsStrMH)=~MHcut+factor(Batch) EpddsStrMH=DESeq(EpddsStrMH) # 5.ep Epddscd8=Epdds[ ,which(!is.na(Epdds$CD8FracCut))] design(Epddscd8)=~CD8FracCut+factor(Batch) Epddscd8=DESeq(Epddscd8) #R1=results(EpddsTreatG, contrast = list(c(&quot;Treatment_LY_vs_Vehicle&quot;, &quot;Growthgrowing&quot;))) ## CD45 samples cdidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;CD45&quot; &amp; !is.na(infoTableFinal$Growth))]) CDdds=DESeqDataSetFromMatrix(allstarFinal[ ,cdidx], infoTableFinal[cdidx, ], design=~treatA+factor(Batch)) ## change class a1x=rowSums(counts(CDdds)) a1b=apply(counts(CDdds), 1, function(c) sum(c!=0)) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(CDdds))&gt;10^sd1vals) keep2=which(apply(counts(CDdds), 1, function(c) sum(c!=0))&gt; (ncol(CDdds)/2)) CDdds=CDdds[intersect(keep, keep2), ] #1. CD45 CDdds=DESeq(CDdds) #2, CD45 CDddsTreat=CDdds design(CDddsTreat)=~Treatment+factor(Batch) CDddsTreat=DESeq(CDddsTreat) # 3. Cd45 CDddsGrowth=CDdds design(CDddsGrowth)=~Growth+factor(Batch) CDddsGrowth=DESeq(CDddsGrowth) #4 CDddsStrMH=CDdds[ ,which(!is.na(CDdds$MHcut))] design(CDddsStrMH)=~MHcut+factor(Batch) CDddsStrMH=DESeq(CDddsStrMH) CDddscd8=CDdds[ ,which(!is.na(CDdds$CD8FracCut))] design(CDddscd8)=~CD8FracCut+factor(Batch) CDddscd8=DESeq(CDddscd8) ## DN samples DNidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;DN&quot; &amp; !is.na(infoTableFinal$Growth))]) DNdds=DESeqDataSetFromMatrix(allstarFinal[ ,DNidx], infoTableFinal[DNidx, ], design=~treatA+factor(Batch)) ## change class a1x=rowSums(counts(DNdds)) a1b=apply(counts(DNdds), 1, function(c) sum(c!=0)) # par(mfrow=c(1,2)) # hist(log10(a1x+1), main=&quot;log10 total counts&quot;) # hist((a1b+1), main=&quot;Non-zero entries&quot;) sd1vals=median(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(DNdds))&gt;10^sd1vals) keep2=which(apply(counts(DNdds), 1, function(c) sum(c!=0))&gt; (ncol(DNdds)/2)) keep=which(rowSums(counts(DNdds))&gt;(ncol(DNdds))) keep2=which(apply(counts(DNdds), 1, function(c) sum(c!=0))&gt; (ncol(DNdds)/2)) DNdds=DNdds[intersect(keep, keep2), ] DNdds=DESeq(DNdds) DNddsTreat=DNdds design(DNddsTreat)=~Treatment+factor(Batch) DNddsTreat=DESeq(DNddsTreat) DNddsGrowth=DNdds design(DNddsGrowth)=~(Growth)+factor(Batch) DNddsGrowth=DESeq(DNddsGrowth) DNddsStrMH=DNdds[ ,which(!is.na(DNdds$MHcut))] design(DNddsStrMH)=~MHcut+factor(Batch) DNddsStrMH=DESeq(DNddsStrMH) DNddscd8=DNdds[ ,which(!is.na(DNdds$CD8FracCut))] design(DNddscd8)=~CD8FracCut+factor(Batch) DNddscd8=DESeq(DNddscd8) save(Epdds, EpddsTreat,CDdds, CDddsTreat, DNdds, DNddsTreat, EpddsGrowth, CDddsGrowth, DNddsGrowth, DNddscd8, DNddsStrMH, CDddscd8, CDddsStrMH, Epddscd8, EpddsStrMH, file=sprintf(&quot;outputs/subfraction_analysis_%s.RData&quot;, Sys.Date())) # Alist=results(EpddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # Clist=results(CDddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) # Dlist=results(DNddsSpatMan, c(&quot;SpatialManual&quot;, &quot;Infiltrating&quot;, &quot;restricted&quot;)) #load(&quot;rslt/DESeq/subfraction_analysis_2020-09-29.RData&quot;) #write.csv(a2, sprintf(&quot;rslt/DESeq/Spatial_Manual_comparison_%s.csv&quot;, Sys.Date())) These comparisons are saved in the temporary outputfile outputs/subfraction_analysis_2022-02-13.RData. In each comparison, there are 13134 genes compared. 8.4 PCA plots Below, we look at PCA plots with information on treatment, growth, spatial patterns overlaid. These are separated based on cell type 8.4.1 EpCAM We see that treatment nor growth separates out these samples. Below is a pca plot of the result, we can also print out the tables for each comparison Epdds$cd8MH=paste(Epdds$CD8FracCut, Epdds$MHcut) vstEp=vst(Epdds, blind=F) #vstEp$Treatment2=ifelse(vstEp$Treatment==&quot;Vehicle&quot;, &quot;no&quot;, &quot;yes&quot;) vsdLimmaEp=vstEp assay(vsdLimmaEp)&lt;- limma::removeBatchEffect(assay(vsdLimmaEp),vsdLimmaEp$Batch) plotPCA(vsdLimmaEp, c(&quot;Growth&quot;))+scale_color_manual(values=c(ColSizeb, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth Ep&quot;) a2=plotPCA(vsdLimmaEp, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment Ep&quot;)+scale_color_manual(values=c(ColMerge[ ,1], &quot;#5D5D5D&quot;)) a2 DT::datatable(a2$data, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(a2$data, file=&quot;nature-tables/3i_epcam.csv&quot;) 8.4.2 CD45 Note there is a strong batch effect: need to apply limma remove Batch Effect prior to creating PCA plots #CDdds$cd8MH=paste(CDdds$CD8FracCut, CDdds$MHcut) vstCD=vst(CDdds, blind=F) plotPCA(vstCD, &quot;Batch&quot;) vsdLimmaCD=vstCD assay(vsdLimmaCD)&lt;- limma::removeBatchEffect(assay(vsdLimmaCD),vstCD$Batch) # library(cluster) ax1=plotPCA(vsdLimmaCD, c(&quot;Batch&quot;), returnData=T) plotPCA(vsdLimmaCD, c(&quot;Growth&quot;))+scale_color_manual(values=c(ColSizeb, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth CD45&quot;) a2=plotPCA(vsdLimmaCD, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment CD45&quot;)+scale_color_manual(values=c(ColMerge[,1], &quot;#5D5D5D&quot;)) a2 DT::datatable(a2$data, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(a2$data, file=&quot;nature-tables/3i_cd45.csv&quot;) 8.4.3 DN DNdds$cd8MH=paste(DNdds$CD8FracCut, DNdds$MHcut) vstDN=vst(DNdds, blind=T) vstDN$Treatment2=ifelse(vstDN$Treatment==&quot;Vehicle&quot;, &quot;no&quot;, &quot;imm&quot;) vsdLimmaDN=vstDN assay(vsdLimmaDN)&lt;- limma::removeBatchEffect(assay(vsdLimmaDN),vstDN$Batch) ax1=plotPCA(vsdLimmaDN, c(&quot;Batch&quot;), returnData=T) plotPCA(vsdLimmaDN, c(&quot;Growth&quot;))+scale_color_manual(values=c(&quot;orange&quot;, &quot;#31A354&quot;))+theme_bw()+ggtitle(&quot;Growth DN&quot;) a2=plotPCA(vsdLimmaDN, c(&quot;Treatment&quot;))+theme_bw()+ggtitle(&quot;Treatment DN&quot;)+scale_color_manual(values=c(ColMerge[,1], &quot;#5D5D5D&quot;)) DT::datatable(a2$data, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(a2$data, file=&quot;nature-tables/3i_dn.csv&quot;) 8.5 Pearson correlation plots of samples Below are pearson correlation plots of the samples in each comparison, colored by growth status Xa1=cor(assay(vsdLimmaEp)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstEp$Growth], trace=&quot;none&quot;, main=&quot;Ep&quot;) DT::datatable(Xa1, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(Xa1, file=&quot;nature-tables/Ext3j.csv&quot;) Xa1=cor(assay(vsdLimmaCD)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstCD$Growth], trace=&quot;none&quot;, main=&quot;CD45&quot;) DT::datatable(Xa1, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(Xa1, file=&quot;nature-tables/FIgS2-cd45-pca-cor-plot.csv&quot;) Xa1=cor(assay(vsdLimmaDN)) heatmap.2(Xa1, col=RdBu[11:1], ColSideColors = ColSizeb[vstDN$Growth], trace=&quot;none&quot;, main=&quot;DN&quot;) #dev.off() DT::datatable(Xa1, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(Xa1, file=&quot;nature-tables/DNsamples_progression_similarity.csv&quot;) "],["collating-results-and-running-gsea.html", "Chapter 9 Collating results and running GSEA", " Chapter 9 Collating results and running GSEA In this section, we combine all the comparisons together for downstream analysis, including number of differential genes per comparisons number of samples per comparison write the output to file (outputs/DESeq/Ep_growth_treat.xlsx) For GSEA we convert rat to human symbols run overlap analysis if there are more than 3 hits (outputs/DESeq/HyperGeo_Ep_growth_treat.xlsx) run gene set enrichment analysis on all samples (outputs/DESeq/GSEA_Ep_growth_treat.xlsx) all outputs saved to outputs/all_differential_comparisons.RData) An example of the code is below: hits=EpCompSig[[i]] ## list of significant genes hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=EpComp4[[i]]$log2FoldChange names(fcTab)=epGenesConv gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) EpComp4=list() EpCompSig=list() UpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:2){ Eres1=results(Epdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) EpComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) EpCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) UpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(EpddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) EpComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[i+1]]=g1 UpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } Eres5=results(EpddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) EpComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[5]]=g1 UpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(EpddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) EpComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[6]]=g1 UpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(Epddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) EpComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) EpCompSig[[7]]=g1 UpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) rownames(UpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(UpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(EpComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(EpCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) ## write to a xls write_xlsx(EpComp4, path=sprintf(&quot;outputs/DESeq/DGEA_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) #load(&quot;anntotations/Rat_biomart_gene_annotations.RData&quot;) epGenes=rownames(Epdds) cdGenes=rownames(CDdds) dnGenes=rownames(DNdds) l1=SymHum2Rat$HGNC.symbol[match(epGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(epGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(epGenes, Mouse2Hum$MGI.symbol)] epGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, epGenes))) l1=SymHum2Rat$HGNC.symbol[match(cdGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(cdGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(cdGenes, Mouse2Hum$MGI.symbol)] cdGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, cdGenes))) l1=SymHum2Rat$HGNC.symbol[match(dnGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(dnGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(dnGenes, Mouse2Hum$MGI.symbol)] dnGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, dnGenes))) load(&quot;../anntotations/ListofGeneSets2.RData&quot;) #save(ListGSC, file=&quot;anntotations/ListofGeneSets2.RData&quot;) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(EpComp4)*2, nrow=length(x))) ismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) ismrB&lt;-ismr3 for (i in 1:length(EpComp4)){ hits=EpCompSig[[i]] hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=EpComp4[[i]]$log2FoldChange names(fcTab)=epGenesConv if (length(hits)&gt;2){ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca=GSCA(listOfGeneSetCollections=ListGSC, geneList=fcTab) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(ismr3[[j]])) ismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;2){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(ismrB[[j]])) ismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } Epismr3 &lt;- lapply(ismr3, function(x){ colnames(x)&lt;- paste(rep(names(EpComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(Epismr3)=names(ListGSC) Epismr3&lt;-lapply(Epismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(Epismr3, path=sprintf(&quot;outputs/DESeq/GSEA_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) EpismrHG &lt;- lapply( ismrB, function(x){ colnames(x)&lt;- paste(rep(names(EpComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(EpismrHG)=names(ListGSC) EpismrHG&lt;-lapply(EpismrHG, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(EpismrHG, path=sprintf(&quot;outputs/DESeq/HyperGeo_Ep_growth_treat_%s.xlsx&quot;, Sys.Date())) #load(&quot;rslt/DESeq/Epithelial_fraction.RData&quot;) ## for treatment control: big differences here which are not replicated CDComp4=list() CDCompSig=list() CDUpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:4){ Eres1=results(CDdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) CDComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) CDCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) CDUpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(CDddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) CDComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[i+1]]=g1 CDUpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } Eres5=results(CDddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) CDComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[5]]=g1 CDUpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(CDddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) CDComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[6]]=g1 CDUpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(CDddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) CDComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) CDCompSig[[7]]=g1 CDUpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) rownames(CDUpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(CDUpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(CDComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(CDCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) ## write to a xls write_xlsx(CDComp4, path=sprintf(&quot;outputs/DESeq/CD_growth_treat_%s.xlsx&quot;, Sys.Date())) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(CDComp4)*2, nrow=length(x))) CDismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) CDismrB=CDismr3 for (i in 1:length(CDComp4)){ hits=CDCompSig[[i]] hits=cdGenesConv[match(hits, rownames(CDdds))] fcTab=CDComp4[[i]]$log2FoldChange names(fcTab)=cdGenesConv if (length(hits)&gt;3){ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(CDismr3[[j]])) CDismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;3){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(CDismrB[[j]])) CDismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } CDismr3 &lt;- lapply(CDismr3, function(x){ colnames(x)&lt;- paste(rep(names(CDComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(CDismr3)=names(ListGSC) CDismr3&lt;-lapply(CDismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(CDismr3, path=sprintf(&quot;outputs/DESeq/GSEA_CD_growth_treat.xlsx&quot;)) CDismrB &lt;- lapply(CDismrB, function(x){ colnames(x)&lt;- paste(rep(names(CDComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(CDismrB)=names(ListGSC) CDismrB&lt;-lapply(CDismrB, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(CDismrB, path=sprintf(&quot;outputs/DESeq/HyperGeom_CD_growth_treat.xlsx&quot;)) #load(&quot;rslt/DESeq/Epithelial_fraction.RData&quot;) DNComp4=list() DNCompSig=list() DNUpDn1=matrix(NA, nrow=2, ncol=7) #for (i in 1:4){ Eres1=results(DNdds, contrast=c(&quot;treatA&quot;, &quot;imm&quot;, &quot;control&quot;)) DNComp4[[1]]=as.data.frame(cbind(Gene=rownames(Eres1), Eres1)) DNCompSig[[1]]=sort(rownames(Eres1)[which(Eres1$padj&lt;0.1)]) DNUpDn1[ ,1]=c(length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&lt;0)), length(which(Eres1$padj&lt;0.1 &amp; Eres1$log2FoldChange&gt;0))) #} # for control cList=c(&quot;PDL1+LY&quot;, &quot;LY&quot;, &quot;PDL1&quot;) for (i in 1:3){ Eres5=results(DNddsTreat, contrast=c(&quot;Treatment&quot;, cList[i], &quot;Vehicle&quot;)) DNComp4[[i+1]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[i+1]]=g1 DNUpDn1[ ,i+1]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) } # Eres5=results(DNddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) DNComp4[[5]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[5]]=g1 DNUpDn1[ ,5]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(DNddsStrMH, contrast=c(&quot;MHcut&quot;, &quot;res&quot;, &quot;inf&quot;)) DNComp4[[6]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[6]]=g1 DNUpDn1[ ,6]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) Eres5=results(DNddscd8, contrast=c(&quot;CD8FracCut&quot;, &quot;low&quot;, &quot;high&quot;)) DNComp4[[7]]=as.data.frame(cbind(Gene=rownames(Eres5), Eres5)) g1=sort(rownames(Eres5)[which(Eres5$padj&lt;0.1)]) DNCompSig[[7]]=g1 DNUpDn1[ ,7]=c(length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&lt;0)), length(which(Eres5$padj&lt;0.1 &amp; Eres5$log2FoldChange&gt;0))) rownames(DNUpDn1)=c(&quot;down&quot;, &quot;up&quot;) colnames(DNUpDn1)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(DNComp4)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) names(DNCompSig)=c(&quot;imm_vs_control&quot;, paste(cList, &quot;_vs_Vehicle&quot;, sep=&quot;&quot;),&quot;stable_vs_growing&quot;, &quot;res_vs_inf.MH&quot;, &quot;lo_vs_hi_cd8&quot;) ## write to a xls write_xlsx(DNComp4, path=sprintf(&quot;outputs/DN_growth_treat_%s.xlsx&quot;, Sys.Date())) OutputMatrix=lapply( ListGSC, function(x) matrix(NA, ncol=length(DNComp4)*2, nrow=length(x))) DNismr3 &lt;- lapply(1:length(OutputMatrix), function(x){ row.names(OutputMatrix[[x]])&lt;-names(ListGSC[[x]]); OutputMatrix[[x]]}) DNismrB=DNismr3 for (i in 1:length(DNComp4)){ hits=DNCompSig[[i]] hits=dnGenesConv[match(hits, rownames(DNdds))] fcTab=DNComp4[[i]]$log2FoldChange names(fcTab)=dnGenesConv gsca=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gsca1 &lt;- preprocess(gsca, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) if (length(hits)&gt;0){ gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = T) }else{ gsca2 &lt;- analyze(gsca1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) } for (j in 1:length(ListGSC)){ x1=gsca2@result$GSEA.results[[j]] mx1=match(rownames(x1), rownames(DNismr3[[j]])) DNismr3[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(1, 3)]) } if (length(hits)&gt;2){ for (j in 1:length(ListGSC)){ x1=gsca2@result$HyperGeo.results[[j]] mx1=match(rownames(x1), rownames(DNismrB[[j]])) DNismrB[[j]][ mx1,(2*i-1):(2*i)]=data.matrix(x1[, c(6, 7)]) }} } DNismr3 &lt;- lapply(DNismr3, function(x){ colnames(x)&lt;- paste(rep(names(DNComp4), each=2), c(&quot;NES&quot;, &quot;padj&quot;)); x}) names(DNismr3)=names(ListGSC) DNismr3&lt;-lapply(DNismr3, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(DNismr3, path=sprintf(&quot;outputs/GSEA_DN_growth_treat.xlsx&quot;)) DNismrB &lt;- lapply(DNismrB, function(x){ colnames(x)&lt;- paste(rep(names(DNComp4), each=2), c(&quot;pval&quot;, &quot;padj&quot;)); x}) names(DNismrB)=names(ListGSC) DNismrB&lt;-lapply(DNismrB, function(x) as.data.frame(cbind(GeneSet=rownames(x), x))) write_xlsx(DNismrB, path=sprintf(&quot;outputs/DESeq/HyperGeom_DN_growth_treat.xlsx&quot;)) save(DNComp4, EpComp4, CDComp4, DNismr3,Epismr3, CDismr3,DNismrB, EpismrHG, CDismrB, DNCompSig, EpCompSig, CDCompSig, UpDn1, CDUpDn1, DNUpDn1, file=sprintf(&quot;outputs/all_differential_comparisons_%s.RData&quot;, Sys.Date())) ## Pathway: PDL1+LY vs vehicle dneg1=as.numeric(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle NES`[which(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle padj`&lt;0.05)]) names(dneg1)=rownames(DNismr3$ProcessNetworks)[which(DNismr3$ProcessNetworks$`PDL1+LY_vs_Vehicle padj`&lt;0.05)] par(oma=c(5,2, 1, 1)) barplot(sort(dneg1), las=2) xx2=sapply(c(&quot;Cell adhesion&quot;, &quot;Proteolysis&quot;, &quot;Autophagy&quot;, &quot;Inflammation&quot;, &quot;Development&quot;), function(x) grep(x, names(dneg1))) barplot(sort(dneg1[unlist(xx2)]), las=2) "],["erpgr-subtyping.html", "Chapter 10 ER/Pgr Subtyping 10.1 Gene List 10.2 Progression cohort 10.3 Charcterisation cohort 10.4 DN samples 10.5 Comparison with staining 10.6 Summary of expression markers for each subtype/cell fraction", " Chapter 10 ER/Pgr Subtyping In this section, we will look at whether there are differences in rat subtype by: creating a list of specific markers of interest applying PAM clsutering (partitioning around medoids) As the DN samples do have keratin expression, we will also try to determine the subtypes in these samples too. In the below analyses, we will conduct this subtyping as follows: progression specific epithelial cohort characterisation specific epithelial cohort dn specific cohort (progression) 10.1 Gene List We will assess clustering using two different lists. A. is a more comprehensive list containing epithelial, mesenchymal markers and proliferation markers, B. has a more narrow list of subtype specific markers ‘Ar’, ‘Cd24’, ‘Cdh1’, ‘Foxa1’, ‘Gata3’, ‘Krt8’, ‘Krt18’, ‘Krt5’, ‘Vim’, ‘Erbb2’, ‘Esr1’, ‘Pgr’, ‘Mki67’, ‘Pcna’ ‘Ar’, ‘Foxa1’, ‘Gata3’, ‘Erbb2’, ‘Esr1’, ‘Pgr’ 10.2 Progression cohort We will be using variance stabilised counts in this section. Firstly, we will look at the progression cohort. Note that the overlap between the two gene-sets are similar, and the heatmap is row-scaled. Markers1=c(&#39;Ar&#39;, &#39;Cd24&#39;, &#39;Cdh1&#39;, &#39;Foxa1&#39;, &#39;Gata3&#39;, &#39;Krt8&#39;, &#39;Krt18&#39;, &#39;Krt5&#39;, &#39;Vim&#39;, &#39;Erbb2&#39;, &#39;Esr1&#39;, &#39;Pgr&#39;, &#39;Mki67&#39;, &#39;Pcna&#39;) Markers2=c(&#39;Ar&#39;, &#39;Foxa1&#39;, &#39;Gata3&#39;, &#39;Erbb2&#39;, &#39;Esr1&#39;, &#39;Pgr&#39;) # Progression cohort Ax1a=assay(vstEp)[ match(Markers1, rownames(assay(vstEp))),] Ax2a=assay(vstEp)[ match(Markers2, rownames(assay(vstEp))),] Pam1=pam(t(Ax1a), 2) Pam2=pam(t(Ax2a), 2) par(mfrow=c(2,2)) plot(Pam1, main=&quot;List A, progression cohort&quot;) plot(Pam2, main=&quot;List B, progression cohort&quot;) ColA=Pam1$clustering ColA=ifelse(ColA==1, &quot;Basal&quot;, &quot;Lum&quot;) ColB=Pam2$clustering ColB=ifelse(ColB==1, &quot;Basal&quot;, &quot;Lum&quot;) The following shows the heatmaps using these list, using average distances in the hclustering approaches: firstly, using the longer list #colnames(Ax1a)=infoTableFinal$TumorIDnew[match(colnames(Ax1a), rownames(infoTableFinal))] #hclust.ave &lt;- function(x) hclust(x, method=&quot;average&quot;) ax1=heatmap.2(Ax1a, trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, main=&quot;narrow list&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColA)]) Figure 10.1: HR clustering and now using the shorter list ax1=heatmap.2(Ax2a, trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, main=&quot;narrow list&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColB)]) DT::datatable(ax1$carpet, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(ax1$carpet, file=&quot;nature-tables/Ext3i.csv&quot;) colnames(Ax2a)=infoTableFinal$TumorIDnew[match(colnames(Ax2a), rownames(infoTableFinal))] Cdata$HR_status=NA Cdata$HR_status[match(colnames(Ax2a), Cdata$NewID)]=ColB 10.3 Charcterisation cohort We can perform a similar analysis to the characterisation cohort: (and save to file) c2=infoTableFinal$SampleID[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] Ax1=assay(vsd)[ match(Markers1, rownames(assay(vsd))), match(c2, colnames(vsd))] Ax2=assay(vsd)[ match(Markers2, rownames(assay(vsd))), match(c2, colnames(vsd))] Pam3=pam(t(Ax1), 2) Pam4=pam(t(Ax2), 2) #plot(Pam3) plot(Pam4, main=&quot;narrow list&quot;) Ax1b=scale(t(Ax1)) #plot(Pam3, &quot;extended list&quot;) ColC=Pam3$clustering ColC=ifelse(ColC==2, &quot;Basal&quot;, &quot;Lum&quot;) ColD=Pam4$clustering ColD=ifelse(ColD==1, &quot;Basal&quot;, &quot;Lum&quot;) colnames(Ax1)=infoTableFinal$TumorIDnew[match(rownames(Ax1b), rownames(infoTableFinal))] heatmap.2((Ax1), trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColC)]) colnames(Ax2)=infoTableFinal$TumorIDnew[match(rownames(Ax1b), rownames(infoTableFinal))] heatmap.2((Ax2), trace=&quot;none&quot;, hclustfun = hclust.ave, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], scale=&quot;row&quot;, ColSideColors = c(&quot;red&quot;, &quot;blue&quot;)[factor(ColD)]) Figure 10.2: HR status in characterisation cohort DT::datatable(Ax2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 10.2: HR status in characterisation cohort #write.csv(Ax2, file=&quot;nature-tables/1f.csv&quot;) 10.4 DN samples DN samples: note there is variability in DN expression of PR, Foxa1, Esr1, Ar, Erbb2 and Gata3 shows fairly stable expression values Ax2=assay(vsdLimmaDN)[ match(Markers2, rownames(assay(vsdLimmaDN))),] Pam5=pam(t(Ax2), 2) plot(Pam5, main=&quot;extended list DN&quot;) ColE=Pam5$clustering ColE=ifelse(ColE==1, &quot;Basal&quot;, &quot;Lum&quot;) ColE=gsub(&quot;Basal&quot;, &quot;red&quot;, ColE) ColE=gsub(&quot;Lum&quot;, &quot;blue&quot;, ColE) #pdf(&quot;~/Desktop/5X-DN-samples-HR-status.pdf&quot;, width=6, height=5) colnames(Ax2)=infoTableFinal$TumorIDnew[match(colnames(Ax2), rownames(infoTableFinal))] heatmap.2(Ax2, col=brewer.pal(11, &quot;RdBu&quot;)[11:1], ColSideColors =ColE,scale=&quot;row&quot;, main=&quot;DN samples vsd marker list1&quot;, trace=&quot;none&quot;, hclustfun = hclust.ave) 10.5 Comparison with staining We can collate these different scores and assess whether there are similarities with PgR and ER staining: ## match to infoTable here # Contingency Tables par(mfrow=c(1,2)) a1=table(Cdata$HR_status, Cdata$PgR.IF) ContTable(a1[ ,-2], &quot;Pgr Expr&quot;, T, &quot;Pgr IF&quot;, &quot;compressed subtype&quot;) # Contingency Tables a1=table(Cdata$HR_status, Cdata$ER.IF) ContTable(a1[ ,-2], &quot;ER Expr&quot;, T, &quot;ER IF&quot;, &quot;compressed subtype&quot;) 10.6 Summary of expression markers for each subtype/cell fraction We can pull out the main markers of interest: ER, PGR, Erbb2 and Ki67 (or PCNA). We also compare these expression distribution of these markers to CD45, DN and Ep overall: Notes: Pgr highest in luminal samples Esr1 dynamic range is lower Ar is higher in basal samples Pcna is higher in Basal gList=c(&quot;Esr1&quot;, &quot;Pgr&quot;, &quot;Erbb2&quot;, &quot;Ar&quot;, &quot;Pcna&quot;, &quot;Mki67&quot;, &quot;Acta2&quot;, &quot;Epcam&quot;, &quot;Krt18&quot;) summ4=table(infoTableFinal$Fraction) #pdf(&quot;~/Desktop/FigS3-plot-gene-of-interest-average-expression.pdf&quot;, height=8, width=8) par(mfrow=c(2,3)) for (i in gList){ boxplot(allTPMFinal[i, ]~infoTableFinal$Fraction, main=i, names=paste(names(summ4),&quot; N=&quot;,summ4, sep=&quot;&quot;), las=2, ylab=i, xlab=&quot;&quot;) } #dev.off() "],["expression-in-specific-pathways.html", "Chapter 11 Expression in Specific pathways", " Chapter 11 Expression in Specific pathways The above plots suggest that there could be a different in growing and stable based on: inflammation Kras signalling MHC presentation checkpoint proteins We can pull out the genes in these sets and visualise the relative expression in a heatmap in the DN, CD45 and Ep samples: Note that red is growing and green is stable # library(org.Hs.eg.db) load(&quot;../anntotations/ListofGeneSets.RData&quot;) SetNamesc2=names(PathInc2) #names(ListGSC$c2List) x1=grep(&quot;MHC&quot;, SetNamesc2) GeneNames=unique(unlist(geneIds(PathInc2[x1[c(1, 4,5)]]))) #test1=mapIds(org.Hs.eg.db, GeneNames, &#39;SYMBOL&#39;,&#39;ENTREZID&#39;) RatGeneNamesMHC=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) #RatGeneNamesKras=mapIds(org.Hs.eg.db, ListGSC$Hallmark$HALLMARK_KRAS_SIGNALING_UP, &#39;SYMBOL&#39;,&#39;ENTREZID&#39;) GeneNames=unlist(geneIds(PathInH[&quot;HALLMARK_KRAS_SIGNALING_UP&quot;])) RatGeneNamesKras=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) GeneNames=unlist(geneIds(PathInH[&quot;HALLMARK_INFLAMMATORY_RESPONSE&quot;])) RatGeneNamesInf=na.omit(unique(SymHum2Rat$RGD.symbol[match(GeneNames, SymHum2Rat$HGNC.symbol)])) CheckpointProt=unlist(ImmSuppAPC) RatGeneNamesCheckpoint=na.omit(unique(SymHum2Rat$RGD.symbol[match(CheckpointProt, SymHum2Rat$HGNC.symbol)])) 11.0.0.1 DN samples: Note the distribution of growing/stable in DN is: 21, 9 ColsideColsC=hue_pal()(2)[DNdds$Growth] heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesMHC, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesKras, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesInf, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstDN)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstDN)[na.omit(match(MHCPres2Rat, rownames(vstDN))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) 11.0.0.2 CD45 samples: Note the distribution of growing/stable in CD is: 26, 8 ColsideColsC=hue_pal()(2)[CDdds$Growth] heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesMHC, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesKras, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesInf, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstCD)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstCD)[na.omit(match(MHCPres2Rat, rownames(vstCD))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) 11.0.0.3 Epithelial samples: ColsideColsC=hue_pal()(2)[Epdds$Growth] heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesMHC, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC expression&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesKras, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Kras expression&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesInf, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;Inflammatory response&quot;) heatmap.2(assay(vstEp)[na.omit(match(RatGeneNamesCheckpoint, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;checkpoint proteins&quot;) heatmap.2(assay(vstEp)[na.omit(match(MHCPres2Rat, rownames(vstEp))), ], col=RdBu[11:1], trace=&quot;none&quot;, scale=&quot;row&quot;, ColSideColors = ColsideColsC, main=&quot;MHC proteins&quot;) "],["deseq-analysis-immunotherapygrowth-comparisons.html", "Chapter 12 DESeq analysis: Immunotherapy/Growth comparisons 12.1 Summary of comparisons 12.2 DESeq: immunotherapy 12.3 Growing vs stable emphasis", " Chapter 12 DESeq analysis: Immunotherapy/Growth comparisons 12.1 Summary of comparisons Quick plot of the differences in number of differential genes: Allchanges=rbind(UpDn1, CDUpDn1, DNUpDn1) Allchanges=cbind(Allchanges, Frac=c(&quot;Ep&quot;, &quot;Ep&quot;, &quot;CD&quot;, &quot;CD&quot;, &quot;DN&quot;, &quot;DN&quot;), dir=rownames(Allchanges)) AllchangesB=melt(as.data.frame(Allchanges), id.vars = c(&quot;Frac&quot;, &quot;dir&quot;)) ggplot(AllchangesB, aes(x=variable, y=as.numeric(value), fill=dir))+geom_bar(stat=&quot;identity&quot;,position = &quot;dodge&quot;)+facet_grid(Frac~., scale=&quot;free_y&quot;, space=&quot;free_y&quot;)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ylab(&quot;No. differential genes&quot;)+ggtitle(&quot;number of differential genes&quot;)+scale_y_log10() ## plot the number of samples in each comparison Notes: Comparison Type Main cell type impacted Treatment CD45+, PDL1+LY in the DN, LY may affect Ep growth Ep and CD45 growth in control CD and DN Spatial Patterns CD45, Ep Spatial, high cd8 all cases 12.2 DESeq: immunotherapy What are the differential genes if we compare 1. All immunotherapy vs the control arm? 2. all pairwise comparisons: (each immunotherapy to the control arm?) First look at the epithelial fraction: # EpddsTreatB=EpddsTreat # design(EpddsTreatB)=~treatA+factor(Batch) # EpddsTreatB=DESeq(EpddsTreatB) epr=results(Epdds) Xa1=epr[which(epr$padj&lt;0.05 &amp; epr$baseMean&gt;100), ] epvsd=vst(Epdds) assay(epvsd)&lt;- limma::removeBatchEffect(assay(epvsd),factor(epvsd$Batch)) Mat2=epvsd[match(rownames(Xa1), rownames(epvsd)), ] colSCols=ColMerge[ ,1][Mat2$Treatment] heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) DT::datatable(as.data.frame(Xa1), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) ## all pairwise comparisons: ax1=results(EpddsTreat, c(&quot;Treatment&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) bx1=results(EpddsTreat, c(&quot;Treatment&quot;, &quot;PDL1&quot;, &quot;Vehicle&quot;)) cx1=results(EpddsTreat, c(&quot;Treatment&quot;, &quot;PDL1+LY&quot;, &quot;Vehicle&quot;)) testout=cbind(ax1, bx1, cx1) DT::datatable(as.data.frame(testout), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) DN: two data tables are shown: first is any immunotherapy vs the vechicle. The second shows all pairwise comparisons in the order LY, PDL1, combo xcellgenes=readxl::read_xlsx(&quot;../anntotations/xcell_genes.xlsx&quot;, sheet=1) AllGenes=as.vector(xcellgenes[ ,-c(1:2)]) AllGenes=firstup(tolower(unique(as.character(unlist(AllGenes))))) #rm list rmList=c(&quot;15L_B_DN&quot;, &quot;6R_B_DN&quot;, &quot;10L_C_DN&quot;, &quot;6R_D_DN&quot;) DNr=results(DNdds) Xa1=DNr[which(DNr$padj&lt;0.05 &amp; DNr$baseMean&gt;100 &amp; abs(DNr$log2FoldChange)&gt;1.5), ] # DNvsd=vst(DNddsTreatB) # assay(DNvsd)&lt;- limma::removeBatchEffect(assay(DNvsd),factor(DNvsd$Batch)) AllG2=rownames(Xa1)[which(rownames(Xa1)%in%c(AllGenes, &quot;Il6&quot;))] Mat2=vsdLimmaDN[match(AllG2, rownames(vsdLimmaDN)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-3), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1]) DT::datatable(as.data.frame(Xa1), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(DNr, file=&quot;nature-tables/Supp2_DN_io_vs_non_io.csv&quot;) ax1=results(DNddsTreat, c(&quot;Treatment&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) bx1=results(DNddsTreat, c(&quot;Treatment&quot;, &quot;PDL1&quot;, &quot;Vehicle&quot;)) cx1=results(DNddsTreat, c(&quot;Treatment&quot;, &quot;PDL1+LY&quot;, &quot;Vehicle&quot;)) testout=cbind(ax1, bx1, cx1) DT::datatable(as.data.frame(testout), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(testout, file=&quot;nature-tables/Supp3_dn_all_pairwise_treatments.csv&quot;) CD45: three data tables are shown: first are values used in the heatmap second is any immunotherapy vs the vechicle. third shows all pairwise comparisons in the order LY, PDL1, combo # CDddsTreatB=CDddsTreat # design(CDddsTreatB)=~treatA # CDddsTreatB=DESeq(CDddsTreatB) CDr=results(CDdds) Xa1=CDr[which(CDr$padj&lt;0.05 &amp; CDr$baseMean&gt;100 &amp; abs(CDr$log2FoldChange)&gt;1.5), ] AllG2=rownames(Xa1)[which(rownames(Xa1)%in%RatAllImm)] Mat2=vsdLimmaCD[match(AllG2, rownames(vsdLimmaCD)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-5), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] #pdf(&quot;figure-outputs/FIgure3j_1_vs_all.pdf&quot;, height=7, width=6) heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) Figure 12.1: CD45 IO vs non-IO #dev.off() #DT::datatable(as.data.frame(Mat2), rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(assay(Mat2), file=&quot;nature-tables/Figure3j_1_vs_all.csv&quot;) DT::datatable(as.data.frame(CDr), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 12.1: CD45 IO vs non-IO #write.csv(CDr, file=&quot;nature-tables/Supp3_cd45_io_vs_nonio.csv&quot;) ## ALSO LOOK AT the pairwise comparisons and pull out those genes ax1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;LY&quot;, &quot;Vehicle&quot;)) bx1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;PDL1&quot;, &quot;Vehicle&quot;)) cx1=results(CDddsTreat, c(&quot;Treatment&quot;, &quot;PDL1+LY&quot;, &quot;Vehicle&quot;)) xa=rownames(ax1) xb=rownames(bx1) xc=rownames(cx1) G1=rownames(ax1)[which(ax1$baseMean&gt;100 &amp; ax1$padj&lt;0.05 &amp; abs(ax1$log2FoldChange)&gt;1.5)] G2=rownames(bx1)[which(bx1$baseMean&gt;100 &amp; bx1$padj&lt;0.05 &amp; abs(bx1$log2FoldChange)&gt;1.5)] G3=rownames(cx1)[which(cx1$baseMean&gt;100 &amp; cx1$padj&lt;0.05 &amp; abs(cx1$log2FoldChange)&gt;1.5)] AllG=unique(c(G1, G2, G3)) AllG2=AllG[which(AllG%in%RatAllImm)] Mat2=vsdLimmaCD[match(AllG2, rownames(vsdLimmaCD)), ] colnames(Mat2)=Cdata$NewID[match(substr(colnames(Mat2),1 , nchar(colnames(Mat2))-5), Cdata$TumorID)] colSCols=ColMerge[ ,1][Mat2$Treatment] #pdf(&quot;figure-outputs/FIgure3j_all_comparisons.pdf&quot;, height=9, width=6) heatmap.2(assay(Mat2), ColSideColors = colSCols, trace=&quot;none&quot;, scale=&quot;row&quot;, col=RdBu[11:1], hclustfun = hclust.ave) Figure 12.2: IO vs any other treatment #dev.off() testout=cbind(ax1, bx1, cx1) DT::datatable(as.data.frame(testout), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 12.2: IO vs any other treatment #write.csv(testout, file=&quot;nature-tables/Supp3_cd45_all_pairwise_treatments.csv&quot;) 12.3 Growing vs stable emphasis Below, we focus specifically on the growing vs stable comparison in greater depth. Here, we look at the 3 different fractions in greater depth and look at volcano plots of DEG and heatmaps of differential genes. Samples are colored according to whether they are growing or stable 12.3.1 DN fraction #pdf(sprintf(&quot;rslt/DESeq/volcano_plots_differences_stable_vs_growing_%s.pdf&quot;, Sys.Date()), height=7, width=8) DNa1=results(DNddsGrowth,contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) #DNComp4$stable_vs_growing DNa1$Gene=rownames(DNa1) DNa=DNa1[ which(DNa1$padj&lt;0.05 &amp; DNa1$baseMean&gt;100 &amp; abs(DNa1$log2FoldChange)&gt;1.5), ] with(DNa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: DN growing (+) vs stable (-)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(DNa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5 &amp; baseMean&gt;100), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(DNa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5 &amp; baseMean&gt;100), text(log2FoldChange+0.05, -log10(padj)+0.05, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) vstDN$GRcutoff=cut(vstDN$GrowthRate, c(-1, 2, 5, 10, 20), c(&quot;L&quot;, &quot;M1&quot;, &quot;O1&quot;, &quot;O2&quot;) ) colnames(vstDN)=vstDN$TumorIDnew heatmap.2(assay(vstDN)[ DNa$Gene, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors =brewer.pal(4, &quot;Greens&quot;)[ (as.numeric(factor(vstDN$GRcutoff)))], col=RdBu[11:1], main=&quot;DN genes&quot;) DT::datatable(as.data.frame(DNa), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;),scrollX=T)) #write.csv(DNa1, file=&quot;nature-tables/Supp_2_DEG_DN_growing_stable.csv&quot;) 12.3.2 CD fraction Volcano plot #pdf(&quot;~/Desktop/Figure4G_CD_stable_growing.pdf&quot;, height=12, width=12) CDa1=results(CDddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) CDa1$Gene=rownames(CDa1) #CDa1=CDComp4$stable_vs_growing CDa=CDa1[ which(CDa1$padj&lt;0.05 &amp; CDa1$baseMean&gt;100 &amp; abs(CDa1$log2FoldChange)&gt;1.5), ] lx2=which(CDa$Gene%in%RatAllImm) with(CDa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: CD Stable (-) vs Growing (+)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(CDa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5 &amp; baseMean&gt;100 ), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(CDa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5 &amp; baseMean&gt;100 ), text(log2FoldChange+0.02, -log10(padj)+0.05, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) Figure 12.3: volcano plot of DEG stable vs growing CD45 #write.csv(CDa1, file=&quot;nature-tables/4g.csv&quot;) DT::datatable(as.data.frame(CDa), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 12.3: volcano plot of DEG stable vs growing CD45 Here are a bunch of heatmaps, which are then separated by wehther genes are downregulated (growing specific) or upregulated (stable specific) vstCD$GRcutoff=cut(vstCD$GrowthRate, c(-1, 2, 5, 10, 20), c(&quot;L&quot;, &quot;M1&quot;, &quot;O1&quot;, &quot;O2&quot;) ) colnames(vstCD)=vstCD$TumorIDnew heatmap.2(assay(vstCD)[ CDa$Gene[lx2], ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors =brewer.pal(4, &quot;Greens&quot;)[ (as.numeric(factor(vstCD$GRcutoff)))], col=RdBu[11:1], main=&quot;CD genes&quot;) ## growing specific CDg=CDa$Gene[which(CDa$log2FoldChange&lt;0)] heatmap.2(assay(vstCD)[CDg, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstCD$Growth)), col=RdBu[11:1], main=&quot;CD genes growing&quot;) ## stable specific CDs=CDa$Gene[which(CDa$log2FoldChange&gt;0)] heatmap.2(assay(vstCD)[CDs, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = as.character(as.numeric(vstCD$Growth)), col=RdBu[11:1], main=&quot;CD genes stable&quot;) #dev.off() 12.3.3 Ep Fraction #Epa1=EpComp4$stable_vs_growing Epa1=results(EpddsGrowth, contrast=c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) Epa1$Gene=rownames(Epa1) Epa=Epa1[ which(Epa1$padj&lt;0.05 &amp; Epa1$baseMean&gt;100 &amp; abs(Epa1$log2FoldChange)&gt;1.5), ] with(Epa1, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: Ep Stable (-) vs Growing (+)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(Epa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) with(subset(Epa1, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5), text(log2FoldChange+0.05, -log10(padj)+0.1, Gene, pch=20, col=&quot;red&quot;, cex=0.75)) vstEp$GRcutoff=cut(vstEp$GrowthRate, c(-1, 2, 5, 10, 20), c(&quot;L&quot;, &quot;M1&quot;, &quot;O1&quot;, &quot;O2&quot;) ) colnames(vstEp)=vstEp$TumorIDnew #EpaB=Epa[order(1/abs(Epa$log2FoldChange), Epa$padj), ] a1=dim(Epa) heatmap.2(assay(vstEp)[ Epa$Gene, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = brewer.pal(4, &quot;Greens&quot;)[ (as.numeric(factor(vstEp$GRcutoff)))], col=RdBu[11:1], main=&quot;Ep genes&quot;) #write.csv(Epa1, file=&quot;nature-tables/Supp_2_DEG_Ep_growing_stable.csv&quot;) DT::datatable(as.data.frame(Epa), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) "],["summary-of-gsea-runs.html", "Chapter 13 Summary of GSEA runs 13.1 Stable vs growing: all samples 13.2 Comparisons based on treatment 13.3 Pathways of Interest 2", " Chapter 13 Summary of GSEA runs 13.1 Stable vs growing: all samples Below is a summary of growing vs stable comparisons using Process Networks: d1=DNismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] e1=Epismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] c1=CDismr3$ProcessNetworks[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] # ds=which(d1[ ,2]&lt;0.05) es=which(e1[ ,2]&lt;0.05) cs=which(c1[ ,2]&lt;0.05) AUnique=c(rownames(d1)[ds], rownames(e1)[es], rownames(c1)[cs]) xalist=unique(AUnique) tx=cbind(as.numeric(d1[match(xalist, rownames(d1)), 1]),as.numeric(e1[match(xalist, rownames(e1)), 1]), as.numeric(c1[match(xalist, rownames(c1)), 1])) tx2=cbind(as.numeric(d1[match(xalist, rownames(d1)), 2]),as.numeric(e1[match(xalist, rownames(e1)), 2]), as.numeric(c1[match(xalist, rownames(c1)), 2])) tx[which(tx2&gt;0.1, arr.ind = T)]=0 rownames(tx)=substr(xalist, 2, 100) txb=sapply(strsplit(rownames(tx), &quot;_&quot;), function(x) x[1]) rCol=c(brewer.pal(12, &quot;Set3&quot;), brewer.pal(8, &quot;Set2&quot;))[factor(txb)] colnames(tx)=c(&quot;DN&quot;, &quot;Ep&quot;, &quot;CD&quot;) #pdf(&quot;~/Desktop/5A-summary-pathways-process-networks.pdf&quot;, height=9, width=4) par(oma=c(1, 1, 1, 5)) ax=heatmap.2(tx, col=RdBu[11:1], trace = &quot;none&quot;, scale = &quot;none&quot;, RowSideColors = rCol) Figure 13.1: GSEA summary stable growing ## re-order this? axb=ax$carpet an2=c(brewer.pal(12, &quot;Set3&quot;), brewer.pal(8, &quot;Set2&quot;))[factor(sapply(strsplit(colnames(axb), &quot;_&quot;), function(x) x[1]))] colnames(axb)=sapply(strsplit(colnames(axb), &quot;_&quot;), function(x) x[length(x)]) rOrd=order(an2) par(oma=c(1, 1, 1, 3)) heatmap.2(t(axb[, rOrd]), col=RdBu[11:1], trace = &quot;none&quot;, scale = &quot;none&quot;, RowSideColors = an2[rOrd], Rowv = NA, main=&quot;stable red, growing blue&quot;) #dev.off() d1$names=rownames(d1) e1$names=rownames(e1) c1$names=rownames(c1) All1=merge(d1, e1, by.x=&quot;names&quot;, by.y=&quot;names&quot;, all=T) All2=merge(All1, c1, by.x=&quot;names&quot;, by.y=&quot;names&quot;, all=T) #write.csv(tx, file=&quot;nature-tables/5a.csv&quot;) #write.csv(t(axb[, rOrd]), file=&quot;nature-tables/5a_version2.csv&quot;) DT::datatable(All2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) 13.1.1 barplots of enriched pathways Below are the bar-plots for the enriched pathways in CD45 cells: termA=c1[cs, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: TermType[which(TermType==&quot;Apoptosis&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Proliferation&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Translation&quot;)]=&quot;Transcription&quot; testType=c(&quot;Inflammation&quot;, &quot;Immune response&quot;, &quot;Transcription&quot;, &quot;Transport&quot;) pdf(&quot;~/Desktop/4H-growing(-ve)-vs-stable(+ve)-CD45.pdf&quot;, height=8, width=8) #par(oma=c(2, 3, 0,0), mfrow=c(2,2)) #for (i in testType){ # barplot(as.numeric(termA[which(TermType==i), 1]), names.arg = sigTerms[which(TermType==i)], horiz = T, las=2, # xlab=&quot;NES&quot;, main=i, col=factor(sign(as.numeric(termA[which(TermType==i), 1])))) #} a1=order(termA[ ,1]) barplot(as.numeric(termA[a1, 1]), names.arg = sigTerms[a1], horiz = T, las=2, xlab=&quot;NES&quot;, main=&quot;GSEA rslt grow-stable&quot;, col=factor(sign(as.numeric(termA[a1, 1])))) dev.off() ## quartz_off_screen ## 2 Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) write.csv(Ntab, file=&quot;nature-tables/4h.csv&quot;) #DT::datatable(Ntab, rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) termA=d1[ds, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: TermType[which(TermType==&quot;Apoptosis&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Proliferation&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Translation&quot;)]=&quot;Transcription&quot; testType=c(&quot;Inflammation&quot;, &quot;Immune response&quot;, &quot;Transcription&quot;, &quot;Transport&quot;) pdf(&quot;~/Desktop/4H-growing(-ve)-vs-stable(+ve)-DN.pdf&quot;, height=8, width=8) #par(oma=c(2, 3, 0,0), mfrow=c(2,2)) #for (i in testType){ # barplot(as.numeric(termA[which(TermType==i), 1]), names.arg = sigTerms[which(TermType==i)], horiz = T, las=2, # xlab=&quot;NES&quot;, main=i, col=factor(sign(as.numeric(termA[which(TermType==i), 1])))) #} a1=order(termA[ ,1]) barplot(as.numeric(termA[a1, 1]), names.arg = sigTerms[a1], horiz = T, las=2, xlab=&quot;NES&quot;, main=&quot;GSEA rslt grow-stable&quot;, col=factor(sign(as.numeric(termA[a1, 1])))) dev.off() ## quartz_off_screen ## 2 Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) write.csv(Ntab, file=&quot;nature-tables/4hDN.csv&quot;) DT::datatable(Ntab, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 13.2: DN cells enriched pathways termA=e1[es, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: TermType[which(TermType==&quot;Apoptosis&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Proliferation&quot;)]=&quot;Transcription&quot; TermType[which(TermType==&quot;Translation&quot;)]=&quot;Transcription&quot; testType=c(&quot;Inflammation&quot;, &quot;Immune response&quot;, &quot;Transcription&quot;, &quot;Transport&quot;) #pdf(&quot;~/Desktop/4H-growing(-ve)-vs-stable(+ve)-EP.pdf&quot;, height=8, width=8) #par(oma=c(2, 3, 0,0), mfrow=c(2,2)) #for (i in testType){ # barplot(as.numeric(termA[which(TermType==i), 1]), names.arg = sigTerms[which(TermType==i)], horiz = T, las=2, # xlab=&quot;NES&quot;, main=i, col=factor(sign(as.numeric(termA[which(TermType==i), 1])))) #} a1=order(termA[ ,1]) barplot(as.numeric(termA[a1, 1]), names.arg = sigTerms[a1], horiz = T, las=2, xlab=&quot;NES&quot;, main=&quot;GSEA rslt grow-stable&quot;, col=factor(sign(as.numeric(termA[a1, 1])))) Figure 13.3: Ep cells enriched pathways #dev.off() Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) write.csv(Ntab, file=&quot;nature-tables/4hEP.csv&quot;) #DT::datatable(Ntab, rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) 13.2 Comparisons based on treatment We can do the same analysis for the DN compartment, but for comparing treatment effect: d1=DNismr3$ProcessNetworks[, c(&quot;imm_vs_control NES&quot;, &quot;imm_vs_control padj&quot;)] ds=which(d1[ ,2]&lt;0.05) termA=d1[ds, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) sigTerms=TermsA TermType=substr(sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[1]), 2, 40) ## check whether this runs: #pdf(&quot;figure-outputs/Ext3h.pdf&quot;, height=7, width=7) barplot(as.numeric(termA[, 1]), names.arg = sigTerms, horiz = T, las=2, xlab=&quot;NES&quot;, main=testType, col=factor(sign(as.numeric(termA[, 1])))) Figure 13.4: DN assoc treatment GSEA #dev.off() Ntab=data.frame(TermType=TermType, sigTerm=sigTerms, termA) #write.csv(Ntab, file=&quot;nature-tables/Ext3h.csv&quot;) DT::datatable(Ntab, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 13.4: DN assoc treatment GSEA Also look at the output for combo treatment vs vehcile d1=DNismr3$ProcessNetworks[, c(&quot;PDL1+LY_vs_Vehicle NES&quot;, &quot;PDL1+LY_vs_Vehicle padj&quot;)] ds=which(d1[ ,2]&lt;0.05) termA=d1[ds, ] TermsA=sapply(strsplit(rownames(termA), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(termA)[which(is.na(TermsA))], 2, 50) barplot(as.numeric(termA[, 1]), names.arg = TermsA, horiz = T, las=2, xlab=&quot;NES&quot;, main=testType, col=factor(sign(as.numeric(termA[, 1])))) 13.3 Pathways of Interest 2 Focus on: JAK-STAT signalling interferon-gamma signalling IL-6 signalling BCR pathway TCR pathway antigen presentation KRAS signalling? T helper differentiation In DN samples: androgen receptor signalling? esr1 signalling? myc targets EMT Perform GSVA on these pathways load(&quot;../anntotations/Metacore_extracted_Process_networks_nov2020.RData&quot;) sList=PathwayMapAllComp[match(substr(rownames(e1)[es], 2, 100), names(PathwayMapAllComp))] rNames2=SymHum2Rat$HGNC.symbol[match(rownames(allTPMFinal), SymHum2Rat$RGD.symbol)] rNames2[which(is.na(rNames2))]=toupper(rownames(allTPMFinal)[which(is.na(rNames2))]) tpmTemp=allTPMFinal[ , match(vstEp$SampleID, colnames(allTPMFinal))] rownames(tpmTemp)=rNames2 colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] gsva1=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva1), function(x) sd(gsva1[x, ])) a1=which(nx2&gt;0.03) sList=PathwayMapAllComp[match(substr(rownames(d1)[ds], 2, 100), names(PathwayMapAllComp))] tpmTemp=allTPMFinal[ , match(vstDN$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva2=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva2), function(x) sd(gsva2[x, ])) a2=which(nx2&gt;0.03) sList=PathwayMapAllComp[match(substr(rownames(c1)[cs], 2, 100), names(PathwayMapAllComp))] tpmTemp=allTPMFinal[ , match(vstCD$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva3=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva3), function(x) sd(gsva3[x, ])) a3=which(nx2&gt;0.03) #pdf(&quot;~/Desktop/5B-ssgsea-scores.pdf&quot;, height=5, width=5) par(oma=c(1, 1, 1, 5)) heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstEp$Growth], main=&quot;Ep&quot;) heatmap.2(gsva2[a2, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstDN$Growth], main=&quot;DN&quot;) heatmap.2(gsva3[a3, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstCD$Growth], main=&quot;CD&quot;) #dev.off() "],["epcam-inflammatory-vs-non-inflammatory-samples.html", "Chapter 14 Epcam+ Inflammatory vs non-inflammatory samples 14.1 Identification of inflammatory samples 14.2 DEG: inflammatory vs non-inflammatory 14.3 Finding 3 signatures for 3 branches 14.4 Analyse the non-inflammatory samples 14.5 Luminal-only non-inflammtory samples samples", " Chapter 14 Epcam+ Inflammatory vs non-inflammatory samples 14.1 Identification of inflammatory samples Here, look at individual enrichment scores (ssGSEA). We notice in the Epithelial samples there are 5 samples which appear to be hyperinflammatory: They have higher enrichment for TNFA, interferon signalling for example. d1=DNismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] e1=Epismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] c1=CDismr3$Hallmark[, c(&quot;stable_vs_growing NES&quot;, &quot;stable_vs_growing padj&quot;)] # ds=which(d1[ ,2]&lt;0.05) es=which(e1[ ,2]&lt;0.05) cs=which(c1[ ,2]&lt;0.05) AUnique=c(rownames(d1)[ds], rownames(e1)[es], rownames(c1)[cs]) xalist=unique(AUnique) sList=PathInH[match((rownames(e1)[es]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstEp$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva1=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva1), function(x) sd(gsva1[x, ])) a1=which(nx2&gt;0.03) sList=PathInH[match((rownames(d1)[ds]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstDN$SampleID, colnames(allTPMFinal))] colnames(tpmTemp)=infoTableFinal$TumorIDnew[match(colnames(tpmTemp), rownames(infoTableFinal))] rownames(tpmTemp)=rNames2 gsva2=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva2), function(x) sd(gsva2[x, ])) a2=which(nx2&gt;0.03) sList=PathInH[match((rownames(c1)[cs]), names(PathInH))] tpmTemp=allTPMFinal[ , match(vstCD$SampleID, colnames(allTPMFinal))] rownames(tpmTemp)=rNames2 gsva3=gsva(tpmTemp, sList, method=&quot;ssgsea&quot;, ssgsea.norm=T) nx2=sapply(1:nrow(gsva3), function(x) sd(gsva3[x, ])) a3=which(nx2&gt;0.03) #pdf(&quot;~/Desktop/5B-ssgsea-scores-hallmark-pathways.pdf&quot;, height=5, width=5) HRstat2=Cdata$HR_status[match(vstEp$TumorID, Cdata$TumorID)] HRstat2[which(HRstat2==&quot;Basal&quot;)]=NA Check which pathways are enriched in which specific samples: par(oma=c(1, 1, 1, 5)) # heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstEp$Growth], # main=&quot;Ep&quot;) heatmap.2(gsva1[a1, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColMerge[ vstEp$Treatment,1], main=&quot;Ep&quot;) Figure 14.1: ssGSEA specific pathways write.csv(gsva1[a1, ], file=&quot;nature-tables/5b.csv&quot;) Below are the pathways specific to cd45 and dn heatmap.2(gsva2[a2, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstDN$Growth], main=&quot;DN&quot;) heatmap.2(gsva3[a3, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, ColSideColors = ColSizeb[vstCD$Growth], main=&quot;CD&quot;) 14.2 DEG: inflammatory vs non-inflammatory What genes are different between inflammatory and non-inflammatory? Inflamm=c(&quot;11N_D_Ep&quot;, &quot;6R_B_Ep&quot;, &quot;8L_D_Ep&quot;, &quot;10L_D_Ep&quot;, &quot;3N_B_Ep&quot;) Epdds$Inflammation=&quot;no&quot; Epdds$Inflammation[which(colnames(Epdds)%in%Inflamm)]=&quot;yes&quot; Epdds$Inflammation=factor(Epdds$Inflammation) vstEpInf=Epdds design(vstEpInf)=~Inflammation vstEpInf=DESeq(vstEpInf) vstEpInfRes=results(vstEpInf) sigGenes=rownames(vstEpInfRes)[which(vstEpInfRes$padj&lt;0.05 &amp; abs(vstEpInfRes$log2FoldChange)&gt;2.5 &amp; vstEpInfRes$baseMean&gt;200)] #colnames(vstEp)=infoTableFinal$TumorIDnew[match(colnames(vstEp), rownames(infoTableFinal))] heatmap.2(assay(vstEp)[sigGenes, ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;row&quot;, ColSideColors = ColSizeb[vstEpInf$Growth], hclustfun = hclust.ave) Figure 14.2: Differential gene exp inflammatory vs non-inflammatory #write.csv(assay(vstEp)[sigGenes, ], file=&quot;nature-tables/Ext5c_heatmap.csc&quot;) DT::datatable(as.data.frame(vstEpInfRes[sigGenes, ]), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 14.2: Differential gene exp inflammatory vs non-inflammatory There are 27 genes which differentiates these two, which includes Csf3, Ccl22, Ccl3, Pltp, Lck, Rac2, Mmp12, Rsad2, Bcl2a1, Cxcl1, Lyz2, C1s, Ccl2, Nr4a2, Plaur, Ets1, Plau, Angptl4, Il1b, Cxcl2, Hbegf, Cd74, Ccl17, Thbs1, RT1-Da, Oasl, Tyrobp. We can also assess whether there is an association between immune infiltration. We can compare whether the non-inflammatory have differences in T-cell infiltration, mixing indices based on imaging data. Below ‘no’ samples are non-inflammatory and ‘yes’ samples are hyper-inflammatory. ## boxplots for nTab=data.frame(inf=vstEpInf$Inflammation, MH=vstEpInf$MHEpCAM, cd8=vstEpInf$CD8Frac, knn=vstEpInf$knnEpCAM) nTabmelt=melt(nTab, measure.vars = c(&quot;cd8&quot;, &quot;knn&quot;, &quot;MH&quot;)) ggplot(data=nTabmelt, aes(x=inf, y=value))+geom_boxplot()+geom_point()+theme_bw()+facet_wrap(~variable, scale=&quot;free&quot;) Figure 14.3: association signature with WSI #write.csv(nTabmelt, file=&quot;nature-tables/Ext5d.csv&quot;) Cdata$Inflammation=NA Cdata$Inflammation=vstEpInf$Inflammation2[match(Cdata$NewID, colnames(vstEp))] DT::datatable(nTab, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 14.3: association signature with WSI Statistics are below: print(&#39;assoc with cd8&#39;) ## [1] &quot;assoc with cd8&quot; t.test(nTab$cd8~nTab$inf) ## ## Welch Two Sample t-test ## ## data: nTab$cd8 by nTab$inf ## t = -2.141, df = 4.3454, p-value = 0.09351 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.30731448 0.03501129 ## sample estimates: ## mean in group no mean in group yes ## 0.05119239 0.18734398 #table(nTab$cd8, nTab$inf) print(&#39;assoc with MH index&#39;) ## [1] &quot;assoc with MH index&quot; t.test(nTab$MH~nTab$inf) ## ## Welch Two Sample t-test ## ## data: nTab$MH by nTab$inf ## t = -3.6191, df = 13.053, p-value = 0.003096 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -0.4295016 -0.1084920 ## sample estimates: ## mean in group no mean in group yes ## 0.3482039 0.6172007 #table(nTab$MH,nTab$inf) print(&#39;assoc with knn&#39;) ## [1] &quot;assoc with knn&quot; t.test(nTab$knn~nTab$inf) ## ## Welch Two Sample t-test ## ## data: nTab$knn by nTab$inf ## t = 1.2134, df = 12.512, p-value = 0.2474 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -14.76130 52.25308 ## sample estimates: ## mean in group no mean in group yes ## 56.00313 37.25724 #table(nTab$knn~nTab$inf) 14.3 Finding 3 signatures for 3 branches Below we can perform a 1 vs all analysis i.e. compare growing vs the rest inflammatory vs the rest stable vs the rest #vstEpInf$Inflammation2=vstEpInf$Inflammation vstEpInf$Inflammation2=factor(ifelse(vstEpInf$Inflammation==&quot;yes&quot;, &quot;inf&quot;, ifelse(vstEpInf$Growth==&quot;growing&quot;, &quot;grow&quot;, &quot;stab&quot;))) design(vstEpInf)=~Inflammation2 vstEpInf=DESeq(vstEpInf) vstEpInfRes1=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;stab&quot;, &quot;inf&quot;)) res1genes=rownames(vstEpInfRes1)[which(vstEpInfRes1$padj&lt;0.05 &amp; abs(vstEpInfRes1$log2FoldChange)&gt;1.5 &amp; vstEpInfRes1$baseMean&gt;100)] vstEpInfRes2=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;stab&quot;, &quot;grow&quot;)) res2genes=rownames(vstEpInfRes2)[which(vstEpInfRes2$padj&lt;0.05 &amp; abs(vstEpInfRes2$log2FoldChange)&gt;1.5 &amp; vstEpInfRes2$baseMean&gt;100)] vstEpInfRes3=results(vstEpInf, contrast = c(&quot;Inflammation2&quot;, &quot;grow&quot;, &quot;inf&quot;)) res3genes=rownames(vstEpInfRes3)[which(vstEpInfRes3$padj&lt;0.05 &amp; abs(vstEpInfRes3$log2FoldChange)&gt;1.5 &amp; vstEpInfRes3$baseMean&gt;100)] aUnique=c(res1genes, res2genes, res3genes) AX1=setdiff(res2genes, res1genes) ax2=setdiff(res3genes, res1genes) heatmap.2(assay(vstEp)[AX1, ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;row&quot;, ColSideColors = ColSizec[vstEpInf$Inflammation2], hclustfun = hclust.ave) write.csv(assay(vstEp)[AX1, ], file=&quot;nature-tables/Ext5c.csv&quot;) nTab=data.frame(inf=vstEpInf$Inflammation2, MH=vstEpInf$MHEpCAM, cd8=vstEpInf$CD8Frac, knn=vstEpInf$knnEpCAM) nTabmelt=melt(nTab, measure.vars = c(&quot;cd8&quot;, &quot;knn&quot;, &quot;MH&quot;)) ggplot(data=nTabmelt, aes(x=inf, y=value))+geom_boxplot()+geom_point()+theme_bw()+facet_wrap(~variable, scale=&quot;free&quot;) vstOut=vst(vstEpInf) plotPCA(vstOut, &quot;Inflammation2&quot;) We see that the growing vs stable samples are very similary overall, however, DEGs between growing and stable are also expressed in the inflammatory branch. We can use these gene signatures to identify each branch: Below, we see the separation between the 3 groups using these genes. (note that the stable branch has no identifiable upregulated genes and is defined by the negative score of the downregulated genes:). We use ssGSEA to get a score for each sample vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation3==&quot;stab&quot;)]=&quot;inf&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesGrow=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&lt;(-1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation2==&quot;grow&quot;)]=&quot;inf&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesStab=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&lt;(-1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] vstEpInf$Inflammation3=vstEpInf$Inflammation2 vstEpInf$Inflammation3[which(vstEpInf$Inflammation2==&quot;stab&quot;)]=&quot;grow&quot; vstEpInf$Inflammation3=factor(vstEpInf$Inflammation3) design(vstEpInf)=~(Inflammation3) vstEpInfb=DESeq(vstEpInf) vstEpInfRes1b=results(vstEpInfb) res1genesInf=rownames(vstEpInfRes1b)[which(vstEpInfRes1b$padj&lt;0.05 &amp; (vstEpInfRes1b$log2FoldChange)&gt;(1.5) &amp; vstEpInfRes1b$baseMean&gt;100)] ## perform ssGSEA on these samples and see where they fit: RatssGSEA=gsva(assay(vsdLimmaEp), list(grow=res1genesGrow, inh=res1genesInf, nonstab=res1genesStab), method=&quot;ssgsea&quot;, ssgsea.norm=T) par(mfrow=c(1,2)) plot(RatssGSEA[1, ], RatssGSEA[2, ], col=factor(vstEpInf$Inflammation2), xlab=&quot;grow score&quot;, ylab=&quot;inh score&quot;) plot(RatssGSEA[1, ], -RatssGSEA[3, ], col=factor(vstEpInf$Inflammation2), xlab=&quot;grow score&quot;, ylab=&quot;-stab score&quot;) RatssGSEA[3, ]=-RatssGSEA[3, ] We can also overlay these signatures from ssGSEA to see how well it can predict each group: # plot histograms for the 3 samples: par(mfrow=c(3,3)) for (i in 1:3){ for (j in c(&quot;inf&quot;, &quot;grow&quot;, &quot;stab&quot;)){ plot(density(RatssGSEA[i, which(vstEpInf$Inflammation2==j)]), main=paste(j, rownames(RatssGSEA)[i]), xlim=c(-0.6, 0.8)) } } GSEA for the above 3 groups? load(&quot;../anntotations/ListofGeneSets2.RData&quot;) l1=SymHum2Rat$HGNC.symbol[match(rownames(vstEpInfRes1), SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(rownames(vstEpInfRes1), Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(rownames(vstEpInfRes1), Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, rownames(vstEpInfRes1)))) ## ## run 1 hits=EpGenesConv[match(res1genes, rownames(vstEpInfRes1))] fcTab=vstEpInfRes1$log2FoldChange names(fcTab)=EpGenesConv gscaepInf1=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf1 &lt;- preprocess(gscaepInf1, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf1 &lt;- analyze(gscaepInf1, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## run2 hits=EpGenesConv[match(res2genes, rownames(vstEpInfRes2))] fcTab=vstEpInfRes2$log2FoldChange names(fcTab)=EpGenesConv gscaepInf2=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf2 &lt;- preprocess(gscaepInf2, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf2 &lt;- analyze(gscaepInf2, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## run3 hits=EpGenesConv[match(res3genes, rownames(vstEpInfRes3))] fcTab=vstEpInfRes3$log2FoldChange names(fcTab)=EpGenesConv gscaepInf3=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf3 &lt;- preprocess(gscaepInf3, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaepInf3 &lt;- analyze(gscaepInf3, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) GSEA1=gscaepInf1@result$GSEA.results$ProcessNetworks GSEA2=gscaepInf2@result$GSEA.results$ProcessNetworks GSEA3=gscaepInf3@result$GSEA.results$ProcessNetworks tempOut=cbind(GSEA1, GSEA2, GSEA3, file=&quot;nature-tables/Supp3_output_GSEA_tables_growing_stable.csv&quot;) lx1=unique(c(rownames(GSEA1)[which(GSEA1[ ,3]&lt;0.05)], rownames(GSEA2)[which(GSEA2[ ,3]&lt;0.05)], rownames(GSEA3)[which(GSEA3[ ,3]&lt;0.05)])) Fx=cbind(GSEA1[lx1, 1], GSEA3[lx1, 1], GSEA2[lx1, 1]) Fx2=cbind(GSEA1[lx1, 3], GSEA3[lx1, 3], GSEA2[lx1, 3]) Fx[which(Fx2&gt;0.05, arr.ind=T)]=0 rownames(Fx)=lx1 colnames(Fx)=c(&quot;s/i&quot;, &quot;g/i&quot;, &quot;s/g&quot;) ltest=which(rowSums(sign(abs(Fx)))&gt;1) ltest2=which(abs(Fx[,3])&gt;0) par(oma=c(1,1,1,5)) heatmap.2(Fx[unique(c(ltest,ltest2)), ], col=RdBu[11:1], trace=&quot;none&quot;, scale = &quot;none&quot;, hclustfun = hclust.ave) 14.4 Analyse the non-inflammatory samples We remove all the inflammtory samples and compare differences between stable and growing here. Below is the volcano plot for the #Remove inflammatory samples #Also remove samples which are basal-like Inflamm=c(&quot;11N_D_Ep&quot;, &quot;6R_B_Ep&quot;, &quot;8L_D_Ep&quot;, &quot;10L_D_Ep&quot;, &quot;3N_B_Ep&quot;) #,&quot;2N__Ep&quot;, &quot;15N_C_Ep&quot;, &quot;7N_A_Ep&quot;, &quot;8R_CU_Ep&quot;, &quot;12L_D_Ep&quot;, &quot;14N_D_Ep&quot;) EpddsInflam=EpddsGrowth EpddsInflam=EpddsInflam[, -match(Inflamm, colnames(EpddsInflam))] #design(EpddsInflam)=~Growth EpddsInflam=DESeq(EpddsInflam) ResA=results(EpddsInflam, contrast = c(&quot;Growth&quot;, &quot;stable&quot;, &quot;growing&quot;)) ResAb=ResA[which(ResA$padj&lt;0.05 &amp; abs(ResA$log2FoldChange)&gt;1.5 &amp; ResA$baseMean&gt;100), ] #pdf(&quot;~/Desktop/5C-heatmap-inflamm-vs-non-inflamm-lowexpressing-included.pdf&quot;, width=8, height=12) plot(ResA$log2FoldChange, -log10(ResA$padj), pch=20, col=&quot;black&quot;, main=&quot;growing (-ve) vs stable (+ve)&quot;) text(ResAb$log2FoldChange, -log10(ResAb$padj), rownames(ResAb), col=&quot;red&quot;) Figure 14.4: ep non-inflammatory comparison #write.csv(ResA, file=&quot;nature-tables/5f.csv&quot;) Followed by the heatmap for this analysis vst2=vst(EpddsInflam) heatmap.2(assay(vst2)[match(rownames(ResAb), rownames(vst2)), ], col=RdBu[11:1], ColSideColors = ColSizeb[vst2$Growth], trace=&quot;none&quot;, scale=&quot;row&quot;) Figure 14.5: ep non-inflammatory comparison heatmap 14.4.1 GSEA Quickly run GSEA for these samples: EpGenes=rownames(ResA) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(ResAb), EpGenes)] fcTab=ResA$log2FoldChange names(fcTab)=EpGenesConv gscaepInf=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepInf &lt;- preprocess(gscaepInf, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## -- 7 genes (out of 72) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaepInf &lt;- analyze(gscaepInf, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --146 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --848 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --269 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --110 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --377 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== A1=HTSanalyzeR2::summarize(gscaepInf) ## ## -No of genes in Gene set collections: ## input above min size ## c2List 2199 2053 ## c5BP 7530 6682 ## c5MF 1663 1394 ## c5CC 999 889 ## ProcessNetworks 158 158 ## MetPathway 1480 1103 ## Hallmark 50 50 ## ## ## -No of genes in Gene List: ## input valid duplicate removed converted to entrez ## Gene List 12449 12449 12341 11814 ## ## ## -No of hits: ## input preprocessed ## Hits 72 65 ## ## ## -Parameters for analysis: ## minGeneSetSize pValueCutoff pAdjustMethod ## HyperGeo Test 5 0.05 BH ## ## minGeneSetSize pValueCutoff pAdjustMethod nPermutations exponent ## GSEA 5 0.05 BH 100 1 ## ## ## -Significant gene sets (adjusted p-value&lt; 0.05 ): ## c2List c5BP c5MF c5CC ProcessNetworks MetPathway Hallmark ## HyperGeo NA NA NA NA NA NA NA ## GSEA 188 641 116 130 17 16 19 ## Both NA NA NA NA NA NA NA PNresultsef=gscaepInf@result$GSEA.results$ProcessNetworks TermsA=sapply(strsplit(rownames(gscaepInf@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaepInf@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaepInf@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaepInf, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 14.6: 5g: non inflammatory branch #plotGSEA(gscaepInf, gscs=c(&quot;ProcessNetworks&quot;), filepath=&quot;figure-outputs/&quot;, output=&quot;pdf&quot;) save(gscaepInf2, file=&quot;figure-outputs/5g.Rdata&quot;) # save this file to change the color scheme write.csv(gscaepInf@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/Ext5g_perhaps.csv&quot;) We’ve noticed that some of the differentially expressed genes above are splicing related or epigenetic related. Could there be an association with transcriptional diversity? Below we calculate the transcriptional diversity based on rsem values local.rnaseq.shannon &lt;- function(exp.mat, pseudoNum = 0){ # calculate shannon index from transcriptome matrix apply(exp.mat, 2, function(x){ x&lt;-x+pseudoNum prop&lt;-x/sum(x) #prop&lt;-prop[prop&gt;0] shidx = -sum(prop*log(prop), na.rm=T)/log(length(prop)) shidx }) } Output1=local.rnaseq.shannon(allrsemFinal) Output2=Output1[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)] tab2=data.frame(inf=vstEpInf$Inflammation2, het=Output2[-3]) ggplot(tab2, aes(x=inf, y=het))+geom_boxplot()+geom_point()+ggtitle(&quot;transcriptional heterogeneity: rsem&quot;) Figure 14.7: Transcriptional heterogeneity wilcox.test(tab2$het[tab2$inf!=&quot;inf&quot;]~tab2$inf[tab2$inf!=&quot;inf&quot;]) ## ## Wilcoxon rank sum exact test ## ## data: tab2$het[tab2$inf != &quot;inf&quot;] by tab2$inf[tab2$inf != &quot;inf&quot;] ## W = 9, p-value = 0.05528 ## alternative hypothesis: true location shift is not equal to 0 write.csv(tab2, file=&quot;nature-tables/Ext5j_transcriptional_heterigeneity.csv&quot;) 14.5 Luminal-only non-inflammtory samples samples We removed all the basal samples and did the same comparison: Epdds$HR=Cdata$HR_status[match(substr(colnames(Epdds), 1, nchar(colnames(Epdds))-3), Cdata$TumorID)] vstLumOnly=Epdds[, which(Epdds$HR==&quot;Lum&quot;)] design(vstLumOnly)=~Growth vstLumOnly=DESeq(vstLumOnly) colnames(Epdds) ## [1] &quot;10L_D_Ep&quot; &quot;10R_BL_Ep&quot; &quot;11L_B_Ep&quot; &quot;11N_D_Ep&quot; &quot;11R_D_Ep&quot; &quot;11R_C_Ep&quot; ## [7] &quot;12L_D_Ep&quot; &quot;14N_C_Ep&quot; &quot;14N_D_Ep&quot; &quot;14R_B_Ep&quot; &quot;15N_C_Ep&quot; &quot;16L_C_Ep&quot; ## [13] &quot;17N_D_Ep&quot; &quot;2N__Ep&quot; &quot;3N_B_Ep&quot; &quot;3R_C_Ep&quot; &quot;6R_B_Ep&quot; &quot;7N_A_Ep&quot; ## [19] &quot;8L_D_Ep&quot; &quot;8R_CU_Ep&quot; vstLumRes=results(vstLumOnly) vsdLumvst=vst(vstLumOnly) write.csv(vstLumRes, file=&quot;nature-tables/5j_lumonly_ep_growing_vs_stable.csv&quot;) genes2=rownames(vstLumRes)[which(vstLumRes$padj&lt;0.05 &amp; abs(vstLumRes$log2FoldChange)&gt;1.5 &amp; vstLumRes$baseMean&gt;100)] GlistGrowing=rownames(vstLumRes)[which(vstLumRes$padj&lt;0.05 &amp; (vstLumRes$log2FoldChange)&lt;(-1.5) &amp; vstLumRes$baseMean&gt;100)] Glistnon=rownames(vstLumRes)[which(vstLumRes$padj&lt;0.05 &amp; (vstLumRes$log2FoldChange)&gt;(1.5) &amp; vstLumRes$baseMean&gt;100)] write.csv(GlistGrowing,file=&quot;figure-outputs/lumsig_posFC.csv&quot; ) write.csv(Glistnon,file=&quot;figure-outputs/lumsig_negFC.csv&quot; ) ColSideCols=ColSizeb[vstLumOnly$Growth] #pdf(&quot;figure-outputs/Figure5_XX_heatmap_lumonly_growing_vs_stable.pdf&quot;, height=9, width=5) heatmap.2(assay(vsdLumvst)[ genes2, ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = brewer.pal(3, &quot;Greens&quot;)[ColSideCols], col=RdBu[11:1], main=&quot;Ep genes&quot; ) Figure 14.8: DEG non-inflamm Lum only #dev.off() #write.csv(assay(vsdLumvst)[ genes2, ], file=&quot;nature-tables/5xx_lum_only_growing_vs_stable.csv&quot;) #DT::datatable(as.data.frame(vstLumRes), rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Quickly run GSEA for these samples: EpGenes=rownames(vstLumRes) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(vstLumRes), EpGenes)] fcTab=vstLumRes$log2FoldChange names(fcTab)=EpGenesConv gscaepNI_lum=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaepNI_lum&lt;- preprocess(gscaepNI_lum, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## -- 527 genes (out of 12341) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaepNI_lum &lt;- analyze(gscaepNI_lum, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --146 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --848 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --269 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --110 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --377 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== A1=HTSanalyzeR2::summarize(gscaepNI_lum) ## ## -No of genes in Gene set collections: ## input above min size ## c2List 2199 2053 ## c5BP 7530 6682 ## c5MF 1663 1394 ## c5CC 999 889 ## ProcessNetworks 158 158 ## MetPathway 1480 1103 ## Hallmark 50 50 ## ## ## -No of genes in Gene List: ## input valid duplicate removed converted to entrez ## Gene List 12449 12449 12341 11814 ## ## ## -No of hits: ## input preprocessed ## Hits 12449 11814 ## ## ## -Parameters for analysis: ## minGeneSetSize pValueCutoff pAdjustMethod ## HyperGeo Test 5 0.05 BH ## ## minGeneSetSize pValueCutoff pAdjustMethod nPermutations exponent ## GSEA 5 0.05 BH 100 1 ## ## ## -Significant gene sets (adjusted p-value&lt; 0.05 ): ## c2List c5BP c5MF c5CC ProcessNetworks MetPathway Hallmark ## HyperGeo NA NA NA NA NA NA NA ## GSEA 243 768 98 100 52 84 22 ## Both NA NA NA NA NA NA NA PNresultsef=gscaepNI_lum@result$GSEA.results$ProcessNetworks TermsA=sapply(strsplit(rownames(gscaepNI_lum@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaepNI_lum@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) save(gscaepNI_lum, file=&quot;figure-outputs/5xx_lumonly.Rdata&quot;) # save this file to change the colors ## check whether this runs: gscaepNI_lum@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaepNI_lum, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 14.9: luminal non inflammatory branch write.csv(gscaepNI_lum@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/5g_lum_gsea.csv&quot;) Repeat the above analysis performing leave one out SigList=list() for (i in 1:10){ vstLumOnly2=DESeq(vstLumOnly[ ,-i]) vstLumRes=results(vstLumOnly2) genes3=rownames(vstLumRes)[which(vstLumRes$padj&lt;0.05 &amp; abs(vstLumRes$log2FoldChange)&gt;1.5 &amp; vstLumRes$baseMean&gt;100)] SigList[[i]]=genes3 } ## Collapse the results together and see how frequently each gene appears N2=table(unlist(SigList)) Bx=names(N2)%in%c(GlistGrowing, Glistnon) N2tab=data.frame(gene=names(N2), LOODEG=N2, InOrigList=Bx) write.csv(N2tab, file=&quot;figure-outputs/5j_lumonly_ep_growing_vs_stable_LOO_analysis.csv&quot;) "],["tcga-associate-epcam-inflammatory-with-survival.html", "Chapter 15 TCGA: Associate Epcam+ inflammatory with survival 15.1 Associating CD74 with phenotype and outcome 15.2 Associating ADMATS10 with phenotype and outcome 15.3 Signature: Lum cases non-inflammatory: growing vs stable 15.4 Comparison to oncotype and mammaprint", " Chapter 15 TCGA: Associate Epcam+ inflammatory with survival Associate the signature with outcome in TCGA: Load in TCGA right now TCGArsem=read.delim(&quot;../data/TCGA/BRCA.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.data.txt&quot;, sep=&quot;\\t&quot;) rownames(TCGArsem)=TCGArsem[ ,1] TCGArsem=TCGArsem[, grep(&quot;01A&quot;, colnames(TCGArsem))] colnames(TCGArsem)=substr(colnames(TCGArsem), 1, 12) colnames(TCGArsem)=gsub(&quot;\\\\.&quot;, &quot;-&quot;, colnames(TCGArsem)) TCGArsem=TCGArsem[-1, ] TCGArsem2=apply(TCGArsem, 2, as.numeric) #TCGArsem2=t(TCGArsem2) #colnames(TCGArsem2)=colnames(TCGArsem) #TCGArsem2=data.frame(TCGArsem2) rownames(TCGArsem2)=rownames(TCGArsem) rownames(TCGArsem2)=sapply(strsplit(rownames(TCGArsem2), &quot;\\\\|&quot;), function(x) x[1]) TCGArsem2=TCGArsem2[-which(rownames(TCGArsem2)==&quot;?&quot;), ] load(&quot;../data/TCGA/BrClin_clinical_Nov2017.RData&quot;) ax1=match(BrClin$Patient.ID, colnames(TCGArsem)) BrClin=BrClin[-which(is.na(ax1)), ] TCGArsem=TCGArsem[ , na.omit(ax1)] ## load in the inflammation subtype information #ThorssData=read.xlsx(&quot;../data/TCGA/Thorsson2018_table1.xlsx&quot;,1) ThorssData=read.csv(&quot;../data/TCGA/Thorsson2018_table1.csv&quot;) Edit the clinical data to make sure data is censored at 60 months (5 years) and that stage is given an integer value (no 2A, 2b etc.) for easier comparisons #m1=match(colnames(TCGAssgsea), BrClin$Patient.ID) BrClin$Stage=(substr(BrClin$American.Joint.Committee.on.Cancer.Tumor.Stage.Code, 2, 2)) BrClin$Stage[which(BrClin$Stage==&quot;&quot;|BrClin$Stage==&quot;X&quot;)]=NA BrClin$Overall.Survival..Months.[which(BrClin$Overall.Survival..Months.&gt;=60)]=60 BrClin$Overall.Survival.Status[which(BrClin$Overall.Survival..Months.&gt;=60)]=&quot;LIVING&quot; BrClin$Disease.Free..Months.[which(BrClin$Disease.Free..Months.&gt;=60)]=60 BrClin$Disease.Free.Status[which(BrClin$Disease.Free..Months.&gt;=60)]=&quot;Disease Free&quot; 15.1 Associating CD74 with phenotype and outcome The Thorsson data has pre-calculated scores for: immune subtypes leukocyte fractins proportion of data with coding mutations TCR shannon index Z-Scale CD74 scores prior to analysis: TCGAssgsea=scale(TCGArsem2[match(&quot;CD74&quot;, rownames(TCGArsem2)), ]) m1=match(colnames(TCGArsem2), BrClin$Patient.ID) tinfo=data.frame(pam=BrClin$PAM50[m1], OSM=BrClin$Overall.Survival..Months.[m1], OSS=BrClin$Overall.Survival.Status[m1], cd74=TCGAssgsea, DFS=BrClin$Disease.Free.Status[m1], DFM=BrClin$Disease.Free..Months.[m1], Stage=BrClin$Stage[m1]) ThorssData=ThorssData[which(ThorssData$TCGA.Study==&quot;BRCA&quot;), ] n1=match(rownames(tinfo), ThorssData$TCGA.Participant.Barcode) tinfo$immSub=ThorssData$Immune.Subtype[n1] tinfo$leukFrac=as.numeric(ThorssData$Leukocyte.Fraction[n1]) tinfo$strFrac=as.numeric(ThorssData$Stromal.Fraction[n1]) tinfo$codingMut=as.numeric(ThorssData$Nonsilent.Mutation.Rate[n1]) tinfo$TCRshann=as.numeric(ThorssData$TCR.Shannon[n1]) par(mfrow=c(2,3)) boxplot(tinfo$cd74~tinfo$pam, ylab=&quot;gene exp&quot;, main=&quot;PAM50&quot;) boxplot(tinfo$cd74~tinfo$immSub, ylab=&quot;gene exp&quot;, main=&quot;Immune sbtype&quot;) ax=cor.test(tinfo$cd74, log10(tinfo$codingMut+1), method=&quot;spearman&quot;) smoothScatter(tinfo$cd74, log10(tinfo$codingMut+1), xlab=&quot;gene exp&quot;, ylab=&quot;log10 mut&quot;) text(4,0.5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfo$cd74, tinfo$leukFrac, method=&quot;spearman&quot;) smoothScatter(tinfo$cd74, (tinfo$leukFrac), xlab=&quot;gene exp&quot;, ylab=&quot;leuk frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfo$cd74, tinfo$TCRshann, method=&quot;spearman&quot;) smoothScatter(tinfo$cd74, tinfo$TCRshann, xlab=&quot;gene exp&quot;, ylab=&quot;TCR diversity&quot;) text(4,1, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) hist(tinfo$cd74) Figure 15.1: CD74 assoc with patient data #write.csv(tinfo, file=&quot;nature-tables/5d-TCGA_data.csv&quot;) We can also check if there is an association with survival: axD=Surv(tinfo$DFM, ifelse(tinfo$DFS==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS==&quot;DiseaseFree&quot;, 0, NA))) axO=Surv(tinfo$OSM, ifelse(tinfo$OSS==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS==&quot;LIVING&quot;, 0, NA))) SurvOSS=coxph(axO~tinfo$pam+tinfo$Stage+tinfo$cd74) SurvDFS=coxph(axD~tinfo$pam+tinfo$Stage+tinfo$cd74) ao=summary(SurvOSS) ao ## Call: ## coxph(formula = axO ~ tinfo$pam + tinfo$Stage + tinfo$cd74) ## ## n= 804, number of events= 78 ## (276 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 0.3709 1.4491 0.3780 0.981 0.3265 ## tinfo$pamLumA -0.8365 0.4332 0.3091 -2.707 0.0068 ** ## tinfo$pamLumB -0.3137 0.7308 0.3409 -0.920 0.3574 ## tinfo$pamNormal -0.2546 0.7752 0.6282 -0.405 0.6853 ## tinfo$Stage2 0.6162 1.8519 0.3309 1.862 0.0626 . ## tinfo$Stage3 0.6636 1.9417 0.4315 1.538 0.1241 ## tinfo$Stage4 1.9960 7.3594 0.4255 4.691 2.72e-06 *** ## tinfo$cd74 -0.3021 0.7392 0.1530 -1.974 0.0484 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 1.4491 0.6901 0.6907 3.0400 ## tinfo$pamLumA 0.4332 2.3083 0.2364 0.7939 ## tinfo$pamLumB 0.7308 1.3685 0.3747 1.4253 ## tinfo$pamNormal 0.7752 1.2899 0.2263 2.6557 ## tinfo$Stage2 1.8519 0.5400 0.9681 3.5425 ## tinfo$Stage3 1.9417 0.5150 0.8335 4.5234 ## tinfo$Stage4 7.3594 0.1359 3.1963 16.9448 ## tinfo$cd74 0.7392 1.3528 0.5477 0.9978 ## ## Concordance= 0.715 (se = 0.031 ) ## Likelihood ratio test= 42.32 on 8 df, p=1e-06 ## Wald test = 47.41 on 8 df, p=1e-07 ## Score (logrank) test = 56.19 on 8 df, p=3e-09 as=summary(SurvDFS) as ## Call: ## coxph(formula = axD ~ tinfo$pam + tinfo$Stage + tinfo$cd74) ## ## n= 587, number of events= 69 ## (493 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 -0.4626 0.6296 0.4860 -0.952 0.34117 ## tinfo$pamLumA -1.0004 0.3677 0.3158 -3.168 0.00153 ** ## tinfo$pamLumB -0.8377 0.4327 0.3701 -2.263 0.02361 * ## tinfo$pamNormal -0.8810 0.4143 0.7608 -1.158 0.24681 ## tinfo$Stage2 0.5470 1.7281 0.3389 1.614 0.10648 ## tinfo$Stage3 1.0539 2.8687 0.4440 2.373 0.01762 * ## tinfo$Stage4 2.6058 13.5422 0.4836 5.388 7.13e-08 *** ## tinfo$cd74 -0.1134 0.8928 0.1456 -0.779 0.43600 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 0.6296 1.58824 0.24287 1.6323 ## tinfo$pamLumA 0.3677 2.71950 0.19802 0.6828 ## tinfo$pamLumB 0.4327 2.31113 0.20948 0.8937 ## tinfo$pamNormal 0.4143 2.41342 0.09329 1.8404 ## tinfo$Stage2 1.7281 0.57866 0.88943 3.3577 ## tinfo$Stage3 2.8687 0.34859 1.20151 6.8493 ## tinfo$Stage4 13.5422 0.07384 5.24827 34.9432 ## tinfo$cd74 0.8928 1.12006 0.67121 1.1876 ## ## Concordance= 0.69 (se = 0.039 ) ## Likelihood ratio test= 32.15 on 8 df, p=9e-05 ## Wald test = 39.03 on 8 df, p=5e-06 ## Score (logrank) test = 50.73 on 8 df, p=3e-08 Note that CD74 is associated with survival: The harzards ratio is 1.851886 (95CI:0.9680967, 3.5424989), p value 1.176905110^{-6}. This means that this is associated with survival regardless of subtype. We can look at these values in forestplots data1=data.frame(X1=c(&quot;&quot;,&quot;PAM50&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;CD74&quot;), X2=c(&quot;&quot;,&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;, &quot;Normal&quot; ,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;&quot;), X3=c(&quot;NSamp&quot;, table(tinfo$pam), table(tinfo$Stage), length(na.omit(tinfo$cd74))), X4=c(&quot;HR&quot;, &quot;&quot;, round(summary(SurvOSS)$coefficients[ 1:4,2],2), &quot;&quot;, round(summary(SurvOSS)$coefficients[ 5:8,2],2))) mdata=data.frame(summary(SurvOSS)$conf.int[ ,c(1,3:4)]) mdata=rbind(NA,NA, mdata[1:4, ], NA, mdata[5:8, ]) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata, xlog=T, boxsize=0.5) Figure 15.2: forest plot CD74 #write.csv(cbind(data1, mdata), file=&quot;nature-tables/5e_forest_plot.csv&quot;) DT::datatable(cbind(data1, mdata), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 15.2: forest plot CD74 We can look below what the association with subtype is in KM curves: par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$OSM[l1], ifelse(tinfo$OSS[l1]==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS[l1]==&quot;LIVING&quot;, 0, NA))) TCGAvalCut=cut(tinfo$cd74[l1], quantile(tinfo$cd74[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;CD74 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.3: OS CD74 by subtype par(mfrow=c(2,2)) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$DFM[l1], ifelse(tinfo$DFS[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS[l1]==&quot;DiseaseFree&quot;, 0, NA))) TCGAvalCut=cut(tinfo$cd74[l1], quantile(tinfo$cd74[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;CD74 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.4: DFS CD74 by subtype 15.2 Associating ADMATS10 with phenotype and outcome Do the same thing as above with the ADAMST10 scores 15.2.1 All samples Z-Scale ADAMTS10 scores prior to analysis: TCGAssgsea=scale(TCGArsem2[match(&quot;ADAMTS10&quot;, rownames(TCGArsem2)), ]) tinfo$adamts10=TCGAssgsea #pdf(&quot;figure-outputs/Figure5_ADAMST10_output.pdf&quot;, height=7, width=9) par(mfrow=c(2,3)) boxplot(tinfo$adamts10~tinfo$pam, ylab=&quot;gene exp&quot;, main=&quot;PAM50&quot;) boxplot(tinfo$adamts10~tinfo$immSub, ylab=&quot;gene exp&quot;, main=&quot;Immune sbtype&quot;) ax=cor.test(tinfo$adamts10, log10(tinfo$codingMut+1), method=&quot;spearman&quot;) smoothScatter(tinfo$adamts10, log10(tinfo$codingMut+1), xlab=&quot;gene exp&quot;, ylab=&quot;log10 mut&quot;) text(4,0.5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfo$adamts10, tinfo$leukFrac, method=&quot;spearman&quot;) smoothScatter(tinfo$adamts10, (tinfo$leukFrac), xlab=&quot;gene exp&quot;, ylab=&quot;leuk frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfo$adamts10, tinfo$TCRshann, method=&quot;spearman&quot;) smoothScatter(tinfo$adamts10, tinfo$TCRshann, xlab=&quot;gene exp&quot;, ylab=&quot;TCR diversity&quot;) text(4,1, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) #hist(tinfo$adamts10) ax=cor.test(tinfo$adamts10, tinfo$strFrac, method=&quot;spearman&quot;) smoothScatter(tinfo$adamts10, (tinfo$strFrac), xlab=&quot;gene exp&quot;, ylab=&quot;str frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) Figure 15.5: ADAMTS10 assoc with patient data DT::datatable(tinfo, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 15.5: ADAMTS10 assoc with patient data We can also check if there is an association with survival: axD=Surv(tinfo$DFM, ifelse(tinfo$DFS==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS==&quot;DiseaseFree&quot;, 0, NA))) axO=Surv(tinfo$OSM, ifelse(tinfo$OSS==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS==&quot;LIVING&quot;, 0, NA))) SurvOSS=coxph(axO~tinfo$pam+tinfo$Stage+tinfo$adamts10) SurvDFS=coxph(axD~tinfo$pam+tinfo$Stage+tinfo$adamts10) ao=summary(SurvOSS) ao ## Call: ## coxph(formula = axO ~ tinfo$pam + tinfo$Stage + tinfo$adamts10) ## ## n= 804, number of events= 78 ## (276 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 0.54256 1.72041 0.38290 1.417 0.15649 ## tinfo$pamLumA -0.76154 0.46695 0.30686 -2.482 0.01308 * ## tinfo$pamLumB 0.01904 1.01922 0.34481 0.055 0.95596 ## tinfo$pamNormal -0.45045 0.63734 0.62772 -0.718 0.47301 ## tinfo$Stage2 0.78659 2.19589 0.32970 2.386 0.01704 * ## tinfo$Stage3 0.65338 1.92203 0.43174 1.513 0.13018 ## tinfo$Stage4 2.22438 9.24771 0.42640 5.217 1.82e-07 *** ## tinfo$adamts10 0.33950 1.40424 0.11926 2.847 0.00442 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 1.7204 0.5813 0.8123 3.6438 ## tinfo$pamLumA 0.4669 2.1416 0.2559 0.8521 ## tinfo$pamLumB 1.0192 0.9811 0.5185 2.0034 ## tinfo$pamNormal 0.6373 1.5690 0.1862 2.1812 ## tinfo$Stage2 2.1959 0.4554 1.1507 4.1903 ## tinfo$Stage3 1.9220 0.5203 0.8246 4.4798 ## tinfo$Stage4 9.2477 0.1081 4.0094 21.3299 ## tinfo$adamts10 1.4042 0.7121 1.1116 1.7740 ## ## Concordance= 0.705 (se = 0.033 ) ## Likelihood ratio test= 44.68 on 8 df, p=4e-07 ## Wald test = 51.25 on 8 df, p=2e-08 ## Score (logrank) test = 59.87 on 8 df, p=5e-10 as=summary(SurvDFS) as ## Call: ## coxph(formula = axD ~ tinfo$pam + tinfo$Stage + tinfo$adamts10) ## ## n= 587, number of events= 69 ## (493 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfo$pamHer2 -0.3174 0.7280 0.4917 -0.646 0.51857 ## tinfo$pamLumA -0.9437 0.3892 0.3139 -3.006 0.00264 ** ## tinfo$pamLumB -0.6459 0.5242 0.3782 -1.708 0.08767 . ## tinfo$pamNormal -1.0680 0.3437 0.7656 -1.395 0.16301 ## tinfo$Stage2 0.5881 1.8006 0.3392 1.734 0.08293 . ## tinfo$Stage3 1.0235 2.7830 0.4459 2.295 0.02171 * ## tinfo$Stage4 2.6126 13.6344 0.4816 5.425 5.81e-08 *** ## tinfo$adamts10 0.2219 1.2485 0.1273 1.743 0.08125 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfo$pamHer2 0.7280 1.37355 0.27775 1.908 ## tinfo$pamLumA 0.3892 2.56954 0.21035 0.720 ## tinfo$pamLumB 0.5242 1.90773 0.24978 1.100 ## tinfo$pamNormal 0.3437 2.90957 0.07665 1.541 ## tinfo$Stage2 1.8006 0.55537 0.92619 3.501 ## tinfo$Stage3 2.7830 0.35933 1.16137 6.669 ## tinfo$Stage4 13.6344 0.07334 5.30498 35.042 ## tinfo$adamts10 1.2485 0.80099 0.97282 1.602 ## ## Concordance= 0.671 (se = 0.041 ) ## Likelihood ratio test= 34.27 on 8 df, p=4e-05 ## Wald test = 41.62 on 8 df, p=2e-06 ## Score (logrank) test = 53.32 on 8 df, p=9e-09 Note that ADAMST10 is associated with survival: The harzards ratio is 2.1958872 (95CI:1.150724, 4.1903363), p value 4.22777410^{-7}. This means that this is associated with survival regardless of subtype. We can look at these values in forestplots data1=data.frame(X1=c(&quot;&quot;,&quot;PAM50&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;ADAMST10&quot;), X2=c(&quot;&quot;,&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;, &quot;Normal&quot; ,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;&quot;), X3=c(&quot;NSamp&quot;, table(tinfo$pam), table(tinfo$Stage), length(na.omit(tinfo$cd74))), X4=c(&quot;HR&quot;, &quot;&quot;, round(summary(SurvOSS)$coefficients[ 1:4,2],2), &quot;&quot;, round(summary(SurvOSS)$coefficients[ 5:8,2],2))) mdata=data.frame(summary(SurvOSS)$conf.int[ ,c(1,3:4)]) mdata=rbind(NA,NA, mdata[1:4, ], NA, mdata[5:8, ]) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata, xlog=T, boxsize=0.5) Figure 15.6: forest plot ADAMTS10 #dev.off() #write.csv(cbind(data1, mdata), file=&quot;nature-tables/5e_forest_plot_adamts10.csv&quot;) DT::datatable(cbind(data1, mdata), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 15.6: forest plot ADAMTS10 We can look below what the association with subtype is in KM curves: par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$OSM[l1], ifelse(tinfo$OSS[l1]==&quot;DECEASED&quot;, 1, ifelse(tinfo$OSS[l1]==&quot;LIVING&quot;, 0, NA))) TCGAvalCut=cut(tinfo$adamts10[l1], quantile(tinfo$adamts10[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;ADAMTS10 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.7: OS CD74 by subtype par(mfrow=c(2,2)) for (i in Xind){ l1=which(tinfo$pam==i) ax=Surv(tinfo$DFM[l1], ifelse(tinfo$DFS[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfo$DFS[l1]==&quot;DiseaseFree&quot;, 0, NA))) TCGAvalCut=cut(tinfo$adamts10[l1], quantile(tinfo$adamts10[l1], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax1=summary(coxph(ax~TCGAvalCut+tinfo$Stage[l1])) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;ADAMTS10 gene exp&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(20, 0.2, sprintf(&quot;HR:%s (%s-%s) p=%s&quot;, round(ax1$coefficients[2,2 ],2), round(ax1$conf.int[2,3 ],2), round(ax1$conf.int[2, 4],2),round(ax1$logtest[3],2))) } Figure 15.8: DFS ADAMTS10 by subtype 15.2.2 Redone using only ER cases Redo survival and limit only to ER+ cases: ## make a change here tinfoER=tinfo[which(tinfo$pam%in%c(&quot;LumA&quot;, &quot;LumB&quot;)), ] tinfoER$pam=factor(tinfoER$pam) axD=Surv(tinfoER$DFM, ifelse(tinfoER$DFS==&quot;Recurred/Progressed&quot;, 1, ifelse(tinfoER$DFS==&quot;DiseaseFree&quot;, 0, NA))) axO=Surv(tinfoER$OSM, ifelse(tinfoER$OSS==&quot;DECEASED&quot;, 1, ifelse(tinfoER$OSS==&quot;LIVING&quot;, 0, NA))) SurvOSS=coxph(axO~tinfoER$pam+tinfoER$Stage+tinfoER$adamts10) SurvDFS=coxph(axD~tinfoER$pam+tinfoER$Stage+tinfoER$adamts10) ao=summary(SurvOSS) ao ## Call: ## coxph(formula = axO ~ tinfoER$pam + tinfoER$Stage + tinfoER$adamts10) ## ## n= 580, number of events= 45 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfoER$pamLumB 0.7352 2.0859 0.3289 2.235 0.02538 * ## tinfoER$Stage2 1.2321 3.4283 0.4604 2.676 0.00745 ** ## tinfoER$Stage3 0.4820 1.6193 0.6456 0.747 0.45530 ## tinfoER$Stage4 2.6492 14.1425 0.5702 4.646 3.39e-06 *** ## tinfoER$adamts10 0.3179 1.3742 0.1796 1.770 0.07672 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfoER$pamLumB 2.086 0.47942 1.0948 3.974 ## tinfoER$Stage2 3.428 0.29169 1.3905 8.452 ## tinfoER$Stage3 1.619 0.61754 0.4569 5.739 ## tinfoER$Stage4 14.143 0.07071 4.6253 43.243 ## tinfoER$adamts10 1.374 0.72769 0.9665 1.954 ## ## Concordance= 0.682 (se = 0.044 ) ## Likelihood ratio test= 27.23 on 5 df, p=5e-05 ## Wald test = 28.36 on 5 df, p=3e-05 ## Score (logrank) test = 35.76 on 5 df, p=1e-06 as=summary(SurvDFS) as ## Call: ## coxph(formula = axD ~ tinfoER$pam + tinfoER$Stage + tinfoER$adamts10) ## ## n= 431, number of events= 44 ## (151 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## tinfoER$pamLumB 0.3624 1.4367 0.3493 1.038 0.29949 ## tinfoER$Stage2 0.6869 1.9875 0.4159 1.651 0.09866 . ## tinfoER$Stage3 1.1168 3.0550 0.5321 2.099 0.03583 * ## tinfoER$Stage4 1.8789 6.5462 0.6964 2.698 0.00698 ** ## tinfoER$adamts10 0.3702 1.4480 0.1702 2.175 0.02966 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## tinfoER$pamLumB 1.437 0.6960 0.7246 2.849 ## tinfoER$Stage2 1.987 0.5032 0.8795 4.491 ## tinfoER$Stage3 3.055 0.3273 1.0767 8.668 ## tinfoER$Stage4 6.546 0.1528 1.6718 25.633 ## tinfoER$adamts10 1.448 0.6906 1.0372 2.022 ## ## Concordance= 0.588 (se = 0.052 ) ## Likelihood ratio test= 12.76 on 5 df, p=0.03 ## Wald test = 13.76 on 5 df, p=0.02 ## Score (logrank) test = 14.92 on 5 df, p=0.01 #pdf(&quot;figure-outputs/NEwpanelB.pdf&quot;, height=7, width=9) par(mfrow=c(2,3)) boxplot(tinfoER$adamts10~tinfoER$pam, ylab=&quot;gene exp&quot;, main=&quot;PAM50&quot;) boxplot(tinfoER$adamts10~tinfoER$immSub, ylab=&quot;gene exp&quot;, main=&quot;Immune sbtype&quot;) ax=cor.test(tinfoER$adamts10, log10(tinfoER$codingMut+1), method=&quot;spearman&quot;) smoothScatter(tinfoER$adamts10, log10(tinfoER$codingMut+1), xlab=&quot;gene exp&quot;, ylab=&quot;log10 mut&quot;) text(4,0.5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfoER$adamts10, tinfoER$leukFrac, method=&quot;spearman&quot;) smoothScatter(tinfoER$adamts10, (tinfoER$leukFrac), xlab=&quot;gene exp&quot;, ylab=&quot;leuk frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfoER$adamts10, tinfoER$TCRshann, method=&quot;spearman&quot;) smoothScatter(tinfoER$adamts10, tinfoER$TCRshann, xlab=&quot;gene exp&quot;, ylab=&quot;TCR diversity&quot;) text(4,1, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) ax=cor.test(tinfoER$adamts10, tinfoER$strFrac, method=&quot;spearman&quot;) smoothScatter(tinfoER$adamts10, (tinfoER$strFrac), xlab=&quot;gene exp&quot;, ylab=&quot;str frac&quot;) text(4,0.2, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 3))) DT::datatable(tinfoER, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Also check the forest plots data1=data.frame(X1=c(&quot;&quot;,&quot;PAM50&quot;, &quot;&quot;, &quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;, &quot;ADAMST10&quot;), X2=c(&quot;&quot;,&quot;LumA&quot;, &quot;LumB&quot; ,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;&quot;), X3=c(&quot;NSamp&quot;, table(tinfoER$pam), table(tinfoER$Stage), length(na.omit(tinfoER$adamts10))), X4=c(&quot;HR&quot;, &quot;&quot;, round(summary(SurvOSS)$coefficients[ 1,2],2), &quot;&quot;, round(summary(SurvOSS)$coefficients[ 2:5,2],2))) mdata=data.frame(summary(SurvOSS)$conf.int[ ,c(1,3:4)]) mdata=rbind(NA,NA, mdata[1, ], NA, mdata[2:5, ]) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata, xlog=T, boxsize=0.5) Figure 15.9: Adamts10 expression survival analysis, ER only DT::datatable(cbind(data1, mdata), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 15.9: Adamts10 expression survival analysis, ER only 15.3 Signature: Lum cases non-inflammatory: growing vs stable Here, use the signature which was applied before to see the difference between the non-inflammatory growing vs stable samples. We compare this to the oncotypedx list of genes and mammaprint #GlistGrowing=rownames(vstLumRes)[which(vstLumRes$log2FoldChange&gt;1.5 &amp; vstLumRes$baseMean&gt;100 &amp; vstLumRes$padj&lt;0.05 )] #Glistnon=rownames(vstLumRes)[which(vstLumRes$log2FoldChange&lt;(-1.5) &amp; vstLumRes$baseMean&gt;100 &amp; vstLumRes$padj&lt;0.05 )] HumGeneList=SymHum2Rat$HGNC.symbol[match(GlistGrowing, SymHum2Rat$RGD.symbol)] HumGeneList2=Rat2Hum$HGNC.symbol[match(GlistGrowing, Rat2Hum$RGD.symbol)] TCGAssgsea=gsva((TCGArsem2), list(grow=na.omit(HumGeneList2), stab=Rat2Hum$HGNC.symbol[match(Glistnon, Rat2Hum$RGD.symbol)], Onco=Oncoprint[[1]], Mamma=Oncoprint[[2]]), method=&quot;ssgsea&quot;, ssgsea.norm=F) TCGAssgsea=t(scale(t(TCGAssgsea))) par(mfrow=c(1,2)) hist(TCGAssgsea[1, ], main=&quot;stable&quot;) hist(TCGAssgsea[2, ], main=&quot;growing&quot;) plot(TCGAssgsea[1, ], TCGAssgsea[2, ], xlab=&quot;stable&quot;, ylab=&quot;growing&quot;) ## also compare with onco or mamma print plot(TCGAssgsea[1, ], TCGAssgsea[3, ], xlab=&quot;stable&quot;, ylab=&quot;oncotype&quot;) plot(TCGAssgsea[1, ], TCGAssgsea[4, ], xlab=&quot;stable&quot;, ylab=&quot;mammaprint&quot;) write.csv(&quot;nature-tables/Supplemental_table5.csv&quot;) The Growing signature genes (positive coefficient) are Setd7, Hspa1l, Hbb, Kifc2, Kmt5c, Pik3c2b, Lmntd2, Nsmf, Nrbp2, LOC100134871, Hsp90aa1, Coro6, Chst8, Slc4a3, Fhod1, Rpl8, Spp1, Catsperg, Col5a1, LOC100911498, Noxa1, F8, Rps19, Rps6, Irs1, Leng8, Plekhh1, Lmbr1l, Ikbke, Pnisr, Adamts10, Zfp692, Trim41, Sema6d, Mgp, Cdc42bpg, Slc16a13, Dmpk and stable (negative coefficient) are Fgfr2, Mx1, Endou, Grhl3, Slpi, Gbp2, Plg, Aldh1a3, Upk3a. Below are the survival curves for the growing signature: #pdf(&quot;figure-outputs/Fig5_survival_analysis__poslist_Lum_samples_baseMean_greater100.pdf&quot;, height=8, width = 8) par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGArsem2)) ax=Surv(BrClin$Overall.Survival..Months.[l1], ifelse(BrClin$Overall.Survival.Status[l1]==&quot;DECEASED&quot;, 1, ifelse(BrClin$Overall.Survival.Status[l1]==&quot;LIVING&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[1, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[1, lx2], quantile(TCGAssgsea[1, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, pch=19) } Figure 15.10: OS: growing signature for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGArsem2)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[1, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[1, lx2], quantile(TCGAssgsea[1, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, pch=19) } Figure 15.11: OS: growing signature #dev.off() #DT::datatable(as.data.frame(test), rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) The OS curves for the stable signature #pdf(&quot;figure-outputs/Fig5_survival_analysis__neglist_Lum_samples_baseMean_greater100.pdf&quot;, height=8, width = 8) par(mfrow=c(2,2)) Xind=c(&quot;Basal&quot;, &quot;Her2&quot;, &quot;LumA&quot;, &quot;LumB&quot;) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGArsem2)) ax=Surv(BrClin$Overall.Survival..Months.[l1], ifelse(BrClin$Overall.Survival.Status[l1]==&quot;DECEASED&quot;, 1, ifelse(BrClin$Overall.Survival.Status[l1]==&quot;LIVING&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[2, lx2]+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(TCGAssgsea[2, lx2], quantile(TCGAssgsea[2, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum stab&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time&quot;, ylab=&quot;OS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) # legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, # pch=19) } Figure 15.12: OS: stable signature #dev.off() ax=cut(TCGAssgsea[2, lx2], quantile(TCGAssgsea[2, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) table(ax) ## ax ## L M P ## 58 60 59 par(mfrow=c(2,2)) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGArsem2)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[2, lx2]+BrClin$Stage[l1]) axc=summary(axb) axc TCGAvalCut=cut(TCGAssgsea[2, lx2], quantile(TCGAssgsea[2, lx2], c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum stable&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(10, 0, sprintf(&quot;univ. cts. var. HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) # legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, # pch=19) } Figure 15.13: OS: stable signature Quick sanity checks: for LuminalA samples, check that the scores match with outcome ## coxph for growing signature: l1=which(BrClin$PAM50==&quot;LumA&quot;) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) axb=coxph(ax~TCGAssgsea[1, lx2]+BrClin$Stage[l1]) summary(axb) ## Call: ## coxph(formula = ax ~ TCGAssgsea[1, lx2] + BrClin$Stage[l1]) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAssgsea[1, lx2] 0.5325 1.7032 0.2003 2.658 0.00786 ** ## BrClin$Stage[l1]2 0.1482 1.1598 0.4742 0.313 0.75465 ## BrClin$Stage[l1]3 0.7633 2.1455 0.5768 1.323 0.18570 ## BrClin$Stage[l1]4 1.1378 3.1200 0.8184 1.390 0.16445 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAssgsea[1, lx2] 1.703 0.5871 1.1501 2.522 ## BrClin$Stage[l1]2 1.160 0.8622 0.4578 2.938 ## BrClin$Stage[l1]3 2.145 0.4661 0.6927 6.645 ## BrClin$Stage[l1]4 3.120 0.3205 0.6273 15.517 ## ## Concordance= 0.678 (se = 0.045 ) ## Likelihood ratio test= 11.87 on 4 df, p=0.02 ## Wald test = 12.45 on 4 df, p=0.01 ## Score (logrank) test = 13.21 on 4 df, p=0.01 ## boxplot of growing signature with outcome: par(mfrow=c(1,2)) boxplot(TCGAssgsea[1, lx2]~BrClin$Disease.Free.Status[l1], main=&quot;growing sig with status&quot;) boxplot(TCGAssgsea[1, lx2]~BrClin$Overall.Survival.Status[l1], main=&quot;growing sig with OS&quot;) Combined signature: subtract the stable signature from the growing signature and check the outcome here: #pdf(&quot;figure-outputs/Fig5_survival_analysis_growing_subtract_stab_Lum_samples_baseMean_greater100.pdf&quot;, height=8, width = 8) par(mfrow=c(2,2)) for (i in Xind){ l1=which(BrClin$PAM50==i) lx2=match(BrClin$Patient.ID[l1], colnames(TCGArsem2)) ax=Surv(BrClin$Disease.Free..Months.[l1], ifelse(BrClin$Disease.Free.Status[l1]==&quot;Recurred/Progressed&quot;, 1, ifelse(BrClin$Disease.Free.Status[l1]==&quot;DiseaseFree&quot;, 0, NA))) tval=TCGAssgsea[1, lx2]-TCGAssgsea[2, lx2] axb=coxph(ax~tval+BrClin$Stage[l1]) axc=summary(axb) TCGAvalCut=cut(tval, quantile(tval, c(0, 0.33, 0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ax~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;DFS&quot;, mark.time=T) text(10, 0, sprintf(&quot;HR=%s (%s-%s), p=%s&quot;, round(axc$coefficients[1,2], 2), round(axc$conf.int[1,3],2), round(axc$conf.int[1,4],2),round(axc$logtest[3],2 ))) legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, pch=19) ay=Surv(BrClin$Overall.Survival..Months.[l1], ifelse(BrClin$Overall.Survival.Status[l1]==&quot;DECEASED&quot;, 1, ifelse(BrClin$Overall.Survival.Status[l1]==&quot;LIVING&quot;, 0, NA))) ayb=coxph(ay~tval+BrClin$Stage[l1]) ayc=summary(ayb) ax2=plot(survfit(ay~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time&quot;, ylab=&quot;OS&quot;, mark.time=T) text(10, 0, sprintf(&quot;HR=%s (%s-%s), p=%s&quot;, round(ayc$coefficients[1,2], 2), round(ayc$conf.int[1,3],2), round(ayc$conf.int[1,4],2),round(ayc$logtest[3],2 ))) legend(&quot;topleft&quot;,paste(c(&quot;L&quot;, &quot;M&quot;, &quot;H&quot;), summary(TCGAvalCut)), col=brewer.pal(3, &quot;Blues&quot;), lwd=1, pch=19) } #dev.off() We can see whether this signature associates with leukocyte content and TCR diversity in the TCGA cohort: l1=which(BrClin$PAM50==&quot;LumA&quot;) lx2=match(BrClin$Patient.ID[l1], colnames(TCGAssgsea)) lx3=match(BrClin$Patient.ID[l1], ThorssData$TCGA.Participant.Barcode) newinfoTab=data.frame(pat=BrClin$Patient.ID[l1], TCGAgrow=TCGAssgsea[1, lx2], TCGAstab=TCGAssgsea[2, lx2], TCGAcomb=TCGAssgsea[1, lx2]-TCGAssgsea[2, lx2], Onco=TCGAssgsea[3, lx2], Mamma=TCGAssgsea[4, lx2], OSM=BrClin$Overall.Survival..Months.[l1], OSS=BrClin$Overall.Survival.Status[l1], DFS=BrClin$Disease.Free.Status[l1], DFM=BrClin$Disease.Free..Months.[l1], Stage=BrClin$Stage[l1], leuk=as.numeric(ThorssData$Leukocyte.Fraction[lx3]), str=as.numeric(ThorssData$Stromal.Fraction[lx3]), TCRshann=as.numeric(ThorssData$TCR.Shannon[lx3]), immSub=ThorssData$Immune.Subtype[lx3]) #pdf(&quot;figure-outputs/NewpanelC.pdf&quot;, height=8, width=9) par(mfrow=c(2,2)) ax=cor.test(newinfoTab$TCGAgrow, newinfoTab$leuk, method=&quot;spearman&quot;) smoothScatter(newinfoTab$TCGAgrow, newinfoTab$leuk,xlab=&quot;Luminal signature&quot;, ylab=&quot;Leukoycte&quot;) text(0.6,0.6, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) ax=cor.test(newinfoTab$TCGAgrow, newinfoTab$str, method=&quot;spearman&quot;) smoothScatter(newinfoTab$TCGAgrow, newinfoTab$str, xlab=&quot;Luminal signature&quot;, ylab=&quot;Stroma&quot;) text(0.6,0.6, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 2))) ax=cor.test(newinfoTab$TCGAgrow, newinfoTab$TCRshann, method=&quot;spearman&quot;) smoothScatter(newinfoTab$TCGAgrow, newinfoTab$TCRshann,xlab=&quot;Luminal signature&quot;, ylab=&quot;TCR div&quot;) text(0.6,5, sprintf(&quot;cor=%s, p=%s&quot;, round(ax$estimate, 2), round(ax$p.value, 9))) boxplot(newinfoTab$TCGAgrow~newinfoTab$immSub) Figure 15.14: luminal signature associated with clinical variables #dev.off() DT::datatable(newinfoTab, rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), Xscroll=T)) Figure 15.14: luminal signature associated with clinical variables As well as whether it associates with any of the previously identified immune subtypes: ggplot(newinfoTab, aes(x=immSub, y=TCGAstab))+geom_boxplot()+geom_point()+theme_bw() write.csv(newinfoTab, file=&quot;nature-tables/5h_lum_growing_vs_stable.csv&quot;) 15.4 Comparison to oncotype and mammaprint Finally, see how these compare to oncotype or mammaprint. We can do this two ways: 15.4.1 Overall survival Run survival ~ Oncotype/Mamma/Growing + PAM50 + Stage SurvOS=Surv(newinfoTab$OSM, ifelse(newinfoTab$OSS==&quot;LIVING&quot;, 0, 1)) SurvDFS=Surv(newinfoTab$DFM, ifelse(newinfoTab$DFS==&quot;DiseaseFree&quot;, 0,ifelse(newinfoTab$DFS==&quot;Recurred/Progressed&quot;, 1, NA) )) model1=coxph(SurvOS~TCGAgrow+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvOS ~ TCGAgrow + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.2753 1.3169 0.2012 1.368 0.17131 ## Stage2 0.7334 2.0821 0.4799 1.528 0.12644 ## Stage3 -0.9157 0.4003 1.0805 -0.847 0.39677 ## Stage4 2.0093 7.4585 0.6467 3.107 0.00189 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.3169 0.7594 0.88770 1.954 ## Stage2 2.0821 0.4803 0.81290 5.333 ## Stage3 0.4003 2.4984 0.04815 3.327 ## Stage4 7.4585 0.1341 2.09976 26.493 ## ## Concordance= 0.667 (se = 0.058 ) ## Likelihood ratio test= 13.72 on 4 df, p=0.008 ## Wald test = 14.54 on 4 df, p=0.006 ## Score (logrank) test = 18.36 on 4 df, p=0.001 model2=coxph(SurvOS~TCGAgrow+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvOS ~ TCGAgrow + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.3674 1.4440 0.2077 1.769 0.07694 . ## Onco -0.6667 0.5134 0.2402 -2.776 0.00551 ** ## Stage2 0.8442 2.3261 0.4839 1.744 0.08109 . ## Stage3 -0.9671 0.3802 1.0807 -0.895 0.37087 ## Stage4 2.0347 7.6502 0.6615 3.076 0.00210 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.4440 0.6925 0.96106 2.1695 ## Onco 0.5134 1.9478 0.32062 0.8221 ## Stage2 2.3261 0.4299 0.90094 6.0055 ## Stage3 0.3802 2.6303 0.04572 3.1617 ## Stage4 7.6502 0.1307 2.09232 27.9719 ## ## Concordance= 0.713 (se = 0.049 ) ## Likelihood ratio test= 21.12 on 5 df, p=8e-04 ## Wald test = 22.82 on 5 df, p=4e-04 ## Score (logrank) test = 26.15 on 5 df, p=8e-05 model3=coxph(SurvOS~TCGAgrow+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvOS ~ TCGAgrow + Mamma + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.2715 1.3119 0.2019 1.345 0.17878 ## Mamma -0.0464 0.9547 0.2459 -0.189 0.85035 ## Stage2 0.7497 2.1164 0.4874 1.538 0.12401 ## Stage3 -0.9201 0.3985 1.0809 -0.851 0.39463 ## Stage4 2.0398 7.6894 0.6658 3.064 0.00219 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.3119 0.7622 0.88314 1.949 ## Mamma 0.9547 1.0475 0.58954 1.546 ## Stage2 2.1164 0.4725 0.81415 5.502 ## Stage3 0.3985 2.5095 0.04791 3.315 ## Stage4 7.6894 0.1300 2.08531 28.354 ## ## Concordance= 0.664 (se = 0.058 ) ## Likelihood ratio test= 13.76 on 5 df, p=0.02 ## Wald test = 14.48 on 5 df, p=0.01 ## Score (logrank) test = 18.36 on 5 df, p=0.003 modelos=coxph(SurvOS~TCGAgrow+Mamma+Onco+Stage, data=newinfoTab) summary(modelos) ## Call: ## coxph(formula = SurvOS ~ TCGAgrow + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.4387 1.5507 0.2195 1.999 0.04565 * ## Mamma 0.3709 1.4491 0.2849 1.302 0.19290 ## Onco -0.8402 0.4316 0.2690 -3.123 0.00179 ** ## Stage2 0.7444 2.1052 0.4932 1.509 0.13123 ## Stage3 -0.9419 0.3899 1.0810 -0.871 0.38361 ## Stage4 1.8090 6.1043 0.6920 2.614 0.00895 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.5507 0.6449 1.00851 2.3845 ## Mamma 1.4491 0.6901 0.82908 2.5328 ## Onco 0.4316 2.3168 0.25476 0.7313 ## Stage2 2.1052 0.4750 0.80068 5.5351 ## Stage3 0.3899 2.5647 0.04686 3.2443 ## Stage4 6.1043 0.1638 1.57250 23.6964 ## ## Concordance= 0.742 (se = 0.044 ) ## Likelihood ratio test= 22.88 on 6 df, p=8e-04 ## Wald test = 25.63 on 6 df, p=3e-04 ## Score (logrank) test = 28.26 on 6 df, p=8e-05 Also try the stable signature: model1=coxph(SurvOS~TCGAstab+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvOS ~ TCGAstab + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1176 0.8890 0.2232 -0.527 0.59818 ## Stage2 0.7431 2.1025 0.4796 1.549 0.12128 ## Stage3 -0.8446 0.4297 1.0810 -0.781 0.43461 ## Stage4 2.0023 7.4064 0.6553 3.055 0.00225 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8890 1.1248 0.57400 1.377 ## Stage2 2.1025 0.4756 0.82127 5.382 ## Stage3 0.4297 2.3271 0.05165 3.575 ## Stage4 7.4064 0.1350 2.05019 26.756 ## ## Concordance= 0.67 (se = 0.063 ) ## Likelihood ratio test= 12.19 on 4 df, p=0.02 ## Wald test = 13.06 on 4 df, p=0.01 ## Score (logrank) test = 16.83 on 4 df, p=0.002 model2=coxph(SurvOS~TCGAstab+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvOS ~ TCGAstab + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.2364 0.7895 0.2126 -1.112 0.26621 ## Onco -0.6851 0.5040 0.2530 -2.708 0.00677 ** ## Stage2 0.8198 2.2700 0.4817 1.702 0.08879 . ## Stage3 -0.8871 0.4118 1.0815 -0.820 0.41206 ## Stage4 1.8823 6.5685 0.6615 2.845 0.00443 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.7895 1.2667 0.52039 1.1976 ## Onco 0.5040 1.9840 0.30697 0.8276 ## Stage2 2.2700 0.4405 0.88307 5.8353 ## Stage3 0.4118 2.4281 0.04945 3.4300 ## Stage4 6.5685 0.1522 1.79635 24.0184 ## ## Concordance= 0.703 (se = 0.055 ) ## Likelihood ratio test= 19.3 on 5 df, p=0.002 ## Wald test = 21.8 on 5 df, p=6e-04 ## Score (logrank) test = 24.82 on 5 df, p=2e-04 model3=coxph(SurvOS~TCGAstab+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvOS ~ TCGAstab + Mamma + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1396 0.8697 0.2273 -0.614 0.53914 ## Mamma -0.1076 0.8980 0.2465 -0.437 0.66246 ## Stage2 0.7775 2.1761 0.4856 1.601 0.10934 ## Stage3 -0.8495 0.4276 1.0811 -0.786 0.43202 ## Stage4 2.0485 7.7561 0.6618 3.095 0.00197 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8697 1.1498 0.55712 1.358 ## Mamma 0.8980 1.1136 0.55393 1.456 ## Stage2 2.1761 0.4595 0.84010 5.637 ## Stage3 0.4276 2.3384 0.05139 3.559 ## Stage4 7.7561 0.1289 2.11982 28.379 ## ## Concordance= 0.654 (se = 0.06 ) ## Likelihood ratio test= 12.38 on 5 df, p=0.03 ## Wald test = 13.21 on 5 df, p=0.02 ## Score (logrank) test = 17 on 5 df, p=0.005 model3=coxph(SurvOS~TCGAstab+Mamma+Onco+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvOS ~ TCGAstab + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.2170 0.8049 0.2157 -1.006 0.31446 ## Mamma 0.2149 1.2397 0.2689 0.799 0.42426 ## Onco -0.7796 0.4586 0.2770 -2.814 0.00489 ** ## Stage2 0.7567 2.1312 0.4896 1.546 0.12220 ## Stage3 -0.8906 0.4104 1.0816 -0.823 0.41029 ## Stage4 1.7519 5.7654 0.6893 2.542 0.01103 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8049 1.2424 0.52738 1.2285 ## Mamma 1.2397 0.8067 0.73187 2.0998 ## Onco 0.4586 2.1805 0.26648 0.7893 ## Stage2 2.1312 0.4692 0.81640 5.5633 ## Stage3 0.4104 2.4365 0.04927 3.4189 ## Stage4 5.7654 0.1734 1.49325 22.2597 ## ## Concordance= 0.714 (se = 0.053 ) ## Likelihood ratio test= 19.94 on 6 df, p=0.003 ## Wald test = 23.21 on 6 df, p=7e-04 ## Score (logrank) test = 25.73 on 6 df, p=3e-04 Combine the signatures such that it is Growing - Stable model1=coxph(SurvOS~TCGAcomb+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvOS ~ TCGAcomb + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.1683 1.1832 0.1364 1.234 0.21736 ## Stage2 0.7243 2.0634 0.4801 1.509 0.13138 ## Stage3 -0.8655 0.4208 1.0802 -0.801 0.42298 ## Stage4 1.9350 6.9244 0.6553 2.953 0.00315 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.1832 0.8451 0.90567 1.546 ## Stage2 2.0634 0.4846 0.80520 5.288 ## Stage3 0.4208 2.3762 0.05066 3.496 ## Stage4 6.9244 0.1444 1.91683 25.014 ## ## Concordance= 0.668 (se = 0.059 ) ## Likelihood ratio test= 13.4 on 4 df, p=0.009 ## Wald test = 14.43 on 4 df, p=0.006 ## Score (logrank) test = 18.23 on 4 df, p=0.001 model2=coxph(SurvOS~TCGAcomb+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvOS ~ TCGAcomb + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.2451 1.2777 0.1312 1.868 0.06172 . ## Onco -0.7124 0.4904 0.2468 -2.887 0.00389 ** ## Stage2 0.8306 2.2946 0.4834 1.718 0.08576 . ## Stage3 -0.9125 0.4015 1.0812 -0.844 0.39870 ## Stage4 1.9323 6.9054 0.6552 2.949 0.00319 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.2777 0.7827 0.98805 1.6523 ## Onco 0.4904 2.0390 0.30236 0.7955 ## Stage2 2.2946 0.4358 0.88972 5.9180 ## Stage3 0.4015 2.4905 0.04824 3.3423 ## Stage4 6.9054 0.1448 1.91180 24.9423 ## ## Concordance= 0.709 (se = 0.053 ) ## Likelihood ratio test= 21.38 on 5 df, p=7e-04 ## Wald test = 23.23 on 5 df, p=3e-04 ## Score (logrank) test = 26.52 on 5 df, p=7e-05 model3=coxph(SurvOS~TCGAcomb+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvOS ~ TCGAcomb + Mamma + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.17166 1.18727 0.13577 1.264 0.20610 ## Mamma -0.09884 0.90588 0.24536 -0.403 0.68706 ## Stage2 0.75782 2.13362 0.48682 1.557 0.11955 ## Stage3 -0.87486 0.41692 1.08048 -0.810 0.41811 ## Stage4 1.99668 7.36459 0.67001 2.980 0.00288 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.1873 0.8423 0.90988 1.549 ## Mamma 0.9059 1.1039 0.56005 1.465 ## Stage2 2.1336 0.4687 0.82174 5.540 ## Stage3 0.4169 2.3985 0.05016 3.465 ## Stage4 7.3646 0.1358 1.98078 27.382 ## ## Concordance= 0.661 (se = 0.059 ) ## Likelihood ratio test= 13.57 on 5 df, p=0.02 ## Wald test = 14.42 on 5 df, p=0.01 ## Score (logrank) test = 18.3 on 5 df, p=0.003 model3=coxph(SurvOS~TCGAcomb+Mamma+Onco+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvOS ~ TCGAcomb + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 417, number of events= 27 ## (2 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.2543 1.2896 0.1323 1.922 0.05462 . ## Mamma 0.2801 1.3232 0.2770 1.011 0.31201 ## Onco -0.8417 0.4310 0.2746 -3.066 0.00217 ** ## Stage2 0.7465 2.1096 0.4924 1.516 0.12954 ## Stage3 -0.9075 0.4035 1.0816 -0.839 0.40145 ## Stage4 1.7365 5.6776 0.6903 2.516 0.01188 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.2896 0.7755 0.99498 1.6714 ## Mamma 1.3232 0.7557 0.76883 2.2774 ## Onco 0.4310 2.3204 0.25161 0.7381 ## Stage2 2.1096 0.4740 0.80360 5.5379 ## Stage3 0.4035 2.4781 0.04844 3.3615 ## Stage4 5.6776 0.1761 1.46751 21.9661 ## ## Concordance= 0.728 (se = 0.05 ) ## Likelihood ratio test= 22.42 on 6 df, p=0.001 ## Wald test = 25.3 on 6 df, p=3e-04 ## Score (logrank) test = 28.01 on 6 df, p=9e-05 15.4.2 DFS survival Run survival ~ Oncotype/Mamma/Growing + PAM50 + Stage #SurvOS=Surv(newinfoTab$OSM, ifelse(newinfoTab$OSS==&quot;LIVING&quot;, 0, 1)) SurvDFS=Surv(newinfoTab$DFM, ifelse(newinfoTab$DFS==&quot;DiseaseFree&quot;, 0,ifelse(newinfoTab$DFS==&quot;Recurred/Progressed&quot;, 1, NA) )) model1=coxph(SurvDFS~TCGAgrow+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvDFS ~ TCGAgrow + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.5325 1.7032 0.2003 2.658 0.00786 ** ## Stage2 0.1482 1.1598 0.4742 0.313 0.75465 ## Stage3 0.7633 2.1455 0.5768 1.323 0.18570 ## Stage4 1.1378 3.1200 0.8184 1.390 0.16445 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.703 0.5871 1.1501 2.522 ## Stage2 1.160 0.8622 0.4578 2.938 ## Stage3 2.145 0.4661 0.6927 6.645 ## Stage4 3.120 0.3205 0.6273 15.517 ## ## Concordance= 0.678 (se = 0.045 ) ## Likelihood ratio test= 11.87 on 4 df, p=0.02 ## Wald test = 12.45 on 4 df, p=0.01 ## Score (logrank) test = 13.21 on 4 df, p=0.01 model2=coxph(SurvDFS~TCGAgrow+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvDFS ~ TCGAgrow + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.5488 1.7311 0.2011 2.729 0.00636 ** ## Onco -0.3221 0.7246 0.2402 -1.341 0.17998 ## Stage2 0.1603 1.1739 0.4734 0.339 0.73488 ## Stage3 0.7569 2.1316 0.5754 1.315 0.18835 ## Stage4 1.1400 3.1269 0.8162 1.397 0.16250 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.7311 0.5777 1.1672 2.568 ## Onco 0.7246 1.3801 0.4525 1.160 ## Stage2 1.1739 0.8519 0.4641 2.969 ## Stage3 2.1316 0.4691 0.6902 6.584 ## Stage4 3.1269 0.3198 0.6314 15.484 ## ## Concordance= 0.675 (se = 0.051 ) ## Likelihood ratio test= 13.59 on 5 df, p=0.02 ## Wald test = 13.64 on 5 df, p=0.02 ## Score (logrank) test = 14.74 on 5 df, p=0.01 model3=coxph(SurvDFS~TCGAgrow+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvDFS ~ TCGAgrow + Mamma + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.5095 1.6644 0.2071 2.460 0.0139 * ## Mamma -0.1051 0.9002 0.2530 -0.415 0.6779 ## Stage2 0.1770 1.1936 0.4793 0.369 0.7120 ## Stage3 0.7648 2.1485 0.5774 1.324 0.1854 ## Stage4 1.2554 3.5092 0.8657 1.450 0.1470 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.6644 0.6008 1.1091 2.498 ## Mamma 0.9002 1.1108 0.5483 1.478 ## Stage2 1.1936 0.8378 0.4666 3.053 ## Stage3 2.1485 0.4654 0.6928 6.663 ## Stage4 3.5092 0.2850 0.6432 19.146 ## ## Concordance= 0.679 (se = 0.044 ) ## Likelihood ratio test= 12.04 on 5 df, p=0.03 ## Wald test = 12.6 on 5 df, p=0.03 ## Score (logrank) test = 13.37 on 5 df, p=0.02 modeldfs=coxph(SurvDFS~TCGAgrow+Mamma+Onco+Stage, data=newinfoTab) summary(modeldfs) ## Call: ## coxph(formula = SurvDFS ~ TCGAgrow + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAgrow 0.5752 1.7774 0.2167 2.654 0.00795 ** ## Mamma 0.1001 1.1052 0.2934 0.341 0.73306 ## Onco -0.3749 0.6873 0.2852 -1.315 0.18865 ## Stage2 0.1335 1.1429 0.4799 0.278 0.78079 ## Stage3 0.7467 2.1100 0.5757 1.297 0.19467 ## Stage4 1.0304 2.8022 0.8769 1.175 0.23995 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAgrow 1.7774 0.5626 1.1624 2.718 ## Mamma 1.1052 0.9048 0.6219 1.964 ## Onco 0.6873 1.4549 0.3930 1.202 ## Stage2 1.1429 0.8750 0.4462 2.927 ## Stage3 2.1100 0.4739 0.6827 6.522 ## Stage4 2.8022 0.3569 0.5025 15.628 ## ## Concordance= 0.677 (se = 0.052 ) ## Likelihood ratio test= 13.71 on 6 df, p=0.03 ## Wald test = 13.67 on 6 df, p=0.03 ## Score (logrank) test = 14.82 on 6 df, p=0.02 Also try the growing signature: model1=coxph(SurvDFS~TCGAstab+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvDFS ~ TCGAstab + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1088 0.8970 0.2177 -0.499 0.6175 ## Stage2 0.3715 1.4499 0.4690 0.792 0.4283 ## Stage3 1.0529 2.8661 0.5661 1.860 0.0629 . ## Stage4 1.3410 3.8229 0.8205 1.634 0.1022 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.897 1.1149 0.5854 1.374 ## Stage2 1.450 0.6897 0.5783 3.635 ## Stage3 2.866 0.3489 0.9449 8.693 ## Stage4 3.823 0.2616 0.7656 19.090 ## ## Concordance= 0.628 (se = 0.071 ) ## Likelihood ratio test= 5 on 4 df, p=0.3 ## Wald test = 5.5 on 4 df, p=0.2 ## Score (logrank) test = 5.93 on 4 df, p=0.2 model2=coxph(SurvDFS~TCGAstab+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvDFS ~ TCGAstab + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1573 0.8545 0.2182 -0.721 0.471 ## Onco -0.3203 0.7260 0.2473 -1.295 0.195 ## Stage2 0.3435 1.4099 0.4713 0.729 0.466 ## Stage3 0.9986 2.7145 0.5724 1.745 0.081 . ## Stage4 1.1683 3.2165 0.8389 1.393 0.164 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8545 1.1703 0.5571 1.311 ## Onco 0.7260 1.3775 0.4471 1.179 ## Stage2 1.4099 0.7093 0.5598 3.551 ## Stage3 2.7145 0.3684 0.8841 8.335 ## Stage4 3.2165 0.3109 0.6213 16.650 ## ## Concordance= 0.625 (se = 0.072 ) ## Likelihood ratio test= 6.61 on 5 df, p=0.3 ## Wald test = 7.49 on 5 df, p=0.2 ## Score (logrank) test = 7.93 on 5 df, p=0.2 model3=coxph(SurvDFS~TCGAstab+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvDFS ~ TCGAstab + Mamma + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1710 0.8428 0.2217 -0.771 0.4405 ## Mamma -0.3033 0.7383 0.2478 -1.224 0.2209 ## Stage2 0.3992 1.4906 0.4709 0.848 0.3967 ## Stage3 1.0049 2.7316 0.5699 1.763 0.0778 . ## Stage4 1.5634 4.7752 0.8418 1.857 0.0633 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8428 1.1865 0.5458 1.301 ## Mamma 0.7383 1.3544 0.4543 1.200 ## Stage2 1.4906 0.6709 0.5922 3.752 ## Stage3 2.7316 0.3661 0.8940 8.346 ## Stage4 4.7752 0.2094 0.9171 24.864 ## ## Concordance= 0.646 (se = 0.073 ) ## Likelihood ratio test= 6.46 on 5 df, p=0.3 ## Wald test = 6.97 on 5 df, p=0.2 ## Score (logrank) test = 7.43 on 5 df, p=0.2 model3=coxph(SurvDFS~TCGAstab+Mamma+Onco+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvDFS ~ TCGAstab + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAstab -0.1831 0.8327 0.2207 -0.830 0.4068 ## Mamma -0.1949 0.8229 0.2804 -0.695 0.4870 ## Onco -0.2271 0.7968 0.2823 -0.804 0.4212 ## Stage2 0.3705 1.4484 0.4732 0.783 0.4337 ## Stage3 0.9906 2.6929 0.5719 1.732 0.0832 . ## Stage4 1.3673 3.9249 0.8830 1.548 0.1215 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAstab 0.8327 1.2009 0.5403 1.283 ## Mamma 0.8229 1.2152 0.4750 1.426 ## Onco 0.7968 1.2550 0.4582 1.386 ## Stage2 1.4484 0.6904 0.5730 3.661 ## Stage3 2.6929 0.3714 0.8779 8.260 ## Stage4 3.9249 0.2548 0.6953 22.154 ## ## Concordance= 0.636 (se = 0.073 ) ## Likelihood ratio test= 7.1 on 6 df, p=0.3 ## Wald test = 7.8 on 6 df, p=0.3 ## Score (logrank) test = 8.32 on 6 df, p=0.2 Combine the signatures such that it is Growing - Stable model1=coxph(SurvDFS~TCGAcomb+Stage, data=newinfoTab) summary(model1) ## Call: ## coxph(formula = SurvDFS ~ TCGAcomb + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.3266 1.3862 0.1456 2.243 0.0249 * ## Stage2 0.1817 1.1993 0.4746 0.383 0.7017 ## Stage3 0.8415 2.3197 0.5711 1.473 0.1407 ## Stage4 1.0605 2.8879 0.8260 1.284 0.1992 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.386 0.7214 1.0421 1.844 ## Stage2 1.199 0.8338 0.4731 3.040 ## Stage3 2.320 0.4311 0.7574 7.105 ## Stage4 2.888 0.3463 0.5721 14.577 ## ## Concordance= 0.656 (se = 0.062 ) ## Likelihood ratio test= 9.82 on 4 df, p=0.04 ## Wald test = 10.3 on 4 df, p=0.04 ## Score (logrank) test = 10.92 on 4 df, p=0.03 model2=coxph(SurvDFS~TCGAcomb+Onco+Stage, data=newinfoTab) summary(model2) ## Call: ## coxph(formula = SurvDFS ~ TCGAcomb + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.3713 1.4496 0.1494 2.485 0.0129 * ## Onco -0.3967 0.6725 0.2446 -1.621 0.1049 ## Stage2 0.1481 1.1596 0.4755 0.311 0.7554 ## Stage3 0.7555 2.1287 0.5766 1.310 0.1901 ## Stage4 0.9863 2.6812 0.8219 1.200 0.2302 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.4496 0.6898 1.0817 1.943 ## Onco 0.6725 1.4869 0.4164 1.086 ## Stage2 1.1596 0.8623 0.4567 2.945 ## Stage3 2.1287 0.4698 0.6875 6.591 ## Stage4 2.6812 0.3730 0.5354 13.427 ## ## Concordance= 0.627 (se = 0.069 ) ## Likelihood ratio test= 12.32 on 5 df, p=0.03 ## Wald test = 12.57 on 5 df, p=0.03 ## Score (logrank) test = 13.42 on 5 df, p=0.02 model3=coxph(SurvDFS~TCGAcomb+Mamma+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvDFS ~ TCGAcomb + Mamma + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.3222 1.3802 0.1440 2.237 0.0253 * ## Mamma -0.2480 0.7804 0.2384 -1.040 0.2982 ## Stage2 0.2179 1.2435 0.4766 0.457 0.6475 ## Stage3 0.8069 2.2410 0.5740 1.406 0.1598 ## Stage4 1.3004 3.6709 0.8577 1.516 0.1295 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.3802 0.7245 1.0407 1.830 ## Mamma 0.7804 1.2815 0.4891 1.245 ## Stage2 1.2435 0.8042 0.4887 3.164 ## Stage3 2.2410 0.4462 0.7276 6.902 ## Stage4 3.6709 0.2724 0.6834 19.719 ## ## Concordance= 0.659 (se = 0.062 ) ## Likelihood ratio test= 10.88 on 5 df, p=0.05 ## Wald test = 11.44 on 5 df, p=0.04 ## Score (logrank) test = 12.04 on 5 df, p=0.03 model3=coxph(SurvDFS~TCGAcomb+Mamma+Onco+Stage, data=newinfoTab) summary(model3) ## Call: ## coxph(formula = SurvDFS ~ TCGAcomb + Mamma + Onco + Stage, data = newinfoTab) ## ## n= 297, number of events= 30 ## (122 observations deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAcomb 0.36521 1.44082 0.15044 2.428 0.0152 * ## Mamma -0.07269 0.92989 0.27298 -0.266 0.7900 ## Onco -0.35758 0.69937 0.28588 -1.251 0.2110 ## Stage2 0.16343 1.17754 0.47896 0.341 0.7329 ## Stage3 0.76071 2.13980 0.57642 1.320 0.1869 ## Stage4 1.06660 2.90548 0.87537 1.218 0.2231 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAcomb 1.4408 0.6940 1.0729 1.935 ## Mamma 0.9299 1.0754 0.5446 1.588 ## Onco 0.6994 1.4299 0.3994 1.225 ## Stage2 1.1775 0.8492 0.4606 3.011 ## Stage3 2.1398 0.4673 0.6914 6.623 ## Stage4 2.9055 0.3442 0.5225 16.156 ## ## Concordance= 0.629 (se = 0.068 ) ## Likelihood ratio test= 12.39 on 6 df, p=0.05 ## Wald test = 12.65 on 6 df, p=0.05 ## Score (logrank) test = 13.5 on 6 df, p=0.04 Create a forest plot for the above: First DFS data1=data.frame(Feat=c( &quot;Feat&quot;,&quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;Signature&quot;, &quot;Mammaprint&quot;, &quot;OncotypeDX&quot;), Cat=c( &quot;Val&quot;,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;,&quot;Signature&quot;, &quot;Mammaprint&quot;,&quot;OncotypeDX&quot;), N=c(&quot;N&quot; ,table(newinfoTab$Stage), rep(nrow(newinfoTab), 3)), HR=c(&quot;HR&quot;, 1, round(summary(modeldfs)$coefficients[4:6, 2], 2), round(summary(modeldfs)$coefficients[1:3, 2], 2)), p=c(&quot;p&quot; ,&quot;NA&quot;, round(summary(modeldfs)$coefficients[4:6, 5], 2), round(summary(modeldfs)$coefficients[1:3, 5], 2)) ) mdata1=data.frame(rbind(NA,NA, round(summary(modeldfs)$conf.int[c(4:6, 1:3) ,c(1,3:4)], 2))) #mdata=rbind(mdata, NA, round(summary(modeldfs)$conf.int[4:6 ,c(1,3:4)], 2)) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata1, xlog=T, boxsize=0.2) Next OS data1=data.frame(Feat=c( &quot;Feat&quot;,&quot;Stage&quot;, &quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;Signature&quot;, &quot;Mammaprint&quot;, &quot;OncotypeDX&quot;), Cat=c( &quot;Val&quot;,&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;,&quot;Signature&quot;, &quot;Mammaprint&quot;,&quot;OncotypeDX&quot;), N=c(&quot;N&quot; ,table(newinfoTab$Stage), rep(nrow(newinfoTab), 3)), HR=c(&quot;HR&quot;, 1, round(summary(modelos)$coefficients[4:6, 2], 2), round(summary(modeldfs)$coefficients[1:3, 2], 2)), p=c(&quot;p&quot; ,&quot;NA&quot;, round(summary(modelos)$coefficients[4:6, 5], 2), round(summary(modeldfs)$coefficients[1:3, 5], 2)) ) mdata1=data.frame(rbind(NA,NA, round(summary(modelos)$conf.int[c(4:6, 1:3) ,c(1,3:4)], 2))) #mdata=rbind(mdata, NA, round(summary(modeldfs)$conf.int[4:6 ,c(1,3:4)], 2)) #pdf(&quot;figure-outputs/Figure5_CD74_forestplot.pdf&quot;, width=5, height=5) forestplot(data1, mdata1, xlog=T, boxsize=0.2) 15.4.3 TCGA: LumA high vs low signatures We can pull out the samples here which have high vs low signature (in the lumA group) and perform differential gene expression analysis on these cases: newinfoTab$TCGAvalcut=cut(newinfoTab$TCGAgrow, quantile(newinfoTab$TCGAgrow, c(0, 0.33, 0.67, 1) ), c(&quot;L&quot;, &quot;M&quot;, &quot;O&quot;)) newinfoTab$TCGAvalcut[184]=&quot;L&quot; colDataTCGA=newinfoTab#[which(newinfoTab$TCGAvalcut!=&quot;M&quot;), ] TCGAdeseq=DESeqDataSetFromMatrix(round(TCGArsem2[ ,match(colDataTCGA$pat, colnames(TCGArsem2))]), colDataTCGA, design=~TCGAvalcut) TCGAdeseq=DESeq(TCGAdeseq) TCGAdeseqRes=results(TCGAdeseq, contrast=c(&quot;TCGAvalcut&quot;, &quot;O&quot;, &quot;L&quot;)) #write.csv(TCGAdeseqRes, file=&quot;nature-tables/5J_TCGA.csv&quot;) TCGAdeseqRes2=TCGAdeseqRes[which(TCGAdeseqRes$padj&lt;0.05 &amp; abs(TCGAdeseqRes$log2FoldChange)&gt;1.5 &amp; TCGAdeseqRes$baseMean&gt;100), ] A1=as.data.frame(TCGAdeseqRes2) DT::datatable(A1, rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), Xscroll=T)) write.csv(TCGAdeseqRes, file=&quot;nature-tables/TCGA_stable_growing.csv&quot;) We can plot the differential genes here in a volcano plot: #pdf(&quot;figure-outputs/Fig5J_TCGA_deg.pdf&quot;, height=8, width=8) with(TCGAdeseqRes, plot(log2FoldChange, -log10(padj), pch=20, main=&quot;Volcano plot: Low exp (-) vs high (+)&quot;, cex=1.0, xlab=bquote(~Log[2]~fold~change), ylab=bquote(~-log[10]~Q~value))) with(subset(TCGAdeseqRes, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;1.5 &amp; baseMean&gt;100), points(log2FoldChange, -log10(padj), pch=20, col=&quot;red&quot;, cex=0.5)) text(TCGAdeseqRes2$log2FoldChange+0.02, -log10(TCGAdeseqRes2$padj)+0.05, rownames(TCGAdeseqRes2)) Figure 15.15: yet another volcano plot #with(subset(TCGAdeseqRes, padj&lt;0.05 &amp; abs(log2FoldChange)&gt;2), text(log2FoldChange+0.05, -log10(padj)+0.05, rownames(TCGAdeseqRes), pch=20, col=&quot;red&quot;, cex=0.75)) #dev.off() vstTCGA=vst(assay(TCGAdeseq)) ColSideCols=brewer.pal(3, &quot;Blues&quot;)[factor(TCGAdeseq$TCGAvalcut)] tx2=rownames(TCGAdeseqRes2)[which(rownames(TCGAdeseqRes2)%in%AllImmGenes)] ax1=vstTCGA[ match(tx2, rownames(vstTCGA)), ] heatmap.2(ax1, scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = ColSideCols, col=RdBu[11:1], main=&quot;LumA TCGA&quot;) Figure 15.16: because someone will ask for it #pdf(&quot;figure-outputs/Figure5J_XX_heatmap_LumA_TCGA.pdf&quot;, height=15, width=10) heatmap.2(vstTCGA[ rownames(TCGAdeseqRes2), ], scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = ColSideCols, col=RdBu[11:1], main=&quot;LumA TCGA&quot;) Figure 15.17: because someone will ask for it also check the directions by looking at CXCl13, which is an overexpressed gene: boxplot(vstTCGA[&quot;CXCL13&quot;, ]~TCGAdeseq$TCGAvalcut) Check if there is a difference in checkpoint proteins between the two: ColSideCols=brewer.pal(3, &quot;Blues&quot;)[factor(TCGAdeseq$TCGAvalcut[which(TCGAdeseq$TCGAvalcut!=&quot;M&quot;)])] m1=match(unlist(ImmSuppAPC$Inh), rownames(vstTCGA)) m2=match(unlist(ImmSuppAPC$Act), rownames(vstTCGA)) m3=match(c(&quot;IFNG&quot;, &quot;CTLA4&quot;, &quot;GZMB&quot;), rownames(vstTCGA)) ax1=vstTCGA[ na.omit(c(m1, m2, m3)), which(TCGAdeseq$TCGAvalcut!=&quot;M&quot;)] RowSideCols=c(rep(&quot;red&quot;, length(na.omit(m1))), rep(&quot;blue&quot;, length(na.omit(m2))), rep(&quot;forestgreen&quot;,3)) #pdf(&quot;figure-outputs/Figure5J_XX_heatmap_LumA_TCGA.pdf&quot;, height=15, width=10) heatmap.2(ax1, scale=&quot;row&quot;, trace=&quot;none&quot;, ColSideColors = ColSideCols, col=RdBu[11:1], main=&quot;LumA TCGA&quot; , RowSideColors = RowSideCols,hclustfun = hclust.ave, Rowv = NA) Run gsea here hits=rownames(TCGAdeseqRes2) fcTab=TCGAdeseqRes$log2FoldChange names(fcTab)=rownames(TCGAdeseq) gscaTCGA=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaTCGA&lt;- preprocess( gscaTCGA, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) ## -Preprocessing for input gene list and hit list ... ## --Removing genes without values in geneList ... ## --Removing duplicated genes ... ## --Converting annotations ... ## -- 2816 genes (out of 20060) could not be mapped to any identifier, and were removed from the data. ## -- 2 genes (out of 70) could not be mapped to any identifier, and were removed from the data. ## --Ordering Gene List decreasingly ... ## -Preprocessing complete! gscaTCGA &lt;- analyze( gscaTCGA, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) ## --21 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c2List! ## --256 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5BP! ## --73 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5MF! ## --60 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named c5CC! ## --301 gene sets don&#39;t have &gt;= 5 overlapped genes with universe in gene set collection named MetPathway! ## -Performing gene set enrichment analysis using HTSanalyzeR2... ## --Calculating the permutations ... ## -Gene set enrichment analysis using HTSanalyzeR2 complete ## ============================================== save( gscaTCGA, file=&quot;figure-outputs/TCGA_hairball.RData&quot;) TermsA=sapply(strsplit(rownames(gscaTCGA@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaTCGA@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaTCGA@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaTCGA, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot; ) Figure 15.18: pointless TCGA hairball write.csv(gscaTCGA@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/5k_TCGA_lumA_GSEA.csv&quot;) "],["read-in-er-io-data.html", "Chapter 16 Read in ER i/o data 16.1 Signature: Lum cases non-inflammatory: growing vs stable 16.2 Do associative study with other features? 16.3 Use raw counts and perform a batch correction if necessary", " Chapter 16 Read in ER i/o data Read in data from cohort of samples which have ER ERTPM=read.delim(&quot;../data/Tolaney/rnaseq_tpm_counts.txt&quot;, sep=&quot;\\t&quot;, skip=1) rownames(ERTPM)=ERTPM[ ,1] ERcounts=read.delim(&quot;../data/Tolaney/raw_rnaseq_counts.txt&quot;, sep=&quot;\\t&quot;) ERcounts=ERcounts[-25800, ] rownames(ERcounts)=ERcounts[ ,1] ERClin=read.delim(&quot;../data/Tolaney/clin_data.txt&quot;, sep=&quot;\\t&quot;, skip=1) ERcibersort=read.csv(&quot;../data/Tolaney/CIBERSORT.csv&quot;, skip=1) ERcytokines=read.csv(&quot;../data/Tolaney/cytokines.csv&quot;, skip=1) ## Append data where necessary: ERClin$CD8_Tcell=ERcibersort$T.cells.CD8[match(paste(&quot;Patient&quot;, ERClin$Subject.ID, sep=&quot;&quot;), ERcibersort$Patient)] ERClin$DCs=ERcibersort$Dendritic.cells.activated[match(paste(&quot;Patient&quot;, ERClin$Subject.ID, sep=&quot;&quot;), ERcibersort$Patient)] ERClin$MICB=ERcytokines$MICB[match(ERClin$Subject.ID, ERcytokines$Subject.ID)] ERClin$MICA=ERcytokines$MICA[match(ERClin$Subject.ID, ERcytokines$Subject.ID)] There are 30 patients in this cohort 16.1 Signature: Lum cases non-inflammatory: growing vs stable Here, use the signature which was applied before to see the difference between the non-inflammatory growing vs stable samples. We compare this to the oncotypedx list of genes and mammaprint #GlistGrowing=read.csv(&quot;figure-outputs/lumsig_posFC.csv&quot;) #GlistGrowing=GlistGrowing$x #Glistnon=read.csv(&quot;figure-outputs/lumsig_negFC.csv&quot;) #Glistnon=Glistnon$x HumGeneList=SymHum2Rat$HGNC.symbol[match(GlistGrowing, SymHum2Rat$RGD.symbol)] HumGeneList2=Rat2Hum$HGNC.symbol[match(GlistGrowing, Rat2Hum$RGD.symbol)] TCGAssgsea=gsva(data.matrix(ERTPM[ ,-1]), list(grow=na.omit(HumGeneList2), stab=Rat2Hum$HGNC.symbol[match(Glistnon, Rat2Hum$RGD.symbol)],Onco=Oncoprint[[1]], Mamma=Oncoprint[[2]]), method=&quot;ssgsea&quot;, ssgsea.norm=F) TCGAssgsea=t(scale(t(TCGAssgsea))) par(mfrow=c(1,2)) hist(TCGAssgsea[1, ], main=&quot;growing&quot;) hist(TCGAssgsea[2, ], main=&quot;stable&quot;) plot(TCGAssgsea[1, ], TCGAssgsea[2, ], ylab=&quot;stable&quot;, xlab=&quot;growing&quot;) ## also compare with onco or mamma print plot(TCGAssgsea[1, ], TCGAssgsea[3, ], xlab=&quot;growing&quot;, ylab=&quot;oncotype&quot;) plot(TCGAssgsea[1, ], TCGAssgsea[4, ], xlab=&quot;growing&quot;, ylab=&quot;mammaprint&quot;) ## double check the plot(TCGAssgsea[1, ], ERTPM[&quot;ADAMTS10&quot; ,-1], xlab=&quot;growing sig&quot;, ylab=&quot;ADAMST10&quot;) The Growing signature genes (positive coefficient) are Setd7, Hspa1l, Hbb, Kifc2, Kmt5c, Pik3c2b, Lmntd2, Nsmf, Nrbp2, LOC100134871, Hsp90aa1, Coro6, Chst8, Slc4a3, Fhod1, Rpl8, Spp1, Catsperg, Col5a1, LOC100911498, Noxa1, F8, Rps19, Rps6, Irs1, Leng8, Plekhh1, Lmbr1l, Ikbke, Pnisr, Adamts10, Zfp692, Trim41, Sema6d, Mgp, Cdc42bpg, Slc16a13, Dmpk and stable (negative coefficient) are Fgfr2, Mx1, Endou, Grhl3, Slpi, Gbp2, Plg, Aldh1a3, Upk3a. Below are the survival curves for the growing signature: We can compare high and low, as well as with treatment ax1=match(colnames(TCGAssgsea), paste(&quot;Patient&quot;, ERClin$Subject.ID, sep=&quot;&quot;)) ax3=which(!is.na(ax1)) ssPS=Surv( ERClin$PFS.Months[na.omit(ax1)], ERClin$Progression[na.omit(ax1)]) ssOS=Surv(ERClin$OS.Months[na.omit(ax1)], ERClin$Death[na.omit(ax1)] ) newtab=data.frame(PFSMo=ERClin$PFS.Months[na.omit(ax1)], PFS=ERClin$Progression[na.omit(ax1)], OSMo=ERClin$OS.Months[na.omit(ax1)], OS=ERClin$Death[na.omit(ax1)], Response=ERClin$Response[na.omit(ax1)], grow=TCGAssgsea[1,ax3 ], stab=TCGAssgsea[2,ax3 ], Arm=ERClin$Arm[na.omit(ax1)], PDL1=ERClin$PD.L1[na.omit(ax1)], ClinBen=ERClin$Clinical.Benefit[na.omit(ax1)], TMB=ERClin$TMB[na.omit(ax1)], Site=ERClin$Biopsy[na.omit(ax1)], CD8=ERClin$CD8_Tcell[na.omit(ax1)], DC=ERClin$DCs[na.omit(ax1)], MICB=ERClin$MICB[na.omit(ax1)], MICA=ERClin$MICA[na.omit(ax1)], Purity=ERClin$Purity[na.omit(ax1)] ) TCGAvalCut=cut(newtab$stab, quantile(newtab$stab, c(0, 0.5, 1)), c(&quot;L&quot;, &quot;P&quot;)) dfs1=coxph(ssPS~TCGAvalCut+Arm, data=newtab) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ TCGAvalCut + Arm, data = newtab) ## ## n= 29, number of events= 27 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCutP -0.6499 0.5221 0.4256 -1.527 0.127 ## ArmB 0.1130 1.1196 0.4254 0.266 0.791 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCutP 0.5221 1.9153 0.2267 1.202 ## ArmB 1.1196 0.8932 0.4864 2.577 ## ## Concordance= 0.586 (se = 0.068 ) ## Likelihood ratio test= 2.8 on 2 df, p=0.2 ## Wald test = 2.82 on 2 df, p=0.2 ## Score (logrank) test = 2.92 on 2 df, p=0.2 adfs=summary(dfs1) os1=coxph(ssOS~TCGAvalCut+Arm, data=newtab) summary(os1) ## Call: ## coxph(formula = ssOS ~ TCGAvalCut + Arm, data = newtab) ## ## n= 29, number of events= 22 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCutP -0.9841 0.3738 0.4424 -2.224 0.0261 * ## ArmB 0.0176 1.0178 0.4311 0.041 0.9674 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCutP 0.3738 2.6754 0.1571 0.8896 ## ArmB 1.0178 0.9826 0.4372 2.3690 ## ## Concordance= 0.621 (se = 0.066 ) ## Likelihood ratio test= 5.06 on 2 df, p=0.08 ## Wald test = 4.95 on 2 df, p=0.08 ## Score (logrank) test = 5.32 on 2 df, p=0.07 aos=summary(os1) ns=table(TCGAvalCut) par(mfrow=c(1,2)) vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ax2=plot(survfit(ssPS~TCGAvalCut), main=paste(&quot;stab sig: all&quot;), col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PFS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(aos$conf.int[ 1,c(1, 3:4)], aos$logtest[3]), 2) ax2=plot(survfit(ssOS~TCGAvalCut), main=paste(&quot;stab sig: all&quot;), col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ## survival outcome: cts variable dfs1=coxph(ssPS~stab+Arm, data=newtab) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ stab + Arm, data = newtab) ## ## n= 30, number of events= 28 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## stab -0.2647 0.7675 0.1864 -1.420 0.156 ## ArmB 0.4682 1.5971 0.4140 1.131 0.258 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## stab 0.7675 1.3030 0.5326 1.106 ## ArmB 1.5971 0.6261 0.7095 3.595 ## ## Concordance= 0.592 (se = 0.071 ) ## Likelihood ratio test= 2.77 on 2 df, p=0.3 ## Wald test = 2.71 on 2 df, p=0.3 ## Score (logrank) test = 2.78 on 2 df, p=0.2 os1=coxph(ssOS~stab+Arm, data=newtab) summary(os1) ## Call: ## coxph(formula = ssOS ~ stab + Arm, data = newtab) ## ## n= 30, number of events= 22 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## stab -0.1572 0.8546 0.2208 -0.712 0.477 ## ArmB 0.2415 1.2731 0.4558 0.530 0.596 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## stab 0.8546 1.1702 0.5544 1.317 ## ArmB 1.2731 0.7855 0.5211 3.111 ## ## Concordance= 0.557 (se = 0.075 ) ## Likelihood ratio test= 0.61 on 2 df, p=0.7 ## Wald test = 0.6 on 2 df, p=0.7 ## Score (logrank) test = 0.61 on 2 df, p=0.7 par(mfrow=c(1,2)) TCGAvalCut=cut(newtab$grow, quantile(newtab$grow, c(0, 0.5, 1)), c(&quot;L&quot;,&quot;P&quot;)) dfs1=coxph(ssPS~TCGAvalCut+Arm, data=newtab) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ TCGAvalCut + Arm, data = newtab) ## ## n= 29, number of events= 27 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCutP 0.4793 1.6150 0.4293 1.117 0.264 ## ArmB 0.5381 1.7127 0.4380 1.228 0.219 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCutP 1.615 0.6192 0.6963 3.746 ## ArmB 1.713 0.5839 0.7258 4.041 ## ## Concordance= 0.544 (se = 0.079 ) ## Likelihood ratio test= 2.07 on 2 df, p=0.4 ## Wald test = 2.06 on 2 df, p=0.4 ## Score (logrank) test = 2.06 on 2 df, p=0.4 adfs=summary(dfs1) os1=coxph(ssOS~TCGAvalCut+Arm, data=newtab) summary(os1) ## Call: ## coxph(formula = ssOS ~ TCGAvalCut + Arm, data = newtab) ## ## n= 29, number of events= 21 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCutP 0.2460 1.2789 0.5407 0.455 0.649 ## ArmB 0.2555 1.2911 0.5356 0.477 0.633 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCutP 1.279 0.7819 0.4432 3.690 ## ArmB 1.291 0.7745 0.4519 3.689 ## ## Concordance= 0.511 (se = 0.068 ) ## Likelihood ratio test= 0.27 on 2 df, p=0.9 ## Wald test = 0.28 on 2 df, p=0.9 ## Score (logrank) test = 0.28 on 2 df, p=0.9 aos=summary(os1) ns=table(TCGAvalCut) vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ax2=plot(survfit(ssPS~TCGAvalCut), main=paste(&quot;growing sig&quot;), col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PFS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(aos$conf.int[ 1,c(1, 3:4)], aos$logtest[3]), 2) ax2=plot(survfit(ssOS~TCGAvalCut), main=paste(&quot;growing sig&quot;), col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) dfs1=coxph(ssPS~grow+Arm, data=newtab) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ grow + Arm, data = newtab) ## ## n= 30, number of events= 28 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## grow 0.1363 1.1461 0.1824 0.747 0.455 ## ArmB 0.4490 1.5667 0.4150 1.082 0.279 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## grow 1.146 0.8726 0.8015 1.639 ## ArmB 1.567 0.6383 0.6946 3.534 ## ## Concordance= 0.568 (se = 0.081 ) ## Likelihood ratio test= 1.39 on 2 df, p=0.5 ## Wald test = 1.44 on 2 df, p=0.5 ## Score (logrank) test = 1.45 on 2 df, p=0.5 os1=coxph(ssOS~grow+Arm, data=newtab) summary(os1) ## Call: ## coxph(formula = ssOS ~ grow + Arm, data = newtab) ## ## n= 30, number of events= 22 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## grow 0.2072 1.2303 0.2565 0.808 0.419 ## ArmB 0.3770 1.4578 0.5117 0.737 0.461 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## grow 1.230 0.8128 0.7441 2.034 ## ArmB 1.458 0.6859 0.5348 3.974 ## ## Concordance= 0.511 (se = 0.074 ) ## Likelihood ratio test= 0.76 on 2 df, p=0.7 ## Wald test = 0.78 on 2 df, p=0.7 ## Score (logrank) test = 0.77 on 2 df, p=0.7 Check what happens when you have treament arm: TCGAvalCut=cut(newtab$stab, quantile(newtab$stab, c(0, 0.5, 1)), c(&quot;L&quot;, &quot;P&quot;)) tx=newtab$Arm par(mfrow=c(1,2)) # ax2=plot(survfit(ssPS~TCGAvalCut+ERClin$Arm[na.omit(ax1)]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(4, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) dfs1=coxph(ssPS[newtab$Arm==&quot;A&quot;]~TCGAvalCut[newtab$Arm==&quot;A&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssPS[newtab$Arm == &quot;A&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;A&quot;]) ## ## n= 13, number of events= 13 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P -0.9221 0.3977 0.6532 -1.412 0.158 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P 0.3977 2.515 0.1105 1.431 ## ## Concordance= 0.597 (se = 0.079 ) ## Likelihood ratio test= 1.94 on 1 df, p=0.2 ## Wald test = 1.99 on 1 df, p=0.2 ## Score (logrank) test = 2.12 on 1 df, p=0.1 adfs=summary(dfs1) dfs1=coxph(ssPS[newtab$Arm==&quot;B&quot;]~TCGAvalCut[newtab$Arm==&quot;B&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssPS[newtab$Arm == &quot;B&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;B&quot;]) ## ## n= 16, number of events= 14 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P -0.5066 0.6026 0.5771 -0.878 0.38 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 0.6026 1.66 0.1944 1.867 ## ## Concordance= 0.626 (se = 0.08 ) ## Likelihood ratio test= 0.77 on 1 df, p=0.4 ## Wald test = 0.77 on 1 df, p=0.4 ## Score (logrank) test = 0.78 on 1 df, p=0.4 bdfs=summary(dfs1) par(mfrow=c(2,2)) ## plot separately the different arms vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ns=table(TCGAvalCut[newtab$Arm==&quot;A&quot;]) ax2=plot(survfit(ssPS[tx==&quot;A&quot;]~TCGAvalCut[tx==&quot;A&quot;]), main=&quot;stable ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T, xlim=c(0,12)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(10, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ns=table(TCGAvalCut[newtab$Arm==&quot;B&quot;]) ax2=plot(survfit(ssPS[tx==&quot;B&quot;]~TCGAvalCut[tx==&quot;B&quot;]), main=&quot;stable ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T, xlim=c(0, 12)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(10, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ## plot the OS result # OS based on arm: stable dfs1=coxph(ssOS[newtab$Arm==&quot;A&quot;]~TCGAvalCut[newtab$Arm==&quot;A&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssOS[newtab$Arm == &quot;A&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;A&quot;]) ## ## n= 13, number of events= 10 ## (1 observation deleted due to missingness) ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P -0.5760 0.5622 0.6418 -0.897 0.37 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P 0.5622 1.779 0.1598 1.978 ## ## Concordance= 0.555 (se = 0.088 ) ## Likelihood ratio test= 0.8 on 1 df, p=0.4 ## Wald test = 0.81 on 1 df, p=0.4 ## Score (logrank) test = 0.83 on 1 df, p=0.4 adfs=summary(dfs1) dfs1=coxph(ssOS[newtab$Arm==&quot;B&quot;]~TCGAvalCut[newtab$Arm==&quot;B&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssOS[newtab$Arm == &quot;B&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;B&quot;]) ## ## n= 16, number of events= 12 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P -1.5044 0.2222 0.6941 -2.167 0.0302 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 0.2222 4.501 0.057 0.8659 ## ## Concordance= 0.694 (se = 0.054 ) ## Likelihood ratio test= 5.39 on 1 df, p=0.02 ## Wald test = 4.7 on 1 df, p=0.03 ## Score (logrank) test = 5.5 on 1 df, p=0.02 bdfs=summary(dfs1) ## plot separately the different arms vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ns=table(TCGAvalCut[newtab$Arm==&quot;A&quot;]) ax2=plot(survfit(ssOS[tx==&quot;A&quot;]~TCGAvalCut[tx==&quot;A&quot;]), main=&quot;stable ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T, xlim=c(0, 35)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ns=table(TCGAvalCut[newtab$Arm==&quot;B&quot;]) ax2=plot(survfit(ssOS[tx==&quot;B&quot;]~TCGAvalCut[tx==&quot;B&quot;]), main=&quot;stable ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T, xlim=c(0, 35)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) TCGAvalCut=cut(newtab$grow, c(-10, median(newtab$grow), 10), c(&quot;L&quot;, &quot;P&quot;)) # ax2=plot(survfit(ssPS~TCGAvalCut+ERClin$Arm[na.omit(ax1)]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(4, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) dfs1=coxph(ssPS[newtab$Arm==&quot;A&quot;]~TCGAvalCut[newtab$Arm==&quot;A&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssPS[newtab$Arm == &quot;A&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;A&quot;]) ## ## n= 14, number of events= 14 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P 0.6467 1.9092 0.6795 0.952 0.341 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P 1.909 0.5238 0.504 7.232 ## ## Concordance= 0.533 (se = 0.093 ) ## Likelihood ratio test= 1 on 1 df, p=0.3 ## Wald test = 0.91 on 1 df, p=0.3 ## Score (logrank) test = 0.93 on 1 df, p=0.3 adfs=summary(dfs1) dfs1=coxph(ssPS[newtab$Arm==&quot;B&quot;]~TCGAvalCut[newtab$Arm==&quot;B&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssPS[newtab$Arm == &quot;B&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;B&quot;]) ## ## n= 16, number of events= 14 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 0.1065 1.1123 0.5883 0.181 0.856 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 1.112 0.899 0.3511 3.524 ## ## Concordance= 0.549 (se = 0.098 ) ## Likelihood ratio test= 0.03 on 1 df, p=0.9 ## Wald test = 0.03 on 1 df, p=0.9 ## Score (logrank) test = 0.03 on 1 df, p=0.9 bdfs=summary(dfs1) par(mfrow=c(2,2)) ## plot separately the different arms ns=table(TCGAvalCut[newtab$Arm==&quot;A&quot;]) vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ax2=plot(survfit(ssPS[tx==&quot;A&quot;]~TCGAvalCut[tx==&quot;A&quot;]), main=&quot;grow ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ns=table(TCGAvalCut[newtab$Arm==&quot;B&quot;]) vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ax2=plot(survfit(ssPS[tx==&quot;B&quot;]~TCGAvalCut[tx==&quot;B&quot;]), main=&quot;grow ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ## plot the OS result # OS based on arm: stable dfs1=coxph(ssOS[newtab$Arm==&quot;A&quot;]~TCGAvalCut[newtab$Arm==&quot;A&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssOS[newtab$Arm == &quot;A&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;A&quot;]) ## ## n= 14, number of events= 10 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P -0.7614 0.4670 0.7141 -1.066 0.286 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;A&quot;]P 0.467 2.141 0.1152 1.893 ## ## Concordance= 0.608 (se = 0.084 ) ## Likelihood ratio test= 1.03 on 1 df, p=0.3 ## Wald test = 1.14 on 1 df, p=0.3 ## Score (logrank) test = 1.19 on 1 df, p=0.3 adfs=summary(dfs1) dfs1=coxph(ssOS[newtab$Arm==&quot;B&quot;]~TCGAvalCut[newtab$Arm==&quot;B&quot;]) summary(dfs1) ## Call: ## coxph(formula = ssOS[newtab$Arm == &quot;B&quot;] ~ TCGAvalCut[newtab$Arm == ## &quot;B&quot;]) ## ## n= 16, number of events= 12 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 0.8206 2.2718 0.6166 1.331 0.183 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## TCGAvalCut[newtab$Arm == &quot;B&quot;]P 2.272 0.4402 0.6785 7.607 ## ## Concordance= 0.563 (se = 0.071 ) ## Likelihood ratio test= 1.69 on 1 df, p=0.2 ## Wald test = 1.77 on 1 df, p=0.2 ## Score (logrank) test = 1.86 on 1 df, p=0.2 bdfs=summary(dfs1) ## plot separately the different arms vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ns=table(TCGAvalCut[newtab$Arm==&quot;A&quot;]) ax2=plot(survfit(ssOS[tx==&quot;A&quot;]~TCGAvalCut[tx==&quot;A&quot;]), main=&quot;grow ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ns=table(TCGAvalCut[newtab$Arm==&quot;B&quot;]) vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ax2=plot(survfit(ssOS[tx==&quot;B&quot;]~TCGAvalCut[tx==&quot;B&quot;]), main=&quot;grow ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) Note that the ams are imbalanced, do this again after splitting accord to median in both groups tx=which(newtab$Arm==&quot;A&quot;) TCGAvalCut=cut(newtab$grow[tx], c(-10, median(newtab$grow[tx]), 10), c(&quot;L&quot;, &quot;P&quot;)) # ax2=plot(survfit(ssPS~TCGAvalCut+ERClin$Arm[na.omit(ax1)]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(4, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) dfs1=coxph(ssPS[tx]~TCGAvalCut) summary(dfs1) adfs=summary(dfs1) dfs1=coxph(ssOS[tx]~TCGAvalCut) summary(dfs1) aos=summary(dfs1) par(mfrow=c(2,2)) ## plot separately the different arms vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ns=table(TCGAvalCut) ax2=plot(survfit(ssPS[tx]~TCGAvalCut), main=&quot;grow ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(aos$conf.int[ 1,c(1, 3:4)], aos$logtest[3]), 2) ax2=plot(survfit(ssOS[tx]~TCGAvalCut), main=&quot;grow ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(15, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ## plot the OS result # OS based on arm: stable tx=which(newtab$Arm==&quot;B&quot;) TCGAvalCut=cut(newtab$grow[tx], c(-10, median(newtab$grow[tx]), 10), c(&quot;L&quot;, &quot;P&quot;)) dfs1=coxph(ssOS[newtab$Arm==&quot;B&quot;]~TCGAvalCut) summary(dfs1) bos=summary(dfs1) dfs1=coxph(ssPS[newtab$Arm==&quot;B&quot;]~TCGAvalCut) summary(dfs1) bdfs=summary(dfs1) ns=table(TCGAvalCut) ## plot separately the different arms vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ax2=plot(survfit(ssPS[tx]~TCGAvalCut), main=&quot;grow ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T, xlim=c(0, 12)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(bos$conf.int[ 1,c(1, 3:4)], bos$logtest[3]), 2) ax2=plot(survfit(ssOS[tx]~TCGAvalCut), main=&quot;grow ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T, xlim=c(0, 35)) text(15, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) tx=which(newtab$Arm==&quot;A&quot;) TCGAvalCut=cut(newtab$stab[tx], c(-10, median(newtab$stab[tx]), 10), c(&quot;L&quot;, &quot;P&quot;)) # ax2=plot(survfit(ssPS~TCGAvalCut+ERClin$Arm[na.omit(ax1)]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(4, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) dfs1=coxph(ssPS[tx]~TCGAvalCut) summary(dfs1) adfs=summary(dfs1) dfs1=coxph(ssOS[tx]~TCGAvalCut) summary(dfs1) aos=summary(dfs1) par(mfrow=c(2,2)) ## plot separately the different arms vals=round(c(adfs$conf.int[ 1,c(1, 3:4)], adfs$logtest[3]), 2) ns=table(TCGAvalCut) ax2=plot(survfit(ssPS[tx]~TCGAvalCut), main=&quot;stab ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(aos$conf.int[ 1,c(1, 3:4)], aos$logtest[3]), 2) ax2=plot(survfit(ssOS[tx]~TCGAvalCut), main=&quot;stab ArmA&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) text(15, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) ## plot the OS result # OS based on arm: stable tx=which(newtab$Arm==&quot;B&quot;) TCGAvalCut=cut(newtab$stab[tx], c(-10, median(newtab$stab[tx]), 10), c(&quot;L&quot;, &quot;P&quot;)) dfs1=coxph(ssOS[newtab$Arm==&quot;B&quot;]~TCGAvalCut) summary(dfs1) bos=summary(dfs1) dfs1=coxph(ssPS[newtab$Arm==&quot;B&quot;]~TCGAvalCut) summary(dfs1) bdfs=summary(dfs1) ns=table(TCGAvalCut) ## plot separately the different arms vals=round(c(bdfs$conf.int[ 1,c(1, 3:4)], bdfs$logtest[3]), 2) ax2=plot(survfit(ssPS[tx]~TCGAvalCut), main=&quot;stab ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T, xlim=c(0, 12)) text(4, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(12, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) vals=round(c(bos$conf.int[ 1,c(1, 3:4)], bos$logtest[3]), 2) ax2=plot(survfit(ssOS[tx]~TCGAvalCut), main=&quot;stab ArmB&quot;, col=brewer.pal(3, &quot;Blues&quot;)[2:3],lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T, xlim=c(0, 35)) text(15, 0.1, sprintf(&quot;HR =%s (%s-%s), log-rank=%s&quot;,vals[1], vals[2], vals[3], vals[4])) text(30, 0.8, sprintf(&quot;L=%s, H=%s&quot;,ns[1], ns[2])) 16.2 Do associative study with other features? # growing signature TCGAvalCut=cut(newtab$grow, c(-10, median(newtab$grow), 10), c(&quot;L&quot;, &quot;H&quot;)) table(TCGAvalCut, newtab$PDL1) ## ## TCGAvalCut Negative Positive ## L 1 6 8 ## H 0 11 4 m1=matrix(c(6, 8, 11, 4), ncol=2) chisq.test(m1) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: m1 ## X-squared = 1.6587, df = 1, p-value = 0.1978 table(TCGAvalCut, newtab$Arm) ## ## TCGAvalCut A B ## L 4 11 ## H 10 5 chisq.test(table(TCGAvalCut, newtab$Arm)) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: table(TCGAvalCut, newtab$Arm) ## X-squared = 3.3482, df = 1, p-value = 0.06728 table(TCGAvalCut,newtab$ClinBen) ## ## TCGAvalCut 0 1 ## L 10 5 ## H 9 6 chisq.test(table(TCGAvalCut,newtab$ClinBen)) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: table(TCGAvalCut, newtab$ClinBen) ## X-squared = 0, df = 1, p-value = 1 table(TCGAvalCut,newtab$Response) ## ## TCGAvalCut NE PD PR SD ## L 2 3 4 6 ## H 1 5 4 5 chisq.test(table(TCGAvalCut,newtab$Response)) ## ## Pearson&#39;s Chi-squared test ## ## data: table(TCGAvalCut, newtab$Response) ## X-squared = 0.92424, df = 3, p-value = 0.8196 boxplot the growing scores with other covariates: par(mfrow=c(2,3)) plot(newtab$grow, newtab$Purity, ylab=&quot;Purity&quot;, xlab=&quot;signature&quot;) plot(newtab$grow, newtab$CD8, ylab=&quot;CIBERSORT CD8&quot;, xlab=&quot;signature&quot;) plot(newtab$grow, newtab$DC, ylab=&quot;CIBERSORT DC&quot;, xlab=&quot;signature&quot;) plot(newtab$grow,newtab$TMB, ylab=&quot;TMB&quot;, xlab=&quot;signature&quot;) boxplot(newtab$grow[newtab$Arm==&quot;A&quot;] ~ newtab$Response[newtab$Arm==&quot;A&quot;], main=&quot;Arm A&quot;, ylab=&quot;signature&quot;) boxplot(newtab$grow[newtab$Arm==&quot;B&quot;] ~ newtab$Response[newtab$Arm==&quot;B&quot;], main=&quot;Arm B&quot;, ylab=&quot;signature&quot;) #plot(newtab$grow, newtab$MICB) #plot(newtab$grow, newtab$MICA, xlab=&quot;Signature&quot;, ylab=&quot;MICA&quot;, pch=19) boxplot(newtab$TMB~TCGAvalCut) Check the association between expression of the growing signatrue and the cytokines profiled ERcyt2=ERcytokines[which(ERcytokines$Time==&quot;Pre&quot;), ] ERcyt2$grow=newtab$grow[match(paste(&quot;Patient&quot;, ERcyt2$Subject.ID, sep=&quot;&quot;), rownames(newtab))] ERcyt3=ERcytokines[which(ERcytokines$Time==&quot;Post&quot;), ] ERcyt2$MICA_post=ERcyt3$MICA[match(ERcyt2$Subject.ID, ERcyt3$Subject.ID)] ERcyt2$MICB_post=ERcyt3$MICB[match(ERcyt2$Subject.ID, ERcyt3$Subject.ID)] CorVals=sapply(c(6:19, 21:22), function(x) cor(ERcyt2[ ,x], ERcyt2$grow, use=&quot;complete&quot;, method=&quot;spearman&quot; )) PVals=sapply(c(6:19, 21:22), function(x) cor.test(ERcyt2[ ,x], ERcyt2$grow, use=&quot;complete&quot;,method=&quot;spearman&quot; )$p.value) names(CorVals)=colnames(ERcyt2)[c(6:19, 21:22)] names(PVals)=colnames(ERcyt2)[c(6:19, 21:22)] par(mfrow=c(2,2)) plot(ERcyt2$grow, ERcyt2$MICA, xlab=&quot;Signature&quot;, ylab=&quot;MICA pre&quot;, pch=19, ylim=c(0,300)) text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[9],2), round(PVals[9],3) )) plot(ERcyt2$grow, (ERcyt2$MICA_post), xlab=&quot;Signature&quot;, ylab=&quot;MICA post&quot;, pch=19, ylim=c(0, 300)) text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[15],2), round(PVals[15],3) )) plot(ERcyt2$grow, ERcyt2$MICB, xlab=&quot;Signature&quot;, ylab=&quot;MICB pre&quot;, pch=19, ylim=c(0, 300)) text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[10],2), round(PVals[10],3) )) plot(ERcyt2$grow, (ERcyt2$MICB_post), xlab=&quot;Signature&quot;, ylab=&quot;MICB post&quot;, pch=19, ylim=c(0, 300)) text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[16],2), round(PVals[16],3) )) #text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[9],2), round(PVals[9],3) )) par(mfrow=c(1,2)) plot(ERcyt2$grow, (ERcyt2$MICB+ERcyt2$MICA), xlab=&quot;Signature&quot;, ylab=&quot;MICA+MICB_pre&quot;, pch=19, ylim=c(0, 400)) plot(ERcyt2$grow, (ERcyt2$MICB_post+ERcyt2$MICA_post), xlab=&quot;Signature&quot;, ylab=&quot;MICA+MICB_post&quot;, pch=19, ylim=c(0, 400)) text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[10],2), round(PVals[10],3) )) #text(1,250, sprintf(&quot;cor=%s, p=%s&quot;, round(CorVals[9],2), round(PVals[9],3) )) ## check for changes over time according to whether they are high or low? 16.3 Use raw counts and perform a batch correction if necessary Note there are 4 samples whose profiles are out of the ordinary: ax1=match(colnames(ERcounts)[-1], paste(&quot;Patient&quot;, ERClin$Subject.ID, sep=&quot;&quot;)) colDat=ERClin[ax1, ] colDat$Sample=paste(&quot;Patient&quot;, colDat$Subject.ID, sep=&quot;&quot;) ddER=DESeqDataSetFromMatrix(countData=round(ERcounts[ ,-1]), colDat=colDat, design=~Arm) ddER=DESeq(ddER) ddERvst=vst(ddER) plotPCA(ddERvst,&quot;Arm&quot;)+geom_label(aes(label = name)) ## Do a batch correction based on these 4 patients: ddERvst$Batch=1 ddERvst$Batch[which(ddERvst$Subject.ID%in%c(6, 82, 41, 38))]=2 #ddERvst$Batch=factor(ddERvst$Batch) assay(ddERvst)=limma::removeBatchEffect(assay(ddERvst),ddERvst$Batch) plotPCA(ddERvst,&quot;Arm&quot;)+geom_label(aes(label = name)) After correction, can we use these values in a ssGSEA ERssgsea=GSVA::gsva(assay(ddERvst), list(grow=na.omit(HumGeneList2), stab=Rat2Hum$HGNC.symbol[match(Glistnon, Rat2Hum$RGD.symbol)],Onco=Oncoprint[[1]], Mamma=Oncoprint[[2]]), method=&quot;ssgsea&quot;, ssgsea.norm=F) ax1=match(colnames(ERssgsea), paste(&quot;Patient&quot;, ERClin$Subject.ID, sep=&quot;&quot;)) ax3=which(!is.na(ax1)) ssPS=Surv(ERClin$PFS.Months[na.omit(ax1)], ERClin$Progression[na.omit(ax1)]) ssOS=Surv(ERClin$OS.Months[na.omit(ax1)], ERClin$Death[na.omit(ax1)] ) ArmInfo=ERClin$Arm[na.omit(ax1)] PDL1info=ERClin$PD.L1[na.omit(ax1)] Purity=ERClin$Purity[na.omit(ax1)] plot(ERssgsea[2, ax3]~Purity) TCGAvalCut=cut(ERssgsea[1,ax3 ], quantile(ERssgsea[1,ax3], c(0, 0.33,0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ssPS~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) ax2=plot(survfit(ssOS~TCGAvalCut), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) TCGAvalCut=cut(ERssgsea[2,ax3 ], quantile(ERssgsea[2,ax3], c(0, 0.33,0.67, 1)), c(&quot;L&quot;,&quot;M&quot;, &quot;P&quot;)) ax2=plot(survfit(ssPS~TCGAvalCut), main=paste(i, &quot;lum stable&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) ax2=plot(survfit(ssOS~TCGAvalCut), main=paste(i, &quot;lum stable&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) Run the above with Arm Stratification aarm=which(ArmInfo==&quot;A&quot;) barm=which(ArmInfo==&quot;B&quot;) par(mfrow=c(1,2)) ax2=plot(survfit(ssPS[aarm]~TCGAvalCut[aarm]), main=paste(i, &quot;lum growing Arm A&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) ax2=plot(survfit(ssPS[barm]~TCGAvalCut[barm]), main=paste(i, &quot;lum growing Arm B&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;PS&quot;, mark.time=T) ax2=plot(survfit(ssOS[aarm]~TCGAvalCut[aarm]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) ax2=plot(survfit(ssOS[barm]~TCGAvalCut[barm]), main=paste(i, &quot;lum growing&quot;), col=brewer.pal(3, &quot;Blues&quot;),lwd=2, xlab=&quot;Time (months)&quot;, ylab=&quot;OS&quot;, mark.time=T) Also run the above as a continuous variable ## stable signature ssPS=Surv( colDat$PFS.Months, colDat$Progression) ssOS=Surv(colDat$OS.Months, colDat$Death ) dfs1=coxph(ssPS~ ERssgsea[1, ax3]) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ ERssgsea[1, ax3]) ## ## n= 30, number of events= 28 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[1, ax3] 0.0003460 1.0003461 0.0004729 0.732 0.464 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[1, ax3] 1 0.9997 0.9994 1.001 ## ## Concordance= 0.532 (se = 0.06 ) ## Likelihood ratio test= 0.54 on 1 df, p=0.5 ## Wald test = 0.54 on 1 df, p=0.5 ## Score (logrank) test = 0.54 on 1 df, p=0.5 dfs1=coxph(ssOS~ ERssgsea[1, ax3]) summary(dfs1) ## Call: ## coxph(formula = ssOS ~ ERssgsea[1, ax3]) ## ## n= 30, number of events= 22 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[1, ax3] 0.0004201 1.0004202 0.0005525 0.76 0.447 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[1, ax3] 1 0.9996 0.9993 1.002 ## ## Concordance= 0.511 (se = 0.07 ) ## Likelihood ratio test= 0.59 on 1 df, p=0.4 ## Wald test = 0.58 on 1 df, p=0.4 ## Score (logrank) test = 0.58 on 1 df, p=0.4 ## growing signature dfs1=coxph(ssPS~ ERssgsea[2, ax3]) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ ERssgsea[2, ax3]) ## ## n= 30, number of events= 28 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[2, ax3] -0.0002148 0.9997852 0.0001496 -1.436 0.151 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[2, ax3] 0.9998 1 0.9995 1 ## ## Concordance= 0.597 (se = 0.07 ) ## Likelihood ratio test= 1.94 on 1 df, p=0.2 ## Wald test = 2.06 on 1 df, p=0.2 ## Score (logrank) test = 2.09 on 1 df, p=0.1 dfs1=coxph(ssOS~ ERssgsea[2, ax3]) summary(dfs1) ## Call: ## coxph(formula = ssOS ~ ERssgsea[2, ax3]) ## ## n= 30, number of events= 22 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[2, ax3] -0.0001429 0.9998571 0.0001779 -0.803 0.422 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[2, ax3] 0.9999 1 0.9995 1 ## ## Concordance= 0.58 (se = 0.074 ) ## Likelihood ratio test= 0.61 on 1 df, p=0.4 ## Wald test = 0.65 on 1 df, p=0.4 ## Score (logrank) test = 0.65 on 1 df, p=0.4 ## combined signature dfs1=coxph(ssPS~(ERssgsea[2, ax3]-ERssgsea[1, ax3] )) summary(dfs1) ## Call: ## coxph(formula = ssPS ~ (ERssgsea[2, ax3] - ERssgsea[1, ax3])) ## ## n= 30, number of events= 28 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[2, ax3] -0.0002148 0.9997852 0.0001496 -1.436 0.151 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[2, ax3] 0.9998 1 0.9995 1 ## ## Concordance= 0.597 (se = 0.07 ) ## Likelihood ratio test= 1.94 on 1 df, p=0.2 ## Wald test = 2.06 on 1 df, p=0.2 ## Score (logrank) test = 2.09 on 1 df, p=0.1 dfs1=coxph(ssOS~ (ERssgsea[2, ax3]-ERssgsea[1, ax3] )) summary(dfs1) ## Call: ## coxph(formula = ssOS ~ (ERssgsea[2, ax3] - ERssgsea[1, ax3])) ## ## n= 30, number of events= 22 ## ## coef exp(coef) se(coef) z Pr(&gt;|z|) ## ERssgsea[2, ax3] -0.0001429 0.9998571 0.0001779 -0.803 0.422 ## ## exp(coef) exp(-coef) lower .95 upper .95 ## ERssgsea[2, ax3] 0.9999 1 0.9995 1 ## ## Concordance= 0.58 (se = 0.074 ) ## Likelihood ratio test= 0.61 on 1 df, p=0.4 ## Wald test = 0.65 on 1 df, p=0.4 ## Score (logrank) test = 0.65 on 1 df, p=0.4 "],["deseq-analysis-characterisation-cohort-big-vs-small.html", "Chapter 17 DESeq analysis: Characterisation cohort (big vs small) 17.1 CD45 samples 17.2 Epithelial samples", " Chapter 17 DESeq analysis: Characterisation cohort (big vs small) This document sets up DESeq runs to compare: CD45 samples Ep samples according to size of the cohort samples 17.1 CD45 samples In section 6.2, we have noticed that some DN samples had expression of epithelial markers. Here, we perform a differential gene expression analysis to find genes which are different between these two fractions. Below is a summary of the number of differential genes, using p value cut off of 0.05 and log2 fold change of 1.5 and base expression of 100+. infoTableFinal$TumSize=Cdata$Tumor.diameter.sac.mm[match(infoTableFinal$TumorID, Cdata$TumorID)] infoTableFinal$SizeCat=factor(ifelse(infoTableFinal$Cohort==&quot;Progression&quot;, ifelse(infoTableFinal$TumSize&gt;X2a, &quot;big&quot;, &quot;small&quot;), ifelse(infoTableFinal$TumSize&gt;7, &quot;big&quot;, &quot;small&quot;))) epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort!=&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;CD45&quot; &amp; !is.na(infoTableFinal$SizeCat))]) CD45ddsChar=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~(SizeCat)) ## change class a1x=rowSums(counts(CD45ddsChar)) a1b=apply(counts(CD45ddsChar), 1, function(c) sum(c!=0)) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(CD45ddsChar))&gt;10^sd1vals) keep2=which(apply(counts(CD45ddsChar), 1, function(c) sum(c!=0))&gt; (ncol(CD45ddsChar)/2)) CD45ddsChar=CD45ddsChar[intersect(keep, keep2), ] CD45ddsChar=DESeq(CD45ddsChar) A1=results(CD45ddsChar) #DT::datatable(as.data.frame(A1), rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), #scrollX=T)) 17.1.1 PCA plot First, have a look at the samples in a PCA plot: do they separate based on size: vst1=vst(CD45ddsChar) ax1=plotPCA(vst1, &quot;TumSize&quot;)+theme_bw()+geom_text(aes(label=colnames(vst1)))+ggtitle(&quot;CD45 cells&quot;)+scale_color_manual(values=ColSize) # nclude the control CD45 sample vst1=vsd[, which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort!=&quot;Progression&quot;)] vst1$SizeCat=infoTableFinal$SizeCat[match(colnames(vst1), infoTableFinal$SampleID)] ax1=heatmap.2(cor((assay(vst1))), col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSize[(vst1$SizeCat)]) t1=ax1$carpet t1r=c(1:ncol(t1)) t1r[10:11]=c(11:10) Slightly re-order this to make sure the normal mammary gland is on the outside heatmap.2(t1, Colv = t1r, Rowv = t1r, trace=&quot;none&quot;, col=RdBu[11:1]) Figure 17.1: correlation matrix of cd45 cells rownames(t1)=infoTableFinal$TumorIDnew[match(rownames(t1), rownames(infoTableFinal))] colnames(t1)=rownames(t1) #write.csv(t1, file=&quot;nature-tables/Ext2d.csv&quot;) #DT::datatable(t1, rownames=F, class=&#39;cell-border stripe&#39;, # extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) 17.1.2 Differential Gene Expression Below are volcano plots of the differentially expressed genes with abs(log2change)&gt;1.5, padj&lt;0.05 and baseMean&gt;100. The first plot lists all differentially expressed genes, the second only lists those which are known to be immune related. print(&#39;significant differential genes&#39;) ## [1] &quot;significant differential genes&quot; # comment this back in if we want to change to big vs small #CD45res=results(CD45ddsChar, contrast=c(&quot;SizeCat&quot;, &quot;big&quot;, &quot;small&quot;)) # CD45res2=CD45res[which(CD45res$padj&lt;0.05 &amp; abs(CD45res$log2FoldChange)&gt;1.5 &amp; # CD45res$baseMean&gt;100), ] # for continuous variable CD45res=results(CD45ddsChar) CD45res2=CD45res[which(CD45res$padj&lt;0.05 &amp; CD45res$baseMean&gt;80 &amp; abs(CD45res$log2FoldChange)&gt;0.2), ] #pdf(&quot;~/Desktop/DESeq-small-vs-largeCD45-characterisation.pdf&quot;, height=6, width=6) namId=which(rownames(vsd)%in%RatAllImm &amp; rownames(vsd)%in%rownames(CD45res2)) namIdN=rownames(vsd)[namId] plot(CD45res$log2FoldChange, -log10(CD45res$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(CD45res2$log2FoldChange, -log10(CD45res2$padj), rownames(CD45res2), col=&quot;red&quot;) CD45res3=CD45res[match(namIdN, rownames(CD45res)), ] plot(CD45res$log2FoldChange, -log10(CD45res$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(CD45res3$log2FoldChange, -log10(CD45res3$padj), rownames(CD45res3), col=&quot;red&quot;) DT::datatable(as.data.frame(CD45res2), rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) We can also visualise this in a heatmap below, showing immune specific differentially expressed genes: #HighExprGenes=rownames(CD45res2)[which(CD45res2$baseMean&gt;100 &amp; CD45res2$log2FoldChange&lt;0) ] colSide=CD45ddsChar$SizeCat t2=assay(vsd)[namId, match(colnames(CD45ddsChar), colnames(vsd))] colnames(t2)=infoTableFinal$TumorIDnew[match(colnames(t2), rownames(infoTableFinal))] heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;immune genes DEG&quot;) Figure 17.2: Differential CD45 genes big vs small write.csv(t2, file=&quot;nature-tables/2d.csv&quot;) 17.1.3 GSEA Run GSEA. Here, we will look specifically at the Process Network pathways which are enriched, focusing specifically on immune related terms cd45Genes=rownames(CD45res) l1=SymHum2Rat$HGNC.symbol[match(cd45Genes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(cd45Genes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(cd45Genes, Mouse2Hum$MGI.symbol)] cd45GenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, cd45Genes))) hits=cd45GenesConv[match(rownames(CD45res2), cd45Genes)] #hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=CD45res$log2FoldChange names(fcTab)=cd45GenesConv gscacd=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscacd &lt;- preprocess(gscacd, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscacd &lt;- analyze(gscacd, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) A1=HTSanalyzeR2::summarize(gscacd) PNresults=gscacd@result$GSEA.results$ProcessNetworks Ax1=which(PNresults$Adjusted.Pvalue&lt;0.1) Lx1=PNresults[Ax1, 1:2] Lx1$Group=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[1]) Lx1$Process=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[2]) ## replace certain groups Lx1$Group[grep(&quot;ymphocyte&quot;, Lx1$Process)]=&quot;NImmune response&quot; # plot for inflammation, immune response, cell adhesion, transcription? TestGrp=c(&quot;NInflammation&quot;, &quot;NCell adhesion&quot;, &quot;NImmune response&quot;, &quot;NTranscription&quot;) #pdf(&quot;~/Desktop/2E-process-networks-significant-pathways.pdf&quot;, width=6, height=6) # par(mfrow=c(2,2), oma=c(0, 2, 0, 0)) # # for (i in TestGrp){ # x1=which(Lx1$Group==i) # barplot(Lx1$Observed.score[x1], names.arg = Lx1$Process[x1], horiz = T, las=2, # main=i) # } par(oma=c(0, 10, 0, 0)) barplot(Lx1$Observed.score, names.arg = ifelse(is.na(Lx1$Process), Lx1$Group, Lx1$Process), horiz = T, las=2) Figure 17.3: gsea for cd45 samples #dev.off() write.csv(gscacd@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/Supp_3_cd45_big_small.csv&quot;) write.csv(Lx1, file=&quot;nature-tables/2e.csv&quot;) In the following hairball, we can look at all the terms TermsA=sapply(strsplit(rownames(gscacd@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscacd@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscacd@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscacd, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot;) Figure 17.4: gsea hairball for all cd45 samples save(gscacd, file=&quot;figure-outputs/2e.Rdata&quot;) 17.2 Epithelial samples infoTableFinal$TumSize=Cdata$Tumor.diameter.sac.mm[match(infoTableFinal$TumorID, Cdata$TumorID)] #infoTableFinal$SizeCat=factor(ifelse(infoTableFinal$Cohort==&quot;Progression&quot;, ifelse(infoTableFinal$TumSize&gt;X2a, &quot;big&quot;, &quot;small&quot;), ifelse(infoTableFinal$TumSize&gt;X1a, &quot;big&quot;, &quot;small&quot;))) epidx=as.character(infoTableFinal$SampleID[which(infoTableFinal$Cohort!=&quot;Progression&quot; &amp; infoTableFinal$Fraction==&quot;Ep&quot; &amp; !is.na(infoTableFinal$SizeCat))]) EpddsChar=DESeqDataSetFromMatrix(allstarFinal[ ,epidx], infoTableFinal[epidx, ], design=~(SizeCat)) ## change class a1x=rowSums(counts(EpddsChar)) a1b=apply(counts(EpddsChar), 1, function(c) sum(c!=0)) # par(mfrow=c(1,2)) # hist(log10(a1x+1), main=&quot;log10 total counts&quot;) # hist((a1b+1), main=&quot;Non-zero entries&quot;) sd1vals=mean(log10(a1x+1))-sd(log10(a1x+1)) keep=which(rowSums(counts(EpddsChar))&gt;10^sd1vals) keep2=which(apply(counts(EpddsChar), 1, function(c) sum(c!=0))&gt; (ncol(EpddsChar)/2)) EpddsChar=EpddsChar[intersect(keep, keep2), ] EpddsChar=DESeq(EpddsChar) 17.2.1 PCA plot First, have a look at the samples in a PCA plot: do they separate based on size: #pdf(&quot;~/Desktop/S1CD-Ep-characterisation-PCA-outcome.pdf&quot;, width=6, height=6) vst1=vst(EpddsChar) plotPCA(vst1, &quot;SizeCat&quot;)+theme_bw()+geom_text(aes(label=colnames(vst1)))+ggtitle(&quot;Ep cells&quot;)+scale_color_manual(values=ColSize) Figure 17.5: PCA plot of epithelial samples And the plot of how much samples correlate with each other ax1=heatmap.2(cor((assay(vst1))), col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSize[(vst1$SizeCat)]) Figure 17.6: correlation plot epithelial samples #dev.off() write.csv(cor((assay(vst1))), file=&quot;nature-tables/Ext1g.csv&quot;) Here is a volcano plot the significant differential genes showing the difference between big and small tumors in the Ep fraction: Epres=results(EpddsChar)#, contrast=c(&quot;SizeCat&quot;, &quot;big&quot;, &quot;small&quot;)) Epres2=Epres[which(Epres$padj&lt;0.05 &amp; abs(Epres$log2FoldChange)&gt;0.25 &amp; Epres$baseMean&gt;80), ] plot(Epres$log2FoldChange, -log10(Epres$padj), pch=20, col=&quot;black&quot;, main=&quot;small (-ve) vs large (+ve)&quot;) text(Epres2$log2FoldChange, -log10(Epres2$padj), rownames(Epres2), col=&quot;red&quot;) Figure 17.7: Ep DEG big-small And the accompanying heatmap: colSide=EpddsChar$SizeCat t2=assay(vsd)[which( rownames(vsd)%in%rownames(Epres2)), match(colnames(EpddsChar), colnames(vsd))] a1=heatmap.2(t2, trace=&quot;none&quot;, col=RdBu[11:1], ColSideColors = palette()[colSide], scale=&quot;row&quot;, main=&quot;all DEG&quot;) Figure 17.8: heatmap of big vs small boxplot(assay(vsd)[&quot;Creb1&quot;, match(colnames(EpddsChar), colnames(vsd))]~EpddsChar$SizeCat, main=&quot;Creb1 gene small vs big vst expression&quot;) Figure 17.9: heatmap of big vs small write.csv(Epres2, file=sprintf(&quot;nature-tables/1gl%s.csv&quot;, Sys.Date())) write.csv(Epres, file=sprintf(&quot;nature-tables/Supp2_A_DEGs.csv&quot;)) 17.2.2 GSEA Run GSEA. Here, we will look specifically at the Process Network pathways which are enriched EpGenes=rownames(Epres) l1=SymHum2Rat$HGNC.symbol[match(EpGenes, SymHum2Rat$RGD.symbol)] l2=Rat2Hum$HGNC.symbol[match(EpGenes, Rat2Hum$RGD.symbol)] l3=Mouse2Hum$HGNC.symbol[match(EpGenes, Mouse2Hum$MGI.symbol)] EpGenesConv=ifelse(is.na(l1)==F, l1, ifelse(is.na(l2)==F, l2, ifelse(is.na(l3)==F, l3, EpGenes))) hits=EpGenesConv[match(rownames(Epres2), EpGenes)] #hits=epGenesConv[match(hits, rownames(Epdds))] fcTab=Epres$log2FoldChange names(fcTab)=EpGenesConv gscaep=GSCA(listOfGeneSetCollections=ListGSC,geneList=fcTab, hits = hits) gscaep &lt;- preprocess(gscaep, species=&quot;Hs&quot;, initialIDs=&quot;SYMBOL&quot;, keepMultipleMappings=TRUE, duplicateRemoverMethod=&quot;max&quot;, orderAbsValue=FALSE) gscaep &lt;- analyze(gscaep, para=list(pValueCutoff=0.05, pAdjustMethod=&quot;BH&quot;, nPermutations=100, minGeneSetSize=5, exponent=1), doGSOA = F) A1=HTSanalyzeR2::summarize(gscaep) save(gscaep, file=&quot;figure-outputs/1h.Rdata&quot;) TermsA=sapply(strsplit(rownames(gscaep@result$GSEA.results$ProcessNetworks), &quot;_&quot;), function(x) x[2]) TermsA[which(is.na(TermsA))]=substr(rownames(gscaep@result$GSEA.results$ProcessNetworks)[which(is.na(TermsA))], 2, 50) ## check whether this runs: gscaep@result$GSEA.results$ProcessNetworks$Gene.Set.Term=TermsA viewEnrichMap(gscaep, gscs=c(&quot;ProcessNetworks&quot;), allSig = TRUE, gsNameType=&quot;term&quot;) write.csv(gscaep@result$GSEA.results$ProcessNetworks, file=&quot;nature-tables/Supp_2_B_GSEA.csv&quot;) We can also look at the results using barplots, as shown below PNresultse=gscaep@result$GSEA.results$ProcessNetworks Ax1=which(PNresultse$Adjusted.Pvalue&lt;0.1) Lx1=PNresultse[Ax1, 1:2] Lx1$Group=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[1]) Lx1$Process=sapply(strsplit(rownames(Lx1), &quot;_&quot;), function(x) x[2]) ## replace certain groups Lx1$Group[grep(&quot;ymphocyte&quot;, Lx1$Process)]=&quot;NInflammation&quot; Lx1$Group[which(Lx1$Group==&quot;NImmune response&quot;)]=&quot;NInflammation&quot; # plot for inflammation, immune response, cell adhesion, transcription? TestGrp=c(&quot;NCell adhesion&quot;,&quot;NCell cycle&quot;,&quot;NDNA damage&quot;, &quot;NDevelopment&quot;, &quot;NTranscription&quot;, &quot;NInflammation&quot;) #pdf(&quot;~/Desktop/1E-process-networks-significant-pathways_ep.pdf&quot;, width=6, height=6) par(mfrow=c(2,2), oma=c(0, 3, 0, 0)) for (i in TestGrp){ x1=which(Lx1$Group==i) barplot(Lx1$Observed.score[x1], names.arg = Lx1$Process[x1], horiz = T, las=2, main=i) } #dev.off() write.csv(Lx1, file=&quot;nature-tables/1h.csv&quot;) # match the genes in the Tgfb pathway Genes1=PathwayMapAllComp$`Cell adhesion_Leucocyte chemotaxis` mid=match(Genes1, toupper(rownames(vst1))) heatmap.2(assay(vst1)[na.omit(mid), ], col=RdBu[11:1], ColSideColors = ColSize[vst1$SizeCat], trace=&quot;none&quot;, scale=&quot;row&quot;) Double check the above result by running a ssGSEA and checking the directionality Mx1=assay(vst1) rownames(Mx1)=toupper(rownames(Mx1)) testOut=gsva(Mx1, PathwayMapAllComp,method=&quot;ssgsea&quot;, kcdf=&quot;Gaussian&quot;, ssgsea.norm=T) boxplot(testOut[&quot;Cell cycle_S phase&quot;, ]~vst1$SizeCat) boxplot(testOut[&quot;Cell adhesion_Cell-matrix interactions&quot;, ]~vst1$SizeCat) 17.2.3 Check expression of checkpoint proteins #pdf(&quot;figure-outputs/Supp2_checkpoint.pdf&quot;, height=5, width=5) ImmSuppAPCRat=sapply(ImmSuppAPC, function(x) na.omit(SymHum2Rat$RGD.symbol[match(x, SymHum2Rat$HGNC.symbol)])) vstB=assay(vst1)[match(unlist(ImmSuppAPCRat), rownames(vst1)), ] ColSideCols=rep(c(&quot;red&quot;, &quot;blue&quot;, &quot;purple&quot;), times=sapply(ImmSuppAPCRat, length)) rmx=which(is.na(vstB[ ,1])) heatmap.2(vstB[-rmx, ], col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, RowSideColors = ColSideCols[-rmx], hclustfun = hclust.ave) Figure 17.10: checkpoint proteins expressed in epithelial samples ## Also do this using TPM values valuesB=allTPMFinal[ match(unlist(ImmSuppAPCRat), rownames(allTPMFinal)), match(colnames(vstB), colnames(allTPMFinal))] colnames(valuesB)=infoTableFinal$TumorIDnew[match(colnames(valuesB), rownames(infoTableFinal))] heatmap.2(log10(valuesB[ -rmx, ]+1), col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, RowSideColors = ColSideCols[-rmx], hclustfun = hclust.ave) Figure 17.11: checkpoint proteins expressed in epithelial samples #dev.off() DT::datatable(as.data.frame(valuesB), rownames=T, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) Figure 17.12: checkpoint proteins expressed in epithelial samples #write.csv(vstB[-rmx, ], file=&quot;nature-tables/Ext2f_checkpoint_expression.csv&quot;) Write the tables to file write.csv(infoTableFinal, file=&quot;nature-tables/infoTableFinal_output.csv&quot;) write.csv(allstarFinal, file=&quot;nature-tables/allstarFinal_output.csv&quot;) "],["signature-analysis.html", "Chapter 18 Signature analysis 18.1 MHC signature analysis", " Chapter 18 Signature analysis In this section, we use ss gene-set enrichment analysis to investigate differences in Major signalling pathways MHC expression signatures 18.1 MHC signature analysis Look if there is an association between MHC class I and class II and checkpoint proteins with growth in the different fractions. The summary appears: class I: association with stable in ep samples class II: low expression in DN stable sampels MHC presentation: higher in stable samples Ep (and also the characterisation cohort in general), may also be the case in DN samples 18.1.1 MHC-I classI &lt;- c(&quot;RT1-A1&quot;, &quot;RT1-A2&quot;, &quot;RT1-A3&quot;, &quot;RT1-Cl&quot;, &quot;RT1-M2&quot;, &quot;RT1-M3-1&quot;, &quot;RT1-M4&quot;, &quot;RT1-M5&quot;, &quot;RT1-N1&quot;, &quot;RT1-N2&quot;, &quot;RT1-N3&quot;, &quot;RT1-O1&quot;, &quot;RT1-S2&quot;, &quot;RT1-S3&quot;) classII &lt;- c(&quot;RT1-Ba&quot;, &quot;RT1-Bb&quot;, &quot;RT1-Da&quot;, &quot;RT1-Db1&quot;, &quot;RT1-Db2&quot;, &quot;RT1-DMa&quot;, &quot;RT1-DMb&quot;, &quot;RT1-DOa&quot;, &quot;RT1-DOb&quot;, &quot;RT1-Ha&quot;) #pdf(sprintf(&quot;rslt/signatureAnalysis/MHC_presentation_%s.pdf&quot;, Sys.Date()), height=6, width=7) MHCclassSumm2=assay(vsd)[na.omit(match(classI, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD: MHC class I&quot;, hclustfun = hclust.ave) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC class I&quot;, hclustfun = hclust.ave) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors =ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC class I&quot;, hclustfun = hclust.ave) 18.1.2 MHC-II MHCclassSumm2=assay(vsd)[na.omit(match(classII, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD: MHC class II&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC class II&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC class II&quot;) 18.1.3 MHC presentation proteins MHCclassSumm2=assay(vsd)[na.omit(match(MHCPres2Rat[-1], rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;CD45&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;CD45&quot; &amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;CD45: MHC presentation&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: MHC presentation&quot;) heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;DN&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;DN: MHC presentation&quot;) #dev.off() 18.1.4 inflammation related genes: IL6-JAK-STAT and TNF/NFKB InflammGenes=c(&quot;Jak1&quot;,&quot;Jak3&quot;, &quot;Jak2&quot;, &quot;Stat3&quot;, &quot;Il6&quot;, &quot;Il2&quot;, &quot;Il5&quot;,&quot;Ifng&quot;, &quot;Ifna1&quot;, &quot;Nfkb1&quot;, &quot;Cdf&quot;, &quot;Stat5a&quot;, &quot;Stat1&quot;, &quot;Stat2&quot;, &quot;Il6r&quot;, &quot;Socs3&quot;, &quot;Il5r&quot;, &quot;Il2r&quot;, &quot;Tnf&quot;, &quot;Tnfrsf1a&quot;, &quot;Tnfrsf1b&quot;) MHCclassSumm2=assay(vsd)[na.omit(match(InflammGenes, rownames(assay(vsd)))), ] colnames(MHCclassSumm2)=infoTableFinal$TumorIDnew[match(colnames(MHCclassSumm2), rownames(infoTableFinal))] heatmap.2(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], col=RdBu[11:1], trace=&quot;none&quot;, ColSideColors = ColSizeb[factor(infoTableFinal$Growth[which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)])], scale=&quot;row&quot;, main=&quot;Ep: JAK/STAT signalling&quot;, hclustfun = hclust.ave) Figure 18.1: Genes associated with inflammation write.csv(MHCclassSumm2[ ,which(infoTableFinal$Fraction==&quot;Ep&quot;&amp; infoTableFinal$Cohort==&quot;Progression&quot;)], file=&quot;nature-tables/Ext5b.csv&quot;) "],["immune-estimation.html", "Chapter 19 Immune estimation 19.1 Overview of the cell types 19.2 characterisation cohort: assoc with size 19.3 Comparison with FACS data 19.4 Progression cohort 19.5 Clinical associations 19.6 Summary of the outcome", " Chapter 19 Immune estimation In this section, we will look at Deconvolution methods (CIBERSORT, TIMER etc) for estimating immune fractions and cell types Deconvolution was performed using the TIMER website, which lists results from TIMER, XCELL, CIBERSORT, EPIC, MMPCOUNTER TPM counts were used for this analysis (using Rat gene names) on the TIMER website () ProgSpecCD45=read.csv(&quot;../data/RNA_expression/CD45_TPM_rgd_names_prog_12-08_estimation_matrix.csv&quot;) colnames(ProgSpecCD45)=gsub(&quot;X&quot;, &quot;&quot;, colnames(ProgSpecCD45)) CharSpecCD45=read.csv(&quot;../data/RNA_expression/CD45-tpm-rgdnames-char-2020-11-22-estimation_matrix.csv&quot;) colnames(CharSpecCD45)=gsub(&quot;X&quot;, &quot;&quot;, colnames(CharSpecCD45)) ## merge the two together output1=merge(ProgSpecCD45, CharSpecCD45, by.x=&quot;cell_type&quot;, by.y=&quot;cell_type&quot;, all=T) 19.1 Overview of the cell types Below, we will look at the enrichment scores of specific cell types compared to others using these different methods. It appears that most methods have scores which skews towards high representation of T cells: TIMER for example shows an enrichment of dendritic and CD8 T cells. EPIC in contrast shows enrichment for CD4+ and to a lesser extend CD8 T cells MMPCOUNTER puts an unusually large weighting to T cells and this does not fit our FACS analysis XCELL enriches for T cells RowNames=c(&quot;TIMER&quot;, &quot;CIBERSORT$&quot;, &quot;CIBERSORT-ABS&quot;, &quot;EPIC&quot;, &quot;MMCPCOUNTER&quot;, &quot;XCELL&quot;) Type=c(&quot;enrichment&quot;, &quot;fraction&quot;, &quot;enrichment&quot;, &quot;fraction&quot;, &quot;enrichment&quot;, &quot;enrichment&quot;) par(mfrow=c(3, 2)) for (i in 1:length(RowNames)){ timSamples=output1[grep(RowNames[i], output1$cell_type), ] rownames(timSamples)=sapply(strsplit(as.character(timSamples$cell_type), &quot;_&quot;), function(x) x[1]) boxplot(t(timSamples[ ,-1]), las=2, main=RowNames[i], ylab=Type[i]) } 19.2 characterisation cohort: assoc with size Associations with size? Perform a correlation test between all of the information above and tumor size. We obtain a matrix which is colored with a coefficient correlation (red is associative, blue is negatively associated). Correlations which are significant are marked with an asterisk: sizeInfo=infoTableFinal$TumSize[match(colnames(CharSpecCD45)[-1], rownames(infoTableFinal))] CorVals=rep(NA, nrow(CharSpecCD45)) names(CorVals)=CharSpecCD45$cell_type CorValsP=CorVals CorVals=sapply(1:nrow(CharSpecCD45), function(x) cor(t(CharSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)) CorValsP=sapply(1:nrow(CharSpecCD45), function(x) cor.test(t(CharSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)$p.value) naidx=which(CorValsP&lt;0.05) RNames1=sapply(strsplit(CharSpecCD45$cell_type, &quot;_&quot;), function(x) x[1]) RNamesMethod=sapply(strsplit(CharSpecCD45$cell_type, &quot;_&quot;), function(x) x[2]) df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorVals, p=CorValsP) ax1=acast(df2[ ,c(1:3)], RNames1~RNamesMethod) #df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorValsP) ax2=acast(df2[ ,c(1:2, 4)], RNames1~RNamesMethod) ax2[which(ax2&gt;0.1, arr.ind=T)]=0 ax2[which(is.na(ax2), arr.ind = T)]=0 #par(oma=c(3, 5, 2, 2)) #OutputplotFun(ax1, scaleR=&quot;none&quot;, main=&quot;cell type correlation&quot;, classN=&quot;no&quot;, sigMat=ax2) ## Also plot these all separately sizeInfoCut=infoTableFinal$SizeCat[match(colnames(CharSpecCD45)[-1], rownames(infoTableFinal))] ttestVal=sapply(1:nrow(CharSpecCD45), function(x) wilcox.test(t(CharSpecCD45[x, -1])~sizeInfoCut)$p.value) df3=data.frame(cell=RNames1, method=RNamesMethod, cor=ttestVal) ax3=acast(df3, RNames1~RNamesMethod) ax3[which(ax3&gt;0.1, arr.ind=T)]=0 ax3[which(is.na(ax3), arr.ind = T)]=0 ttestP=sapply(1:nrow(CharSpecCD45), function(x) wilcox.test(t(CharSpecCD45[x, -1])~sizeInfoCut)$p.value) ttestVal=sapply(1:nrow(CharSpecCD45), function(x) diff(t.test(t(CharSpecCD45[x, -1])~sizeInfoCut)$est)) df3=data.frame(cell=RNames1, method=RNamesMethod, val=ttestVal, p=ttestP) ax3=acast(df3[ ,c(1:2, 4)], RNames1~RNamesMethod) ax3[which(ax3&gt;0.05, arr.ind=T)]=0 ax3[which(is.na(ax3), arr.ind = T)]=0 ax4=acast(df3[ ,c(1:3)], RNames1~RNamesMethod) The above matrices are sparse, and we can zoom in on specific methods to see whether there is an association #pdf(&quot;~/Desktop/2F_characterisation_association_size_immune_types.pdf&quot;, width=8, height=5) par(mfrow=c(2,2)) for (i in 1:ncol(ax1)){ t1=ax1[, i] t2=which(!is.na(t1)) image(cbind(ax4[t2, i],ax4[t2, i]), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, main=sprintf(&quot;correlation %s (* sig p&lt;0.1)&quot;, colnames(ax1)[i])) axis(1, at=seq(0, 1, length=length(t2)), names(t1)[t2], las=2, cex=0.7) axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) mx=which(ax2[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 0 , &quot;*&quot;) mx=which(ax3[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 1 , &quot;*&quot;) } Figure 19.1: correlation coefficient values #dev.off() #write.csv(df2, file=&quot;nature-tables/2f_correlation_coefficients_pvalues.csv&quot;) #write.csv(ax1, file=&quot;nature-tables/2f_correlation_coefficients.csv&quot;) DT::datatable(df3, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 19.2: correlation coefficient values Figure 19.3: correlation coefficient values These accompany the following plots with individual samples: #pdf(&quot;~/Desktop/2F-sample-celltypes.pdf&quot;, height=6, width=7) x2=c(colnames(CharSpecCD45)[order(sizeInfo)+1]) ax1=grep(&quot;TIMER&quot;, CharSpecCD45$cell_type) T1melt=melt(CharSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) T1melt$NewID=infoTableFinal$TumorIDnew[match(T1melt$variable, rownames(infoTableFinal))] ggplot(T1melt, aes(x=NewID, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;TIMER:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 19.4: TIMER And below is the result for CIBERSORT ax1=grep(&quot;CIBERSORT$&quot;, CharSpecCD45$cell_type) T1melt=melt(CharSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90)) # Also do a version where the Bcells, Macrophages,NK, Mast Cells, CD4, CD8 Cells are merged together, NK T1melt$cell_type2=substr(T1melt$cell_type, 1, 4) T1melt$cell_type2[grep(&quot;CD8&quot;, T1melt$cell_type)]=&quot;T CD8&quot; T1melt$cell_type2[grep(&quot;CD4&quot;, T1melt$cell_type)]=&quot;T CD4&quot; ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) T1melt$sdat=paste(T1melt$variable, T1melt$cell_type2, sep=&quot;.&quot;) T2=by(T1melt$value, T1melt$sdat, sum) T2m=stack(T2) T2m$ind1=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[1]) T2m$ind2=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[2]) T2mTab=acast(T2m[ ,c(1, 3:4)], ind2~ind1, value.var=&quot;values&quot;) CorV=sapply(1:nrow(T2mTab), function(x) cor(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)) CorVP=sapply(1:nrow(T2mTab), function(x) cor.test(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)$p.value) wilP=sapply(1:nrow(T2mTab), function(x) wilcox.test(T2mTab[x, ]~ sizeInfoCut)$p.value) # dev.off() write.csv(T1melt, file=&quot;nature-tables/2f.csv&quot;) 19.3 Comparison with FACS data In this section, we compare how well the estimates from RNAseq deconvolution methods associate with FACS data. Below is a heatmap showing the correlation coefficient of each cell type (by FACS) and the method, Note that there are twice as manay samples with reliable myeloid derived cell information than for leukocytes. ## annotate the FACS data here infoTableFinal$Name2=NA infoTableFinal$Name2[which(infoTableFinal$Fraction==&quot;CD45&quot;)]=paste(infoTableFinal$Rat_ID[which(infoTableFinal$Fraction==&quot;CD45&quot;)], infoTableFinal$Location[which(infoTableFinal$Fraction==&quot;CD45&quot;)], sep=&quot;&quot;) m2=match(colnames(Fdata), infoTableFinal$Name2) ## get rid of the NA samples naom=infoTableFinal$SampleID[m2[which(!is.na(m2))]] mid=colnames(Fdata)[which(!is.na(m2))] lx1=Fdata[, c(1, match(mid, colnames(Fdata)))] out2=output1[, c(1,match(naom, colnames(output1)))] #head(out2) colnames(lx1)=colnames(out2) # Run all the association tests here ## New Table # -cd8 # Th # Tregs # B cells # Macrophage # MergedTable=matrix(NA, ncol=21, nrow=1) colnames(MergedTable)=colnames(out2) tx1=sapply(strsplit(as.character(out2$cell_type), &quot;_&quot;), function(x) x[1]) MethodSumm=sapply(strsplit(as.character(out2$cell_type), &quot;_&quot;), function(x) x[2]) tabtx1=table(tx1) TheseFracs=names(tabtx1)[which(tabtx1&gt;3)] testSetB=c(&quot;B cell&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;, &quot;Monocyte&quot;, &quot;Neutrophil&quot;, &quot;NK cells&quot;, &quot;CD8&quot;, &quot;Treg&quot;) # &quot;CD8&quot;, &quot;Th&quot;, &quot;Treg&quot;, &quot;B cells&quot;, &quot;NK cells&quot;, &quot;DC&quot;, &quot;Neutrophil&quot;, &quot;Monocyte&quot;, &quot;gd T&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;) testSet=TheseFracs[-2]#c(&quot;CD8&quot;, &quot;CD4&quot;, &quot;Treg&quot;, &quot;B cell&quot;, &quot;NK&quot;, &quot;dendritic&quot;, &quot;Neutrophil&quot;, &quot;Monocyte&quot;, &quot;gamma delta&quot;, &quot;M1&quot;, &quot;M2&quot;) CMat=matrix(NA, nrow=length(testSet), ncol=length(unique(MethodSumm))) rownames(CMat)=testSet colnames(CMat)=unique(MethodSumm) PMat=CMat #testSet=&quot;M2&quot; #testSetB=&quot;MHCII-lo&quot; for (j in 1:length(testSet)){ CD8Table=rbind(lx1[grep(testSetB[j], lx1$cell_type), ], out2[which(tx1==testSet[j]), ]) CD8Table[1,1]=paste(testSetB[j], &quot;facs&quot;, sep=&quot;_&quot;) ms=MethodSumm[which(tx1==testSet[j])] par(mfrow=c(3,3)) cVals=sapply(2:nrow(CD8Table), function(x) cor(t(CD8Table[1, -1]), t(CD8Table[x, -1]), use=&quot;complete&quot;)) cVals2=sapply(2:nrow(CD8Table), function(x) cor.test(t(CD8Table[1, -1]), t(CD8Table[x, -1]), use=&quot;complete&quot;)$p.value) CMat[j, match(ms, colnames(CMat))]=cVals PMat[j, match(ms, colnames(PMat))]=cVals2 MergedTable=rbind(MergedTable, CD8Table) #for (i in 2:nrow(CD8Table)){ #a1=cor(t(CD8Table[1, -1]), t(CD8Table[i, -1]), use=&quot;complete&quot;) #plot(t(CD8Table[1, -1]), t(CD8Table[i, -1]), main=CD8Table[i,1], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) #text(min(t(CD8Table[1, -1]), na.rm=T)*2, max(t(CD8Table[i, -1]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } ##for the following, find the terms and calculate the sum testSetB=c(&quot;Macro&quot;, &quot;Th&quot;, &quot;B cell&quot;) testSet=c(&quot;Macro&quot;, &quot;CD4&quot;, &quot;B cell&quot;) rmThese=c(&quot;M0&quot;, &quot;naive&quot;, NULL) savTemp=matrix(NA, nrow=3, ncol=ncol(CMat)) rownames(savTemp)=paste(&quot;all&quot;, testSet, sep=&quot;&quot;) savTempP=savTemp for (j in 1:length(testSetB)){ CD8Table=lx1[grep(testSetB[j], lx1$cell_type), ] CD8Table=colSums(CD8Table[, -1]) #rownames(CD8Table)=&quot;facs&quot; outB=out2[grep(testSet[j], out2$cell_type), ] rm2=grep(rmThese[j], outB$cell_type) if (length(na.omit(rm2))&gt;0){ outB=outB[-rm2, ] } namOut=sapply(strsplit(as.character(outB$cell_type), &quot;_&quot;), function(x) x[2]) nam2=unique(namOut[which(duplicated(namOut))]) outC=sapply(nam2, function(x) colSums(outB[which(namOut==x), -1 ])) outB=outB[-which(namOut%in%nam2), ] rownames(outB)=sapply(strsplit(as.character(outB$cell_type), &quot;_&quot;), function(x) x[2]) allD=rbind(CD8Table, outB[, -1], t(outC)) rownames(allD)[1]=&quot;facs&quot; allD$method=rownames(allD) # allD=data.matrix(allD) #pdf(sprintf(&quot;rslt/Immune decomposition/correlations_combined_%s.pdf&quot;, testSetB[j]), width=10, height=10) #ggplot(temp8, aes(x=method, y=value, col=variable))+geom_bar(stat=&quot;identity&quot;)+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) par(mfrow=c(3,3)) for (i in 2:nrow(allD)){ a1=cor(t(allD[1, -ncol(allD)]), t(allD[i, -ncol(allD)]), use=&quot;complete&quot;) a2=cor.test(t(allD[1, -ncol(allD)]), t(allD[i, -ncol(allD)]), use=&quot;complete&quot;)$p.value savTemp[j, match(rownames(allD)[i], colnames(CMat))]=a1 savTempP[j, match(rownames(allD)[i], colnames(CMat))]=a2 # plot(t(allD[1, -ncol(allD)]), t(allD[i,-ncol(allD)]), main=allD[i,ncol(allD)], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) # text(min(t(allD[1, -ncol(allD)]), na.rm=T)*2, max(t(allD[i, -ncol(allD)]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } cell_type=paste(testSetB[j], allD$method, sep=&quot;_all_&quot;) MergedTable=rbind(MergedTable, cbind(cell_type, allD[ ,-21])) } CorMatAll=rbind(CMat, savTemp) CorMatP=rbind(PMat, savTempP) par(oma=c(2, 0,0,5)) heatmap.2(CorMatAll, col=RdBu[11:1], scale=&quot;none&quot;, trace=&quot;none&quot;, main=&quot;correlation FACS and GE&quot;) We can plot associations between the different cell types below, here selecting: Bcells CD8 T cells M2 macophage M1 macrophage with each method. The correlation coefficient is indicated. testSetB=c(&quot;CD8&quot;, &quot;B cells&quot;, &quot;MHCII-hi&quot;, &quot;MHCII-lo&quot;) testSet=c(&quot;CD8&quot;, &quot;B cell&quot;,&quot;M1&quot;, &quot;M2&quot;) par(mfrow=c(3,3)) for (j in 1:length(testSetB)){ CMat=matrix(NA, ncol=length(testSet), nrow=10) CD8Table=rbind(lx1[grep(testSetB[j], lx1$cell_type), ], out2[grep(testSet[j], out2$cell_type), ]) for (i in 2:nrow(CD8Table)){ a1=cor(t(CD8Table[1, -1]), t(CD8Table[i, -1]), use=&quot;complete&quot;) plot(t(CD8Table[1, -1]), t(CD8Table[i, -1]), main=CD8Table[i,1], ylab=&quot;method&quot;, xlab=&quot;FACS&quot;) text(min(t(CD8Table[1, -1]), na.rm=T)*2, max(t(CD8Table[i, -1]), na.rm=T), paste(&quot;r=&quot;, round(a1, digits=2), sep=&quot;&quot;)) } mtext(testSetB[j], side=3, line=-2, outer=T) } 19.4 Progression cohort We perform the same sort of analysis for the progression cohort: # drop samples #dsamp=c(&quot;2R_D_CD45&quot;, &quot;3L_D_CD45&quot;) sizeInfo=infoTableFinal$GrowthRate[match(colnames(ProgSpecCD45)[-1], rownames(infoTableFinal))] #sizeInfo=Cdata$GrowthRate[match(substr(colnames(ProgSpecCD45)[-1], 1, nchar(colnames(ProgSpecCD45)[-1])-5), Cdata$TumorID)] CorVals=rep(NA, nrow(ProgSpecCD45)) names(CorVals)=ProgSpecCD45$cell_type CorValsP=CorVals CorVals=sapply(1:nrow(ProgSpecCD45), function(x) cor(t(ProgSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)) CorValsP=sapply(1:nrow(ProgSpecCD45), function(x) cor.test(t(ProgSpecCD45[x, -1]), sizeInfo, use=&quot;complete&quot;)$p.value) naidx=which(CorValsP&lt;0.05) RNames1=sapply(strsplit(ProgSpecCD45$cell_type, &quot;_&quot;), function(x) x[1]) RNamesMethod=sapply(strsplit(ProgSpecCD45$cell_type, &quot;_&quot;), function(x) x[2]) df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorVals, p=CorValsP) ax1=acast(df2[ ,c(1:3)], RNames1~RNamesMethod) #df2=data.frame(cell=RNames1, method=RNamesMethod, cor=CorValsP) ax2=acast(df2[ ,c(1:2,4)], RNames1~RNamesMethod) ax2[which(ax2&gt;0.05, arr.ind=T)]=0 ax2[which(is.na(ax2), arr.ind = T)]=0 #pdf(&quot;~/Desktop/4F_progression_association_growthrate_all_methods.pdf&quot;, width=8, height=6) par(oma=c(2, 2, 2, 2)) OutputplotFun(ax1, scaleR=&quot;none&quot;, main=&quot;cell type correlation&quot;, classN=&quot;no&quot;, sigMat=ax2) #dev.off() ## Also plot these all separately sizeInfoCut=infoTableFinal$Growth[match(colnames(ProgSpecCD45)[-1], rownames(infoTableFinal))] #sizeInfoCut=ifelse(sizeInfo&gt;=2, &quot;growing&quot;, &quot;stable&quot;) ttestP=sapply(1:nrow(ProgSpecCD45), function(x) wilcox.test(t(ProgSpecCD45[x, -1])~sizeInfoCut)$p.value) ttestVal=sapply(1:nrow(ProgSpecCD45), function(x) diff(t.test(t(ProgSpecCD45[x, -1])~sizeInfoCut)$est)) df3=data.frame(cell=RNames1, method=RNamesMethod, val=ttestVal, p=ttestP) ax3=acast(df3[ ,c(1:2, 4)], RNames1~RNamesMethod) ax3[which(ax3&gt;0.05, arr.ind=T)]=0 ax3[which(is.na(ax3), arr.ind = T)]=0 ax4=acast(df3[ ,c(1:3)], RNames1~RNamesMethod) #pdf(&quot;~/Desktop/4F_progression_association_growth_types.pdf&quot;, width=8, height=5) par(mfrow=c(2,2)) for (i in 1:ncol(ax1)){ t1=ax1[, i] t2=which(!is.na(t1)) image(cbind(ax4[t2, i],ax4[t2, i]), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, main=sprintf(&quot;correlation %s (* sig p&lt;0.05)&quot;, colnames(ax1)[i])) axis(1, at=seq(0, 1, length=length(t2)), names(t1)[t2], las=2, cex=0.7) axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) mx=which(ax2[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 0 , &quot;*&quot;) mx=which(ax3[ t2,i]&gt;0) text((mx-1)/(length(t2)-1), 1 , &quot;*&quot;) } #write.csv(df2, file=&quot;nature-tables/4f.csv&quot;) DT::datatable(df3, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Make the plots with individual samples. Firstly TIMER #pdf(&quot;~/Desktop/4F-sample-celltypes-arranged_by_growth_rate.pdf&quot;, height=6, width=10) x2=c(colnames(ProgSpecCD45)[order(sizeInfo)+1]) ax1=grep(&quot;TIMER&quot;, ProgSpecCD45$cell_type) T1melt=melt(ProgSpecCD45[ax1, ]) T1melt$growth=infoTableFinal$Growth[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$treatment=infoTableFinal$Treatment[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$variable=factor(T1melt$variable, x2) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;, drop=T)+ggtitle(&quot;TIMER:prog growth&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) Figure 19.5: Progression CIBERSORT TIMER then CIBERSORT ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;, drop=T)+ggtitle(&quot;TIMER:prog treatment&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#FED976&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) ax1=grep(&quot;CIBERSORT$&quot;, ProgSpecCD45$cell_type) T1melt=melt(ProgSpecCD45[ax1, ]) T1melt$variable=factor(T1melt$variable, x2) T1melt$growth=infoTableFinal$Growth[match(T1melt$variable, infoTableFinal$SampleID)] T1melt$treatment=infoTableFinal$Treatment[match(T1melt$variable, infoTableFinal$SampleID)] pdf(&quot;~/Desktop/newFigure4.pdf&quot;, height=10, width=15) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90))+scale_fill_manual(values=c(&quot;#F8766D&quot;, &quot;#EC8239&quot;, &quot;#DB8E00&quot;, &quot;#C79800&quot;, &quot;#AEA200&quot;, &quot;#8FAA00&quot;, &quot;#A1B72C&quot;, &quot;#5E5E5E&quot;, &quot;#64B200&quot;, &quot;#00BD5C&quot;, #&quot;#E6F0ED&quot;, &quot;#00C1A7&quot;, &quot;#00BFC4&quot;, &quot;#00BADE&quot;, &quot;#CB5C5A&quot;, &quot;#FFAD00&quot;, &quot;#FF0B00&quot;, &quot;#B385FF&quot;, &quot;#D874FD&quot;, &quot;#EF67EB&quot;, &quot;#FFA9AD&quot;, &quot;#FF63B6&quot;, &quot;#FF6B94&quot;)) dev.off() ## quartz_off_screen ## 2 ggplot(T1melt, aes(x=variable, y=value, fill=cell_type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:char cohort separately&quot;)+theme(axis.text.x = element_text(angle = 90))+theme_bw()+ theme(axis.text.x = element_text(angle = 90)) # Also do a version where the Bcells, Macrophages,NK, Mast Cells, CD4, CD8 Cells are merged together, NK T1melt$cell_type2=substr(T1melt$cell_type, 1, 4) T1melt$cell_type2[grep(&quot;CD8&quot;, T1melt$cell_type)]=&quot;T CD8&quot; T1melt$cell_type2[grep(&quot;CD4&quot;, T1melt$cell_type)]=&quot;T CD4&quot; ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~growth, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:prog growth&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) ggplot(T1melt, aes(x=variable, y=value, fill=cell_type2))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~treatment, space=&quot;free_x&quot;, scale=&quot;free&quot;)+ ggtitle(&quot;CIBSERT:prog treatment&quot;)+theme(axis.text.x = element_text(angle = 90))+ scale_fill_manual(values=c(&quot;#66C2A5&quot;, &quot;#E6F598&quot;, &quot;#FED976&quot;, &quot;#FC4E2A&quot;, &quot;#bdbdbd&quot;, &quot;#FEEBE2&quot; ,&quot;#AE017E&quot;, &quot;#5E4FA2&quot;, &quot;#2171B5&quot;, &quot;#BDD7E7&quot;, &quot;#EFF3FF&quot;))+theme_bw()+theme(axis.text.x = element_text(angle = 90)) T1melt$sdat=paste(T1melt$variable, T1melt$cell_type2, sep=&quot;.&quot;) T2=by(T1melt$value, T1melt$sdat, sum) T2m=stack(T2) T2m$ind1=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[1]) T2m$ind2=sapply(strsplit(as.character(T2m$ind), &quot;\\\\.&quot;), function(x) x[2]) T2mTab=acast(T2m[ ,c(1, 3:4)], ind2~ind1, value.var=&quot;values&quot;) CorV=sapply(1:nrow(T2mTab), function(x) cor(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)) CorVP=sapply(1:nrow(T2mTab), function(x) cor.test(T2mTab[x, ], sizeInfo, use=&quot;complete&quot;)$p.value) wilP=sapply(1:nrow(T2mTab), function(x) wilcox.test(T2mTab[x, ]~ sizeInfoCut)$p.value) # image(cbind(CorV,CorV), col=RdBu[11:1], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, # main=&quot;correlation CIBERSORT growth rate (* sig p&lt;0.1)&quot;) # axis(1, at=seq(0, 1, length=length(CorV)), rownames(T2mTab), las=2, cex=0.7) # axis(2, at=c(0,1),c(&quot;cor p&quot;, &quot;wilcox p&quot;), las=2, cex=0.7) # mx=which(CorVP&lt;0.1) # text((mx-1)/(CorVP-1), 0 , &quot;*&quot;) # mx=which(wilP&lt;0.1) # text((mx-1)/(wilP-1), 1 , &quot;*&quot;) #dev.off() #write.csv(T1melt, file=&quot;nature-tables/4f_image.csv&quot;) DT::datatable(T1melt, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) 19.5 Clinical associations 19.5.1 Associate with Treatment Look at association with treatment, growth and spatial infiltration for each method. Associations with treatment: higher CD4, CD8 in most treatments growth: stable associated with higher CD8 infiltration: more neutrophils and CD8? maybe CD4 cells #sizeCutOff=7 MergedTablemelt=melt(MergedTable[-1, ]) MergedTablemelt$Treatment=infoTableFinal$Treatment[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$Growth=infoTableFinal$Growth[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$InfRes=infoTableFinal$MHcut[match(MergedTablemelt$variable, infoTableFinal$SampleID)] MergedTablemelt$cell_type2=sapply(strsplit(MergedTablemelt$cell_type, &quot;_&quot;), function(x) x[1]) MergedTablemelt$method=sapply(strsplit(MergedTablemelt$cell_type, &quot;_&quot;), function(x) x[length(x)]) unValues=unique(MergedTablemelt$cell_type2) CompTest=list() for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=Treatment, y=as.numeric(value), col=Treatment))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Treatment&quot;)) print(p) #p&lt;-ggplot(ax, aes(x=Growth, y=as.numeric(value), col=Growth))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Growth&quot;)) #print(p) #p&lt;-ggplot(ax, aes(x=InfRes, y=as.numeric(value), col=InfRes))+geom_boxplot()+facet_wrap(~method, #scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Infiltration&quot;)) #print(p) unT=sort(unique(ax$Treatment)) unB=sort(unique(ax$method)) Outcome1=matrix(NA, nrow=5, ncol=length(unB)) rownames(Outcome1)=c(paste(unT[1:3], &quot;vs.Vehicle&quot;, sep=&quot;&quot;), &quot;Grow.Stable&quot;, &quot;Inf.res&quot;) colnames(Outcome1)=unB for (j in 1:nrow(Outcome1)){ Outcome1[1 , ]=sapply(unB, function(x) wilcox.test(ax$value[which(ax$Treatment==&quot;LY&quot; &amp; ax$method==x)], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[2 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Treatment==&quot;PDL1&quot; &amp; ax$method==x], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[3 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Treatment==&quot;PDL1+LY&quot; &amp; ax$method==x], ax$value[ax$Treatment==&quot;Vehicle&quot; &amp; ax$method==x])$p.value) Outcome1[4 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$Growth==&quot;growing&quot; &amp; ax$method==x], ax$value[ax$Growth==&quot;stable&quot; &amp; ax$method==x])$p.value) Outcome1[5 , ]=sapply(unB, function(x) wilcox.test(ax$value[ax$InfRes==&quot;inf&quot; &amp; ax$method==x], ax$value[ax$InfRes==&quot;res&quot; &amp; ax$method==x])$p.value) } CompTest[[i]]=t(Outcome1) o1=Outcome1 o1[which(o1&lt;0.05, arr.ind=T)]=3 o1[which(o1&lt;0.1, arr.ind=T)]=2 o1[which(o1&lt;=1, arr.ind=T)]=0 #heatmap.2(o1, col=brewer.pal(9, &quot;Blues&quot;), scale=&quot;none&quot;, trace=&quot;none&quot;, main=paste(&quot;pvalue summary&quot;, unValues[i]), Colv = NA, Rowv = NA) } Using wilcox tests for significance, we can make the above comparisons and see if there is an association with outcome: There are differences in B-cell content between LY vs V comaprisons using xcell and cibersort Macrophages are different in PDL1+LY 19.5.2 Association with Growth for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=Growth, y=as.numeric(value), col=Growth))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Growth&quot;)) print(p) } for (i in 1:length(unValues)){ ax=MergedTablemelt[MergedTablemelt$cell_type2==unValues[i], ] p&lt;-ggplot(ax, aes(x=InfRes, y=as.numeric(value), col=InfRes))+geom_boxplot()+facet_wrap(~method, scale=&quot;free_y&quot;)+ggtitle(paste(unValues[i], &quot;Infiltration&quot;)) print(p) } 19.6 Summary of the outcome CompTest2=do.call(rbind, CompTest) #write.csv(CompTest2, file=sprintf(&quot;outputs/p_values_differences_treatment_growth_infiltration_%s.csv&quot;, Sys.Date())) CompTest2=data.frame(CompTest2) DT::datatable(CompTest2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) "],["bcr-clonotype-analysis.html", "Chapter 20 BCR clonotype analysis 20.1 Processing summary 20.2 Summary Stats 20.3 Diversity metrics 20.4 Compare the characterisation cohort 20.5 Associate with clinicopathological data (progression) 20.6 Associate with signature scores", " Chapter 20 BCR clonotype analysis 20.1 Processing summary Fastq files have previously been run through TRUST4 using the Rn6 BCR annotations using the following code (not run here). Note that the bcr/tcr .fa files were assembled using the ensembl annotation (these annotations are not present in the UCSC genomic files). Annotation files for the rn6 BCR regions are available at IMGT, but TCR regions are not available # obtain the gene names for rat: library(biomaRt) human = useEnsembl(&quot;ensembl&quot;, mirror=&quot;useast&quot;, dataset = &quot;hsapiens_gene_ensembl&quot;) rat = useEnsembl(&quot;ensembl&quot;, mirror=&quot;useast&quot;, data=&quot;rnorvegicus_gene_ensembl&quot;) TS = human_igg_trv_list Hum2RatProt = getLDS(attributes = c(&quot;hgnc_symbol&quot;, &quot;ensembl_transcript_id&quot;), filters = &quot;hgnc_symbol&quot;, values = TS , mart = human, attributesL = c(&quot;rgd_symbol&quot;, &quot;ensembl_transcript_id”, “ensemble_gene_id&quot;), martL = rat, uniqueRows=T) write.table(unique(Hum2RatProt$ensemble_gene_id), &quot;ensbl_rat_bcr.txt&quot;, quote=F, row.names=F,colnames=F) # obtain the tcr/bcr.fa file #(Note that BuildDatabaseFa.pl needs to be edited on lines 95, 102, 114 and 121 to use transcript_id or gene_id instead) perl BuildDatabaseFa.pl Rattus_norvegicus.Rnor_6.0.dna_sm.toplevel.fa Rattus_norvegicus.Rnor_6.0.99.gtf ensbl_rat_bcr.txt &gt; bcrtcr_rat_ens.fa # Obtain the reference annotation file perl BuildImgtAnnot.pl Rattus_norvegicus &gt; Rnor_IMGT+C.fa # Run TRUST (below is single end) ./run-trust4 -u 20170125_NMU7_Tumor_RLU_CD45_CGDA5146_S1_R1_001.fastq.gz -f bcrtcr_rat_ens.fa --ref Rnor_IMGT+C.fa #Annotation file: Load in an annotation file indicating all the samples, batch effects etc TRUST4path=&quot;../data/TRUST4/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) matchidx=match(TRUST4files, infoTableFinal$TRUSTName) #RepNames=paste(infoTableFinal$Rat_ID, tempAnnot$Location, tempAnnot$Fraction, sep=&quot;_&quot;)[matchidx] # load in all the files and save the list to file RatTrust=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrust)=infoTableFinal$SampleID[matchidx] TRUST4path=&quot;../data/TRUST4/matchedNormal/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) FileNames=paste(substr(TRUST4files, 10, 12), &quot;matchedNMUCD45&quot;, sep=&quot;_&quot;) RatTrustNormal=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrustNormal)=FileNames RatTrust=c(RatTrust, RatTrustNormal) save(RatTrust, file=sprintf(&quot;outputs/Rat_TRUST4_%s.RData&quot;, Sys.Date())) 20.2 Summary Stats Firstly, look at the number of BCR regions which have been identified by TRUST4. In green are the CD45 populations, which as expected appear to have a higher number of clonotypes compared to the epithelial and the double-negative populations (in read and orange). NSamples=sapply(RatTrust, nrow) NSamplesCt2=sapply(RatTrust, function(x) length(which(x$X.count&gt;=2))) NSamplesCDR3comp=sapply(RatTrust, function(x) length(which(x$CDR3aa!=&quot;partial&quot;))) NSamplesCDR3compCt2=sapply(RatTrust, function(x) length(which(x$CDR3aa!=&quot;partial&quot; &amp; x$X.count&gt;=2))) TableOut=cbind(NSamples, NSamplesCt2, NSamplesCDR3comp, NSamplesCDR3compCt2) matchidx=match(rownames(TableOut), infoTableFinal$SampleID) ColOut=factor(paste(infoTableFinal$Fraction[matchidx], infoTableFinal$Batch[matchidx])) #palette(c(&quot;#e5f5e0&quot;,&quot;#a1d99b&quot;, &quot;#31a354&quot;, &quot;#fd8d3c&quot;,&quot;#fa9fb5&quot;, &quot;#f03b20&quot;, &quot;#005824&quot;)) #pdf(sprintf(&quot;rslt/TRUST4/BCR_summary_QC_%s.pdf&quot;, Sys.Date()), height=5, width = 7) # plot the clonotype diversity, color-code according to both batch and the sample used par(mar = c(4, 4, 4, 2), xpd = TRUE) barplot(NSamplesCt2+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Overview of clonotype diversity (2+ reads)&quot;, col=ColOut, cex.names = 0.75) legend(&quot;top&quot;, inset = c(-0.5, 0.03), legend = levels(ColOut), pch = c(19, 19, 19, 19, 19), col = c(1:6), horiz = T) # plot the number of full vs partial clonotypes PartialvsFull=rbind(NSamplesCDR3compCt2,NSamplesCt2-NSamplesCDR3compCt2) rownames(PartialvsFull)=c(&quot;full&quot;, &quot;partial&quot;) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(PartialvsFull+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Proportion of full vs partial CDR3a&quot;, col=c(1:2), cex.names = 0.75) legend(&quot;bottom&quot;, inset = c(-0.5, -0.5), legend = c(&quot;full&quot;, &quot;partial&quot;), pch = c(19, 19), col = c(1:2), horiz = T) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(t(TableOut[ which(infoTableFinal$Fraction[matchidx]==&quot;CD45&quot;),]+1), las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Clonotype diversity CD45+ samples&quot;, col=c(1:4), cex.names = 0.75, beside = T) legend(&quot;bottom&quot;, inset = c(-0.5, -0.5), legend = c(&quot;# clonotypes&quot;, &quot;clonotypes &gt;2reads&quot;, &quot;complete CDR3&quot;, &quot;both&quot;), pch = c(19, 19, 19), col = c(1:4), horiz = T) par(mar = c(10, 4, 4, 2), xpd = TRUE) barplot(NSamplesCDR3compCt2+1, las=2,log =&#39;y&#39;, ylab = &quot;Number of BCR clonotypes&quot;, main=&quot;Filtered Clonotypes based on batch&quot;, col=ColOut, cex.names = 0.75, beside = T) legend(&quot;top&quot;, inset = c(-0.5, 0.03), legend = levels(ColOut), pch = c(19, 19, 19, 19, 19), col = c(1:5), horiz = T) #dev.off() We will refine the above plot to contain only the CD45 population and assess: number of clonotypes number of clonotypes with at least 2 reads number of clonotypes which have a complete CDR3a region Note: although this does not look like a big drop, the data is plotted on a log-scale. For example, in the control 4 (first column) a quarter of the clonotypes have at least 2 counts and about half have a complete CDR3 sequence. For the following analyses, the clonotypes are filtered to only clonotypes with at least 2 supporting reads and a complete VDJ read . When applying this restriction, we have the following distribution of BCR regions. Almost all the epithelial cases do not have supporting reads, and few of the DN cases have supporting reads too. RatTrustB=lapply(RatTrust, function(x) x[which(x$CDR3aa!=&quot;partial&quot; &amp; x$X.count&gt;=2), ]) for (i in 1:length(RatTrustB)){ RatTrustB[[i]]$frequency=RatTrustB[[i]]$X.count/sum(RatTrustB[[i]]$X.count) } 20.3 Diversity metrics We will assess BCR diversity using the following metrics: ** Shannon index ** The shannon index is computed by: filtering through reads of interest recalculate the fraction such that the new list sums to 1 compute entropy as the sum of log(freq_x)*freq_x amongst all populations x compute the maximum entropy expected for that case -log(1/N), where N is the number of populations present to determine confidence intervals, bootstrap the population (500 times) and compute the expected entropy ** Gini index ** The Gini index can be considered as an inverse of the Shannon index ** Top Clonotypes ** We will see the proportion of the BCR repertoire which is computed using the top 10 frequent clones. This will give an idea of whether there is a clonal expansion # compute values here Div1=sapply(RatTrustB, function(x) -sum(x$frequency*log(x$frequency), na.rm=T)) EDiv=sapply(NSamplesCDR3compCt2, function(x) -log(1/x)) NormDiv=Div1/EDiv ## Shannon index # bootstrap rslt BSrslt=sapply(RatTrustB, function(x) tryCatch(BootstrapShannonIdx(x[ ,1], 1000), error=function(e) c(NA, NA))) # divide the CI by the maximum possible diversity BSCI=t(BSrslt)/EDiv df=data.frame(sample=rownames(BSCI), Val=NormDiv, Lower=BSCI[ , 1], Upper=BSCI[ ,2 ], Type=infoTableFinal$Fraction[matchidx], Batch=infoTableFinal$Batch[matchidx]) ## Gini index Gini=sapply(RatTrustB, function(x) gini(x$frequency)) PGini=sapply(RatTrustB, function(x) tryCatch(PermuteGini(x$X.count, 1000), error=function(e) c(NA, NA))) df$Calc=&quot;shannon&quot; df2=data.frame(sample=df$sample, Val=Gini, Lower=PGini[1, ], Upper=PGini[2, ], Type=df$Type, Batch=df$Batch, Calc=&quot;Gini&quot;) dfAll=rbind(df, df2) ## Top Clonotypes TopClones=sapply(RatTrustB, function(x) sum(x$frequency[1:5], na.rm = T)) TopClones[which(NSamplesCDR3compCt2==0)]=0 df2$Val=TopClones df2$Calc=&quot;Top10&quot; df2$Lower=TopClones df2$Upper=TopClones dfAll=rbind(dfAll, df2) dfAll$Batch=as.character(dfAll$Batch) dfAll$Batch[grep(&quot;matchedNMU&quot;, rownames(dfAll))]=&quot;match&quot; dfAll$Type[grep(&quot;matchedNMU&quot;, rownames(dfAll))]=&quot;CD45&quot; #ggplot(df[df$Type==&quot;CD45&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of BCR diversity&quot;) The following plot demonstrates the relationship between the above metrics #pdf(sprintf(&quot;rslt/TRUST4/summary_Scores_diversity_%s.pdf&quot;, Sys.Date()), width=7, height=5) ggplot(dfAll[dfAll$Type==&quot;CD45&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(Calc~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;BCR diversity across samples&quot;)+ylab(&quot;index value&quot;) #dev.off() Notice that some samples have very few clones. An example is 5RB which is represented by a single clonotype, accounting for the absence of a Gini or shannon index 20.4 Compare the characterisation cohort In the characterisation cohort, we have 3 cases which have CD45 samples in both the tumor and a matched NMU treated mammary gland. Is there a difference in the clonotypes between these samples? CharTemp=dfAll[which(dfAll$Type==&quot;CD45&quot; &amp; dfAll$Batch%in%c(&quot;1&quot;, &quot;match&quot;)), ] CharTemp$Batch[grep(&quot;Control&quot;, CharTemp$sample)]=&quot;Normal&quot; Nclonotypes=TableOut[which(rownames(TableOut)%in%CharTemp$sample), ] Nclonotypes2=melt(Nclonotypes) Nclonotypes2$Case=&quot;tumor&quot; Nclonotypes2$Case[grep(&quot;match&quot;, Nclonotypes2$Var1)]=&quot;mammary&quot; Nclonotypes2$Case[grep(&quot;Control&quot;, Nclonotypes2$Var1)]=&quot;control&quot; #pdf(sprintf(&quot;rslt/TRUST4/compare_mammary_vs_tumor_%s.pdf&quot;, Sys.Date()), width=8, height=6) a1=sapply(unique(CharTemp$Calc), function(x) wilcox.test(CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==1], CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==&quot;match&quot;])$p.value) p=ggplot(CharTemp, aes(x=Batch, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+geom_jitter(col=&quot;grey&quot;)+theme_bw() print(p) Figure 20.1: bcr clonotypes in tumor and normal mammary glands #write.csv(CharTemp, file=&quot;nature-tables/2h.csv&quot;) DT::datatable(CharTemp, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 20.1: bcr clonotypes in tumor and normal mammary glands Next, we check whether this could be attributed to the total number of clones. Here is a plot which assesses whether these are similar or different a1=sapply(unique(Nclonotypes2$Var2), function(x) wilcox.test(Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;tumor&quot;], Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;mammary&quot;])$p.value) ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(a1,4),sep=&quot;&quot;), Var2=unique(Nclonotypes2$Var2), Case=1, value=2) p=ggplot(Nclonotypes2, aes(x=Case, y=value))+geom_boxplot()+facet_grid(~Var2)+ggtitle(&quot;Nclonotype with different filters&quot;)+geom_jitter(col=&quot;grey&quot;)+theme_bw()+ geom_text(data=ann_text2, aes(label=lab)) print(p) What about association with size? CharTemp2=CharTemp[which(CharTemp$Batch==&quot;1&quot;), ] midx=Cdata$Tumor.diameter.sac.mm[match(substr(as.character(CharTemp2$sample), 1, nchar(as.character(CharTemp2$sample))-5), Cdata$TumorID)] CharTemp2$size=midx ggplot(CharTemp2, aes(x=size, y=Val))+geom_point()+facet_grid(~Calc)+theme_bw() Figure 20.2: clonotype assoc with size #write.csv(CharTemp2, file=&quot;nature-tables/Ext2e.csv&quot;) DT::datatable(CharTemp2, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 20.2: clonotype assoc with size ProgTemp=dfAll[which(dfAll$Type==&quot;CD45&quot; &amp; dfAll$sample%in%infoTableFinal$SampleID[which(infoTableFinal$Cohort==&quot;Progression&quot;)]), ] a1=match(ProgTemp$sample, infoTable) ProgTemp$Growth=infoTableFinal$Growth[a1] ProgTemp$NewID=infoTableFinal$TumorIDnew[a1] ProgTemp$Treatment=infoTableFinal$Treatment[a1] Nclonotypes=TableOut[which(rownames(TableOut)%in%ProgTemp$sample), ] Nclonotypes2=melt(Nclonotypes) # Nclonotypes2$Case=&quot;tumor&quot; # Nclonotypes2$Case[grep(&quot;match&quot;, Nclonotypes2$Var1)]=&quot;mammary&quot; # Nclonotypes2$Case[grep(&quot;Control&quot;, Nclonotypes2$Var1)]=&quot;control&quot; head(Nclonotypes2) #pdf(sprintf(&quot;rslt/TRUST4/compare_mammary_vs_tumor_%s.pdf&quot;, Sys.Date()), width=8, height=6) #a1=sapply(unique(ProgTemp$Calc), function(x) wilcox.test(ProgTemp$Val[ProgTemp$Calc==x &amp; ProgTemp$Batch==1], ProgTemp$Val[ProgTemp$Calc==x &amp; ProgTemp$Batch==&quot;match&quot;])$p.value) p=ggplot(ProgTemp, aes(x=Growth, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+geom_jitter(col=&quot;grey&quot;)+theme_bw() print(p) DT::datatable(ProgTemp, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) #write.csv(ProgTemp, file=&quot;nature-tables/4i_clonotypes.csv&quot;) # a1=sapply(unique(Nclonotypes2$Var2), function(x) wilcox.test(Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;tumor&quot;], Nclonotypes2$value[Nclonotypes2$Var2==x &amp; Nclonotypes2$Case==&quot;mammary&quot;])$p.value) # # ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(a1,4),sep=&quot;&quot;), Var2=unique(Nclonotypes2$Var2), Case=1, value=2) # p=ggplot(Nclonotypes2, aes(x=Case, y=value))+geom_boxplot()+facet_grid(~Var2)+ggtitle(&quot;Nclonotype with different filters&quot;)+geom_jitter(col=&quot;grey&quot;)+theme_bw()+ # geom_text(data=ann_text2, aes(label=lab)) # print(p) 20.5 Associate with clinicopathological data (progression) We will associate the following metrics: total unique clones diversity with the following immune data: CD45 fraction (from FACS) CD8 fraction (from WSI) MH-mixing indices Tumor Size Growth Treatment matchidx=match(rownames(TableOut), infoTableFinal$SampleID) TrustTab=infoTableFinal[matchidx, ] TrustTab$TrustNclonotypes=TableOut[match(TrustTab$SampleID, rownames(TableOut)) ,2] TrustTab$TrustShannon=dfAll$Val[match(TrustTab$SampleID, dfAll$sample) ] TrustTab$TrustTop10=df2$Val[match(TrustTab$SampleID, df2$sample)] TrustTab$TrustGini=dfAll$Val[which(dfAll$Calc==&quot;Gini&quot;)[match(TrustTab$SampleID, dfAll$sample)] ] TrustTab$CD45FACS=as.numeric(as.character(Cdata$CD45.Frac.FACS[match(TrustTab$TumorID, Cdata$TumorID)])) TrustTab$UnclassFrac=as.numeric(as.character(Cdata$UnclassFraction[match(TrustTab$TumorID, Cdata$TumorID)])) CD45F=which(TrustTab$Fraction==&quot;CD45&quot;) #TrustTab=TrustTab[TrustTab$Fraction==&quot;CD45&quot;, ] paramSearch=c(&quot;CD8Frac&quot;, &quot;TumSize&quot;, &quot;CD45FACS&quot;, &quot;MHEpCAM&quot;, &quot;MHSMA&quot;, &quot;IFEpCAM&quot;, &quot;IFSMA&quot;, &quot;UnclassFrac&quot;) FeatTrust=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;, &quot;TrustTop10&quot;) Nclon=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[ CD45F,c(&quot;TrustNclonotypes&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) SDiv=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[CD45F ,c(&quot;TrustShannon&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) GDiv=sapply(paramSearch, function(x) cor.test(TrustTab[ CD45F,x], TrustTab[CD45F ,c(&quot;TrustGini&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) TDiv=sapply(paramSearch, function(x) cor.test(TrustTab[CD45F ,x], TrustTab[CD45F ,c(&quot;TrustTop10&quot;)], use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value) AllSmerge=rbind(Nclon, SDiv, GDiv, TDiv) #pdf(sprintf(&quot;rslt/TRUST4/association_trustmetrics_clinicopathological_%s.pdf&quot;, Sys.Date()), width=10, height=8) heatmap.2(AllSmerge, scale=&quot;none&quot;, col=RdBu[11:1], trace=&quot;none&quot;, main=&quot;p values of associations&quot;) Figure 20.3: 4i: trust result par(mfrow=c(2,2)) idx=which(AllSmerge&lt;0.1, arr.ind=T) for (i in 1:nrow(idx)){ a1=cor.test(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], use=&quot;complete&quot;, method=&quot;spearman&quot;) plot(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], xlab=FeatTrust[idx[i, 1]], ylab=paramSearch[idx[i, 2]], main=sprintf(&quot;cor:%s p:%s&quot;, round(a1$estimate,2), round(a1$p.value,2))) text(TrustTab[CD45F , FeatTrust[idx[i, 1]]] ,TrustTab[CD45F , paramSearch[idx[i, 2]]], rownames(TrustTab)[CD45F], cex=0.75) } Figure 20.4: 4i: trust result #pdf(&quot;~/Desktop/4L-TRUST-rslt-associate-outcome-progression.pdf&quot;, height=8, width=8) CD45F2=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot;) yvals=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;, &quot;TrustTop10&quot;) ## associate with growth and treatment type par(mfrow=c(2,2)) Figure 20.5: 4i: trust result CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;PDL1&quot;)) a1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;LY&quot;)) b1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) CD45F2a=which(TrustTab$Fraction==&quot;CD45&quot; &amp; TrustTab$Cohort==&quot;Progression&quot; &amp; TrustTab$Treatment%in%c(&quot;Vehicle&quot;, &quot;PDL1+LY&quot;)) c1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2a ,x]~TrustTab[CD45F2a, &quot;Treatment&quot;])$p.value) TrustTabmelt=melt(TrustTab[CD45F2, ], measure.vars=c(&quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustGini&quot;)) tablex=TrustTab[CD45F2, c(&quot;Treatment&quot;, &quot;Growth&quot;, &quot;TrustNclonotypes&quot;, &quot;TrustShannon&quot;, &quot;TrustTop10&quot;, &quot;TrustGini&quot;)] tablexM=melt(tablex) ggplot(tablexM, aes(x=Treatment, y=value, col=Treatment))+geom_boxplot()+geom_point()+facet_wrap(~variable, scales=&quot;free&quot;)+scale_colour_manual(values=c(ColMerge[ ,1], &quot;black&quot;))+theme_bw() Figure 20.6: trust treatment #write.csv(tablexM, file=&quot;nature-tables/4i_trust-treatment.csv&quot;) DT::datatable(tablexM, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 20.6: trust treatment print(&#39;P values PDL1&#39;) ## [1] &quot;P values PDL1&quot; a1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.07565166 0.76182641 0.14827564 0.75673324 print(&#39;P values LY&#39;) ## [1] &quot;P values LY&quot; b1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.06908261 0.73961333 0.23880663 0.73419223 print(&#39;P values PDL1+LY&#39;) ## [1] &quot;P values PDL1+LY&quot; c1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.5623927 0.3281335 0.2388066 0.9380125 #pdf(&quot;figure-outputs/4I_BCR_clonotypes.pdf&quot;, height=8, width=5) ggplot(tablexM, aes(x=Growth, y=value, col=Growth))+geom_boxplot()+geom_point()+facet_wrap(~variable, scales=&quot;free&quot;)+scale_colour_manual(values=c(ColSizeb, &quot;black&quot;))+theme_bw() Figure 20.7: trust growth #dev.off() #par(mfrow=c(2,2)) a1=sapply(yvals, function(x) wilcox.test(TrustTab[CD45F2 ,x]~TrustTab[CD45F2, &quot;Growth&quot;])$p.value) print(&#39;p values here&#39;) ## [1] &quot;p values here&quot; a1 ## TrustNclonotypes TrustShannon TrustGini TrustTop10 ## 0.07072366 0.17037895 0.02795396 0.91880063 20.6 Associate with signature scores Compare to B cell counts and activation status based on RNA-seq B cell signature enrichments scores (from RNA data) bidx=grep(&quot;B cell&quot;, output1$cell_type) idx2=match(TrustTab$SampleID, colnames(output1)) Bsig=output1[bidx, na.omit(idx2)] rownames(Bsig)=output1$cell_type[bidx] Bassoc=sapply(FeatTrust, function(y) sapply(1:nrow(Bsig), function(x) cor( t(Bsig[x, ]),(TrustTab[CD45F, y]), use=&quot;complete&quot;, method=&quot;spearman&quot;))) Bassoc2=sapply(FeatTrust, function(y) sapply(1:nrow(Bsig), function(x) cor.test( t(Bsig[x, ]),(TrustTab[CD45F, y]), use=&quot;complete&quot;, method=&quot;spearman&quot;)$p.value)) rownames(Bassoc)=rownames(Bsig) BassocM=Bassoc BassocM[which(Bassoc2&lt;0.1, arr.ind=T)]=0 #pdf(sprintf(&quot;rslt/TRUST4/association_Bcell_signatures_%s.pdf&quot;, Sys.Date()), width=7, height=6) par(oma=c(3, 0,0,5)) heatmap.2(Bassoc, scale=&quot;none&quot;, trace=&quot;none&quot;, col=RdBu[11:1], main=&quot;correlation&quot;) heatmap.2(BassocM, scale=&quot;none&quot;, trace=&quot;none&quot;, col=RdBu[11:1], main=&quot;significant associations p&lt;0.1 only&quot;) #dev.off() B cell frequencies based on FACS: lx1=match(colnames(Fdata), gsub(&quot;_&quot;, &quot;&quot;, unlist(strsplit( rownames(TrustTab), &quot;_CD45&quot;)))) #pdf(sprintf(&quot;rslt/TRUST4/BCR_association_FACS_%s.pdf&quot;, Sys.Date()), width=8, height=8) par(mfrow=c(2,2)) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustNclonotypes[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustNclonotypes[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;# clonotypes&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2) ,sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustNclonotypes[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustShannon[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustShannon[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Shannon Index&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustShannon[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustGini[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustGini[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Gini Index&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustGini[lx1], TrustTab$TumorID[lx1]) a1=cor.test(as.numeric(t(Fdata[ 9, ])), TrustTab$TrustTop10[lx1], use=&quot;complete&quot;) plot(t(Fdata[ 9, ]), TrustTab$TrustTop10[lx1], xlab=&quot;B cell FACS fraction&quot;, ylab=&quot;Top10&quot;, main=paste(&quot;cor:&quot;, round(a1$estimate, 2), &quot; p:&quot;, round(a1$p.value,2),sep=&quot;&quot;)) text(t(Fdata[ 9, ]), TrustTab$TrustTop10[lx1], TrustTab$TumorID[lx1]) #dev.off() "],["tcr-clonotype-analysis.html", "Chapter 21 TCR clonotype analysis", " Chapter 21 TCR clonotype analysis #Annotation file: Load in an annotation file indicating all the samples, batch effects etc TRUST4path=&quot;../data/TRUST4_TCR/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) matchidx=match(strsplit(TRUST4files, &quot;.tsv&quot;), infoTableFinal$TumorIDnew) #RepNames=paste(infoTableFinal$Rat_ID, tempAnnot$Location, tempAnnot$Fraction, sep=&quot;_&quot;)[matchidx] # load in all the files and save the list to file RatTrust=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrust)=infoTableFinal$SampleID[matchidx] names(RatTrust)=gsub(&quot;Ep&quot;, &quot;CD45&quot;, names(RatTrust)) TRUST4path=&quot;../data/TRUST4_TCR/matchedNormal/&quot; TRUST4files=dir(TRUST4path,&quot;*.tsv&quot;) #FileNames=sapply(strsplit(TRUST4files, &quot;_report.tsv&quot;), function(x) x[1]) FileNames=strsplit(TRUST4files, &quot;*.tsv&quot;) RatTrustNormal=lapply(TRUST4files, function(x) read.delim(paste(TRUST4path, x, sep=&quot;&quot;), sep=&quot;\\t&quot;)) names(RatTrustNormal)=FileNames RatTrust=c(RatTrust, RatTrustNormal) save(RatTrust, file=sprintf(&quot;outputs/Rat_TRUST4_TCR_%s.RData&quot;, Sys.Date())) We will refine the above plot to contain only the CD45 population and assess clonotypes: with at least 2 reads a CDR3aa sequence (not out of frame) appears in TRAC, TRBC TRDC or TRGC NSamples=sapply(RatTrust, nrow) NSamplesCt2=sapply(RatTrust, function(x) length(which(x$X.count&gt;=2))) NSamplesT=sapply(RatTrust, function(x) length(which(x$C%in%c(&quot;TRAC&quot;, &quot;TRBC&quot;, &quot;TRDC&quot;, &quot;TRGC&quot;)))) NSamplesCDR3comp=sapply(RatTrust, function(x) length(which(x$CDR3aa!=&quot;out_of_frame&quot;))) NSamplesCDR3compCt2=sapply(RatTrust, function(x) length(which(x$X.count&gt;=2 &amp;x$C%in%c(&quot;TRAC&quot;, &quot;TRBC&quot;, &quot;TRDC&quot;, &quot;TRGC&quot;)&amp;x$CDR3aa!=&quot;out_of_frame&quot; ))) TableOut=cbind(NSamples, NSamplesCt2,NSamplesT, NSamplesCDR3comp, NSamplesCDR3compCt2) RatTrustB=lapply(RatTrust, function(x) x[which(x$X.count&gt;=2 &amp;x$C%in%c(&quot;TRAC&quot;, &quot;TRBC&quot;, &quot;TRDC&quot;, &quot;TRGC&quot;) &amp; x$CDR3aa!=&quot;out_of_frame&quot; ), ]) for (i in 1:length(RatTrustB)){ RatTrustB[[i]]$frequency=RatTrustB[[i]]$X.count/sum(RatTrustB[[i]]$X.count) } We will assess TCR diversity using the following metrics: ** Shannon index ** The shannon index is computed by: filtering through reads of interest recalculate the fraction such that the new list sums to 1 compute entropy as the sum of log(freq_x)*freq_x amongst all populations x compute the maximum entropy expected for that case -log(1/N), where N is the number of populations present to determine confidence intervals, bootstrap the population (500 times) and compute the expected entropy ** Gini index ** The Gini index can be considered as an inverse of the Shannon index ** Top Clonotypes ** We will see the proportion of the BCR repertoire which is computed using the top 10 frequent clones. This will give an idea of whether there is a clonal expansion # compute values here Div1=sapply(RatTrustB, function(x) -sum(x$frequency*log(x$frequency), na.rm=T)) EDiv=sapply(NSamplesCDR3compCt2, function(x) -log(1/x)) NormDiv=Div1/EDiv ## Shannon index # bootstrap rslt BSrslt=sapply(RatTrustB, function(x) tryCatch(BootstrapShannonIdx(x[ ,1], 1000), error=function(e) c(NA, NA))) # divide the CI by the maximum possible diversity BSCI=t(BSrslt)/EDiv matchidx=match(rownames(BSCI), infoTableFinal$SampleID) df=data.frame(sample=rownames(BSCI), Val=NormDiv, Lower=BSCI[ , 1], Upper=BSCI[ ,2 ], Type=infoTableFinal$Fraction[matchidx], Batch=infoTableFinal$Batch[matchidx], Growth=infoTableFinal$Growth[matchidx]) ## Gini index Gini=sapply(RatTrustB, function(x) gini(x$frequency)) PGini=sapply(RatTrustB, function(x) tryCatch(PermuteGini(x$X.count, 1000), error=function(e) c(NA, NA))) df$Calc=&quot;shannon&quot; df2=data.frame(sample=df$sample, Val=Gini, Lower=PGini[1, ], Upper=PGini[2, ], Calc=&quot;Gini&quot;, Type=df$Type, Batch=df$Batch, Growth=df$Growth) df3=data.frame(sample=rownames(TableOut), Val=TableOut[ ,5], Lower=NA, Upper=NA, Calc=&quot;NClon&quot;, Type=df$Type, Batch=df$Batch, Growth=df$Growth) dfAll=rbind(df, df2, df3) ## Top Clonotypes TopClones=sapply(RatTrustB, function(x) sum(x$frequency[1:5], na.rm = T)) TopClones[which(NSamplesCDR3compCt2==0)]=0 df2$Val=TopClones df2$Calc=&quot;Top10&quot; df2$Lower=TopClones df2$Upper=TopClones dfAll=rbind(dfAll, df2) dfAll$Batch=as.character(dfAll$Batch) dfAll$Batch[grep(&quot;^N_&quot;, rownames(dfAll))]=&quot;match&quot; dfAll$Type[grep(&quot;^N_&quot;, rownames(dfAll))]=&quot;CD45&quot; Summary plots ggplot(dfAll[dfAll$Type==&quot;CD45&quot; &amp; dfAll$Calc==&quot;shannon&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of TCR diversity&quot;) ggplot(dfAll[dfAll$Type==&quot;CD45&quot; &amp; dfAll$Calc==&quot;Gini&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of TCR diversity&quot;) ggplot(dfAll[dfAll$Type==&quot;CD45&quot; &amp; dfAll$Calc==&quot;Top10&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of TCR diversity&quot;) ggplot(dfAll[dfAll$Type==&quot;CD45&quot; &amp; dfAll$Calc==&quot;NClon&quot;, ], aes(x=sample, y=Val, fill=Type))+geom_bar(stat=&quot;identity&quot;)+facet_grid(~Batch, scales=&quot;free_x&quot;, space=&quot;free&quot;)+geom_errorbar( aes(ymin=Lower, ymax=Upper), width=.2)+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ggtitle(&quot;Shannon idx of TCR diversity&quot;) ### Characterisation cohort CharTemp=dfAll[which((dfAll$Batch==1 | dfAll$Batch==&quot;match&quot; ) &amp; dfAll$Calc!=&quot;NClon&quot;), ] a1=sapply(unique(factor(CharTemp$Calc)), function(x) wilcox.test(CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==1], CharTemp$Val[CharTemp$Calc==x &amp; CharTemp$Batch==&quot;match&quot;])$p.value) p=ggplot(CharTemp, aes(x=Batch, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+theme_bw()+geom_jitter(col=&quot;grey&quot;) print(p) CharTemp=dfAll[which((dfAll$Batch==1 | dfAll$Batch==&quot;match&quot; ) &amp; dfAll$Calc==&quot;NClon&quot;), ] ## append with the samples with no TCR samples detected CharTemp=rbind(CharTemp, data.frame(sample=c(&quot;NMU12_LA&quot;, &quot;NMU13_LAU&quot;, &quot;NMU13_LLU&quot;), Val=rep(1,3), Lower=NA, Upper=NA, Type=&quot;CD45&quot;, Batch=1, Growth=NA, Calc=&quot;NClon&quot;)) a1=wilcox.test(CharTemp$Val[CharTemp$Calc==&quot;NClon&quot; &amp; CharTemp$Batch==1], CharTemp$Val[CharTemp$Calc==&quot;NClon&quot; &amp; CharTemp$Batch==&quot;match&quot;])$p.value ggplot(CharTemp, aes(x=Batch, y=Val))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+theme_bw()+geom_jitter(col=&quot;grey&quot;) 21.0.1 Progression cohort CharTemp=dfAll[which((dfAll$Batch==2 | dfAll$Batch==3 ) &amp; dfAll$Calc!=&quot;NClon&quot;), ] a1=sapply(unique(factor(CharTemp$Calc)), function(x) wilcox.test(CharTemp$Val[CharTemp$Calc==x]~CharTemp$Growth[CharTemp$Calc==x])$p.value) p=ggplot(CharTemp, aes(x=Growth, y=Val, col=Growth))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: Gini %s, Shannon %s, Top10 = %s&quot;, round(a1[2],2), round(a1[1],2), round(a1[3],2)))+geom_point()+theme_bw()+scale_colour_manual(values=c(ColSizeb, &quot;black&quot;)) print(p) a1=wilcox.test(CharTemp$Val~CharTemp$Growth)$p.value CharTemp=dfAll[which((dfAll$Batch==2 | dfAll$Batch==3 ) &amp; dfAll$Calc==&quot;NClon&quot;), ] ggplot(CharTemp, aes(x=Growth, y=Val, col=Growth))+geom_boxplot()+facet_grid(~Calc)+ggtitle(sprintf(&quot;wilcox pval: NClon = %s&quot;, round(a1[1],2)))+geom_point()+theme_bw()+scale_colour_manual(values=c(ColSizeb, &quot;black&quot;)) "],["whole-genome-sequencing-mutations.html", "Chapter 22 Whole Genome Sequencing Mutations 22.1 Data 22.2 Annotate the data with human common variants 22.3 Plots 22.4 Comparison with rat mutational datasets 22.5 Overview of the mutations 22.6 Metacore analysis of commonly mutated pathways", " Chapter 22 Whole Genome Sequencing Mutations Whole genome sequencing was performed on XX samples by the new york genome centre. The pipeline involves: Insert information on the NYGC pipeline here 22.1 Data In this section, we load the maf output files and create lists which filter out coding mutations Determine mutational signatures by: Creating bed files with genomic locations of the SNP +- 1 base location Extracting the nucleotide sequence using bedtools Convert all mutations to C &gt; N and T &gt; N to obtain 96 mutational signatures run with single sample SigProfiler to obtain the signature scores Annotate data with common human variants # Load and save for the first time here # redo mafdir=&#39;../data/wholegenome_mutations/maf/&#39; x1=dir(mafdir, &#39;annotated.maf&#39;) #names2=sapply(strsplit( x1,&quot;--&quot;), function(x) x[1]) AllMutWGS=lapply(x1, function(x) read.delim(paste(mafdir, x, sep=&quot;&quot;), sep=&quot;\\t&quot;, skip = 1)) names(AllMutWGS)=sapply(strsplit( x1,&quot;--&quot;), function(x) x[1]) # # ## summary of the number of mutations? print(&#39;no of mutations&#39;) ## [1] &quot;no of mutations&quot; TotCount=lapply(AllMutWGS, nrow) SearchVars=c(&quot;Splice_Site&quot;, &quot;Nonstop_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Missense_Mutation&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Frame_Shift_Del&quot;) AllMutWGS=lapply(AllMutWGS, function(x) {x$VAF&lt;-x$t_alt_count/(x$t_alt_count+x$t_ref_count); x}) AllMutWGScoding=lapply(AllMutWGS, function(x) x[ x$Variant_Classification%in%SearchVars, ]) A2=sapply(AllMutWGScoding, nrow) # Save the combined mutation lists save(AllMutWGS, AllMutWGScoding, file=sprintf(&quot;outputs/WGS_mutations_coding_%s.RData&quot;, Sys.Date())) ## filters on VAF and depth? AllMutWGScoding=lapply(AllMutWGScoding, function(x) {x&lt;-x[which(x$VAF&gt;=0.1 &amp; x$n_ref_count&gt;8 &amp; (x$t_alt_count+x$t_ref_count)&gt;14), ]; x}) #load(&#39;data/wholegenome_mutations/WGS_mutations_coding_2020-10-14.RData&#39;) MeltWGSCoding=melt(AllMutWGScoding, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) MeltWGSCoding$Hum_Gene=SymHum2Rat$HGNC.symbol[match(MeltWGSCoding$Gene_Symbol, SymHum2Rat$RGD.symbol)] MeltWGSCoding$Hum_Gene[which(is.na(MeltWGSCoding$Hum_Gene))]=toupper(MeltWGSCoding$Gene_Symbol[which(is.na(MeltWGSCoding$Hum_Gene))]) MutAllCosmic=lapply(AllMutWGScoding, function(x) x[which(x$Gene_Symbol%in%RatCosmic), ]) MeltCosmic=melt(MutAllCosmic, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) # Find complete numbers here, so we don&#39;t have to go back TotCount=sapply(AllMutWGS, nrow) SearchVars=c(&quot;Splice_Site&quot;, &quot;Nonstop_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Missense_Mutation&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Frame_Shift_Del&quot;) head(TotCount) ## C1R-tumor C2N-tumor C2R1-tumor C2R2-tumor C2R3-tumor C4P-tumor ## 240153 262425 235677 222717 238324 258677 22.1.1 Extract mutation signatures Annotate the files so that the nucleotide codon can be extracted based on the genome file. For this, use all mutations (not just coding ones) See the bash file extract-trinucleotide-forSigProfiler.sh to see the output of this. The output table $fout3 should have 6 columns with the genomic location, the reference and alt allele and codon context. TBed=lapply(AllMutWGScoding, function(x) cbind(as.character(x$Chromosome), x$Start_Position-2, x$End_Position+1, as.character(x$Reference_Allele), as.character(x$Tumor_Seq_Allele2))) TBed=lapply(TBed, function(x) x[which(nchar(x[ ,4])==1), ]) sapply(1:length(TBed), function(x) write.table(TBed[[x]], file=paste(names(TBed)[x], &quot;coding_tricodon.bed&quot;, sep=&quot;_&quot;),col.names=F, row.names = F, sep=&quot;\\t&quot;, quote = F)) ## bedtools command bedtools getfasta -fi ../Genomic_Files/rn6.fa -bed $f -tab -fo $fout f3() { awk &#39;{print $1, $2, $3, $4 ,$5}&#39; &quot;$1&quot;; }; paste &lt;(f3 $f) &lt;(f3 $fout) &gt; $fout2 awk &#39;{if (length($7)==3) print $1, $2, $3, $4, $5, toupper($7)}&#39; $fout2 &gt; $fout3 ## see the bash file extract-trinucleotide-forSigProfiler.sh to see the output of this. Following running the above bash script, we can run the following extract the tri-nucleotide sequence FFiles=dir(&quot;../data/tricodon_mut_sigs/extract_context/&quot;, &quot;*.txt&quot;,full.names=T) OutputList=sapply(FFiles, function(x) FindTriNucleotideContext(x)) TableOut=sapply(1:ncol(OutputList), function(x) unlist(OutputList[3, x])) ## make a plot here # condense the type of mutations here a1=basename(FFiles) a2=sapply(strsplit(a1, &quot;_&quot;), function(x) x[1]) xall=as.character(unlist(OutputList[1, 1])) TestAll=sapply(1:ncol(TableOut), function(x) unlist(by(TableOut[ ,x], xall, sum))) TestAll2=t(TestAll)/colSums(TestAll) rownames(TestAll2)=sapply(a2, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) TestAll2melt=melt(TestAll2) #pdf(&quot;~/Desktop/Frequency_mutations_6types.pdf&quot;, height=5, width=6) ggplot(TestAll2melt, aes(x=Var1, y=value, fill=Var2))+geom_bar(stat=&quot;identity&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))+ylab(&quot;Frequency of Mutation&quot;) Figure 22.1: Frequency of different mutational codons #dev.off() write.csv(TestAll2melt, file=&quot;nature-tables/1j.csv&quot;) TableOut=cbind(as.character(unlist(OutputList[1, 1])), as.character(unlist(OutputList[2, 1])), TableOut) colnames(TableOut)=c(&quot;MutationType&quot;,&quot;Nutrinucleotide&quot;, paste(&quot;BRCA&quot;, a2, sep=&quot;::&quot;)) #write.csv(TableOut, file=&quot;../data/tricodon_mut_sigs/output4SigProfiler-jan2021.csv&quot;, sep = &quot;,&quot;, row.names = F) This is then run in python (sigprofiler) with the following code: module load gcc module load python/3.7.4 python3 import SigProfilerExtractor from sigproSS import spss_pcwag ## (spss uses only vcf files) spss_pcwag.single_sample_pcwag(&quot;output4SigProfiler-jan2021.csv&quot;, output=&quot;output-jan2021&quot;) The results from this analysis are shown below SBSprof=read.delim(&quot;../data/tricodon_mut_sigs/output-jan2021-allsamples/sig_activities.txt&quot;, sep=&quot;\\t&quot;) SBSprofb=SBSprof[ ,-1]/rowSums(SBSprof[ ,-1]) SBSprofb=SBSprofb[ ,-which(colSums(SBSprofb)==0)] rownames(SBSprofb)=SBSprof[ ,1] SBSmelt=melt(cbind(SBSprofb[ , -1], id=rownames(SBSprofb))) SBSsummary &lt;- aggregate(. ~ variable, mean, data=SBSmelt) ggplot(SBSmelt, aes(x=variable, y=value, col=variable))+geom_jitter()+geom_crossbar(data=SBSsummary , aes(ymin = value, ymax = value),size=0.5,col=&quot;black&quot;, width = .7)+theme_bw()+ylab(&quot;Percentage of mutations&quot;) Figure 22.2: Alexandrov mutational signatures write.csv(SBSmelt, file=&quot;nature-tables/Ext1j.csv&quot;) We can see whether any of these associate with tumor size for example: ## Assign with growth data or tumor size? tname=substr(SBSprof$Cancer.Types, 7, 20) idx=sapply(tname, function(x) grep(x, Cdata$WGS)) sizeInfo=Cdata$Tumor.diameter.sac.mm[idx] #par(mfrow=c(2,1)) cor1=cor.test(SBSprofb$SBS32+SBSprofb$SBS11, sizeInfo, use=&quot;complete&quot;) cor2=cor.test(SBSprofb$SBS32[which(SBSprofb$SBS32&gt;0)], sizeInfo[which(SBSprofb$SBS32&gt;0)], use=&quot;complete&quot;) cor3=cor.test(SBSprofb$SBS11[which(SBSprofb$SBS11&gt;0)], sizeInfo[which(SBSprofb$SBS11&gt;0)], use=&quot;complete&quot;) plot(SBSprofb$SBS32+SBSprofb$SBS11, sizeInfo, xlab=&quot;SBS 32 or 11 score&quot;, ylab=&quot;tumor size&quot;, col=ifelse(SBSprofb$SBS11==0, &quot;red&quot;, &quot;blue&quot;), main=sprintf(&quot;association between signature score and size, p=%s&quot;, round(cor1$p.value, 2))) legend(&quot;topleft&quot;,c(paste(&quot;SB32&quot;, round(cor2$p.value,2)), paste(&quot;SB11&quot;,round(cor3$p.value,2))), col=c(&quot;red&quot;, &quot;blue&quot;), lwd=2, pch=19) ## Associations version 2 SBSprofb$Age=Cdata$Time.NMU2Sac.days[sapply(substr(rownames(SBSprofb), 7, 30), function(x) grep(x, Cdata$WGS))] SBSprofb$Cohort=Cdata$Char.Cohort.Batch[sapply(substr(rownames(SBSprofb), 7, 30), function(x) grep(x, Cdata$WGS))] par(mfrow=c(2,2)) plot(SBSprofb$Age,SBSprofb$SBS1, ylab=&quot;Frequency Mut in SBS1&quot;, xlab=&quot;Time NMU2Sac&quot;, main=&quot;SBS1&quot;, col=factor(SBSprofb$Cohort)) plot( SBSprofb$Age, SBSprofb$SBS5, ylab=&quot;Frequency Mut in SBS5&quot;, xlab=&quot;Time NMU2Sac&quot;, main=&quot;SBS5&quot;, col=factor(SBSprofb$Cohort)) plot(SBSprofb$Age, SBSprofb$SBS32+SBSprofb$SBS11, ylab=&quot;SBS 32 or 11 score&quot;, xlab=&quot;tumor size&quot;, col=ifelse(SBSprofb$SBS11==0, &quot;red&quot;, &quot;blue&quot;), main=&quot;SBS11/32&quot;) 22.2 Annotate the data with human common variants ## The following is run independently and saved to fle ## issues with the RnvorV87 pointer when cached # remove sourcing CreateRnor87 ## Append to MeltCosmic? source(&quot;../rscript/CreateRnor87db.R&quot;) AAout=strsplit(as.character(MeltCosmic$HGVSp_Short), &quot;[0-9]+&quot;) AAwt=sapply(AAout, function(x) x[1]) AAmt=sapply(AAout, function(x) x[2]) AAno=regmatches(MeltCosmic$HGVSp_Short, gregexpr(&quot;[[:digit:]]+&quot;, MeltCosmic$HGVSp_Short)) MeltCosmic$AAno=NA MeltCosmic$AAno[which(sapply(AAno, length)==1)]=as.numeric(as.character(unlist(AAno))) FindVarTest=FindHumanAAHomolog(MeltCosmic$Gene_Symbol, AAwt, MeltCosmic$AAno, AAmt) MeltCosmic=cbind(MeltCosmic, FindVarTest) dim(MeltCosmic) save(MeltCosmic, file=sprintf(&quot;outputs/MeltCosmic_coding_genes_WGS_rat_VAFncount%s.RData&quot;, Sys.Date())) #, sep=&quot;\\t&quot;, row.names=F) write.csv(MeltCosmic, file=&quot;nature-tables/SupplementalTable4_AllRatMutations_annotated_w_human_homolog_VAFncount.csv&quot;, row.names = F, quote=F) From this analysis, below are the genes with mutations in known human hotpot mutations in common genes load(&quot;outputs/MeltCosmic_coding_genes_WGS_rat_VAFncount2021-01-11.RData&quot;) Xa=which(MeltCosmic$Gene_Symbol %in% BList$RatGene) Xb=match(paste(MeltCosmic$Gene_Symbol, MeltCosmic$AAno), paste(BList$RatGene,BList$RatAAno)) Xc=match(paste(MeltCosmic$Gene_Symbol, MeltCosmic$AAno), paste(ChangList2$RatGene, ChangList2$RatAAno)) x2=c(which(!is.na(Xb)), which(!is.na(Xc))) BList[(na.omit(Xb)), ] ## Gene AAno AA1 Variant RatGene Sequence HumProt ## 128 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.1 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.2 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.3 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.4 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.5 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 8 BRAF 466 G E Braf QRIGSGSFGTV ENSP00000288602 ## 128.6 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 414 TP53 266 G R Tp53 SGNLLGRNSFE ENSP00000352610 ## RatProt RatAAno RatSequence ## 128 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.1 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.2 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.3 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.4 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.5 ENSRNOP00000022363 12 VVVGAGGVGKS ## 8 ENSRNOP00000014604 411 QRIGSGSFGTV ## 128.6 ENSRNOP00000022363 12 VVVGAGGVGKS ## 414 ENSRNOP00000047840 264 SGNLLGRDSFE ChangList2[(na.omit(Xc)), ] ## Gene AAno AA1 Variant RatGene Sequence HumProt ## 415 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.1 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.2 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 1253 PIK3CA 350 D N Pik3ca NVNIRDIDKIY ENSP00000263967 ## 415.3 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.4 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.5 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 555 BRAF 466 G V Braf QRIGSGSFGTV ENSP00000288602 ## 347 PIK3CA 118 G D Pik3ca LNREIGFAIGM ENSP00000263967 ## 415.6 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 299 TP53 266 G R Tp53 SGNLLGRNSFE ENSP00000352610 ## 69 PIK3CA 542 E K Pik3ca RDPLSEITEQE ENSP00000263967 ## RatProt RatAAno RatSequence ## 415 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.1 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.2 ENSRNOP00000022363 12 VVVGAGGVGKS ## 1253 ENSRNOP00000072496 350 NVNIRDIDKIY ## 415.3 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.4 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.5 ENSRNOP00000022363 12 VVVGAGGVGKS ## 555 ENSRNOP00000014604 411 QRIGSGSFGTV ## 347 ENSRNOP00000072496 118 LNREIGFVIGM ## 415.6 ENSRNOP00000022363 12 VVVGAGGVGKS ## 299 ENSRNOP00000047840 264 SGNLLGRDSFE ## 69 ENSRNOP00000072496 542 RDPLSEITEQE Xb=match(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno), paste(BList$Gene,BList$AAno)) Xc=match(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno), paste(ChangList2$Gene, ChangList2$AAno)) x3=c(which(!is.na(Xb)), which(!is.na(Xc))) x4=unique(c(x2, x3)) DT::datatable(MeltCosmic[x4, c(1,5,6)], rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) BList[(na.omit(Xb)), ] ## Gene AAno AA1 Variant RatGene Sequence HumProt ## 128 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.1 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.2 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.3 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.4 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 128.5 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 8 BRAF 466 G E Braf QRIGSGSFGTV ENSP00000288602 ## 128.6 HRAS 12 G R Hras VVVGAGGVGKS ENSP00000380722 ## 414 TP53 266 G R Tp53 SGNLLGRNSFE ENSP00000352610 ## RatProt RatAAno RatSequence ## 128 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.1 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.2 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.3 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.4 ENSRNOP00000022363 12 VVVGAGGVGKS ## 128.5 ENSRNOP00000022363 12 VVVGAGGVGKS ## 8 ENSRNOP00000014604 411 QRIGSGSFGTV ## 128.6 ENSRNOP00000022363 12 VVVGAGGVGKS ## 414 ENSRNOP00000047840 264 SGNLLGRDSFE ChangList2[(na.omit(Xc)), ] ## Gene AAno AA1 Variant RatGene Sequence HumProt ## 415 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.1 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.2 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 1253 PIK3CA 350 D N Pik3ca NVNIRDIDKIY ENSP00000263967 ## 415.3 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.4 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 415.5 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 555 BRAF 466 G V Braf QRIGSGSFGTV ENSP00000288602 ## 347 PIK3CA 118 G D Pik3ca LNREIGFAIGM ENSP00000263967 ## 1178 ATM 3008 R H Atm NKVAERVLMRL ENSP00000388058 ## 415.6 HRAS 12 G D Hras VVVGAGGVGKS ENSP00000380722 ## 299 TP53 266 G R Tp53 SGNLLGRNSFE ENSP00000352610 ## 69 PIK3CA 542 E K Pik3ca RDPLSEITEQE ENSP00000263967 ## RatProt RatAAno RatSequence ## 415 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.1 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.2 ENSRNOP00000022363 12 VVVGAGGVGKS ## 1253 ENSRNOP00000072496 350 NVNIRDIDKIY ## 415.3 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.4 ENSRNOP00000022363 12 VVVGAGGVGKS ## 415.5 ENSRNOP00000022363 12 VVVGAGGVGKS ## 555 ENSRNOP00000014604 411 QRIGSGSFGTV ## 347 ENSRNOP00000072496 118 LNREIGFVIGM ## 1178 ENSRNOP00000072646 3014 NKVAERVLMRL ## 415.6 ENSRNOP00000022363 12 VVVGAGGVGKS ## 299 ENSRNOP00000047840 264 SGNLLGRDSFE ## 69 ENSRNOP00000072496 542 RDPLSEITEQE And here, we plot the frequency of these different mutations idx=which(!is.na(MeltCosmic$HumAAno)) length(idx) ## [1] 383 Nx=paste(MeltCosmic$Gene[idx], MeltCosmic$AAno[idx]) T2=sort(table(Nx), decreasing = T) #head(T2) ind2=which(T2&gt;1) #pdf(&quot;~/Desktop/Frequency_of_mutations.pdf&quot;, height=6, width=9) barplot(T2[ind2]/31, ylim=c(0, 1), main=&quot;most frequent coding mutations with human homolog&quot;, las=2) Figure 22.3: most frequent mutations #dev.off() ttemp=names(T2[ind2]) Also filter these to breast specific aberrations: CHECK THIS MeltComicB=MeltCosmic[which(MeltCosmic$Gene_Symbol%in%RatBreastCosmic), ] idx=which(!is.na(MeltComicB$HumAAno)) Nx=paste(MeltComicB$Gene[idx], MeltComicB$AAno[idx]) T2a=sort(table(Nx), decreasing = T) #head(T2) head(T2a) ## integer(0) T2b=sort(table(MeltComicB$Gene_Symbol), decreasing = T) head(T2b) ## ## Arid1a Foxa1 Brca2 Flna Pik3ca Tp53 ## 6 5 3 3 3 2 #pdf(&quot;~/Desktop/Frequency_of_mutations.pdf&quot;, height=6, width=9) # par(mfrow=c(1,2)) # barplot(T2a/31, ylim=c(0, 0.2), main=&quot;most frequent BRCA with human homolog&quot;, las=2) # barplot(T2b/31, ylim=c(0, 0.2), main=&quot;most frequent coding BRCA mutations&quot;, las=2) #dev.off() ttemp=names(T2[ind2]) Nx=paste(MeltCosmic$Gene, MeltCosmic$AAno) T2=sort(table(Nx), decreasing = T) ind2=which(T2&gt;1) #pdf(&quot;~/Desktop/Frequency_of_mutations_2.pdf&quot;, height=6, width=9) barplot(T2[ind2]/31, ylim=c(0, 1), main=&quot;most frequent coding mutations &quot;, las=2) #dev.off() tableout=data.frame(gene=names(T2[ind2]), ncount=T2[ind2], freq=T2[ind2]/31, humanHom=ifelse(names(T2[ind2])%in%ttemp, 1, 0)) #write.csv(tableout, file=&quot;nature-tables/Ext1k_maybe.csv&quot;) DT::datatable(tableout, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) We can also use the cosmic mutational database to see whether any of these mutations overlap: (version 92) Cmut=read.delim(&quot;../anntotations/cmc_export.v92.tsv&quot;) Edit the stuff here: Ax1=match(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno), paste(Cmut$GENE_NAME, Cmut$AA_MUT_START)) Ax1 ## [1] NA NA NA NA NA 3579426 NA NA 1934438 ## [10] NA NA NA NA 3182147 NA NA NA NA ## [19] NA 2997088 NA NA NA NA NA NA NA ## [28] NA 1059801 NA NA NA NA NA 2804349 NA ## [37] 4470423 NA NA NA NA NA NA 4131069 NA ## [46] NA NA NA NA NA NA NA NA NA ## [55] 2804349 NA 4470423 NA NA NA NA NA NA ## [64] 1442364 NA NA NA 972952 NA NA NA NA ## [73] NA 2804349 NA NA 4470423 1813967 1225033 NA NA ## [82] NA NA 3408942 NA 536410 NA NA NA NA ## [91] NA NA NA NA NA 2321788 NA NA NA ## [100] NA NA NA NA NA NA NA NA NA ## [109] NA NA NA NA 2321788 3579612 249764 249764 NA ## [118] NA NA NA NA NA NA 2997088 NA NA ## [127] NA NA NA NA NA NA NA NA NA ## [136] NA NA NA 4437142 NA NA NA 329517 NA ## [145] 2997088 NA NA NA NA 2387389 NA NA NA ## [154] NA NA NA NA NA NA NA NA NA ## [163] NA NA 4470675 299229 NA 3947247 NA NA NA ## [172] 1967695 2997088 NA NA NA NA NA NA NA ## [181] NA NA NA 3817808 NA NA NA 4325112 NA ## [190] NA 3579612 NA NA 299229 NA 2997088 NA NA ## [199] NA NA NA NA NA NA NA NA NA ## [208] NA NA NA 3579612 249764 249764 299229 1462810 2997088 ## [217] 1864157 NA NA NA NA 1572878 NA NA NA ## [226] NA NA NA NA 323572 NA NA NA NA ## [235] 2804349 NA 4470423 NA NA NA NA 2997088 NA ## [244] NA NA NA NA NA NA 2321788 NA NA ## [253] 249764 249764 NA 1211561 231932 2997088 1875629 NA NA ## [262] NA NA 535044 NA NA NA NA NA NA ## [271] NA NA NA NA NA 858704 1923136 NA NA ## [280] 1706912 NA NA NA NA 220696 2382160 NA NA ## [289] NA NA NA 3140387 3579612 NA NA NA NA ## [298] NA NA NA NA NA NA 2997088 NA 569243 ## [307] 3182147 NA 1238663 NA NA NA 2779340 NA NA ## [316] 2493470 NA NA 3579612 2804611 NA NA NA NA ## [325] NA NA 3333928 NA 860990 NA NA 2997088 NA ## [334] 1944909 NA NA NA 640765 NA NA NA NA ## [343] NA NA NA NA NA NA NA NA 2804349 ## [352] NA NA NA NA NA NA NA NA NA ## [361] NA 660372 403079 NA NA 219815 NA NA NA ## [370] NA NA NA NA NA NA NA NA 2804349 ## [379] NA NA 2997088 NA NA NA 2065818 NA NA ## [388] NA NA NA 2762883 NA NA NA NA 3277818 ## [397] NA NA NA NA NA 833869 NA NA NA ## [406] NA NA NA NA NA NA 3579612 NA NA ## [415] NA NA 1863647 NA NA NA NA NA 4130777 ## [424] NA NA NA NA NA 2321788 NA NA NA ## [433] NA 2997088 NA NA NA NA NA NA NA ## [442] NA 4239300 1803203 NA NA NA NA 119744 NA ## [451] NA NA NA 2997088 1875594 NA 2169357 NA NA ## [460] NA NA 1480666 NA NA NA NA NA NA ## [469] NA 4253020 NA 2417918 NA NA 4107129 3634329 NA ## [478] 4341899 2107476 NA NA NA NA 3579612 NA 3447720 ## [487] 4470284 NA NA NA NA NA NA NA 1026414 ## [496] NA 1240808 2997088 1875554 1768181 NA NA 3913348 3794827 ## [505] NA NA NA NA NA NA NA NA NA ## [514] NA NA NA NA NA NA NA NA NA ## [523] NA NA 3884698 2997088 NA NA 2854296 NA NA ## [532] 206581 NA NA NA NA NA NA NA NA ## [541] NA NA NA NA NA NA 860979 860989 NA ## [550] 2997088 NA NA 363033 2381738 NA NA NA NA ## [559] 2321788 323180 2603243 249764 NA 3565143 NA NA NA ## [568] NA NA NA NA 1545806 NA 1864218 NA NA ## [577] NA 1550110 NA 3096457 NA NA NA NA NA ## [586] NA NA NA NA NA NA 1813963 NA NA ## [595] 860979 860989 NA NA 2997088 NA NA NA NA ## [604] NA NA NA 4268634 NA NA 3402625 NA NA ## [613] NA NA NA NA NA 1871605 NA NA NA ## [622] NA NA NA 219815 NA NA NA NA NA ## [631] NA NA NA NA 2997088 NA NA NA NA ## [640] NA NA NA NA NA NA NA 2198895 3833218 ## [649] NA NA NA NA NA NA NA NA NA ## [658] NA NA NA NA NA NA 2787457 NA NA ## [667] 219815 NA NA NA NA NA NA NA 3451450 ## [676] NA 4471138 NA NA NA 860979 860989 NA NA ## [685] NA NA NA NA NA NA head(paste(MeltCosmic$HumGene, MeltCosmic$HumAAno)) ## [1] &quot;NCOR2 NA&quot; &quot;NCOR2 1990&quot; &quot;CLIP1 NA&quot; &quot;CLIP1 859&quot; &quot;CXCR4 10&quot; ## [6] &quot;NRG1 209&quot; head(paste(Cmut$GENE_NAME, Cmut$AA_MUT_START)) ## [1] &quot;SYNPO2L 251&quot; &quot;SYNPO2L 669&quot; &quot;SYNPO2L 889&quot; &quot;SYNPO2L 407&quot; &quot;SYNPO2L 593&quot; ## [6] &quot;SYNPO2L 24&quot; tempA=Cmut[ na.omit(Ax1), c(&quot;GENE_NAME&quot;,&quot;Mutation.CDS&quot;, &quot;Mutation.AA&quot;, &quot;CLINVAR_CLNSIG&quot;)] DT::datatable(tempA, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) write.csv(tempA, file=&quot;nature-tables/CosmicMutCensus_mutations.csv&quot;) 22.3 Plots 22.3.1 Quick overview WGS all mutations summary: Look at the overall mutation burden, and the tumor mutational burden, defined as # coding mutations per MB. The following plot lists tumors in increasing size Make plots of: overall types of mutations per sample (ranked by size) correlation between mutation type and size type of mutation? #load(&quot;data/wholegenome_mutations/WGS_mutations_coding.RData&quot;) TabSamples=lapply(AllMutWGScoding, function(x) table(factor(x$Variant_Classification, levels=SearchVars))) TabSamples2=unlist(TabSamples) namidx=sapply(strsplit(names(TabSamples2), &quot;\\\\.&quot;), function(x) x[1]) namidx2=sapply(strsplit(names(TabSamples2), &quot;\\\\.&quot;), function(x) x[2]) namidx3=sapply(namidx, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) TotTabl=data.frame(val=TabSamples2, nam=namidx, variant=namidx2, nam2=namidx3) ## remove 0 samples # searchNo=stack(by(TotTabl$val, TotTabl$variant, sum)) # TotTabl=TotTabl[ which(TotTabl$variant %in% searchNo$ind[which(searchNo$values!=0)]), ] lx1=match(TotTabl$nam2, Cdata$NewID, function(x) tryCatch({x[1]}, error=function(e){NA})) TotTabl$Size=Cdata$Tumor.diameter.sac.mm[lx1] TotTabl=TotTabl[order(TotTabl$Size, TotTabl$val), ] levelNam=unique(TotTabl$nam2) TotTabl$nam2=factor(TotTabl$nam2, levels=levelNam) ##pdf(sprintf(&quot;rslt/WGS/coding_mutation_types_%s.pdf&quot;, Sys.Date()), height=6, width=9) #pdf(&quot;~/Desktop/No_mutations_VAFncount_adjusted_TMB.pdf&quot;, height = 5, width=7) ggplot(TotTabl, aes(x=nam2, y=val/43.423804, fill=variant))+geom_bar(stat=&quot;identity&quot;)+scale_fill_manual(values=c(&quot;black&quot;, brewer.pal(9, &quot;Set1&quot;)))+theme_bw()+theme(axis.text.x=element_text(angle=90))+ylab(&quot;Number of coding mutations/Mb&quot;)+ggtitle(&quot;sorted by increasing tumor size at sac&quot;) Figure 22.4: summary of mutation burden #dev.off() #write.csv(TotTabl, file=&quot;nature-tables/1i.csv&quot;) DT::datatable(TotTabl, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) Figure 22.4: summary of mutation burden We can also see whether any of these correlate with size, but didn’t find associations as shown below: ax1=lapply(sort(SearchVars), function(x) cor.test(TotTabl[TotTabl$variant==x , &quot;val&quot;], TotTabl[TotTabl$variant==x , &quot;Size&quot;], use=&quot;complete&quot;, method=&quot;spearman&quot;)) pvals=sapply(ax1, function(x) x$p.value) cors=sapply(ax1, function(x) x$estimate) ann_text2 &lt;- data.frame(lab=paste(&quot;cor=&quot;, round(cors, 2),&quot;p=&quot;, round(pvals,2),sep=&quot;&quot;), variant=sort(SearchVars), val=1, Size=5) ggplot(TotTabl, aes(x=Size, y=val, col=variant))+geom_point()+facet_wrap(~variant, scale=&quot;free&quot;)+geom_text(data=ann_text2, aes(label=lab)) #dev.off() #MeltWGSCoding=melt(AllMutWGScoding, measure.vars=c(&quot;Tumor_Sample_Barcode&quot;)) 22.3.2 Coding variants &amp; TMB There are a few ways of figuring out the TMB. We can report the number of mutations (missense, insertion/deletion, frameshifts, nonsense) normalise the above value to the known length of coding regions in the rat genome (UCSC exon length 43,423,804) plot of TMB vs objective response rate: there is no true relationship between final tumor size and mutational burden. Could also be confounded by subclonality searchThese=c(&quot;Missense_Mutation&quot;, &quot;Nonsense_Mutation&quot;, &quot;Frame_Shift_Del&quot;, &quot;Frame_Shift_Ins&quot;, &quot;Nonstop_Mutation&quot;) NVar2=TotTabl[TotTabl$variant%in%searchThese, ] Ntot=by(NVar2$val, NVar2$nam, sum) # check this is unique based on the location Ntot2=stack(Ntot) colnames(Ntot2)[1]=&quot;NCodingMut&quot; Ntot2$TMB=Ntot2$NCodingMut/43.423804 TotMut=sapply(AllMutWGS, nrow) Ntot2$TotalMut=TotMut[match(Ntot2$ind, names(TotMut))] Ntot2$Tum.size=TotTabl$Size[match(Ntot2$ind, TotTabl$nam)] Ntot2=Ntot2[order(Ntot2$Tum.size), ] #Ntot2$normCov=Ntot2$values/43.423804 Ntot2$NsynFreq=Ntot2$NCodingMut/Ntot2$TotalMut Ntot2$ID2=sapply(Ntot2$ind, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) Ntot2=Ntot2[order(Ntot2$Tum.size), ] IDfact=Ntot2$ID2 Ntot2$cohort=Cdata$Char.Cohort.Batch[match(Ntot2$ID2, Cdata$NewID)] Ntot2melt=melt(Ntot2) Ntot2melt$ID2=factor(Ntot2melt$ID2, levels=IDfact) #pdf(sprintf(&quot;~/Desktop/frequency_mutational_types_VAF_ncount#2_%s.pdf&quot;, Sys.Date()), height=10, width=6) ggplot(Ntot2melt, aes(x=ID2, y=value, col=variable))+geom_bar(stat=&quot;identity&quot;)+facet_grid(variable~., scale=&quot;free_y&quot;)+ theme_bw()+theme(axis.text.x=element_text(angle=90)) Figure 22.5: summary of mutational burden? #dev.off() write.csv(Ntot2melt, file=&quot;nature-tables/1i_maybe.csv&quot;) ## As a metric for TMB, comapre the number of mutations to the covered genome Calculate whether there is an association of TMB with cohort type: Ntot2melt$size2=Cdata$Tumor.diameter.sac.mm[match(Ntot2melt$ID2, Cdata$NewID)] ax1=lapply(sort(SearchVars), function(x) cor.test(TotTabl[TotTabl$variant==x , &quot;val&quot;], TotTabl[TotTabl$variant==x , &quot;Size&quot;], use=&quot;complete&quot;, method=&quot;spearman&quot;)) pvals=sapply(ax1, function(x) x$p.value) cors=sapply(ax1, function(x) x$estimate) ## FIGURE OUT WHAT&quot;S WRONG # # p value calculation: figure out the latency and penetrance # pvalOutputs=sapply(c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;,&quot;Tum.size&quot;, # &quot;NsynFreq&quot;) , function(x) t.test(Ntot2[ Ntot2$cohort!=&quot;cohort-2&quot;,x]~ Ntot2$cohort[Ntot2$cohort!=&quot;cohort-2&quot;])$p.value) # # cohort size calculation # corOutputs=sapply(c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, # &quot;NsynFreq&quot;) , function(x) cor.test(Ntot2[ ,x], Ntot2$Tum.size)$p.value) # ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(pvalOutputs, 2)), val=1, Size=5, cohort=&quot;latency-4&quot;, # variable=c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, &quot;Tum.size&quot;,&quot;NsynFreq&quot;)) ggplot(Ntot2melt, aes(x=cohort, y=value, col=cohort))+geom_boxplot()+geom_point()+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))#+geom_text(data=ann_text2, aes(label=lab, x=1, y=0)) Figure 22.6: assoc of mutations with cohort # ann_text2 &lt;- data.frame(lab=paste(&quot;p=&quot;, round(corOutputs, 2)), val=1, Size=5, cohort=&quot;latency-4&quot;, # variable=c(&quot;NCodingMut&quot;, &quot;TMB&quot;, &quot;TotalMut&quot;, # &quot;NsynFreq&quot;)) ggplot(Ntot2melt, aes(x=size2, y=value, col=cohort))+geom_point()+facet_wrap(~variable, scale=&quot;free_y&quot;)+theme_bw()+theme(axis.text.x=element_text(angle=90))#+geom_text(data=ann_text2, aes(label=lab, x=10, y=0)) #dev.off() write.csv(Ntot2melt, file = &quot;nature-tables/Ext1h-i.csv&quot;) # To obtain an idea of the coverage: Using bedtools and samtools here, counting only &quot;propoet pairs&quot; with maping quality greater than 30 see (https://www.biostars.org/p/11105/) samtools view -u -q 30 -f 0x2 aln.bam | coverageBed -abam stdin -b exons.bed &gt; exons.bed.proper.q30.coverage 22.4 Comparison with rat mutational datasets 22.4.1 Sites which are commonly mutated? Could this be a variant (SD strain “rsSNP”) or is it actually a mutation? Variants were annotated with snpeff. Raw data from this was obtained from https://www.biorxiv.org/content/10.1101/412924v1.full harlanRats=read.vcfR(&quot;~/Desktop/carlos_study_files/allChr.allSamps.90DR2.maf01.hweE7.noIBD.HarlanOnly.vcf.gz&quot;) harlanRats@fix[ ,1]=paste(&quot;chr&quot;, harlanRats@fix[ ,1], sep=&quot;&quot;) harlanRats@fix[ ,3]=paste(&quot;H&quot;, harlanRats@fix[ ,3], sep=&quot;.&quot;) harlanRats@meta=harlanRats@meta[-grep(&quot;##contig&quot;,harlanRats@meta )] # figure out the genotype distribution GT=sapply(1:nrow(harlanRats@gt), function(x) table(factor(harlanRats@gt[x, -1],levels=c(&quot;0/0&quot;,&quot;0/1&quot;,&quot;1/1&quot;)))) GT2=paste(GT[1, ], GT[2, ], GT[3, ], sep=&quot;,&quot;) GT3=paste(GT[1, ]/2281, GT[2, ]/2281, GT[3, ]/2281, sep=&quot;,&quot;) GenotypeS=cbind(FORMAT=&quot;GT&quot;, Annot=c(&quot;0/0,0/1,1/1&quot;), GT2, GT3 ) harlanRats@gt=GenotypeS ## save this to file or something write.vcf(harlanRats, file=&quot;~/Desktop/dbSNP_info/harlan_snps_mod_1-5-2020.vcf.gz&quot;) # loading the charles river rat snp sites CRRats=read.vcfR(&quot;~/Desktop/dbSNP_info/charles_river_200Ksnps.gz&quot;) CRRats@fix[ ,1]=paste(&quot;chr&quot;, CRRats@fix[ ,1], sep=&quot;&quot;) CRRats@fix[ ,3]=paste(&quot;CR&quot;, CRRats@fix[ ,3], sep=&quot;.&quot;) CRRats@meta=CRRats@meta[-grep(&quot;##contig&quot;,CRRats@meta )] crGT=sapply(1:nrow(CRRats@gt), function(x) table(factor(CRRats@gt[x, -1],levels=c(&quot;0/0&quot;,&quot;0/1&quot;,&quot;1/1&quot;)))) crGT2=paste(crGT[1, ], crGT[2, ], crGT[3, ], sep=&quot;,&quot;) crGT3=paste(crGT[1, ]/1780, crGT[2, ]/1780, crGT[3, ]/1780, sep=&quot;,&quot;) GenotypeS=cbind(FORMAT=&quot;GT&quot;, Annot=c(&quot;0/0,0/1,1/1&quot;), crGT2, crGT3 ) CRRats@gt=GenotypeS write.vcf(CRRats, file=&quot;~/Desktop/dbSNP_info/charlesRiver_snps_mod_1-5-2020.vcf.gz&quot;) Note that the nihRats package may not be required here. We probably just want the harlan snps # loading known list of rat snp sites nihRats=read.vcfR(&quot;../anntotations/rat_10116_00-All.wchr.SDsort.vcf.gz&quot;) #nihRats@fix[ ,1]=paste(&quot;chr&quot;, nihRats@fix[ ,1], sep=&quot;&quot;) r=regexpr(&quot;[a-z]+_[a-z]+&quot;,nihRats@fix[ ,8]) #ANN=[A-Z]\\\\| ModType=rep(NA, length(nihRats@fix[ ,8])) ModType[r!=-1]=regmatches(nihRats@fix[ ,8], r) #ModType=substr(ModType, 7, 25) # Harlan samples harlanRats=read.vcfR(&quot;../anntotations/dbSNP/harlan_snps_mod_1-5-2020.SDsort.vcf.gz&quot;) GT3=crGT3=1-as.numeric(sapply(strsplit(harlanRats@gt[ ,4], &quot;,&quot;), function(x) x[1])) r=regexpr(&quot;ANN=[A-Z]\\\\|[a-z]+_[a-z]+&quot;, harlanRats@fix[ ,8]) HarType=rep(NA, length(harlanRats@fix[ ,8])) HarType[r!=-1]=regmatches(harlanRats@fix[ ,8], r) HarType=substr(HarType, 7, 25) # charles river samples CRRats=read.vcfR(&quot;../anntotations/dbSNP/charlesRiver_snps_mod_1-5-2020.SDsort.vcf.gz&quot;) crGT3=1-as.numeric(sapply(strsplit(CRRats@gt[ ,4], &quot;,&quot;), function(x) x[1])) r=regexpr(&quot;ANN=[A-Z]\\\\|[a-z]+_[a-z]+&quot;, CRRats@fix[ ,8]) CRType=rep(NA, length(CRRats@fix[ ,8])) CRType[r!=-1]=regmatches(CRRats@fix[ ,8], r) CRType=substr(CRType, 7, 25) # This is just a plot that compares the different databases. ## Look at the overlap between all the databases: NIHr=paste(nihRats@fix[ ,1], nihRats@fix[ ,2]) harr=paste(harlanRats@fix[ ,1], harlanRats@fix[ ,2]) crr=paste(CRRats@fix[ ,1], CRRats@fix[ ,2]) # overview of the overlaps venn(list(NIH=NIHr, harlan=harr, CR=crr)) ## Annotate the above variants for protein coding regions first, then narrow down to known AllLevels=unique(c(HarType, CRType, ModType)) allTypes=rbind(table(factor(ModType, levels=AllLevels)), table(factor(HarType, levels=AllLevels)), table(factor(CRType, levels = AllLevels))) rownames(allTypes)=c(&quot;NIH&quot;, &quot;harlan&quot;, &quot;CR&quot;) allTypesNorm=allTypes/rowSums(allTypes) t2=melt(allTypesNorm) ggplot(t2[which(t2$value&lt;0.04), ], aes(x=Var1, y=value, fill=Var2))+geom_bar(stat = &quot;identity&quot;)+ylab(&quot;frequency snp type&quot;)+xlab(&quot;dataset&quot;) SearchVars=c(&quot;missense_variant&quot;,&quot;stop_lost&quot;, &quot;stop_gained&quot;, &quot;initiator_codon&quot;, &quot;start_lost&quot;, &quot;frameshift_variant&quot;) NIHr2=NIHr[which(ModType%in%SearchVars)] harr2=harr[which(HarType%in%SearchVars)] crr2=crr[which(CRType%in%SearchVars)] venn(list(NIH=NIHr2, harlan=harr2, CR=crr2)) mtext(&quot;any coding variant&quot;, side=3) ## Genes affected r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, harlanRats@fix[which(HarType%in%SearchVars),8]) codhrgrp=rep(NA, length(which(HarType%in%SearchVars))) codhrgrp[r!=-1]=regmatches(harlanRats@fix[which(HarType%in%SearchVars),8], r) codhrgrp=substr(codhrgrp, 1, nchar(codhrgrp)-8) r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, CRRats@fix[which(CRType%in%SearchVars),8]) codcrgrp=rep(NA, length(which(CRType%in%SearchVars))) codcrgrp[r!=-1]=regmatches(CRRats@fix[which(CRType%in%SearchVars),8], r) codcrgrp=substr(codhrgrp, 1, nchar(codcrgrp)-8) r=regexpr(&quot;[A-Za-z0-9\\\\.]+\\\\|ENSRNOG&quot;, nihRats@fix[which(ModType%in%SearchVars),8]) codnihgrp=rep(NA, length(which(ModType%in%SearchVars))) codnihgrp[r!=-1]=regmatches(nihRats@fix[which(ModType%in%SearchVars),8], r) codnihgrp=substr(codnihgrp, 1, nchar(codnihgrp)-8) venn(list(NIH=codnihgrp, harlan=codhrgrp, CR=codcrgrp)) mtext(&quot;any cosmic coding variant&quot;, side=3) ## Look for Cosmic specific genes codcrgrp2=codcrgrp[codcrgrp%in%RatCosmic] codhrgrp2=codhrgrp[codhrgrp%in%RatCosmic] codnihgrp2=codnihgrp[codnihgrp%in%RatCosmic] #c(RatBreastCosmic, codhrgrp2, &quot;Tert&quot;, &quot;Atm&quot;)] Look at the distribution of mutations: Whole genome 1188 genes in more than 2 animals (1435 in at least 2) 59 variants were identified as population variant in Harlan 47 in charles river (6 are novel in this cohort only) Cosmic genes: 42 sites which have mutations in more than 2 animals 50 sites in more than 1 animal 5 sites which have been identified in GWAS studies of harlan rats. On average, the variant is found at a frequency of ~15%. The CR set, these variants appear in 50% of the population 4 of the 5 rats from above were identified in 0 sites in the nih dbSNP database for rats # Check TGFBr polymorphisms: r=grep(&quot;Tgfb&quot;, harlanRats@fix[,8]) harlanRatsTgfb=harlanRats[r] write.vcf(harlanRatsTgfb, file=&quot;~/Desktop/harlanRats_Tgfb.vcf.gz&quot;) r=grep(&quot;Tgfb&quot;, CRRats@fix[,8]) CRRatsTgfb=CRRats[r] write.vcf(CRRatsTgfb, file=&quot;~/Desktop/CRRats_Tgfb.vcf.gz&quot;) r=grep(&quot;Tgfb&quot;, nihRats@fix[,8]) nihRatsTgfb=nihRats[r] write.vcf(nihRatsTgfb, file=&quot;~/Desktop/nih_Tgfb.vcf.gz&quot;) Here, compare the frequencies of the most common mutations in our population with those reported in the harlan and charles river data-bases: filter out mutatations occuring in 2+ samples Nsamp=1 ## Firstly whole genome lx1=table(paste(MeltWGSCoding$Chromosome, MeltWGSCoding$Start_Position)) lx1=sort(lx1, decreasing=T) hist(lx1) length(which(lx1&gt;Nsamp)) ## [1] 1346 WGSList=names(lx1)[which(lx1&gt;Nsamp)] WGSList=strsplit(WGSList, &quot; &quot;) WGSList=data.frame(chr=sapply(WGSList, function(x) x[1]), pos=sapply(WGSList, function(x) x[2]), freq=lx1[which(lx1&gt;Nsamp)]) WGSList$gene=as.character(MeltWGSCoding$Gene_Symbol[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$AA=as.character(MeltWGSCoding$HGVSp_Short[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$VariantClass=as.character(MeltWGSCoding$Variant_Classification[match(WGSList[ ,2], MeltWGSCoding$Start_Position)]) WGSList$Cosmic=ifelse(WGSList$gene%in%RatCosmic, 1, 0) ## Secondly, cosmic specific genes ## WGSList midx=match(WGSList$freq.Var1, paste(harlanRats@fix[ ,1], harlanRats@fix[ ,2], sep=&quot; &quot;)) WGSList$HarlanFreq=GT3[midx] midx=match(WGSList$freq.Var1, paste(nihRats@fix[ ,1], nihRats@fix[ ,2], sep=&quot; &quot;)) WGSList$rsID=nihRats@fix[midx, 3] ## CR midx=match(WGSList$freq.Var1, paste(CRRats@fix[ ,1], CRRats@fix[ ,2], sep=&quot; &quot;)) WGSList$CRFreq=crGT3[midx] WGSplot=melt(WGSList[ ,c(&quot;freq.Freq&quot;, &quot;gene&quot;, &quot;VariantClass&quot;, &quot;HarlanFreq&quot;, &quot;CRFreq&quot;, &quot;Cosmic&quot;)], measure.vars = c(&quot;HarlanFreq&quot;, &quot;CRFreq&quot;)) WGSplot=WGSplot[-which(is.na(WGSplot$value)), ] ggplot(WGSplot, aes(x=freq.Freq/16, y=value, col=VariantClass, label=WGSplot$gene))+facet_grid(~variable)+geom_point()+ geom_text(size=(WGSplot$Cosmic+3), col=&quot;black&quot;, nudge_y=0.01)+xlab(&quot;Cohort frequency&quot;)+ylab(&quot;Database frequency&quot;)+theme_bw()+theme(legend.position=&quot;bottom&quot;)+ggtitle(&quot;all genes compared to Harlan Frequencies&quot;) DT::datatable(WGSplot[WGSplot$Cosmic==1, ],class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) 22.5 Overview of the mutations 22.5.1 All mutations SNPs are removed from this analysis: based on frequencies in the harlan cohort Color codes: black: pink: green: blue: palette(brewer.pal(9, &quot;Set1&quot;)) Nmut=86 ## was previously 92: this appears at least 17 times rmHarlanSNP=WGSList[which(!is.na(WGSList$HarlanFreq)), ] x1a=which(MeltWGSCoding$Gene_Symbol%in%rmHarlanSNP$gene &amp; MeltWGSCoding$Start_Position%in%rmHarlanSNP$pos) MeltWGSCodingB=MeltWGSCoding[-x1a, ] rGeneOut=acast(MeltWGSCodingB[ ,c(&quot;Gene_Symbol&quot;, &quot;L1&quot;, &quot;Variant_Classification&quot;)], L1~Gene_Symbol, value.var=&quot;Variant_Classification&quot;, fun.aggregate=function(x) paste(x, collapse = &quot;, &quot;)) mxl=unique(as.vector(rGeneOut)) rGeneOut2=rGeneOut rGeneOut2[grep(&quot;Nonsense&quot;,rGeneOut2)]=3 rGeneOut2[grep(&quot;Frame_Shift&quot;,rGeneOut2)]=2 rGeneOut2[grep(&quot;Missense_&quot;, rGeneOut2)]=1 rGeneOut2[grep(&quot;Splice_&quot;, rGeneOut2)]=4 rGeneOut2[which(rGeneOut2==&quot;&quot;)]=0 rGeneOut2=apply(rGeneOut2, 2, as.numeric) rownames(rGeneOut2)=rownames(rGeneOut) #get rid of genes which are associated with Olfactory receptors, AABR etc mutations rmThese=c(&quot;^AABR&quot;, &quot;^Olr&quot;, &quot;^LOC&quot;, &quot;^AC[0-9]+&quot;, &quot;^RGD&quot;, &quot;^Rpl&quot;, &quot;^1700&quot;, &quot;^RT1&quot;, &quot;^ENSRNOG&quot;, &quot;^Vom2&quot;) rmList=unlist(sapply(rmThese, function(x) grep(x, colnames(rGeneOut2)))) rGeneOut2=rGeneOut2[ ,-rmList] GeneList=colSums(sign(rGeneOut2), na.rm=T) samp2=rowSums(sign(rGeneOut2), na.rm=T) rGeneOut2=rGeneOut2[ order(samp2, decreasing=T),] topN=names(sort(GeneList, decreasing=T)[1:Nmut]) # do a plot of the top 30 most common mutations tempx=rGeneOut2[ ,topN] a2=heatmap(tempx, col=c(&quot;white&quot;, 1:9), scale=&quot;none&quot;, main=&quot;all mutations in cosmic&quot;) RowSC=ifelse(colnames(tempx)%in% c(RatCosmic, as.character(AllCancerPathwayGenes)), &quot;black&quot;, &quot;white&quot;) heatmap.2(tempx, Rowv = NA, Colv = NA,scale=&quot;none&quot;, trace=&quot;none&quot;, col=c(&quot;white&quot;, 1:4), ColSideColors=RowSC) # check if any of these are hotspot mutations Hotspots=MeltCosmic[which(!is.na(MeltCosmic$HumSequence)==T), ] head(Hotspots) ## [1] Gene_Symbol Entrez_Gene_Id ## [3] Center NCBI_Build ## [5] Chromosome Start_Position ## [7] End_Position Strand ## [9] Variant_Classification Variant_Type ## [11] Reference_Allele Tumor_Seq_Allele1 ## [13] Tumor_Seq_Allele2 dbSNP_RS ## [15] dbSNP_Val_Status Matched_Norm_Sample_Barcode ## [17] Match_Norm_Seq_Allele1 Match_Norm_Seq_Allele2 ## [19] Tumor_Validation_Allele1 Tumor_Validation_Allele2 ## [21] Match_Norm_Validation_Allele1 Match_Norm_Validation_Allele2 ## [23] Verification_Status Validation_Status ## [25] Mutation_Status Sequencing_Phase ## [27] Sequence_Source Validation_Method ## [29] Score BAM_file ## [31] Sequencer t_alt_count ## [33] t_ref_count n_alt_count ## [35] n_ref_count HGVSp_Short ## [37] VAF variable ## [39] value L1 ## &lt;0 rows&gt; (or 0-length row.names) hotspotLocExtract=function(amat){ HList=sapply(1:nrow(Hotspots), function(i) ifelse(amat[match(Hotspots$L1[i], rownames(amat)),match(Hotspots$Gene_Symbol[i], colnames(amat))]&gt;0, paste(match(Hotspots$L1[i], rownames(amat)),match(Hotspots$Gene_Symbol[i], colnames(amat))), &quot;0 0&quot;)) List2=strsplit(as.character(HList), &quot; &quot;) Xcord=na.omit(as.numeric(sapply(List2, function(x) x[1]))) Ycord=na.omit(as.numeric(sapply(List2, function(x) x[2]))) return(list(X=Xcord, Y=Ycord)) } ## top 90 mutations a2=heatmap.2(sign(tempx), trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;grey&quot;)) tempxb=tempx[a2$rowInd, a2$colInd] hotspot1b=hotspotLocExtract(tempxb) rownames(tempxb)=Cdata$NewID[sapply(rownames(tempxb), function(x) grep(x, Cdata$WGS))] GeneList=unique(Hotspots$Gene_Symbol) Hotspots$Gene_Symbol ## character(0) tempy=rGeneOut2[ ,match(GeneList, colnames(rGeneOut2))] #a2=heatmap.2(sign(tempy), trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;grey&quot;)) #tempyb=tempy[a2$rowInd, a2$colInd] #hotspot2=hotspotLocExtract(tempyb) #rownames(tempyb)=Cdata$NewID[sapply(rownames(tempyb), function(x) grep(x, Cdata$WGS))] ##cosmic genes x1=which(colnames(rGeneOut2)%in%RatCosmic) tempz=rGeneOut2[ ,x1] a2=heatmap.2(sign(tempz), trace=&quot;none&quot;, col=c(&quot;white&quot;, 1:4)) tempzb=tempz[a2$rowInd, a2$colInd] hotspotzb=hotspotLocExtract(tempzb) x2=which(colSums(sign(tempzb))==1) tempz2=tempzb[ , -x2] hotspotzb2=hotspotLocExtract(tempz2) rownames(tempzb)=Cdata$NewID[sapply(rownames(tempzb), function(x) grep(x, Cdata$WGS))] rownames(tempz2)=Cdata$NewID[sapply(rownames(tempz2), function(x) grep(x, Cdata$WGS))] topCOSMIC=colnames(tempz2) save(topN, topCOSMIC, file=&quot;outputs/genes-selected-common-WGX-mutations.RData&quot;) #x3=table(colSums(rGeneOut2)) write.csv(rGeneOut[ , x1], file=&quot;nature-tables/1k-mutations.csv&quot;) Note that in this table, the distribution of samples with mutations is as follows: 2695, 591, 289, 282, 131, 70, 45, 39, 40, 23, 15, 20, 19, 8, 8, 18, 10, 14, 5, 4, 14, 8, 6, 6, 1, 4, 8, 3, 2, 4, 1, 1, 1, 1, 1, 1 The number of genes which have shared mutations in 10 or more samples is: 4622, which is why we have use these values here. The number of genes which are cosmic associated are: 221 and the number which appear in more than 1 sample is 82. These genes are tabulated below: (nice figures generated here). ### keep these values top90genes=colnames(rGeneOut2) #pdf(sprintf(&quot;~/Desktop/summary_mutations_top90_human_homology_%s.pdf&quot;, Sys.Date()), width=14, height=7) hotspot1b ## $X ## [1] 19 9 9 6 8 7 11 11 13 13 13 12 12 24 24 22 22 23 23 4 4 21 21 21 18 ## [26] 16 16 16 17 17 17 30 30 5 5 15 14 25 25 25 31 31 31 27 27 27 27 28 28 28 ## [51] 28 3 3 3 1 2 2 2 10 10 20 20 29 29 26 26 ## attr(,&quot;na.action&quot;) ## [1] 2 3 4 5 6 7 8 9 13 14 15 16 17 18 19 21 22 23 ## [19] 24 25 26 28 29 30 31 32 33 34 35 36 37 38 40 42 43 44 ## [37] 45 46 48 49 50 51 53 55 56 57 58 59 61 62 63 64 65 67 ## [55] 68 69 70 72 73 74 75 76 77 78 79 80 81 82 83 85 86 87 ## [73] 88 89 90 91 92 93 94 96 97 98 99 101 102 103 104 105 106 107 ## [91] 109 110 111 112 113 115 116 117 118 119 120 121 122 123 125 128 129 130 ## [109] 132 133 135 136 137 138 140 141 142 143 144 145 146 147 148 149 150 151 ## [127] 153 154 156 157 158 160 161 162 163 164 165 166 167 168 169 171 172 174 ## [145] 175 176 177 179 180 181 182 183 184 186 187 189 190 191 192 193 194 195 ## [163] 196 197 198 199 201 203 204 206 207 208 209 210 211 212 213 214 216 217 ## [181] 218 219 220 221 222 223 225 227 229 231 232 233 234 235 236 237 238 240 ## [199] 241 242 243 244 245 246 247 248 249 250 251 253 254 255 257 258 259 260 ## [217] 262 263 264 265 266 268 269 270 271 272 273 274 277 278 281 282 283 284 ## [235] 286 287 288 289 290 291 292 293 296 297 298 299 300 302 303 304 306 307 ## [253] 308 309 310 311 312 313 314 315 316 317 318 319 320 321 323 324 326 327 ## [271] 328 329 330 332 333 334 335 336 338 339 341 342 343 344 345 346 347 348 ## [289] 349 350 353 354 356 357 358 360 361 362 363 364 365 366 367 368 369 370 ## [307] 371 372 374 375 376 378 379 380 381 382 383 ## attr(,&quot;class&quot;) ## [1] &quot;omit&quot; ## ## $Y ## [1] 7 78 1 78 78 78 78 7 78 7 1 78 1 78 1 78 1 78 1 7 1 78 7 1 7 ## [26] 78 7 1 78 7 1 78 7 78 1 78 78 78 7 1 78 1 73 78 7 1 73 78 7 7 ## [51] 1 78 7 1 78 78 7 1 78 7 7 1 78 7 78 7 ## attr(,&quot;na.action&quot;) ## [1] 2 3 4 5 6 7 8 9 13 14 15 16 17 18 19 21 22 23 ## [19] 24 25 26 28 29 30 31 32 33 34 35 36 37 38 40 42 43 44 ## [37] 45 46 48 49 50 51 53 55 56 57 58 59 61 62 63 64 65 67 ## [55] 68 69 70 72 73 74 75 76 77 78 79 80 81 82 83 85 86 87 ## [73] 88 89 90 91 92 93 94 96 97 98 99 101 102 103 104 105 106 107 ## [91] 109 110 111 112 113 115 116 117 118 119 120 121 122 123 125 128 129 130 ## [109] 132 133 135 136 137 138 140 141 142 143 144 145 146 147 148 149 150 151 ## [127] 153 154 156 157 158 160 161 162 163 164 165 166 167 168 169 171 172 174 ## [145] 175 176 177 179 180 181 182 183 184 186 187 189 190 191 192 193 194 195 ## [163] 196 197 198 199 201 203 204 206 207 208 209 210 211 212 213 214 216 217 ## [181] 218 219 220 221 222 223 225 227 229 231 232 233 234 235 236 237 238 240 ## [199] 241 242 243 244 245 246 247 248 249 250 251 253 254 255 257 258 259 260 ## [217] 262 263 264 265 266 268 269 270 271 272 273 274 277 278 281 282 283 284 ## [235] 286 287 288 289 290 291 292 293 296 297 298 299 300 302 303 304 306 307 ## [253] 308 309 310 311 312 313 314 315 316 317 318 319 320 321 323 324 326 327 ## [271] 328 329 330 332 333 334 335 336 338 339 341 342 343 344 345 346 347 348 ## [289] 349 350 353 354 356 357 358 360 361 362 363 364 365 366 367 368 369 370 ## [307] 371 372 374 375 376 378 379 380 381 382 383 ## attr(,&quot;class&quot;) ## [1] &quot;omit&quot; par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempxb), col=c(&quot;white&quot;, 1:3), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempxb)), colnames(tempxb), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempxb)), rownames(tempxb), las=2, cex.axis=0.7) Figure 22.7: summary of mutations acccording to frequency cosmic # text(na.omit(hotspot1b$Y-1)/(ncol(tempxb)-1), na.omit(hotspot1b$X-1)/(nrow(tempxb)-1) , &quot;*&quot;) # legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) # mtext(&quot;top 90 mutations&quot;, side=3, line=-1, outer=T) Below is the above list refined according to cosmic specifc genes, and listing # par(mar = c(4, 8, 4, 2), xpd = TRUE) # image(t(tempyb), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) # axis(1, at=seq(0, 1, length=ncol(tempyb)), colnames(tempyb), las=2, cex.axis=0.5) # axis(2, at=seq(0, 1, length=nrow(tempyb)), rownames(tempyb), las=2, cex.axis=0.5) # text(na.omit(hotspot2$Y-1)/(ncol(tempyb)-1), na.omit(hotspot2$X-1)/(nrow(tempyb)-1) , &quot;*&quot;) # legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) # mtext(&quot; &#39;Hotspot&#39; mutations only&quot;, side=3, line=-1, outer=T) ## Plot by picking out cancer related genes #pdf(&quot;figure-outputs/1k_redo.pdf&quot;, height=7.5, width=17.3) palette(brewer.pal(8, &quot;Set1&quot;)) par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempzb), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempzb)), colnames(tempzb), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempzb)), rownames(tempzb), las=2, cex.axis=0.7) #text(na.omit(hotspotzb$Y-1)/(ncol(tempzb)-1), na.omit(hotspotzb$X-1)/(nrow(tempzb)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;Cancer related genes&quot;, side=3, line=-1, outer=T) #dev.off() par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempz2), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempz2)), colnames(tempz2), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempz2)), rownames(tempz2), las=2, cex.axis=0.7) #text(na.omit(hotspotzb2$Y-1)/(ncol(tempz2)-1), na.omit(hotspotzb2$X-1)/(nrow(tempz2)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) #dev.off() Extract breast-cancer related information: OtherBreast=c(&quot;Kmt2d&quot;, &quot;Kmt2c&quot;, &quot;Gata3&quot;, &quot;Pten&quot;) X2=rGeneOut2[, na.omit(match(c(RatBreastCosmic, OtherBreast), colnames(rGeneOut2)))] rownames(X2)=Cdata$NewID[sapply(rownames(X2), function(x) grep(x, Cdata$WGS))] X2b=X2[order(X2[ ,1], X2[ ,2], X2[ ,7], X2[ ,17], X2[ ,11]),] heatmap.2(X2b, col=c(&quot;white&quot;, 1:4), scale=&quot;none&quot;, trace=&quot;none&quot;, sepcolor=&quot;grey85&quot;, colsep=c(1:ncol(X2b)), rowsep=c(1:nrow(X2b)), sepwidth=c(0.005, 0.005)) # Also save this information to file for pathway maps: rGene2=colSums(sign(rGeneOut2))/nrow(rGeneOut2) names(rGene2)=toupper(names(rGene2)) 22.6 Metacore analysis of commonly mutated pathways Save these lists for metacore allMut=unique(MeltWGSCodingB$Gene_Symbol) write.csv(allMut, file=sprintf(&quot;outputs/all_mut_rat_WGS_coding_metacore_%s.csv&quot;, Sys.Date()), row.names = F, quote=F) allMut=unique(MeltCosmic$Gene_Symbol) write.csv(allMut, file=sprintf(&quot;outputs/all_mut_rat_WES_cosmic_metacore_%s.csv&quot;, Sys.Date()), row.names = F, quote=F) Load the metacore results: Process_Networks=readxl::read_excel(&quot;../data/wholegenome_mutations/all rat WES coding process networks-jan2021.xls&quot;, 1, skip=2) #Pathway_Maps=readxl::read_excel(&quot;../data/wholegenome_mutations/all rat WES pathway maps coding-cosmic.xls&quot;, 1, skip = 2) Terms_PN=strsplit(Process_Networks$Networks, &quot;_&quot;) TermsPN1=sapply(Terms_PN, function(x) x[1]) TermsPN2=sapply(Terms_PN, function(x) x[2]) load(&quot;../anntotations/Metacore_extracted_Process_networks_nov2020.RData&quot;) n2=which(Process_Networks$FDR&lt;0.05) m1=match(Process_Networks$Networks[n2], names(PathwayMapSet)) #figure out which is significant N2=lapply(m1, function(x) which(MeltWGSCodingB$Hum_Gene %in% PathwayMapSet[[x]])) GList2=lapply(N2, function(x) MeltWGSCodingB[x, c(&quot;Hum_Gene&quot;, &quot;L1&quot;)]) SumTable2=sapply(GList2, function(x) summary(factor(x[ ,&quot;L1&quot;], levels=unique(MeltWGSCodingB$L1)))) colnames(SumTable2)=Process_Networks$Networks[n2] #listGenes=strsplit(Process_Networks$Network.Objects.from.Active.Data[1:15], &quot;,&quot;) ## do this for ERS1 networks er1=GList2[[8]] #6,8, 35 axtemp=table(er1[ ,1], er1[,2]) colnames(axtemp)=Cdata$NewID[sapply(colnames(axtemp), function(x) grep(x, Cdata$WGS) ) ] a2=heatmap.2(sign(axtemp), col=brewer.pal(3, &quot;Blues&quot;), trace=&quot;none&quot;) Figure 22.8: summary of metacore common mutated pathways image(t(a2$carpet), xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, col=c(&quot;white&quot;, &quot;skyblue&quot;)) axis(1, at=seq(0, 1, length=nrow(axtemp)), colnames(a2$carpet), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=ncol(axtemp)), rownames(a2$carpet), las=2, cex.axis=0.7) Figure 22.9: summary of metacore common mutated pathways # load(&quot;../anntotations/Metacore_extracted_pathway_maps_nov2020.RData&quot;) # n2=which(Pathway_Maps$FDR...7&lt;0.001) # m1=match(Pathway_Maps$Maps[n2], names(PathwayMapSet)) # N2=lapply(m1, function(x) which(MeltWGSCodingB$Hum_Gene %in% PathwayMapSet[[x]])) # GList2=lapply(N2, function(x) MeltWGSCodingB[x, c(&quot;Hum_Gene&quot;, &quot;L1&quot;)]) # SumTable3=sapply(GList2, function(x) summary(factor(x[ ,&quot;L1&quot;], levels=unique(MeltWGSCodingB$L1)))) # colnames(SumTable3)=Pathway_Maps$Maps[n2] # #listGenes=strsplit(Process_Networks$Network.Objects.from.Active.Data[1:15], &quot;,&quot;) # head(SumTable3) #pdf(&quot;rslt/WGS/Metacore_analysis_coding_mutations.pdf&quot;, height=13, width=13) par(mfrow=c(1,2), mar=c(2,2, 2,2)) n2=order(Process_Networks$FDR) barplot(-log10(as.numeric(Process_Networks$FDR[n2[1:15]])), names.arg = Process_Networks$Networks[n2[1:15]], las=2, main=&quot;Process networks all coding&quot;, horiz = T, cex.names = 0.5) n2=order(Process_Networks$FDR) # barplot(-log10(as.numeric(Process_Networks$FDR...11[n2[1:15]])), names.arg = Process_Networks$Networks[n2[1:15]], las=2, main=&quot;Process networks cosmic only&quot;, horiz = T, cex.names = 0.5) # barplot(-log10(as.numeric(Pathway_Maps$FDR[1:15])), names.arg = Pathway_Maps$Maps[1:15], las=2, main=&quot;Pathway Maps&quot;, horiz = T, cex.names = 0.5) Figure 22.10: summary of metacore common mutated pathways par(oma=c(2, 0,0,3)) rNames=strsplit(colnames(SumTable2), &quot;_&quot;) rNames2=sapply(rNames, function(x) x[1]) cCols=brewer.pal(12,&quot;Set3&quot;)[factor(rNames2)] lx=order(cCols) colnames(SumTable2)=sapply(rNames, function(x) x[2]) rownames(SumTable2)=Cdata$NewID[sapply(rownames(SumTable2), function(x) grep(x, Cdata$WGS))] heatmap.2(sign(SumTable2[, lx]), scale=&quot;none&quot;, trace=&quot;none&quot;, col=c(&quot;white&quot;, &quot;skyblue&quot;), main=&quot;Process Networks: scaled No mutations affecting each pathway&quot;, ColSideColors = cCols[lx], Colv = NA) Figure 22.11: summary of metacore common mutated pathways write.csv(cbind(SumTable2[, lx],rNames2[lx]), file=&quot;nature-tables/1l_samples_with_muttions.csv&quot;) #rNames2[lx] # par(oma=c(2, 0,0,3)) # # rNames=strsplit(colnames(SumTable3), &quot;_&quot;) # # rNames2=sapply(rNames, function(x) x[1]) # # cCols=brewer.pal(12,&quot;Set3&quot;)[factor(rNames2)] # # lx=order(cCols)r # heatmap.2(SumTable3, scale=&quot;col&quot;, trace=&quot;none&quot;, col=brewer.pal(9, &quot;Blues&quot;), main=&quot;Pathway Maps&quot;) # write.csv(SumTable3, file=&quot;outputs/no mutations pathway maps all coding.csv&quot;) # write.csv(SumTable2, file=&quot;outputs/no mutations process networks all coding.csv&quot;) #dev.off() "],["mutations-in-rna.html", "Chapter 23 Mutations in RNA 23.1 Haplotype caller 23.2 Load files 23.3 Identifying polymorphisms: compare frequencies in CD45 and Ep data 23.4 Find coding mutations which are specific to ep cells 23.5 Filtering WGS data based on CD45 data", " Chapter 23 Mutations in RNA In this section, we will check RNA data for the common mutations identified in the previous section. Some of these mutations could be uncharacterised polymoprphisms, and if this is the case, we will see in both CD45 and Epithelial fractions 23.1 Haplotype caller Mutational calling from RNA data was performed using haplotype caller. The key steps are: run haplotype caller run snpeff to annotate from snpsift to convert to a text file that can be read Note that a dbSNP file is needed to filter for polymorphisms. We have used the harlan variants to perform filtering due to similarity in population frequencies in the previous section An example of the code is shown here: # pipeline # 1. run haplotyper # A. Assemble BAM files Inputs: $1 fastq file (if paired end, $2 will be the other) $2 aligned bam # fastq to unaligned BAM java -jar $PICARD/picard-2.8.0.jar FastqToSam F1=$1 O=$uBAM\\ ## for paired end: # java -jar $PICARD/picard-2.8.0.jar FastqToSam F1=$1 F2=$2 O=$uBAM \\ # change read groups in aligned BAM file to ensure uniqueness java -jar $PICARD/picard-2.8.0.jar AddOrReplaceReadGroups \\ I= $2 \\ O= &quot;${2/.bam/ARG.bam}&quot; \\ ID=$baseName2 \\ LB=library \\ PL=illumina \\ PU=hiseq2000 \\ SM=$baseName2 \\ CN=MFBC \\ DT=2018-08-20T00:00:00-0400 # merge files gatk MergeBamAlignment \\ --REFERENCE_SEQUENCE ../Alignment/rn6.fa \\ --UNMAPPED_BAM $uBAM \\ --ALIGNED_BAM &quot;${2/.bam/ARG.bam}&quot; \\ --OUTPUT $mBAM \\ --INCLUDE_SECONDARY_ALIGNMENTS false \\ --PAIRED_RUN true \\ --VALIDATION_STRINGENCY SILENT #B. Mark duplicates gatk MarkDuplicates \\ --INPUT $mBAM \\ --OUTPUT $dBAM \\ --CREATE_INDEX true \\ --VALIDATION_STRINGENCY SILENT \\ --METRICS_FILE ${outName}.metrics #C. Split sigar reads gatk SplitNCigarReads \\ -R ../Alignment/rn6.fa \\ -I $dBAM \\ -O $cBAM \\ #D. Base recalibration gatk BaseRecalibrator \\ -R ../Alignment/rn6.fa \\ -I $cBAM \\ -O ${outName}_recalibration \\ -known-sites harlan_snps_mod_1-5-2020.SDsort.vcf.gz gatk ApplyBQSR \\ --add-output-sam-program-record \\ -R ../Alignment/rn6.fa \\ -I $cBAM \\ --use-original-qualities \\ -O $bBAM \\ --bqsr-recal-file ${outName}_recalibration #E. Haplotype calling gatk HaplotypeCaller \\ -R ../Alignment/rn6.fa \\ -I $bBAM \\ -L ../Alignment/rn6_refGene_intervals.bed \\ -O ${outName}HCR.vcf.gz \\ --dont-use-soft-clipped-bases true \\ --standard-min-confidence-threshold-for-calling 20 \\ --dbsnp all_rat_snps_0504.SD.vcf.gz # F. Filtering gatk VariantFiltration \\ --R ../Alignment/rn6.fa \\ --V ${outName}HCR.vcf.gz \\ --window 35 \\ --cluster 3 \\ --filter-name &quot;FS&quot; \\ --filter &quot;FS &gt; 30.0&quot; \\ --filter-name &quot;QD&quot; \\ --filter &quot;QD &lt; 2.0&quot; \\ -O ${outName}_filt_HCR # 2. run SnpEff to annotate java -jar $SNPEFF/snpEff.jar -v Rnor_6.0.86 /n/scratch2/at268/carlos_data/20191030_Ep_NMU1_CGDA7428_S1_R1_001_filt &gt; /n/scratch2/at268/carlos_data/20191030_Ep_NMU1_CGDA7428_S1_R1_001_filt_ann # 3. run SnpSift to save as a .txt file that can be easily read cat $f | $SNPEFF/scripts/vcfEffOnePerLine.pl | java -jar $SNPEFF/SnpSift.jar extractFields -e &quot;&quot; - CHROM POS ID REF ALT QUAL FILTER AF AC DP MQ &quot;ANN[*].ANNOTATION&quot; &quot;ANN[*].GENE&quot; &quot;ANN[*].GENEID&quot; &quot;ANN[*].BIOTYPE&quot; &quot;ANN[*].HGVS_C&quot; &quot;ANN[*].HGVS_P&quot; &quot;ANN[*].CDNA_POS&quot; &quot;ANN[*].CDNA_LEN&quot; &quot;ANN[*].CDS_POS&quot; &quot;ANN[*].CDS_LEN&quot; &quot;ANN[*].AA_POS&quot; &quot;ANN[*].AA_LEN&quot; &quot;NMD[*].NUMTR&quot; &quot;NMD[*].PERC&quot; &quot;GEN[*]&quot; &gt; $ofile From processing the mutational information: Header information - Genotypes: GT: genotype AD: Allelic depths for the ref and alt alleles in the order listed DP: Approximate read depth (reads with MQ=255 or with bad mates are filtered) GQ: Genotype Quality PL: Normalized, Phred-scaled likelihoods for genotypes Header info: Info AC: Allele count in genotypes, for each ALT allele, in the same order as listed AF: Allele Frequency, for each ALT allele, in the same order as listed AN: Total number of alleles in called genotypes DB: dbSNP Membership DP: Approximate read depth; some reads may have been filtered ExcessHet: Phred-scaled p-value for exact test of excess heterozygosity FS: Phred-scaled p-value using Fisher’s exact test to detect strand bias MLEAC: Maximum likelihood expectation (MLE) for the allele counts (not necessarily the same as the AC) MLEAF: Maximum likelihood expectation (MLE) for the allele frequency (not necessarily the same as the AF) MQ: RMS Mapping Quality QD:Variant Confidence/Quality by Depth SOR: Symmetric Odds Ratio of 2x2 contingency table to detect strand bias SnpEff Annotations: Allele : C Annotation: missense_variant Annotation_Impact MODERATE Gene_Name Raet1l Gene_ID ENSRNOG00000040300 Feature_Type transcript Feature_ID ENSRNOT00000062027.4 Transcript_BioType protein_coding HGVS.c c.1017C&gt;G HGVS.p p.Cys339Trp cDNA.pos / cDNA.length 1017/1185 CDS.pos / CDS.length 1017/1185 AA.pos / AA.length 339/394 missense_variant|MODERATE|Raet1l|ENSRNOG00000040300|transcript|ENSRNOT00000062027.4|protein_coding|6/7|c.1017C&gt;G|p.Cys339Trp|1017/1185|1017/1185|339/394|| AC=2;AF=1.00;AN=2;DP=49;ExcessHet=3.0103;FS=0.000;MLEAC=2;MLEAF=1.00;MQ=60.00;QD=34.99;SOR=0.874;ANN=GC|frameshift_variant&amp;splice_region_variant|HIGH|Reps1|ENSRNOG00000059224|transcript|ENSRNOT00000089607.1|protein_coding|8/29|c.119dupC|p.Gln41fs|142/2608|120/1842|40/613||INFO_REALIGN_3_PRIME;LOF=(Reps1|ENSRNOG00000059224|2|0.50) AC=2;AF=1.00;AN=2;BaseQRankSum=1.593;ClippingRankSum=0.000;DP=9;ExcessHet=3.0103;FS=0.000;MLEAC=2;MLEAF=1.00;MQ=60.00;MQRankSum=0.000;QD=33.20;ReadPosRankSum=0.765;SOR=1.609;ANN=AT|frameshift_variant&amp;stop_gained|HIGH|Pacs1|ENSRNOG00000020350|transcript|ENSRNOT00000027632.5|protein_coding|3/24|c.464dupA|p.Tyr155fs|464/2886|464/2886|155/961||;LOF=(Pacs1|ENSRNOG00000020350|1|1.00);NMD=(Pacs1|ENSRNOG00000020350|1|1.00) 23.2 Load files hfiles=dir(&quot;../data/haplotypeCaller/output_HaplotypeCaller_May/characterisation/&quot;, pattern=&quot;.txt&quot;, full.names = T) allHfiles=list() allCodingHaplo=list() allCosmicHaplo=list() for (i in 1:length(hfiles)){ A1=read.delim(hfiles[i], sep=&quot;\\t&quot;, stringsAsFactors = F) A1[which(A1==(-1), arr.ind=T)]=&quot;&quot; cNames=sapply(strsplit(colnames(A1)[12:27], &quot;\\\\.\\\\.\\\\.\\\\.&quot;), function(x) x[2]) cNames[13:16]=paste(c(&quot;LOF&quot;, &quot;LOF&quot;, &quot;NMD&quot;, &quot;NMD&quot;), cNames[13:16], sep=&quot;.&quot;) colnames(A1)[12:28]=c(cNames, &quot;GEN&quot;) GEN2=sapply(strsplit(A1$GEN, &quot;:&quot;), function(x) x[2]) gRef=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[1]) gAlt=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[length(x)]) A1$n_ref=as.numeric(gRef) A1$n_alt=as.numeric(gAlt) A1$VAF=A1$n_alt/(A1$n_alt+A1$n_ref) allHfiles[[i]]=A1[which(A1$n_ref+A1$n_alt&gt;10), ] allCodingHaplo[[i]]=A1[which(A1$HGVS_P!=&quot;&quot; &amp; A1$n_ref+A1$n_alt&gt;10), ] allCosmicHaplo[[i]]=A1[which(A1$GENE%in%RatCosmic &amp; A1$n_ref+A1$n_alt&gt;10), ] } ## names of the files fNam=unlist(strsplit(hfiles, &quot;_filt_HCR_ann_siftB.txt&quot;)) #remove HCR where not needed fNam=unlist(strsplit(fNam, &quot;.vcf.g&quot;)) fNam2=paste(fNam, &quot;.fastq.gz&quot;, sep=&quot;&quot;) fNam2=sapply(strsplit(fNam2, &quot;/&quot;), function(x) x[length(x)]) idx1=infoTableFinal$SampleID[match(fNam2, infoTableFinal$FqFile)] idx1[which(is.na(idx1))]=fNam2[which(is.na(idx1))] idx1[grep(&quot;CD45plus&quot;, idx1)]=substr(idx1[grep(&quot;CD45plus&quot;, idx1)],10, 21) # sNames=paste(tempAnnot$Rat_ID[idx1],tempAnnot$Location[idx1], tempAnnot$Fraction[idx1], sep=&quot;_&quot;) names(allHfiles)=idx1 names(allCodingHaplo)=idx1 names(allCosmicHaplo)=idx1 # remove the samples which do not pass QC idx2rm=setdiff(grep(&quot;fastq.gz&quot;, idx1), grep(&quot;CD45plus&quot;, idx1)) ## write all these lists to file allHfiles=allHfiles[-idx2rm] allCodingHaplo=allCodingHaplo[-idx2rm] allCosmicHaplo=allCosmicHaplo[-idx2rm] save(allHfiles,allCodingHaplo, allCodingHaplo, file=sprintf(&quot;outputs/HaplotypeVariants_characterisation_all_%s.Rdata&quot;, Sys.Date())) 23.3 Identifying polymorphisms: compare frequencies in CD45 and Ep data Search for whether mutations in the cosmic set is present in the RNA data. We will firstly look at the 90 most common genes, and then repeat the same for the top cosmic genes. # replace topN with topCOSMIC # templace tempxb with tempz2 MeltWGSCoding$mutPos=paste(MeltWGSCoding$Gene_Symbol, MeltWGSCoding$Start_Position) MeltWGSCodingB$mutPos=paste(MeltWGSCodingB$Gene_Symbol, MeltWGSCodingB$Start_Position) MallCodingHaplo=melt(allCodingHaplo, measure.var=&quot;POS&quot;) MallCodingHaplo$mutPos=paste(MallCodingHaplo$GENE, MallCodingHaplo$value) xb=sort(table(MeltWGSCodingB$mutPos[MeltWGSCodingB$Gene_Symbol%in%topCOSMIC]), decreasing = T) allCoding_top90=lapply(allCodingHaplo, function(x) x[which(paste(x$GENE, x$POS)%in%names(xb)), ]) mallCoding90=melt(allCoding_top90, measure.var=&quot;POS&quot;) mallCoding90$mutUnique=paste(mallCoding90$GENE, mallCoding90$value) x1=table(mallCoding90$mutUnique) tabN=acast(mallCoding90[ , c(&quot;L1&quot;, &quot;GENE&quot;)],L1~GENE) #heatmap.2(tabN, Colv = NA, trace=&quot;none&quot;, scale=&quot;none&quot;, col=c(&quot;white&quot;, brewer.pal(5, &quot;Blues&quot;))) cNamesMatch=match(colnames(tabN), colnames(tempz2)) tabN2=matrix(0, nrow=nrow(tabN), ncol=ncol(tempz2)) tabN2[ ,cNamesMatch]=tabN colnames(tabN2)=colnames(tempz2) rownames(tabN2)=rownames(tabN) id2=grep(&quot;Ep&quot;, rownames(tabN)) id3=grep(&quot;CD45$&quot;, rownames(tabN)) id4=grep(&quot;CD45plus&quot;, rownames(tabN)) tabN2[id2, ]=sign(tabN2[id2, ]) tabN2[id3, ]=sign(tabN2[id3, ])*2 tabN2[id4, ]=sign(tabN2[id4, ])*3 tabN2=tabN2[c(id2, id3, id4), ] #heatmap.2(tabN2, Colv = NA, Rowv = NA, trace=&quot;none&quot;, scale=&quot;none&quot;, col=c(&quot;white&quot;, brewer.pal(5, &quot;Blues&quot;))) image(t((tabN2)), col=c(&quot;white&quot;, 1:3), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempz2)), colnames(tempz2), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tabN2)), rownames(tabN2), las=2, cex.axis=0.7) lx2=sapply(allCoding_top90, nrow) barplot(lx2, ylab=&quot;no# mutations in top 90 genes&quot;, las=2) 23.4 Find coding mutations which are specific to ep cells Here, look for mutations from RNA which are present in the epithelial cells specific VarTypes=c(&quot;frameshift&quot;, &quot;missense&quot;, &quot;start_lost&quot;, &quot;stop_gained&quot;, &quot;nonsense&quot;, &quot;stop_retained&quot;) n2=unique(unlist(sapply(VarTypes, function(x) grep(x, MallCodingHaplo$ANNOTATION)))) MallCodingHaploFunc=MallCodingHaplo[ n2, ] ## Look at epithealial samples xa=grep(&quot;Ep&quot;, MallCodingHaploFunc$L1) MallEpi=MallCodingHaploFunc[xa, ] EpVarList=table(MallCodingHaploFunc$GENE[xa]) EpVarNames=names(EpVarList) EpVarN2=names(EpVarList[which(EpVarList&gt;1)]) EpVarListB=table(MallCodingHaploFunc$mutPos[xa]) EpLoc=names(EpVarListB)[which(EpVarListB&gt;1)] ## Look at CD45 samples xa=grep(&quot;CD45$&quot;, MallCodingHaploFunc$L1) CDVarList=table(MallCodingHaploFunc$GENE[xa]) CDVarNames=names(CDVarList) CDVarN2=names(CDVarList[which(CDVarList&gt;=1)]) CDVarListB=table(MallCodingHaploFunc$mutPos[xa]) CDLoc=names(CDVarListB)[which(CDVarListB&gt;=1)] ## Look at CD45 normal xa=grep(&quot;CD45plus&quot;, MallCodingHaploFunc$L1) nCD45VarList=table(MallCodingHaploFunc$GENE[xa]) nCD45VarNames=names(nCD45VarList) nCD45VarN2=names(nCD45VarList[which(nCD45VarList&gt;=1)]) nCD45VarListB=table(MallCodingHaploFunc$mutPos[xa]) nCDLoc=names(nCD45VarListB)[which(nCD45VarListB&gt;=1)] ## List of ep-spec variants eplist1=setdiff(setdiff(EpVarN2, CDVarN2), nCD45VarN2) ## Obtain the list of Ep-specific variants and cross-reference with genomic data WGSListgenes=table(MeltWGSCodingB$Gene_Symbol) WGSListgenes=names(WGSListgenes)[which(WGSListgenes&gt;1)] RList=MallEpi[which(MallEpi$GENE%in%eplist1), ] Rlist2=table(RList$mutPos) Rlist2=names(Rlist2)[which(Rlist2&gt;1)] WGSList=paste(MeltWGSCodingB$Gene_Symbol, MeltWGSCodingB$Start_Position) t2=table(WGSList) WGSList=names(t2)[which(t2&gt;1)] mutlist=intersect(Rlist2, WGSList) #pdf(&quot;~/Desktop/RNA-specific-mutations-gene-level.pdf&quot;, height=6, width=6) venn(list(Ep=EpVarNames, CD45=CDVarNames, nCD45=nCD45VarNames)) mtext(&quot;no genes w mutations overlapping in different fractions&quot;) venn(list(Ep=EpVarN2, CD45=CDVarN2, nCD45=nCD45VarN2)) mtext(&quot;no genes with overlapping variants in 2+ samples&quot;) venn(list(Ep_RNA=eplist1, Ep_WGS=WGSListgenes)) mtext(&quot;No genes with overlaps in 2+ samples&quot;) #dev.off() Location specific mutations: #pdf(&quot;~/Desktop/RNA-specific-mutations-location-level.pdf&quot;, height=7, width=10) venn(list(Ep=EpLoc, CD45=CDLoc, nCD45=nCDLoc)) mtext(&quot;no locations with overlapping variants in 2+ samples&quot;) venn(list(Ep_RNA=Rlist2, Ep_WGS=WGSList)) mtext(&quot;No ep. specifc locations with overlaps in 2+ samples&quot;) # plots of mutational frequencies of the locations in A1 Ttemp=acast(MallCodingHaploFunc[which(MallCodingHaploFunc$mutPos%in%mutlist), c(&quot;L1&quot;, &quot;mutPos&quot;)], mutPos~L1) Ttemp=cbind(Ttemp, 0) colnames(Ttemp)[ncol(Ttemp)]=&quot;NMU13_LAU_Ep&quot; ax2=setdiff(unique(MallEpi$L1), colnames(Ttemp)) Wtemp=acast(MeltWGSCoding[which(MeltWGSCodingB$mutPos%in%mutlist), c(&quot;L1&quot;, &quot;mutPos&quot;, &quot;Start_Position&quot;)],mutPos~L1) Wtemp[which(is.na(Wtemp), arr.ind = T)]=0 par(oma=c(5, 5, 1, 1)) image(sign((Ttemp)), col=c(&quot;white&quot;,&quot;darkblue&quot;), xaxt=&quot;none&quot;, yaxt=&quot;none&quot;) axis(1, at=seq(0, 1, length=nrow(Ttemp)),rownames(Ttemp), las=2) axis(2, at=seq(0, 1, length=ncol(Ttemp)),colnames(Ttemp), las=2) mtext(&quot;Mutations in RNA &amp; in WGS data&quot;) par(oma=c(5, 5, 1, 1)) image(sign(Wtemp), col=c(&quot;white&quot;,&quot;darkblue&quot;), xaxt=&quot;none&quot;, yaxt=&quot;none&quot;) axis(1, at=seq(0, 1, length=nrow(Wtemp)),rownames(Wtemp), las=2) axis(2, at=seq(0, 1, length=ncol(Wtemp)),colnames(Wtemp), las=2) # mtext(&quot;Mutations in WGS data&quot;) # par(oma=c(2,2,2,5)) # heatmap.2(t(ExprVSD), trace=&quot;none&quot;, scale=&quot;none&quot;, Rowv = NA, Colv = NA, col=RdBu[11:1], # main=&quot;gene expression, vst transformed&quot;) # heatmap.2(t(ExprVSD), trace=&quot;none&quot;, scale=&quot;col&quot;, Rowv = NA, Colv = NA, col=RdBu[11:1], # main=&quot;gene expression, col scaled&quot;) # # # calculate the correlation between mutation and expression # # mvals=rep(NA, nrow(ExprVSD)) # names(mvals)=rownames(ExprVSD) # mvalsP=mvals # # x1=match(colnames(ExprVSD), colnames(Ttemp)) # for (i in 1:length(mvals)){ # ax1=glm(sign(Ttemp[i, x1])~ExprVSD[i, ], family =binomial(link=&quot;logit&quot;)) # mvals[i]=coefficients(ax1)[2] # mvalsP[i]=summary(ax1)$coefficients[2,4] # } # # barplot(mvalsP,las=2, ylab = &quot;P value of association bw mutation and expression&quot;) #dev.off() There are 6 mutations which are found in both the RNA and WGS data (2+ samples, not found in RNAseq) 23.5 Filtering WGS data based on CD45 data Use the entire list for WGS Find mutations in CD45 (either) and remove #head(MeltWGSCoding) #head(MallCodingHaploFunc) lx1=grep(&quot;CD45&quot;, MallCodingHaploFunc$L1) mutDiff=setdiff(MeltWGSCodingB$mutPos, MallCodingHaploFunc$mutPos[lx1]) NUnique=table(MeltWGSCodingB$mutPos[MeltWGSCodingB$mutPos%in%mutDiff]) NUniqueB=table(MeltWGSCodingB$Gene_Symbol[MeltWGSCodingB$mutPos%in%mutDiff]) rGeneOut=acast(MeltWGSCodingB[ MeltWGSCodingB$mutPos%in%names(NUnique),c(&quot;Gene_Symbol&quot;, &quot;L1&quot;, &quot;Variant_Classification&quot;)], L1~Gene_Symbol, value.var=&quot;Variant_Classification&quot;, fun.aggregate=function(x) paste(x, collapse = &quot;, &quot;)) mxl=unique(as.vector(rGeneOut)) rGeneOut2b=rGeneOut rGeneOut2b[grep(&quot;Nonsense&quot;,rGeneOut2b)]=3 rGeneOut2b[grep(&quot;Frame_Shift&quot;,rGeneOut2b)]=2 rGeneOut2b[grep(&quot;Missense_&quot;, rGeneOut2b)]=1 rGeneOut2b[grep(&quot;Splice_&quot;, rGeneOut2b)]=4 rGeneOut2b[which(rGeneOut2b==&quot;&quot;)]=0 rGeneOut2b=apply(rGeneOut2b, 2, as.numeric) rownames(rGeneOut2b)=rownames(rGeneOut) rmThese=c(&quot;^AABR&quot;, &quot;^Olr&quot;, &quot;^LOC&quot;, &quot;^AC[0-9]+&quot;, &quot;^RGD&quot;, &quot;^Rpl&quot;, &quot;^1700&quot;, &quot;^RT1&quot;, &quot;^ENSRNOG&quot;, &quot;^Vom2&quot;) rmList=unlist(sapply(rmThese, function(x) grep(x, colnames(rGeneOut2b)))) rGeneOut2b=rGeneOut2b[ ,-rmList] NtopA=names(NUnique)[which(NUnique&gt;6)] NtopAb=unique(sapply(strsplit(NtopA, &quot; &quot;), function(x) x[1])) tempAnew=rGeneOut2b[, na.omit(match(NtopAb, colnames(rGeneOut2b)))] tempA=heatmap.2(sign(tempAnew)) tempA=tempAnew[tempA$rowInd, tempA$colInd] #HSAnew=hotspotLocExtract(tempA) ## NtopB=which(NUnique&gt;10) NtopB=names(NUniqueB)[which(NUniqueB&gt;1)] NtopB2=NtopB[NtopB%in%RatCosmic] tempBnew=rGeneOut2b[, na.omit(match(NtopB2, colnames(rGeneOut2b)))] tempB=heatmap.2(sign(tempBnew)) tempB=tempBnew[tempB$rowInd, tempB$colInd] #HSBnew=hotspotLocExtract(tempB) #pdf(&quot;~/Desktop/WGS-coding-mutations-not-in-CD45-RNA.pdf&quot;, height=7, width=13) ## Commonly mutated Genes: par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempA), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempA)), colnames(tempA), las=2, cex.axis=0.5) axis(2, at=seq(0, 1, length=nrow(tempA)), rownames(tempA), las=2, cex.axis=0.5) #text(na.omit(HSAnew$Y-1)/(ncol(tempA)-1), na.omit(HSAnew$X-1)/(nrow(tempA)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;top 118 mutations&quot;, side=3, line=-1, outer=T) #dev.off() #pdf(&quot;~/Desktop/WGS-COSMIC-mutations-not-in-CD45-RNA.pdf&quot;, height=7, width=13) ## Commonly mutated Genes: par(mar = c(4, 8, 4, 2), xpd = TRUE) image(t(tempB), col=c(&quot;white&quot;, 1:4), xaxt=&#39;n&#39;, yaxt=&#39;n&#39;) axis(1, at=seq(0, 1, length=ncol(tempB)), colnames(tempB), las=2, cex.axis=0.7) axis(2, at=seq(0, 1, length=nrow(tempB)), rownames(tempB), las=2, cex.axis=0.7) #text(na.omit(HSBnew$Y-1)/(ncol(tempB)-1), na.omit(HSBnew$X-1)/(nrow(tempB)-1) , &quot;*&quot;) legend(&quot;top&quot;, inset = c(-0.5, -0.15), legend = c(&quot;missense&quot;,&quot;frameshift&quot;, &quot;Nonsense&quot;, &quot;splice&quot;, &quot;hotspot human&quot;), pch = c(19, 19, 19,19, 8), col = c(1:4, &quot;black&quot;), horiz = T) mtext(&quot;Common COSMIC mutations&quot;, side=3, line=-1, outer=T) #dev.off() "],["mutations-in-progression-cohort.html", "Chapter 24 Mutations in progression cohort 24.1 Mutational burden 24.2 Summary of common mutations: 24.3 Look at the common mutations (cosmic ones)", " Chapter 24 Mutations in progression cohort hfiles=dir(&quot;../data/haplotypeCaller/output_HaplotypeCaller_May/progression/&quot;, pattern=&quot;.txt&quot;, full.names = T) allHfilesP=list() allCodingHaploP=list() allCosmicHaploP=list() for (i in 1:length(hfiles)){ A1=read.delim(hfiles[i], sep=&quot;\\t&quot;, stringsAsFactors = F) A1[which(A1==(-1), arr.ind=T)]=&quot;&quot; cNames=sapply(strsplit(colnames(A1)[12:27], &quot;\\\\.\\\\.\\\\.\\\\.&quot;), function(x) x[2]) cNames[13:16]=paste(c(&quot;LOF&quot;, &quot;LOF&quot;, &quot;NMD&quot;, &quot;NMD&quot;), cNames[13:16], sep=&quot;.&quot;) colnames(A1)[12:28]=c(cNames, &quot;GEN&quot;) GEN2=sapply(strsplit(A1$GEN, &quot;:&quot;), function(x) x[2]) gRef=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[1]) gAlt=sapply(strsplit(GEN2, &quot;,&quot;), function(x) x[length(x)]) A1$n_ref=as.numeric(gRef) A1$n_alt=as.numeric(gAlt) A1$VAF=A1$n_alt/(A1$n_alt+A1$n_ref) allHfilesP[[i]]=A1[which(A1$n_ref+A1$n_alt&gt;10), ] allCodingHaploP[[i]]=A1[which(A1$HGVS_P!=&quot;&quot; &amp; A1$n_ref+A1$n_alt&gt;10), ] allCosmicHaploP[[i]]=A1[which(A1$GENE%in%RatCosmic &amp; A1$n_ref+A1$n_alt&gt;10), ] } ## names of the files fNam=unlist(strsplit(hfiles, &quot;_filt_HCR_ann_siftB.txt&quot;)) #remove HCR where not needed fNam=unlist(strsplit(fNam, &quot;.vcf.g&quot;)) fNam2=paste(fNam, &quot;.fastq.gz&quot;, sep=&quot;&quot;) fNam2=sapply(strsplit(fNam2, &quot;/&quot;), function(x) x[length(x)]) idx1=infoTableFinal$SampleID[match(fNam2, infoTableFinal$FqFile)] idx1[which(is.na(idx1))]=fNam2[which(is.na(idx1))] idx1[grep(&quot;CD45plus&quot;, idx1)]=substr(idx1[grep(&quot;CD45plus&quot;, idx1)],10, 21) # sNames=paste(tempAnnot$Rat_ID[idx1],tempAnnot$Location[idx1], tempAnnot$Fraction[idx1], sep=&quot;_&quot;) names(allHfilesP)=idx1 names(allCodingHaploP)=idx1 names(allCosmicHaploP)=idx1 # remove the samples which do not pass QC idx2rm=setdiff(grep(&quot;fastq.gz&quot;, idx1), grep(&quot;CD45plus&quot;, idx1)) ## write all these lists to file allHfilesP=allHfilesP[-idx2rm] allCodingHaploP=allCodingHaploP[-idx2rm] allCosmicHaploP=allCosmicHaploP[-idx2rm] save(allHfilesP,allCodingHaploP, allCodingHaploP, file=sprintf(&quot;outputs/HaplotypeVariants_progression_all_%s.Rdata&quot;, Sys.Date())) 24.1 Mutational burden VarTypes=c(&quot;frameshift&quot;, &quot;missense&quot;, &quot;start_lost&quot;, &quot;stop_gained&quot;, &quot;nonsense&quot;, &quot;stop_retained&quot;, &quot;splice&quot;) # match the annotation file with Epcam samples and their outcome: HaploEpcam=allCodingHaploP[grep(&quot;Ep&quot;, names(allCodingHaploP))] HaploEpcamB=lapply(HaploEpcam, function(x) x[which(x$ID==&quot;&quot; &amp; x$FILTER==&quot;PASS&quot;), ]) # remove all snps nx=names(HaploEpcamB) treat=Cdata$Treatment[match(unlist(strsplit(nx, &quot;_Ep&quot;)), Cdata$TumorID)] growth=Cdata$Tumor.Growth[match(unlist(strsplit(nx, &quot;_Ep&quot;)), Cdata$TumorID)] Ncount=sapply(HaploEpcamB,function(x) sapply(VarTypes, function(y) grep(y, x$ANNOTATION))) NcountB=sapply(1:ncol(Ncount), function(x) length(unique(unlist(Ncount[ ,x])))) Bxy=data.frame(sample=nx, treat=treat, growth=growth, tmb=NcountB/43.42) # calculate p values compared to the ggplot(Bxy, aes(x=treat,y=tmb))+geom_boxplot()+geom_point(position=position_jitterdodge(jitter.width=0.5, dodge.width = 0), pch=21, aes(fill=factor(growth)), show.legend = T)+theme_bw()+scale_fill_manual(values=c(ColSizeb, &quot;grey&quot;)) ggplot(Bxy, aes(x=growth,y=tmb))+geom_boxplot()+geom_point(position=position_jitterdodge(jitter.width=0.5, dodge.width = 0), pch=21, aes(fill=factor(treat)), show.legend = T)+theme_bw()+scale_fill_manual(values=ColMerge[ ,1]) 24.2 Summary of common mutations: MallCodingHaploP=melt(allCodingHaploP, measure.var=&quot;POS&quot;) MallCodingHaploP$mutPos=paste(MallCodingHaploP$GENE, MallCodingHaploP$value) n2=unique(unlist(sapply(VarTypes, function(x) grep(x, MallCodingHaploP$ANNOTATION)))) MallCodingHaploFuncP=MallCodingHaploP[ n2, ] ## Look at epithealial samples look at topCOSMIC: xa=grep(&quot;Ep&quot;, MallCodingHaploFuncP$L1) MallEpi=MallCodingHaploFuncP[xa, ] EpVarList=table(MallCodingHaploFuncP$GENE[xa]) EpVarNames=names(EpVarList) EpVarN2=names(EpVarList[which(EpVarList&gt;1)]) EpVarListB=table(MallCodingHaploFuncP$mutPos[xa]) EpLoc=names(EpVarListB)[which(EpVarListB&gt;1)] ## Look at CD45 samples xa=grep(&quot;CD45$&quot;, MallCodingHaploFuncP$L1) CDVarList=table(MallCodingHaploFuncP$GENE[xa]) CDVarNames=names(CDVarList) CDVarN2=names(CDVarList[which(CDVarList&gt;=1)]) CDVarListB=table(MallCodingHaploFuncP$mutPos[xa]) CDLoc=names(CDVarListB)[which(CDVarListB&gt;=1)] ## Look at DN samples xa=grep(&quot;DN&quot;, MallCodingHaploFuncP$L1) DNVarList=table(MallCodingHaploFuncP$GENE[xa]) DNVarNames=names(DNVarList) DNVarN2=names(DNVarList[which(DNVarList&gt;1)]) DNVarListB=table(MallCodingHaploFuncP$mutPos[xa]) DNLoc=names(DNVarListB)[which(DNVarListB&gt;1)] #pdf(&quot;~/Desktop/Supp5-progression-RNA-specific-mutations-gene-level.pdf&quot;, height=6, width=6) venn(list(Ep=EpVarNames, CD45=CDVarNames, DN=DNVarNames)) mtext(&quot;no genes w mutations overlapping in different fractions&quot;) venn(list(Ep=EpVarN2, CD45=CDVarN2, DN=DNVarN2)) mtext(&quot;no genes with overlapping variants in 2+ samples&quot;) venn(list(Ep=EpLoc, CD45=CDLoc, DN=DNLoc)) mtext(&quot;no locations with overlapping variants in 2+ samples&quot;) #dev.off() 24.3 Look at the common mutations (cosmic ones) color coding: 1. splice 2. frameshift 3. missense 4. stop-gained Look for genes which we reported to be common in this cohort previously, as well as the breast-cancer specific ones GeneList=c(&quot;Atm&quot;, &quot;Tert&quot;, &quot;Ncor2&quot;, &quot;Epha3&quot;, &quot;Arid1a&quot;, &quot;Tp53&quot;, &quot;Pten&quot;, &quot;Pik3ca&quot;, &quot;Pik3r1&quot;, &quot;Esr1&quot;, &quot;Ctcf&quot;, &quot;Brca1&quot;, &quot;Brca2&quot;, &quot;Notch1&quot;, &quot;Kmt2d&quot;, &quot;Foxa1&quot;, &quot;Gata3&quot;, &quot;Mdm4&quot;, &quot;Ccne1&quot;) MallCodingHaploFuncPC=MallCodingHaploFuncP[which(MallCodingHaploFuncP$GENE%in%c(topCOSMIC, GeneList)), ] MallCodingHaploFuncPC=MallCodingHaploFuncPC[which(MallCodingHaploFuncPC$FILTER==&quot;PASS&quot;), ] xab=unique(MallCodingHaploFuncPC$ANNOTATION) MallCodingHaploFuncPC$ANNOTATION[grep(&quot;frameshift_variant&quot;,MallCodingHaploFuncPC$ANNOTATION )]=&quot;frameshift_variant&quot; MallCodingHaploFuncPC$ANNOTATION[grep(&quot;missense_variant&quot;,MallCodingHaploFuncPC$ANNOTATION )]=&quot;missense_variant&quot; MallCodingHaploFuncPC$ANNOTATION=as.numeric(factor(MallCodingHaploFuncPC$ANNOTATION, levels=c(&quot;splice_region_variant&amp;synonymous_variant&quot;, &quot;frameshift_variant&quot;, &quot;missense_variant&quot;, &quot;stop_gained&quot;))) AcastTab=acast(MallCodingHaploFuncPC[ ,c(&quot;L1&quot;, &quot;GENE&quot;, &quot;ANNOTATION&quot;)], L1~GENE, fun.aggregate = max) AcastTab[which(AcastTab==&quot;-Inf&quot;, arr.ind = T)]=0 indx=rownames(AcastTab)[grep(&quot;Ep&quot;, rownames(AcastTab))] indx=substr(indx, 1, nchar(indx)-3) n2=unlist(sapply(indx, function(x) grep(x, rownames(AcastTab)))) AcastTab2=AcastTab AcastTab[grep(&quot;CD45&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;CD45&quot;, rownames(AcastTab)), ]) AcastTab[grep(&quot;DN&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;DN&quot;, rownames(AcastTab)), ])*2 AcastTab[grep(&quot;Ep&quot;, rownames(AcastTab)), ]=sign(AcastTab[grep(&quot;Ep&quot;, rownames(AcastTab)), ])*3 #pdf(&quot;~/Desktop/FigureS3_biphasic_mutations_again.pdf&quot;, height=12, width=15) image(AcastTab[n2, ], xaxt=&quot;none&quot;, yaxt=&quot;none&quot;, col=c(&quot;white&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;forestgreen&quot;)) axis(1, at=seq(0, 1, length=nrow(AcastTab[n2, ])), rownames(AcastTab[n2, ]), las=2) axis(2, at=seq(0, 1, length=ncol(AcastTab)), colnames(AcastTab), las=2) #dev.off() View the above using only the Epcam samples: Acast2=AcastTab2[grep(&quot;Ep&quot;, rownames(AcastTab)), ] rS=colSums(Acast2) Acast2=Acast2[ ,-which(rS==0)] #pdf(&quot;~/Desktop/FigureS3_common_mutations_again.pdf&quot;, height=12, width=12) # also group this according to growing vs stable m2=melt(Acast2) head(m2) ## Var1 Var2 value ## 1 10L_D_Ep Akap9 0 ## 2 10R_BL_Ep Akap9 0 ## 3 10R_BU_Ep Akap9 0 ## 4 11L_B_Ep Akap9 0 ## 5 11N_D_Ep Akap9 0 ## 6 11R_C_Ep Akap9 0 m2$growth=Cdata$Tumor.Growth[match(substr(m2$Var1, 1, nchar(as.character(m2$Var1))-3), Cdata$TumorID)] m2$Treatment=Cdata$Treatment[match(substr(m2$Var1, 1, nchar(as.character(m2$Var1))-3), Cdata$TumorID)] m2$newid=Cdata$NewID[match(substr(m2$Var1, 1, nchar(as.character(m2$Var1))-3), Cdata$TumorID)] ggplot(m2, aes(x=newid, y=Var2, fill=factor(value)))+geom_tile()+facet_grid(~growth, scale=&quot;free_x&quot;, space=&quot;free&quot;)+theme(axis.text.x=element_text(angle=90))+scale_fill_manual(values=c(&quot;white&quot;,&quot;red&quot;, &quot;forestgreen&quot;, &quot;orange&quot;)) pdf(&quot;~/Desktop/FigureS3_common_mutations_ep_again.pdf&quot;, height=12, width=12) ggplot(m2, aes(x=newid, y=Var2, fill=factor(value)))+geom_tile()+facet_grid(~Treatment+growth, scale=&quot;free_x&quot;, space=&quot;free&quot;)+theme(axis.text.x=element_text(angle=90))+scale_fill_manual(values=c(&quot;white&quot;,&quot;red&quot;, &quot;forestgreen&quot;, &quot;orange&quot;)) dev.off() ## quartz_off_screen ## 2 Candidates=c(&quot;Polg&quot;, &quot;Foxa1&quot;, &quot;Ncor2&quot;, &quot;Atm&quot;) pvals=rep(NA, length(Candidates)) for (i in 1:length(Candidates)){ xa=table(m2$value[which(m2$Var2==Candidates[i])], m2$growth[which(m2$Var2==Candidates[i])]) pvals[i]=fisher.test(xa)$p.value } Repeat in the DN samples Acast2=AcastTab2[grep(&quot;DN&quot;, rownames(AcastTab)), ] rS=colSums(Acast2) Acast2=Acast2[ ,-which(rS==0)] #pdf(&quot;~/Desktop/FigureS3_common_mutations_again.pdf&quot;, height=12, width=12) # also group this according to growing vs stable m3=melt(Acast2) head(m3) ## Var1 Var2 value ## 1 10L_C_DN Atm 0 ## 2 10R_BU_DN Atm 0 ## 3 11L_B_DN Atm 0 ## 4 11R_C_DN Atm 0 ## 5 11R_D_DN Atm 0 ## 6 12L_D_DN Atm 0 m3$growth=Cdata$Tumor.Growth[match(substr(m3$Var1, 1, nchar(as.character(m3$Var1))-3), Cdata$TumorID)] m3$Treatment=Cdata$Treatment[match(substr(m3$Var1, 1, nchar(as.character(m3$Var1))-3), Cdata$TumorID)] m3$newid=Cdata$NewID[match(substr(m3$Var1, 1, nchar(as.character(m3$Var1))-3), Cdata$TumorID)] ggplot(m3, aes(x=newid, y=Var2, fill=factor(value)))+geom_tile()+facet_grid(~growth, scale=&quot;free_x&quot;, space=&quot;free&quot;)+theme(axis.text.x=element_text(angle=90))+scale_fill_manual(values=c(&quot;white&quot;,&quot;red&quot;, &quot;forestgreen&quot;, &quot;orange&quot;)) pdf(&quot;~/Desktop/FigureS3_common_mutations_dn_again.pdf&quot;, height=12, width=12) ggplot(m3, aes(x=newid, y=Var2, fill=factor(value)))+geom_tile()+facet_grid(~Treatment+growth, scale=&quot;free_x&quot;, space=&quot;free&quot;)+theme(axis.text.x=element_text(angle=90))+scale_fill_manual(values=c(&quot;white&quot;,&quot;red&quot;, &quot;forestgreen&quot;, &quot;orange&quot;)) dev.off() ## quartz_off_screen ## 2 Candidates=c(&quot;Casp3&quot;, &quot;Hras&quot;, &quot;Fat1&quot;, &quot;Setd2&quot;, &quot;Ranbp2&quot;, &quot;Pold1&quot;, &quot;Pms2&quot;) pvals=rep(NA, length(Candidates)) x1=table(m3$growth[which(m3$Var2==Candidates[1])]) for (i in 1:length(Candidates)){ xa=prop.test(c( length(which(m3$value[which(m3$growth==&quot;growing&quot; &amp; m3$Var2==Candidates[i])]&gt;0)), length(which(m3$value[which(m3$growth==&quot;stable&quot; &amp; m3$Var2==Candidates[i])]&gt;0))), x1) pvals[i]=xa$p.value } pvals ## [1] 0.3774645 0.7197694 0.9561687 0.3774645 1.0000000 0.3881479 0.1133864 Candidates=c(&quot;Casp3&quot;, &quot;Hras&quot;, &quot;Fat1&quot;, &quot;Setd2&quot;, &quot;Ranbp2&quot;, &quot;Pold1&quot;, &quot;Pms2&quot;) pvals=rep(NA, length(Candidates)) for (i in 1:length(Candidates)){ xa=table(m3$value[which(m3$Var2==Candidates[i])], m3$growth[which(m3$Var2==Candidates[i])]) pvals[i]=fisher.test(xa)$p.value } Also compare here if there is a difference in frequency between DN and Ep samples: Candidates=c(&quot;Casp3&quot;, &quot;Hras&quot;, &quot;Fat1&quot;, &quot;Setd2&quot;, &quot;Ranbp2&quot;, &quot;Pold1&quot;, &quot;Pms2&quot;, &quot;Bcl9l&quot;,&quot;Atm&quot; ) pvals=rep(NA, length(Candidates)) x1=c(length(which(m2$Var2==Candidates[1])), length(which(m3$Var2==Candidates[1]))) for (i in 1:length(Candidates)){ xa=prop.test(c( length(which(m2$value[which( m2$Var2==Candidates[i])]&gt;0)), length(which(m3$value[which( m3$Var2==Candidates[i])]&gt;0))), x1) pvals[i]=xa$p.value } pvals ## [1] 0.31627188 0.30894961 0.16343819 0.21479916 0.26039249 1.00000000 0.28667561 ## [8] 0.03536095 0.87669802 "],["trichrome-staining.html", "Chapter 25 Trichrome staining 25.1 Associations with cellular fraction (wsi) 25.2 Associations with CD8 content 25.3 Associations with growth and treatment 25.4 Association with hyperinflammatory status", " Chapter 25 Trichrome staining Quantification of trichrome staining was performed in Qupath using the following steps: image is loaded as a “DAB” image using “gold standard” trichrome-stained images with good stroma and epithelial content, estimate the stain vectors Perform color deconvolution A pixel classifier was used to estimate trichrome content A pixel classifier was used to estimate tumor content A snippet of the qupath script is shown below: # insert some text here setImageType(&#39;BRIGHTFIELD_H_DAB&#39;); setColorDeconvolutionStains(&#39;{&quot;Name&quot; : &quot;trichrome&quot;, &quot;Stain 1&quot; : &quot;Hematoxylin&quot;, &quot;Values 1&quot; : &quot;0.71695 0.66336 0.21432 &quot;, &quot;Stain 2&quot; : &quot;DAB&quot;, &quot;Values 2&quot; : &quot;0.46299 0.76212 0.45257 &quot;, &quot;Background&quot; : &quot; 255 255 255 &quot;}&#39;); selectAnnotations(); addPixelClassifierMeasurements(&quot;stroma_classifier_again&quot;, &quot;stroma_classifier_again&quot;) selectAnnotations(); addPixelClassifierMeasurements(&quot;test_tumor&quot;, &quot;test_tumor&quot;) def entry = getProjectEntry() def name = entry.getImageName() + &#39;.txt&#39; def path = buildFilePath(PROJECT_BASE_DIR, &#39;annotation results&#39;) mkdirs(path) path = buildFilePath(path, name) saveAnnotationMeasurements(path) 25.1 Associations with cellular fraction (wsi) # load the data TrichromeData=read.xlsx(&quot;../data/trichrome-staining-result.xls&quot;, 1) midx=match(TrichromeData$SampleID, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID)) Cdata$Trichrome=NA Cdata$Trichrome[na.omit(midx)]=TrichromeData$Percentage.Stroma[which(!is.na(midx))] t2=WSIvalFracs[, match(rownames(df.Spatial), colnames(WSIvalFracs))] df.Spatial=cbind(df.Spatial, t(t2)) df.Spatial$Trichrome=NA midx=match(TrichromeData$SampleID, rownames(df.Spatial)) df.Spatial$Trichrome[na.omit(midx)]=TrichromeData$Percentage.Stroma[-which(is.na(midx))] # plot associations n2=c(&quot;CD8&quot;, &quot;EpCAM&quot;, &quot;SMA&quot;, &quot;Unclass&quot;, &quot;EpCAM: SMA&quot;) #pdf(&quot;~/Desktop/richrome-association-WSI-data-Calc2.pdf&quot;, width=6, height=5) par(mfrow=c(2,3)) for (i in n2){ a1=cor.test(df.Spatial$Trichrome, df.Spatial[ ,match(i, colnames(df.Spatial))], use=&quot;complete&quot;) n1=paste(i, &quot;cor:&quot;, round(a1$estimate,1), &quot;p:&quot;, round(a1$p.value,2)) plot(df.Spatial$Trichrome, df.Spatial[ ,match(i, colnames(df.Spatial))], main=n1, xlab=&quot;Trichrome&quot;, ylab=i) } #dev.off() 25.2 Associations with CD8 content par(mfrow=c(1,2)) a1=wilcox.test(df.Spatial$Trichrome~df.Spatial$IF.EpCAMcut)$p.val boxplot(df.Spatial$Trichrome~df.Spatial$IF.EpCAMcut, main=sprintf(&quot;Ep int. fraction %s&quot;, round(a1,2))) a1=wilcox.test(df.Spatial$Trichrome~df.Spatial$CD8Fraccut)$p.val boxplot(df.Spatial$Trichrome~df.Spatial$CD8Fraccut, main=sprintf(&quot;CD8 fraction vs Trichrome %s&quot;, round(a1,2))) 25.3 Associations with growth and treatment df.Spatial$Growth=Cdata$Tumor.Growth[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$Treatment=Cdata$Treatment[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] df.Spatial$NewID=Cdata$Treatment[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$NewID))] df.Spatial$trichrome_pc=Cdata$Trichrome_encapsulation.[match(rownames(df.Spatial), gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] pv1=sapply(c(&quot;PDL1&quot;, &quot;LY&quot;, &quot;PDL1+LY&quot;), function(x) wilcox.test(df.Spatial$Trichrome[which(df.Spatial$Treatment%in%c(&quot;Vehicle&quot;, x))]~ df.Spatial$Treatment[which(df.Spatial$Treatment%in%c(&quot;Vehicle&quot;, x))])$p.value) names(pv1)=c(&quot;PDL1&quot;, &quot;LY&quot;, &quot;PDL1+LY&quot;) ggplot(df.Spatial[ ,c(&quot;Treatment&quot;, &quot;Trichrome&quot;)], aes(x=Treatment, y=Trichrome, col=Treatment))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=ColMerge[ ,1])+theme_bw()+ggtitle(paste(paste(names(pv1), round(pv1, 2)), collapse=&quot;;&quot;)) Figure 25.1: Trichrome staining with treatment ggplot(df.Spatial[ ,c(&quot;Treatment&quot;, &quot;trichrome_pc&quot;)], aes(x=Treatment, y=trichrome_pc, col=Treatment))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=ColMerge[ ,1])+theme_bw()+ggtitle(paste(paste(names(pv1), round(pv1, 2)), collapse=&quot;;&quot;)) Figure 25.2: Trichrome staining with treatment a1=df.Spatial[ ,match(c(&quot;Trichrome&quot;, &quot;Growth&quot;, &quot;trichrome_pc&quot;), colnames(df.Spatial))] a1a=wilcox.test(df.Spatial$Trichrome[which(df.Spatial$Growth==&quot;growing&quot;)], df.Spatial$Trichrome[which(df.Spatial$Growth==&quot;stable&quot;)]) a1a ## ## Wilcoxon rank sum exact test ## ## data: df.Spatial$Trichrome[which(df.Spatial$Growth == &quot;growing&quot;)] and df.Spatial$Trichrome[which(df.Spatial$Growth == &quot;stable&quot;)] ## W = 79, p-value = 0.04521 ## alternative hypothesis: true location shift is not equal to 0 ggplot(a1, aes(x=Growth, y=Trichrome, col=Growth))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=c(ColSize, &quot;black&quot;))+theme_bw()+ggtitle(&quot;growth&quot;) # round(a1a, 2))) Figure 25.3: Trichrome with growth ggplot(a1, aes(x=Growth, y=trichrome_pc, col=Growth))+geom_boxplot()+geom_jitter()+ scale_color_manual(values=c(ColSize, &quot;black&quot;))+theme_bw()+ggtitle(&quot;growth&quot;) # round(a1a, 2))) Figure 25.4: Trichrome with growth #print(p) #write.csv(df.Spatial[ ,c(&quot;Trichrome&quot;, &quot;Growth&quot;, &quot;Treatment&quot;)], file=&quot;nature-tables/3g_trichrome.csv&quot;) DT::datatable(df.Spatial[ ,c(&quot;Trichrome&quot;, &quot;Growth&quot;, &quot;Treatment&quot;, &quot;trichrome_pc&quot;)], rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;), scrollX=T)) Figure 25.5: Trichrome with growth Trichrome encapsulation df.Spatial$trichrome_pc[which(df.Spatial$trichrome_pc==&quot;lots&quot;)]=1 df.Spatial$trichrome_pc[which(df.Spatial$trichrome_pc==&quot;0% ignore&quot;)]=NA df.Spatial$trichrome_pc ## [1] &quot;0.75&quot; &quot;0.5&quot; &quot;0&quot; NA NA NA &quot;1&quot; NA &quot;1&quot; &quot;0&quot; ## [11] &quot;1&quot; &quot;1&quot; NA &quot;0&quot; &quot;1&quot; &quot;0.75&quot; &quot;0.25&quot; &quot;0&quot; &quot;0&quot; NA ## [21] &quot;0.5&quot; &quot;1&quot; NA NA &quot;1&quot; &quot;0.5&quot; NA &quot;1&quot; &quot;0&quot; &quot;1&quot; ## [31] &quot;0.5&quot; &quot;0.75&quot; NA &quot;1&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; &quot;1&quot; &quot;1&quot; NA ## [41] &quot;1&quot; NA NA NA NA &quot;1&quot; &quot;1&quot; NA &quot;0.25&quot; &quot;1&quot; ## [51] &quot;1&quot; &quot;1&quot; NA NA NA &quot;0.25&quot; &quot;1&quot; &quot;1&quot; #wilcox.test(factor(as.numeric(df.Spatial$trichrome_pc))~df.Spatial$Growth) 25.4 Association with hyperinflammatory status We can also do a boxplot for trichrome status and whether it associates with hyperinflammation in our rat samples vstEpInf$Inflammation3 ## [1] inf grow grow inf grow grow grow grow grow grow grow grow grow grow inf ## [16] grow inf grow inf grow ## Levels: grow inf vstEpInf$Inflammation2 ## [1] inf grow grow inf grow grow stab stab stab grow grow stab stab grow inf ## [16] grow inf grow inf grow ## Levels: grow inf stab vstEpInf$Inflammation ## [1] yes no no yes no no no no no no no no no no yes no yes no yes ## [20] no ## Levels: no yes save(vstEpInf, file=&quot;figure-outputs/temp_test.RData&quot;) ax1=colnames(vstEpInf) t2=match(gsub(&quot;_&quot;, &quot;&quot;, substr( ax1, 1, nchar(ax1)-2)), rownames(df.Spatial)) newTab=data.frame(trichrome=df.Spatial[na.omit(t2), &quot;Trichrome&quot;], inf=vstEpInf$Inflammation2[-which(is.na(t2))], names=ax1[-which(is.na(t2))], names2=rownames(df.Spatial)[na.omit(t2)]) wilcox.test(newTab$trichrome[newTab$inf==&quot;grow&quot;], newTab$trichrome[newTab$inf!=&quot;grow&quot;]) ## ## Wilcoxon rank sum exact test ## ## data: newTab$trichrome[newTab$inf == &quot;grow&quot;] and newTab$trichrome[newTab$inf != &quot;grow&quot;] ## W = 6, p-value = 0.04507 ## alternative hypothesis: true location shift is not equal to 0 #pdf(&quot;figure-outputs/EXT5I_trichrome.pdf&quot;, height=5, width=4) ggplot(newTab, aes(y=trichrome,x=inf))+geom_boxplot()+geom_point()+theme_bw() Figure 25.6: association with hyperinflammation Also check the encapsulated status? newTab$trichrome_pc=Cdata$Trichrome_encapsulation.[match(newTab$names2, gsub(&quot;_&quot;, &quot;&quot;, Cdata$TumorID))] newTab$trichrome_pc[which(newTab$trichrome_pc==&quot;lots&quot;)]=1 newTab$trichrome_pc=as.numeric(newTab$trichrome_pc) #pdf(&quot;figure-outputs/EXT5I_trichrome_pt2.pdf&quot;, height=5, width=4) ggplot(newTab, aes(y=trichrome_pc,x=inf))+geom_boxplot()+geom_jitter(col=&quot;grey&quot;)+theme_bw() wilcox.test(newTab$trichrome_pc[newTab$inf==&quot;grow&quot;], newTab$trichrome_pc[newTab$inf!=&quot;grow&quot;]) ## ## Wilcoxon rank sum test with continuity correction ## ## data: newTab$trichrome_pc[newTab$inf == &quot;grow&quot;] and newTab$trichrome_pc[newTab$inf != &quot;grow&quot;] ## W = 42.5, p-value = 0.01389 ## alternative hypothesis: true location shift is not equal to 0 DT::datatable(newTab, rownames=F, class=&#39;cell-border stripe&#39;, extensions=&quot;Buttons&quot;, options=list(dom=&quot;Bfrtip&quot;, buttons=c(&#39;csv&#39;, &#39;excel&#39;))) "],["cnv-calling.html", "Chapter 26 CNV calling 26.1 Sample data 26.2 Data Summary 26.3 Samples with CNVs in breast-related genes 26.4 Summary of the sequencing depth", " Chapter 26 CNV calling CNV calling was performed with BICseq 26.1 Sample data Load BICseq2 data for all tested samples: allfiles=dir(&quot;../data/CNV_calls/&quot;,&quot;2_scale$&quot;, full.names = T) CNVL2=lapply(allfiles, function(x) read.delim(x, stringsAsFactors = F)) names(CNVL2)=unlist(sapply(strsplit(allfiles, &quot;//|_cnv&quot;), function(x) x[2])) meltCN=melt(CNVL2, measure.vars=c(&quot;log2.copyRatio&quot;)) AllDCN=data.frame(sampleID=meltCN$L1, chrom=substr(meltCN$chrom, 4, 5), start.pos=meltCN$start, end.pos=meltCN$end, n.probes=meltCN$binNum, mean=meltCN$value, call=ifelse(meltCN$value&gt;0.3, &quot;+&quot;, ifelse(meltCN$value&lt;(-0.3), &quot;-&quot;, &quot;0&quot;))) AllDCN2=data.frame(sample=meltCN$L1, chromosome=meltCN$chrom, start=meltCN$start, end=meltCN$end, n.probes=meltCN$binNum, segmean=2*2^(meltCN$value), call=ifelse(meltCN$value&gt;0.3, &quot;+&quot;, ifelse(meltCN$value&lt;(-0.3), &quot;-&quot;, &quot;0&quot;))) AllDCN2$chromosome=factor(AllDCN2$chromosome, levels=unique(AllDCN2$chromosome)) #CNVGRanges=GRanges(seqnames = AllDCN$chrom, ranges=IRanges(start=AllDCN$start.pos, end=AllDCN$end.pos), copy_ratio=AllDCN$mean, call=AllDCN$call, sample=AllDCN2$sample) CNVGRanges=GRanges(seqnames = AllDCN2$chromosome, ranges=IRanges(start=AllDCN2$start, end=AllDCN2$end), segmean=AllDCN2$segmean, call=AllDCN2$call, sample=AllDCN2$sample) 26.2 Data Summary 26.2.1 Frequency of gains and losses across the genome # plot the frequencies Samp1=cnFreq_mod(AllDCN2,CN_low_cutoff=1.4, CN_high_cutoff=2.8, genome=cytoInfo) Samp1$plot Figure 26.1: summary of regions of frequent gains and losses write.csv(Samp1$data, file=&quot;nature-tables/Ext1l_CNV_frequencies.csv&quot;) 26.2.2 Loci which have a hit in at least 30% of samples # Filter out gain and loss regions LocationsA=Samp1$data[which(Samp1$data$gainProportion&gt;0.3), ] LocationsA=LocationsA[order( LocationsA$chromosome, LocationsA$start), ] LocAmerge=Merge_contig(LocationsA) LocationsB=Samp1$data[which(Samp1$data$lossProportion&gt;0.3), ] LocationsB=LocationsB[order( LocationsB$chromosome, LocationsB$start), ] LocBmerge=Merge_contig(LocationsB) # turn into a GRanges object LocAGRanges=GRanges(seqnames = LocAmerge$chromosome, ranges=IRanges(start=LocAmerge$start, end=LocAmerge$end), strand=&quot;*&quot;, sampleFrequency=LocAmerge$sampleFrequency, gainFrequency=LocAmerge$gainFrequency, lossFrequency=LocAmerge$lossFrequency, gainProportion=LocAmerge$gainProportion, lossProportion=LocAmerge$lossProportion) LocBGRanges=GRanges(seqnames = LocBmerge$chromosome, ranges=IRanges(start=LocBmerge$start, end=LocBmerge$end), strand=&quot;*&quot;, sampleFrequency=LocBmerge$sampleFrequency, gainFrequency=LocBmerge$gainFrequency, lossFrequency=LocBmerge$lossFrequency, gainProportion=LocBmerge$gainProportion, lossProportion=LocBmerge$lossProportion) # find the overlaps GainOLap=findOverlaps(LocAGRanges, txRn6) UniqueGainOlapRegions=unique(queryHits(GainOLap)) GainGenes=sapply(unique(queryHits(GainOLap)), function(x) txRn6$gene_id[subjectHits(GainOLap[which(queryHits(GainOLap)==x)])]) LossOLap=findOverlaps(LocBGRanges, txRn6) UniqueLossOlapRegions=unique(queryHits(LossOLap)) LossGenes=sapply(unique(queryHits(LossOLap)), function(x) txRn6$gene_id[subjectHits(LossOLap[which(queryHits(LossOLap)==x)])]) Venn diagrams of the number of genes which intersect with the cosmic dataset OverviewG=unique(unlist(GainGenes)) OverviewL=unique(unlist(LossGenes)) par(mfrow=c(1,2)) venn(list(CNVgains=OverviewG, cosmic=RatCosmic)) venn(list(CNVloss=OverviewL, cosmic=RatCosmic)) The intersecting gene is Lrp1b, Grin2a Venn diagram of immune related genes: par(mfrow=c(1,2)) venn(list(CNVgains=OverviewG, Immune=RatAllImm)) venn(list(CNVloss=OverviewL, Immune=RatAllImm)) The gained genes are Mir295-2, Scarb1 The lost genes are Ccl28, Mff, Pdcd1, Arrb2, Mx2 26.2.3 Annotated plot of genome and locations of genes S2=Samp1$data S2=S2[order(S2$chromosome, S2$start), ] GG2=sapply(GainGenes, length) GG3=unlist(GainGenes) GG3[which(duplicated(GG3))]=&quot;&quot; GG4=split(GG3, rep(c(1:length(GG2)), times=GG2)) Ggenes=sapply(GG4, function(x) paste(x, sep=&quot;&quot;, collapse=&quot; &quot;)) Ggenes=gsub(&quot; &quot;, &quot;&quot;, Ggenes) Ggenes[which(Ggenes==&quot; &quot;)]=&quot;&quot; Datx=rep(&quot;&quot;, nrow(Samp1$data)) Datx[match(LocAmerge$start[UniqueGainOlapRegions], S2$start)]=Ggenes GG2=sapply(LossGenes, length) GG3=unlist(LossGenes) GG3[which(duplicated(GG3))]=&quot;&quot; GG4=split(GG3, rep(c(1:length(GG2)), times=GG2)) Lgenes=sapply(GG4, function(x) paste(x, sep=&quot;&quot;, collapse=&quot; &quot;)) Lgenes[which(Lgenes==&quot; &quot;)]=&quot;&quot; Daty=rep(&quot;&quot;, nrow(Samp1$data)) Daty[match(LocBmerge$start[UniqueLossOlapRegions], S2$start)]=Lgenes ## #S2=Samp1$data #S2=S2[order(S2$chromosome, S2$start), ] S2$xLoc=S2$start+chrInfo$sumdist[match(S2$chromosome, chrInfo$Chromosome)] S2$width=S2$end-S2$start S2$label=Datx S3=S2 S3$gainProportion=S3$lossProportion[1:nrow(S2)]*(-1) S3$label=Daty S4=rbind(cbind(S3, col=&quot;blue&quot;), cbind(S2, col=&quot;red&quot;)) S4=S4[-which(S3$gainProportion==0), ] ggplot(S4, aes(x=xLoc, y=gainProportion, width=width*1.2, label=label, col=col))+geom_bar(stat = &quot;identity&quot;)+geom_label_repel()+theme_bw()+xlim(0, chrInfo$sumdist2[22])+geom_vline(xintercept=chrInfo$sumdist2,col=&quot;grey&quot;)+scale_colour_manual(values=c(&quot;blue&quot;, &quot;red&quot;))+annotate(&quot;text&quot;, x=chrInfo$sumdist, y=rep(-1, 22), label=chrInfo$Chromosome, col=&quot;black&quot;) 26.3 Samples with CNVs in breast-related genes Below is the plot showing the breast-related mutations as well as CNVs added ttemp=CNVGRanges[which(CNVGRanges$call!=0)] Bsamples=txRn6[which(txRn6$gene_id%in%c(RatBreastCosmic, OtherBreast))] olaps=findOverlaps(Bsamples,ttemp) ttemp$gene=NA ttemp$gene[subjectHits(olaps)]=Bsamples$gene_id[queryHits(olaps)] ttemp$NewID=sapply(ttemp$sample, function(x) Cdata$NewID[grep(x, Cdata$WGS)]) x1=which(!is.na(ttemp$gene)) l1=match(ttemp$gene[x1], colnames(X2b)) lnew=unique(ttemp$gene[x1[which(is.na(l1))]]) X2b=cbind(X2b, matrix(0, ncol=length(lnew), nrow=nrow(X2b))) colnames(X2b)[(ncol(X2b)-length(lnew)+1):ncol(X2b)]=lnew l1=match(ttemp$gene[x1], colnames(X2b)) l2=match(ttemp$NewID[x1], rownames(X2b)) for (i in 1:length(l1)){ X2b[l2[i],l1[i]]=ifelse(ttemp$call[x1[i]]==&quot;+&quot;, 5, 4) } l2=rowSums(sign(X2b)) l3=colSums(sign(X2b)) heatmap.2(X2b[order(l2),order(l3) ], col=c(&quot;white&quot;, 3:5, 2:1), scale=&quot;none&quot;, trace=&quot;none&quot;, sepcolor=&quot;grey85&quot;, colsep=c(1:ncol(X2b)), rowsep=c(1:nrow(X2b)), sepwidth=c(0.005, 0.005)) Matching the frequency data with genes S1GR=GRanges(seqnames = Samp1$data$chromosome, ranges=IRanges(start=Samp1$data$start, end=Samp1$data$end)) olaps=findOverlaps(S1GR, txRn6) Samp1$data$gene=NA Samp1$data$gene[queryHits(olaps)]=txRn6$gene_id[subjectHits(olaps)] gid=unique(na.omit(Samp1$data$gene)) Tabix=matrix(0, nrow=length(gid), ncol=2) rownames(Tabix)=gid for (i in gid){ m1=Samp1$data[which(Samp1$data$gene==i), ] Tabix[i, ]=colMedians(data.matrix(m1[ , 7:8])) } rownames(Tabix)=toupper(rownames(Tabix)) Tabix=Tabix[order(rownames(Tabix)), ] Tabix=Tabix[-which(rowSums(Tabix)==0), ] lx=match( names(rGene2), rownames(Tabix)) df2=data.frame(mut=rGene2, gain=Tabix[ lx,1], loss=Tabix[lx, 2]) lx2=match(rownames(Tabix), names(rGene2)) df3=data.frame(mut=0, gain=Tabix[which(is.na(lx2)),1], loss=Tabix[which(is.na(lx2)),2]) dfAll=rbind(df2, df3) #mx=which(rownames(dfAll)%in%AllCosmic$Gene.Symbol) dfAll[which(is.na(dfAll), arr.ind=T)]=0 dfAll=dfAll*100 dfAll[ ,3]=dfAll[ ,3]*(-1) dfAll$gene=rownames(dfAll) dfAll=dfAll[ ,c(4, 1:3)] mx=which(dfAll$gene%in%AllCosmic$Gene.Symbol) write.table(dfAll[mx, ], file=&quot;nature-tables/outputs_pathway_map_cosmic.txt&quot;, quote = F, row.names = F, sep=&quot;\\t&quot;) 26.4 Summary of the sequencing depth Below, do a quick summary of the WGS data: what is the coverage, and plot the percentage mapping of the coverage: SeqData=read.delim(&quot;../data/wholegenome_mutations/summary_Sequencing_output.txt&quot;, sep=&quot;\\t&quot;) hist(SeqData$MEAN_COVERAGE, breaks=10) Also, extract the information about coverage: SeqDatam=melt(SeqData[ ,c(grep(&quot;PCT_[0-9]*X&quot;, colnames(SeqData)), ncol(SeqData))]) SeqDatam$coverage2=sapply(strsplit(as.character(SeqDatam$variable), &quot;_&quot;), function(x) x[2]) SeqDatam$coverage3=as.numeric(substr(SeqDatam$coverage2, 1, nchar(SeqDatam$coverage2)-1)) ggplot(SeqDatam, aes(x=coverage3, y=value, col=Sample))+geom_line()+theme_bw()+ggtitle(&quot;WGS coverage&quot;)+ylab(&quot;Percentage Reads&quot;)+xlab(&quot;Coverage X&quot;)+xlim(c(0, 75)) "],["writing-files-to-file.html", "Chapter 27 Writing files to file", " Chapter 27 Writing files to file Update the metadata file: write to file: updated ext data table spatial information summary star aligned table colData information collapsed information on wsi/facs write.xlsx(Cdata, file=sprintf(&quot;../metadata/Ext_Data_Table_updated_%s.xlsx&quot;, Sys.Date())) #colnames(Cdata) x1=match(rownames(df.Spatial), gsub(&quot;_&quot;,&quot;&quot;, Cdata$TumorID)) df.Spatial$NewID=Cdata$NewID[x1] dfB=Cdata[x1, c(&quot;NewID&quot;, &quot;TumorID&quot;,&quot;TumorAreaWSI&quot;, &quot;Tumor.diameter.sac.mm&quot;, &quot;CD45.Frac.FACS&quot;, &quot;DN.Frac.FACS&quot;, &quot;EpCAM.Frac.FACS&quot;)] write.csv(df.Spatial, file=&quot;nature-tables/summary_spatial_information.csv&quot;) colnames(allstarFinal)=infoTableFinal$TumorIDnew[match(colnames(allstarFinal), rownames(infoTableFinal))] infoTableFinal2=infoTableFinal[ ,c(&quot;TumorIDnew&quot;,&quot;Growth&quot;, &quot;CD8Frac&quot;, &quot;TumSize&quot;, &quot;Time.NMU2Sac&quot;, &quot;Age.Injection&quot;,&quot;Treatment&quot;,&quot;Cohort&quot;, &quot;SizeCat&quot;)] write.csv(infoTableFinal2, file=&quot;nature-tables/infoTableFinal2_output.csv&quot;) write.csv(allstarFinal, file=&quot;nature-tables/allstarFinal_output.csv&quot;) colTestCD8=c(&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, &quot;T.cell.CD8._TIMER&quot;, &quot;T.cell.CD8._CIBERSORT&quot;,&quot;T.cell.CD8._CIBERSORT.ABS&quot;, &quot;T.cell.CD8._EPIC&quot;) # colTestCD8=c(&quot;CD8.EpDomTiles&quot;,&quot;CD8.EpBoundingBox&quot;, &quot;CD8.TumSize&quot;, &quot;CD45.FACS&quot;, &quot;CD8.FACS&quot;, &quot;OverallCD8_Fig4c.Manual&quot;, &quot;TIL_Fig4d.Manual&quot;, ) indx1=c(&quot;CD8.WSI&quot;, &quot;CD8Frac.WSI&quot;, &quot;CD8_EPorSMARatio.WSI&quot;,&quot;CD8_AnyEPRatio.WSI&quot;, &quot;CD8_EPRatio.WSI&quot;,&quot;CD8normTumSize&quot;, &quot;CD8.EpBoundingBox&quot;) df.Spatial2=merge(df.Spatial, dfB, by.x=&quot;NewID&quot;, by.y=&quot;NewID&quot;, all=T) #head(df.Spatial2) colnames(ProgSpecCD45)=gsub(&quot;_CD45&quot;, &quot;&quot;, colnames(ProgSpecCD45)) #colnames(ProgSpecCD45)=gsub(&quot;_&quot;, &quot;&quot;, colnames(ProgSpecCD45)) rownames(ProgSpecCD45)=ProgSpecCD45[ ,1] ProgSpecCD45B=t(ProgSpecCD45[grep(&quot;CD8&quot;,rownames(ProgSpecCD45)), -1 ]) ProgSpecCD45B=data.frame(ProgSpecCD45B, sample=rownames(ProgSpecCD45B)) df.Spatial3=merge(df.Spatial2, ProgSpecCD45B, by.x=&quot;TumorID&quot;, by.y=&quot;sample&quot;, all=T) df.Spatial3$TumorID2=gsub(&quot;_&quot;, &quot;&quot;, df.Spatial3$TumorID) SummaryData$TumorID2=rownames(SummaryData) df.Spatial4=merge(df.Spatial3, SummaryData[ ,c(6:8,17:19, ncol(SummaryData))], by.x=&quot;TumorID2&quot;, by.y=&quot;TumorID2&quot;, all=T) write.csv(df.Spatial4, file=&quot;../metadata/summary_new_210330.csv&quot;) ## merge he data from df.Spatial with the data from #df1=data.frame(CD8.WSI=df.Spatial$) # df2=data.frame(CD8.WSI=t(WSIvals[ 1, ]), # CD8Frac.WSI=t(WSIvalFracs[ ,2]), # CD8_EPorSMARatio.WSI=(WSIvals[1, ]/colSums(WSIvals[2:4, ])), # CD8_AnyEPRatio.WSI=(WSIvals[1, ]/colSums(WSIvals[2:3, ])), # CD8_EPRatio.WSI=(WSIvals[1, ]/(WSIvals[2, ])), # CD8normTumSize=(WSIvals[1, ]/df.Spatial)) # # ) Below is the session info sessionInfo() ## R version 4.0.2 (2020-06-22) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS 10.16 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] grid stats4 parallel stats graphics grDevices utils ## [8] datasets methods base ## ## other attached packages: ## [1] writexl_1.3.1 xlsx_0.6.4.2 ## [3] vcfR_1.12.0 tcR_2.3.2 ## [5] igraph_1.2.6 gridExtra_2.3 ## [7] spatstat_1.64-1 rpart_4.1-15 ## [9] nlme_3.1-149 spatstat.data_1.4-3 ## [11] scales_1.1.1 RColorBrewer_1.1-2 ## [13] rmarkdown_2.6 reshape2_1.4.4 ## [15] pamr_1.56.1 survival_3.2-7 ## [17] cluster_2.1.0 limma_3.44.3 ## [19] knitr_1.31 kableExtra_1.2.1 ## [21] HTSanalyzeR2_0.99.19 heatmap.plus_1.3 ## [23] GSVA_1.36.3 GSEABase_1.50.1 ## [25] graph_1.66.0 annotate_1.66.0 ## [27] XML_3.99-0.5 gplots_3.1.0 ## [29] ggrepel_0.8.2 ggplot2_3.3.2 ## [31] GenVisR_1.20.0 forestplot_1.10.1 ## [33] checkmate_2.0.0 magrittr_1.5 ## [35] EnsDb.Hsapiens.v86_2.99.0 ensembldb_2.12.1 ## [37] AnnotationFilter_1.12.0 GenomicFeatures_1.40.1 ## [39] AnnotationDbi_1.50.3 DT_0.17 ## [41] dplyr_1.0.2 DESeq2_1.28.1 ## [43] SummarizedExperiment_1.18.2 DelayedArray_0.14.1 ## [45] matrixStats_0.57.0 Biobase_2.48.0 ## [47] GenomicRanges_1.40.0 GenomeInfoDb_1.24.2 ## [49] colorspace_1.4-1 Biostrings_2.56.0 ## [51] XVector_0.28.0 IRanges_2.22.2 ## [53] S4Vectors_0.26.1 biomaRt_2.44.4 ## [55] beeswarm_0.2.3 AnnotationHub_2.20.2 ## [57] BiocFileCache_1.12.1 dbplyr_1.4.4 ## [59] BiocGenerics_0.34.0 ## ## loaded via a namespace (and not attached): ## [1] shinydashboard_0.7.1 tidyselect_1.1.0 ## [3] RSQLite_2.2.1 htmlwidgets_1.5.2 ## [5] BiocParallel_1.22.0 gmp_0.6-1 ## [7] munsell_0.5.0 codetools_0.2-16 ## [9] preprocessCore_1.50.0 miniUI_0.1.1.1 ## [11] withr_2.3.0 Category_2.54.0 ## [13] highr_0.8 rstudioapi_0.11 ## [15] robustbase_0.93-6 splots_1.54.0 ## [17] tensor_1.5 rJava_0.9-13 ## [19] labeling_0.4.2 GenomeInfoDbData_1.2.3 ## [21] polyclip_1.10-0 hwriter_1.3.2 ## [23] farver_2.0.3 bit64_4.0.5 ## [25] vctrs_0.3.4 generics_0.0.2 ## [27] xfun_0.21 R6_2.4.1 ## [29] locfit_1.5-9.4 msigdbr_7.2.1 ## [31] spatstat.utils_1.17-0 bitops_1.0-6 ## [33] fgsea_1.14.0 assertthat_0.2.1 ## [35] promises_1.1.1 pinfsc50_1.2.0 ## [37] gtable_0.3.0 affy_1.66.0 ## [39] goftest_1.2-2 cellHTS2_2.52.0 ## [41] rlang_0.4.8 genefilter_1.70.0 ## [43] splines_4.0.2 rtracklayer_1.48.0 ## [45] lazyeval_0.2.2 abind_1.4-5 ## [47] BiocManager_1.30.10 yaml_2.2.1 ## [49] crosstalk_1.1.0.1 backports_1.1.10 ## [51] httpuv_1.5.4 RBGL_1.64.0 ## [53] tools_4.0.2 bookdown_0.21 ## [55] affyio_1.58.0 ellipsis_0.3.1 ## [57] Rcpp_1.0.5 plyr_1.8.6 ## [59] progress_1.2.2 zlibbioc_1.34.0 ## [61] purrr_0.3.4 RCurl_1.98-1.2 ## [63] prettyunits_1.1.1 deldir_0.1-29 ## [65] openssl_1.4.3 viridis_0.5.1 ## [67] data.table_1.13.2 colourpicker_1.1.0 ## [69] mvtnorm_1.1-1 ProtGenerics_1.20.0 ## [71] xlsxjars_0.6.1 hms_0.5.3 ## [73] mime_0.9 evaluate_0.14 ## [75] xtable_1.8-4 compiler_4.0.2 ## [77] tibble_3.0.4 KernSmooth_2.23-17 ## [79] crayon_1.3.4 htmltools_0.5.0 ## [81] mgcv_1.8-33 pcaPP_1.9-73 ## [83] later_1.1.0.1 geneplotter_1.66.0 ## [85] rrcov_1.5-5 DBI_1.1.0 ## [87] MASS_7.3-53 rappdirs_0.3.1 ## [89] Matrix_1.2-18 permute_0.9-5 ## [91] vsn_3.56.0 RankProd_3.14.0 ## [93] pkgconfig_2.0.3 GenomicAlignments_1.24.0 ## [95] xml2_1.3.2 foreach_1.5.1 ## [97] prada_1.63.0 stringdist_0.9.6.3 ## [99] webshot_0.5.2 rvest_0.3.6 ## [101] BioNet_1.47.0 stringr_1.4.0 ## [103] VariantAnnotation_1.34.0 digest_0.6.26 ## [105] vegan_2.5-6 fastmatch_1.1-0 ## [107] curl_4.3 shiny_1.5.0 ## [109] Rsamtools_2.4.0 gtools_3.8.2 ## [111] FField_0.1.0 jsonlite_1.7.1 ## [113] lifecycle_0.2.0 viridisLite_0.3.0 ## [115] askpass_1.1 BSgenome_1.56.0 ## [117] pillar_1.4.6 lattice_0.20-41 ## [119] KEGGREST_1.28.0 fastmap_1.0.1 ## [121] httr_1.4.2 DEoptimR_1.0-8 ## [123] GO.db_3.11.4 interactiveDisplayBase_1.26.3 ## [125] glue_1.4.2 png_0.1-7 ## [127] shinythemes_1.1.2 iterators_1.0.13 ## [129] BiocVersion_3.11.1 bit_4.0.4 ## [131] stringi_1.5.3 blob_1.2.1 ## [133] caTools_1.18.0 memoise_1.1.0 ## [135] Rmpfr_0.8-1 ape_5.4-1 "],["list-of-figures.html", "A List of Figures Main Figures Figure 1: NMU-induced mammary tumors Figure 2: Immune system of NMU-rat Figure 3: Immunotherapy applied to NMU rats Figure 4: Characterizing CD45 cells in tumors Figure 5 : Epithelial cells in growing vs stable rats", " A List of Figures Main Figures Figure 1: NMU-induced mammary tumors Fig 1F: Characterisation HR plot Fig 1G: Ep DEG big-small Fig 1H: Ep hairball with size Fig 1I: summary of mutation burden Fig 1J: Frequency of different mutational codons Fig 1K: summary of mutations acccording to frequency cosmic Fig 1L: summary of metacore common mutated pathways Figure 2: Immune system of NMU-rat Fig 2D: Differential CD45 genes Fig 2E: CD45 growing vs stable hairball Fig 2F: CIBERSORT shit Fig 2H: bcr clonotypes in tumor and normal mammary glands Figure 3: Immunotherapy applied to NMU rats Fig 3B: Growth rates of tumors Fig 3C: Growth rates of tumors w.r.t. treatment Fig 3D: Histogram of growth rates of tumors Fig 3E: Contingency table growth rate and treatment Fig 3G: Trichrome staining growth rate and treatment Fig 3J: Differentially expressed genes in CD45 fraction Figure 4: Characterizing CD45 cells in tumors Fig 4B: association of frequency with treatment and growth Fig 4C: KNN distances Fig 4D: interacting fraction Fig 4E: MH index with CD8 growth Fig 4F: Progression CIBERSORT TIMER Fig 4G: volcano plot of DEG stable vs growing CD45 Fig 4H: CD45 cells enriched pathways Fig 4I: BCR clonotypes with respect to treatment/growth Figure 5 : Epithelial cells in growing vs stable rats Fig 5A: GSEA summary stable growing Fig 5B: ssGSEA scores for specific pathways Fig 5D: CD74 assoc with patient data Fig 5E: forest plot CD74 Fig 5F: lum only non-inflamm growth vs stable DEG Fig 5G: lum only non-inflamm growth vs stable hairball Fig 5H luminal signature associated with clinical variables Fig 5I OS and DFS for growing signature Fig 5J TCGA DEG for LumA samples Fig 5K TCGA HAIRBALL for LumA samples "],["extended-figures.html", "Extended Figures Extended data 1 Extended data 2 Extended data 3 Extended data 4 Extended data 5", " Extended Figures Extended data 1 Ext Fig 1B : Number of tumors per rat in each cohort Ext Fig 1C: growth of NMU treated tumors over time Ext Fig 1F: PCA of growing vs stable epithelial cells Ext Fig 1G: correlation plot epithelial samples Ext Fig 1H-I: assoc of mutations with cohort Ext Fig 1J: Alexandrov mutational signatures Ext Fig 1K: most frequent mutations Ext Fig 1L: CNV calls Extended data 2 Ext2D PCA of CD45 cells Ext2E clonotype assoc with size Ext2F expression of checkpoint proteins in epithelial cells Extended data 3 Ext Fig 3C : FACS associated with outcome Ext Fig 3D : PCA plot all cell types Ext Fig 3E : Cell type specific genes Ext Fig 3H: DN assoc treatment GSEA Ext Fig 3I : HR clustering output progression Extended data 4 Ext Fig 4B association with facs Ext Fig 4C-D WSI-normalised-all-samples Ext Fig 4E Knn with treatment Ext Fig 4F Interacting fraction with treatment Ext Fig 4H MH with treatment Extended data 5 Ext Fig 5A: Expression of inflammatory genes across samples Ext Fig 5B growth profiles of inflammatory tumors Ext Fig 5C: Differential gene exp inflammatory vs non-inflammatory Ext Fig 5D: association signature with WSI Ext Fig 5E: Collagen content in growing vs stable Ext Fig 5F: Forest plot TCGA luminal ADAMTS10 Ext Fig 5G ADAMST10 expression associated with clinical variables Ext Fig 5I-J: Associating growing signature with clinical variables Ext Fig 5K: TCGA DEG for LumA samples "]]
